(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2195147,      41075]
NotebookOptionsPosition[   2192188,      40995]
NotebookOutlinePosition[   2192573,      41012]
CellTagsIndexPosition[   2192530,      41009]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["ResNet 101", "Subsection",
 CellChangeTimes->{{3.7080416872710333`*^9, 
  3.708041690603902*^9}},ExpressionUUID->"c400e553-5633-404a-9b84-\
3162e8504505"],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{
    RowBox[{"Import", "[", "\"\<resnet101_11_1.wlnet\>\"", "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.707950183912344*^9, 3.7079501966939087`*^9}, {
  3.7080123634559813`*^9, 3.7080123786437807`*^9}, {3.708100101046754*^9, 
  3.708100111340575*^9}, {3.708259707652317*^9, 
  3.708259711899819*^9}},ExpressionUUID->"1c7b7c9d-c9e4-40de-9b33-\
d0f68a16f6ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"meanImg", "=", 
  RowBox[{
   RowBox[{"Normal", "[", 
    RowBox[{"NetExtract", "[", 
     RowBox[{"net", ",", "\"\<Input\>\""}], "]"}], "]"}], "[", 
   "\"\<MeanImage\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.708044302684683*^9, 3.70804431815145*^9}, {
  3.7080443592952957`*^9, 
  3.708044387756475*^9}},ExpressionUUID->"c0786c37-bcc4-4387-aef1-\
9bc384bac8fb"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxMfQVcVlnXPYqN3d2J3fRVxykdnVHH7u7uwkLFBAXBxELQsbu7FZBUkAee
RyQNFMQC49vnrOXrd36//3++Oe+dy33uPWfvtddee58awyZ3H5XbyspqegH5
/7oPnd1+2rShc3vkU/8ycuiENq1GWsv/aeH/U//3ZBlvRpqNN+np6SHlzMbB
/2ScNRn5Zfw+2Wy4yPhW3WycOnnypNcVk3Hj+vXruWaajR4yStU1G4VlNLpp
MrarMc9s2MoY19BsvHzx4kWnOybj7p07d1YsMhtLZNRoYjbmqHHPZNSVkW+Z
2fhbRrHmZqOPDLv7JqOSjIvuZiMwICAgX2uzocbOhybj6xcZa81GSRkt7M1G
PzWCTcalixcvVvIyG7t37do1xNls2MuoEGYyWsuYKfPzZDx1MhtOMhaEmIw6
aviajcyMjIzjcv0fMsY8wvNX3m423mVmZrboYDbu37t3r0C4Sb8P211mY5iM
3B3NhoOMCxEmw2KWscdsdJHR+DezUVyGp8w/uH//fsFAs7Fcxq9/mo2VMgIf
m4zQR48evTlg1u/1bme8twkyP1RG++Nmw0ONv81GLTWemow8MhJlfqaMnv+Y
jaCHDx/aRJuM9TLST+E9dO+G9zQqxmQ8joqKKnPObKxVo4fZyHj79q2n3KeM
jJ6XzcYCNXrhfZrjTMZWGdlXzUZXGev7mI3nCQkJHeJNRjc1bpoNRxn9+5mN
jjL8zSZjuoxSd/h+B5iN2jISZT44KCjo1UOzft48Q8z6uojnJmOEjI4hZuNF
WlpawaFmY7iMmzI/RcbbULP+brFy/ZXLly8PTDQZ77OysiIjsd7ih/N/TzIZ
skSt2kWbjWIyJo8wGzHR0dGfkk1G7NOnTx1izcYaGQ1Hm40CaqRi/WyLNxsN
ZKwag3Vom2YySsjIsOA7DhtvNsbJWC3zd27fvj0yxWzcvnXrlttEs1FdxrVX
Jv1eiqaajc4yxk8yGxVlXHhhMnbI+PrCbHSQsVT2h1rHo+T6jx8+fCj7xmyk
v5YxzWxcu3r16s50fPej78zGmdOnT2+age/ZOsOE9/rBbPSVcX4Wvv9Rmc/+
rIbZiI+Li1s422zkklEj02T0lzH/i9nwkfFhjtnoJeNMJtang5XFOLB///4C
87EOi783GRNkVM5l0f9cOx/fyy3LZPjv3bt3urXFaKnGQrMRFhoa+s9HkxGw
b9++23ks+jnLyH5dLaPQJ5MxXkbnfBZjtowni2AfCn3G+t8p85cvXbpUebEZ
f1+uV+s+KT/mv8h8nMlkWiDXq/W1tIDFSEpMTHRbaja+5OTkxMr1U2Uct7EY
J0+cODHNDe9t0ReT0UhG5cK4vuNys9FJxoNsk3H82LFju4pYsN9XmPXv+UWu
V99za1GLUVDGgZVmI5+MOzKv1sHnYhZtD6JkfrMMu28mw0++o3Nxi/7OTcTe
KDt4VK5X3+GRzOv3L9cvlBH3BfvRv4TFWCHjjlz/34EDB1bJfDM1Slu0HVi3
xmwcOnjw4PjvJv3vr0tZjAEyKq82G9evXbtmkev1/17GovfDcJmvJsP81aR/
T/VyFiMnOzvbYZ3ZiAgPD28h9/n29evXgeUtxhgZ92T+08ePH5/I/J7du3cP
rWAxCsmw9TAbR48cORIi8w1l2FS0YN3IvPrvd1jFGXNl2Mu8snvdPLBf/vgO
ez60skX/+z0PrJ/QXHHG92/fvsXLvPp+2z3NWB9yn1kyfKpYtB3cKvPnz507
10eu37tnz56lVS3Go5CQkCYbzfp53WVe7dML1SzGNhn9ZV7Zr5DccXpdvpJ5
vV82mPVzj5fr1Tr1r24xysrotQF2eIzMq30WUMNiLJaxS+5jio2N3SbzKcnJ
yXVrWbSduOaFfW1rHaffa7XaFr1fF3rTLsnfVfb+nswre9JUrk949uzZUJmf
L6NSXYsxQ0bpTdyncp/eMp7Uw3suJH5D/btv3jj8zvoW2Hdfrn+Z3yZ2dV4D
fsctZr0e7+eL03azr61F2/2128z6Pc7KH2fYyTjX0KLt2uatZqOUjHcF4vR+
qdnIovfZd7n+1cuXLzvL9ZERERGlGluMJjImib86d1aGXN9exnWZV9+57w6z
ceH8+fNbZF6tX+cmFr1easj1t27evFlL5n+RMVzmlX902E57Jc+p1u3hphb4
F7nPPzI85e8qO/aomQV+aqfZ8JZxqgC+79MWFv095u/Bfcw2cdgvMn/k8OHD
XXabjaZqFIrT3696S4u27/3Fr1aV4SfzXhtlyLyyBxkyr+zHAJlX9nt1K4te
j35yn7wy9sn9d/r5+V1phf34m/zdrHcy5Hp1v0GtLXodjJP5e3fv3h0t1+t1
J/Pq91v7m41/ZcyQ+c+fPn3a3Abf64Jcf/rUqVMzCscZg2WYW2M9F90D/7Ws
YJzGN4Xk+tEyUuR59P6Xv6vc6yWZj4qMjJyxF7jjQiGuk7ZYJyv3ED/I31Xf
p6/M6++8F/e3lvl2athZtL/p5899JM8zUMZCO/zd/PvMxtkzZ870kvnfZNS1
t8A/7IM9HF4kznj44MGDcTKfnJSUNDLAbKyTcVjmtR91sOjragXCn/YpFqf9
YJLMK7u5Yr/ZSEtNTXWXeeXXfGRevQ8jEP60kMyrdVlN5tX+dA+E/0+U+2v8
42jRfn6K3Ef9w7MY/m5TmVf+pvh/2O8HZV5tq04yr+z7C7mPeo46xeP0fu3h
gHVeNBDrua/cX63LaTKv7G+DQNjJkkXjjMoyvsjv1TglEP66oly/VA0HrIdC
Mq/sUCW5vpUMb7le4YUceW8KXzoVxvrvIu95lYyx8l2exsTE2Mt3HCnjtswr
+9tWrm8ho6R8L4VbWtnhOybsJW6R65Wdfyjft4aMJTL/l4xDBbFPd7fFulov
6+HD+/fvW8t91BjcFn6wpFxvrYYN1tV2rp/Re4HXihbBOr8i6009X4W9sCdn
5PqbN27cqNkWdu+yzI+S8Ztcr3BWXBv45e3y/Or3RxbBPr0l8xcvXLiQLddH
P3ny5KO8HzcZibL+Na6Xdfjk8ePHZeV6FQdMl3nlz6xkXq+vInj/lWVe+ZPd
Mq/89giZf/vmzZtiMq+fV+7vKqOq3L+mjBuy35vLmCrvQeHRefL+Txw/frx5
S3z39N14zlMyr9ZjfbEnCj/n3w1/ek1+r8YjzS34nWKXlsn4xQbr87vYsQ0y
pvqZ9d/rIN9F7ZNYmU98/vz5cJkfKyON9sSvKezb0Z14n2p/bZT/vrnYSYUf
p4o93CLDXq5X+NatEexejthntcxqyvftLuNEQ+zfrVu5X2RefdcWMq/wW6/t
8Ke/yrzCkTXFLyjc2U6ud5ZRpRDeT4f6wDntNpv1vv9d7LPCh33FHylc2tAX
OCpH/I7Cr7fq4r11lXn1+5bJvMZHMq/imnAf4naZ1zivNvbFam/83R3iBxVe
Hyv+1EZGQ2/g0wriB0OCg4Nf16Q93IT4z8sa+9qjJnBmI5lXeGdBnjjtv2eJ
v1a/Y5g34sJCcr2yN+VlXuHKNeJ/FS5rLdcruz9V8ICOFzcClxaX51HrY0M1
2lUv/F7HPPDX26rg7/4lOEGtM49csA+ZgltUPLte8ImyWztlXvmJFTKvvmsb
ub9aZ93k/ocPHToUJLhI4Ri79WajjYyyueA3dwi+UvFNYZkvL+OT4EZvLy+v
UjKvfv/0dfAXrb4jnq0rOE3FYZtkXv8+ud4cHx9ftRz8+znBh2p/Jsi82k9t
ylr0vqwica1ar4bMV5GxQ/CkCuMaCT5U+9JB8KG2E4InfWW0XWUGPstBfNe6
pEX748iV8MtZMq/en2dx2PnhgpPV92ss+Fmt10oyr/BuMZkPDwsL6ya4VO2v
e0WJK5bjecxyvcJnXYpg/UxbhvjdTuZ1PCO4vZyM3ksRh9kInlf+qrwN9ruL
zCu8Hirz2l8K/ld4K9cSs3H1iowPJuOZxWIJlXhhkIxvrvi9FeV6tW+eSnyh
3OG1RbDPX+R6tf6+5bVonDRdrlf4L0DmlR28L/GL2h9bJK7RuFjiIPW7L1vD
zmyYjzhr8nvG6bmBA4/OY9z8zqS/k7sV8F6nObBvtyXOUn52xTfE9XXmwI7F
S7ym1veeHDNwjsRxf8o4IPNqHYZ/RDy5eAbikYA3Jo0DP78HHp0+3azXZfJb
k7a7TzKBDxymgc9Y/Abvp10G1msJmdfvW65X7zf+NezUhyngMdwl3tTx3yv4
p2mTYVcrpmOdvE9lvC/z7mq8Nun37poEHuPwBPrfdKwTx2eYnyjxsvoOi1+a
9Lp5FI+46PJYs/Z/WS+wbp1jwTM4jaG9lfha4WL3aPA70SPh78rIvPJn+SXe
V/zH0OF4/39JXP/61atXhx7RHwzh+kk06f03Jwi4v/9grJN5z/kd7zJO64c4
vvYzxI9BN7GOB/cl/jfj/n9dx3tr05u8kQXf984Vs7br/r3MGh/vNeM5R1/A
c7ztAdxVNt6k8eb00+SpugEHKr5FfacNJ+D/8vxt1s+XFmPC+jjCOLyLWeOq
D09MGo/e/A88Q+dOxHvRJqO0jKwArKf7f5i1HRn02KT9ch7xoyreuvEr7pcn
yqRxRi7BzQq3rOrI/z3ChPhjO97D9/ZmY4iMdpEmbZ/Lil9R/nCbgfe5Ncyk
/fglsbP1ZNx1gj2cFYrnmeGB+POsA+zbwRB83wJipzRv1xr2p3QQ+KV5K8B7
vG/J9/kAvE3FZfh7T5th30yU+aIyQmSfK/xQoyne8+N7Jv3fPZ9HO2XLuP6O
Cd9/BvBf97rAew438H5GTALf2L464oIeV7Dv7GX9qX1Qpjyf/6xJ45kek4Av
K1Q1a/8dfsGk+ZFSc4AXc+ohLv5H7q/s1xJX4Ib7jc16/7jcxXef6ob4cLb8
3okyijwEX3FM7HURGcFt4B+dgk1GBRlbxO4rP2tjj7hsr8wr3N5pI95jJN//
h0fgc9ZuwvqPle+lrnsh30XckVeE4A/9z1/MxiIZhnxftb3r70A8UKsj1uex
cJPen6ZdsL+DfqXdlusnyUj3x3s+LutNxYu7o8DLtRIcr+LOHp3AC3Uibzn0
IOzsf3/B/76R+Z4yoo7Cfzf7B+ulrewLjY9O4nt4dcfvuCjzyo66XgCfVbY3
7PmdOBPwwkXwdR24Ty2x9I9XyIv2oX2Kwz5NuY7nfNcP9qCKGfbN7w6+o+NA
8D9zxD4ofPT8PvipL4PBO7ommPTfHxUMPmjyUPzecc+xPtc/or0exv0h85qv
jTLr+NhjFO5fPsWk12nyY+CbnqOxj9OSwdPOfIq4K1rmlT9LT4HfmRNnNvb5
+/u7iV39XcbdVBP4M7HD6vt0HU9e/QX8QvUkrNcWsn5VXDH0JexboxSz/g4z
J8E+rZB5vY7TaFenYL3bvzJpnNTkDfjowtPhZ5qnw892fWvWf8ci8wp/Rcr1
O2UsygIvmWsWeKQxb/i9PoFvipvDeIE8p9tXxIdu84lDskxGfRn3vpvBB4i/
VvbrmcwrnnFlLuKohYi/Koi/Vv5tv/hr9X4SXcE72cm8iuNvid9XeYSji7mu
PpqMTWoDCU7Qz7UE/uWV4AQVBw8UvKFw36slwNWBgjcUPs8UfKLeYw03+Auv
z+AJqxSyABe7gTcoLfhHrcvuhcDj7XXje/uMPIXJBnFoxHLc/+6P6wsDh2Qs
h50vIPPabwnu0ryOO+xH2y94b/8Ws2h7dssdcUeFHDz/YcFvu9R3ELuiaJOS
X8AHLhEcqNef2BXFA53/iu84SfCkSnskraN9tkKctUHm1fJdtg682YNvzHeU
AY96n/mWkjKvvn+rssDhrdbjO1+WeRWHpwnu1ftnA+zJS8HPCjctl3llXyM8
mD/5jvdTWfD2/sDAwNGeyDM4yvMou9CyEviuRRvAa7W1As53FNw+TUa4zKv1
oea1f61C/soL9niszCu7fVLmlX1zFTuq8OwRmVfr8bHMq/38H+1r1nf4hRiJ
LxQuH+YF/19bnl/jvOrgAe57ATf+bYW426UGePLW3sA5w3KBH3sj8+ox/hQ7
rcKZDbnIL0k8pezVTB/Es60kDlI/u1JtrLfdPj95Ue3n6uDvpvkAr3WV65X9
WCXz6neckXm1jprnRjy1WeI77SdlXvGJn2Rewch5Eicq/mulL/J762Ve2636
WLfPfWGH5sj91f5pKnGothtbiOPygM850BC83PGt4EufSfyo4sWvMq/s0YNt
xGV5+f4bg2c+vgPvp2YB8FrXJI7WOGon8gi2jJc3StytcEzHnfBXz+V6Hec3
Q/wVtBO8+sP8iIsTZF75ue87aZfkeoUPNzfH9a92Ie90oAB4xfAWyF/47iY+
L4i4Mkzmtb/dDTtctADeW8VWFv37Bu6hHZZ5HTe1Bg+TX/ykwpevCuI7Xmxj
0fa5aADyhyULg+fc1Qbx1Pp98JMvJK7XOK+tRdvlZH/wRf1t4nS+oYrM6/3g
Tzwj1yteo66dBbyqP/xDR7le4YfPdrBjawOIR8j/LLW3aPyzO4A8dmHwzzH2
eM6ugWbNZ9UpjPUzxwH8VYdA2Nu5Mq9xN3lFxwDEJdnye1U8s0vmFS9gvw84
67rMazzhgH06LQB44Ggh8EUnHcB7v9oHu/S5EPiQ7o7MRwQinvIjH9vHCXzO
qP3wF8GFwZN0cEJc6bef+0jmNS/uDB4433/gK+YWBV/kLvPKvi78D3xFRJE4
o60MXxfyAweBU0KLxen1tEjmN8mIOkgcVYy/V+YVPXTlIPOiMq/xoMyr/NKB
g9h35+Tvap7RsGBdHwIPnE1+9bYL+NI/DoGXGyXzKk97zIX81UGuH5nfsX37
dicX8j8HgUMeyPOr91XCQL5G3Ud9x5HFwGttc0Fc/0iuV3jxkDyPtrMyr/xG
kYPMxxUFr5Uh70fza/8Bp82W+1fRgRzyVqb94I1fy3fRcYkT1m2+A+Cv6si8
4hMXOIFH7b8feXnFbyu8GerI7xXIOKwQ1u1cx5/rVvOeNj/XifY3Mq/zCnK9
xtFyvbpvNteh4gm1PZbrNS6QeeUnYpl3GOGA7/JnAPKxE+V6zTPJvPKvZ8l7
f5J55Zdu2JMfCAQPr/hzxSNay7yOuwLpB+V6jVPswEOODgS/XbwI97sd8onr
A2GfS8i8jmtlXseXAYgLuhTBftzSFvmImwHwa08Kw9/ltMF6HrUP+ZH4wsyL
if1RtPBef+C38zbIZ6WKvdL51D3E+zKv8EPHVuAby+5F3l7xltrfc76N3Kex
jNfyPIp/ONsS73OMP+zn/SL0R2InNS+2h7yiPI+yWznNuF92IS+T1wb2trvM
q/38TezzsaNHj74pBP8+Xey8zvPtgv3vZEOevwnyC4t2wv7EFMK6DWxk0evj
u/gRtV7+Ejus4qiJDcFr7d3G+Ev8guYjxX8pu9xoG+xtp3zgP/c2sOj46OQW
8CIb88LOlBc/qHmQzcD7HtZYt83Eb2o9gvhHnSeXecV7la+H51+zBfzbIPGP
PvL739eB3/lrM/J3pWRexcX1ZV6t436bEecGy310fFSbPLwv4pLYPMzX1EIe
uYgv1k83uV7twy81Lfp7x/iQH5brlR8YIXhDxSVHNiGufZ8LzzlHcIvm8b2Q
dzsq88qO7KoGHDjSG/HsW5n3lXVwpip48oyNWCdbcoEfjhK8pK6b4kVdhuAf
bXeqIP8ydiPuX+zH9YLfdJ5TcJp6HxMEX+WWcUPwnlrX8wUHat7hO+P9CuSZ
BQcqsxMneFLtz4/lkM8dso64RXCsWqeHy+J5PNciLrkmuFfnpQSv6nW22mx4
ymjGvP/9UhbNZyxYBR5uiOBtvb9LYT14rcK+DieuXlcSfm3LKvAoB3IY/5Zg
3scdvEFDmVe87eti4M//W8k4Phs85J/FkEeeIfOKrz0r8/q7FEGc0nQF4uCW
n6HriLVB3mSJG+LIpp+hKwiV+ELzVW70dxKnqO//uqBFr+PwpeTVJN5R2+92
AeCiwUsRh0ZLvKPtQn7gyYJLwIdX+wi+MX8+2Mk0iac0vpb4S9uZPHwPC8G3
b5N5FZ/ctEZc08MVvN8Mmdc6FInLtJ9eAF7ivyy8h765kNewzIfeasM7E/Jg
38GjJs3Fvnsj81p3kwNeqN8c7JfXGeRDPuP9vpR4U72PtTKvf/978iYzsf43
vUH86Eu9TZkZ2I89ZF7BLptM8JiWGeSl3oDHK5UO3H9rGuzMK5lX9n/vC+Tt
Ck8jz5GOdThR4muVL543md/3NfjtlQlmzZNFTiAfK3G6svevzYxvx4E/j35B
/Vsc8vovx8IOB6eZtB9ZHA27cHEUeJEPKSat/2oYhXXgPRJ6j6IpWA+XQ5Gv
LTAMcVPvJBPsdbBZ5+9+8BuDnoMPf30P8Xv7AXiuJQngjY/dod6vP+7z5JkJ
ePkG4t7IvohPn1igI1p2BfZ9cm/oA1vGm6AzuYj49l5P8Lvt40yIt85ivc75
F/iqmsmk+drEk8BDK7rBPpyJhR7m2jHwGu3/IW/2FN9l2WGuhy7kXWNM0Ikc
AA6b0xl24NgTk/Yj+QPAt/b6E/YtRuaVH1m3C7yc0u8pPuFcpAlx7Dasgwkd
oH8oHmHCvvKlPrIdvs/8MOijGm4Eb5XsyO8ZgnUVsR685y8OZq2rOx4M3mz3
GvzegLZmzYOkyrzGQ+54X7tbw58uD4L+bfEy+N1azc2wm/fBb69dCLtWvTH0
UYXukA+cBf1YlbrA23OvI0/RYQLs/pQq4IEczoNfqjyVuodqyMs3PE+ebT72
s60t99118AOd3MA3lmpBPcY98uerkCezawudY/4grOdrHuBt6zri+dND8N3d
NmLdjnHGOnoUAt1pii9w7e12yOc+DzVB97QF66ByB8aboeCvuu7G/PbfsR/L
RZEn3wN+pPvv5DsjsJ4LBoAf3/MH7yPfXfMmgoMVr2L8hXi8yWPw3pGHyKf/
Bb6rvsyrdfH2KPnev6E3bPAE3+XVSeB12+74vn/EQP+WcBZxZkhP2C3rWOiv
nsk+0u+vL/Whsl/U36t5Ffqn/X2BM6fEggcbcxO898b+eE9J3F+t7jI/NAjr
6LoZ76foQ9iXLkOA6xo8Q34qM5h80zB895fPsN6swqFD/WWEGXrEBPBjGyOx
30JHUo8k9kTbmxh83xVjaDfE/mh//5T6sDGwlw5JtGNxeJ9LxwDPLJR5bact
WMfjxlFvk2wCv5XEfNME2CHvVOhO16aaNU94ejL8S5jYT42TXiLOuTQFz/nw
BfJWTdPxHtZRn2m8hB3bm0k7OAN83ehXWIf534Nf3TiTf0euV//d4E+wn0tm
wx5nvUZ+9rT4L62DmAf9xt434Pe6WFmQh1iAeKpIpknjx0m5gCt6L0ScoubV
Ov0m/lTrfV3xHW7KvIpb71pD/zPaFfqH6jKv/Lp9PuTBC4t/1/nz91g/mfmQ
Z++8BLzcmizY/4kFgJMPLaG+7j3e/7uCyKt6LcPzNP4AezjIBvef4Ea99Efw
5B9sgEsrLOd7luuVf31b2IK4dDns9xK5Xq2DzYJ/dB5pBfV+H4EHJhSnnkTs
h+JbL38mn1kCOiLP1bTHn/H+v5dEnHJvDZ7/nuArhWN9SiNu/bIO72HUF/ij
vmXBh7QXO6TiT/tvyEcklMX7n+1B3abgTK0rKQc+zdoD/E/KF8xbCV7VdoB6
yCS5XvEcTStCZ/XrBuioa8r91XrvVxHv/6An8o0+ch+dX6lEfsCTejy5j9Kf
VK1C/nAj8gx1v2F/ta1KHnIjeIweMq/i4adVEZed8cL37fwN+Y6q1ZBn3y3X
q/hsk9xf8UBRMq94vcpezHPJvF4XEkcofvm8F/nSb9DlhtWAriDL6+d91HfP
Vwu6hcvezMt/A/5MqgW8N8SH+pzvyGv0kThI+ZfSvrjPaYkjlD/MqAMedaYv
9rezzKv9b1sPuppKm4FjP1mRV2FcdsoHf3fAd77P+lgnzeR6pZOrkos6PVvE
U6+3AM8XzB2n/U/Xhlgn27cAR02SeRXnu0i8qfDA662YV3yp9s8yr3iaKVvJ
R8m8ivMnNYa+Zek2+L0+Mq/5yCbYRxHbwRM2yoM4ekNTvM/SfsTVeaDvWtDc
ov9eOnnR/yRu1Xx9c+pMdiGfczoveZ4WWCcNdtFf5cP7sW2JvMn7XcAbGXkZ
r7VCXLBzN+xnVj7EoadbgT/fuhvrLZ/Ma//fhnzgXuCO5zKv47S24Kuv+zPP
InG35v+ol0sLoP2T+F3nVWRe7W/F+yn/FiDxu84b2Vt03PjGH3baVODnfZS/
qSDzyn93zA8+4YQ94vT61JXdyg8eLEzmVV3HJX+sB5M8p9qvKx0s+p/19lEf
kh88W3FH6moCEHc0lb+r3HZBJwveVwBwbKmCcYi7HMGbrdtHHWw+6tAcwXuv
9gfe6J2PvIQj4tO3/vCbc/OBt7zhCN5+lj/5z3zQbd5xgj3ZE4B4KO8Pva6L
xfhVxu39WM/OhaBzXuECHn7DAfIMMq95FpnXetsD1IMVgk74nQvez/YDwIlW
Mq/s+mHDAlzF+/SgjjHLYFz5H+28zGsdajuLxmsdD8Lf/VsY37eezGvd0yHY
vQTyUe7tkPc5eZD2rTD2dad20CfbH6LuS+Z1/r4ddTsHsa5y5D4ar7SD/sdy
ELixiQ1+r2s71AXk4d/NLfdRfMSf7Zj/OgR8u1WuV/FTm3bUGx9EfOFjA76u
nUGe5AD4wHMFyWe6gDf+GgidzBj5LppHd0E+JXA/cEL+AuBPPjgj36R4Tv1d
ZF699wHO5G8DqYvLD53bBmfUa/wh84qH+lQA7/+UE3SYFwLI/3O/1HBC/ihq
H+1kAdiB+bKuUlNSUgL3MU8k99f7wBG6zcoB8Bcn5Xqts5D7qL8XLc+v7Mvt
QuCFLI7kc/Yjr/27vB+FP9Y4gMfzo242pwDs4T2ZV35pdiD46u6F4hjnQFd5
M5B6EHmfCo/62oMfaBxAe1uQeTSZ1/FwAPTe2wsiP3LQDvnEqgHQp+TIvN6v
bcFXz/CHH/+cH/mRUWKvdJ55L3gnxRPquK8NebO9iIMHFICOd3kb6ur9gWf/
sYFOdXJri8ZZH/2BB3PZYN/lEzup8mD39/zcdxrHix1WvH7ePT+/o7I7o2Ve
xaGbd4NvaFcQ/F6n5tTZ7gJeGl8A/uJUU3yvBTuRJ/fPj3qNvk2wv0ZRvzos
L+yYZ2Pm47aD987Jw31BP/V2G+uZrKnzbAh93aAtiEfqi59S8ZZHA/Dq8zYT
51phv1+oD14xxJc8gRXqGirWRx48bTPzBVbQsVeoh/qC676M/5iHnV4X+cRN
5FFPfkddVbr4fa1/9f1Z96G/e23YsUQf1sNZQf//ohby1LV8wPPMtIIedV1N
8PnlNkF/q3SVyh4MqwGduSfzuXm+of6reQ3aQ2/Yk6LyPGr9nqhG/T/rUxT+
0fte8JX+7zfied58Aa9VgfNuG6CnGvIVfMuZyj/rYjSvngO9x6ZKWD8FPcDP
780B7+co+FDnN9ajTnBlNuLo5PLIjxxai7q3N5+Bbz+Ug32LXgu8d1Dm1fd5
Vpb2bQ141B2fgcOvleH+Wo083e5PiPdNpVF3E7wKPMzgz9BZ1SpNXfRq6kM+
gw8cIXhb7ZPi7tCvdviEOKJLCfze7JVYPyU/giecXpz7fSXyFy4fUde2pSjw
3vvlxPnvoU9rUAR5pRVuWCcR76EL6ipxhPbfbtjvfd+Dp7LYIK/axI37UeIO
9Vw3CmEdLllGXYlcr+PkgtRjLAFfcVviIBWf3cyP+yjdma7jycR3L58feZ/4
RfC/ce9M2n8pParCM42WIB4/lgXd0ZM8wEt7XJl/eYe6wp7WwJkDFiIOup4B
/rBKbuyL0/PN2n6PzoRuZ4EV8qcb55GffIt6uuVfqZedA15riszreops2IUb
s8ErHEmH3mzKJ+paZpm1HbybDj757Xvk267OwnoY+gZ80ckM2PGNM5gXSwdv
GZxO/k3mFR5RulCNjyS+1nVSU6k7knhZ64dS6I8nQ6/VTuJuxSN/fk6+YyLu
k/cFdGhfLKhrfTgePOfjVNTHdTaRxxmDdRiTDH5vfzTyyo9GMa+RRL4lkv5p
OPbj4kTqP8MYdw2j7vE56vhuBSMvPnMw/N3KBMShhR9C75s0CDzt5mfgnwvd
Aw/810DWmz5DfXHUDerP+oH/uR9ngt2/Cj49szf2xQkT4q/Wl8zIh/TCOveK
xe+6dw7vc8a/1IHIvN5PZ4Cnt/eg7vKpCXjwBOtJ/iG/GwN9rN1h8HiRXcDD
fHwMfc7YA6jrKNcZeH7vY3zfdf9P76f0lm0ioSuz7ATvMPxX1vtGYB3eZh1a
w19Q/5o7jHXivqgTHmGQF31k0r+nlTfivShn5jtCyId7ou67qSPz9TKv7eg6
5BVa2UOP9CII+ZcZ7uRDW+E5Zz2gXn0pdcbNwIeduIP1/898+vUG+N2+16m/
nQx/9qwq9YnnoI9qMh245Eg18vBn+F0Wcl/Ykue5Qn54JXB2/5bQSda4a4Jf
Xst6cDvwV8/vgzdrsZH5M0euxyDUmf7tA5xUycD73BNs0vHa/m38ux3Am219
hPuU9EO8N7gj/rvYR6gv+LaXeo4/sI5OhUM//8IfdqHJH8CfX0LJ4x1gXuFP
2hW5XuOiw9BhuHYBv7EvEvX1scfwvjy7Ir/xb5QJ6+Ak7HLMP4jX3KKwf1+e
oe6xB9bphCfgGTpfxPrP3Zs6qxjyutcRH/7WDzpn11jobyOYd8jqB93Rkhjy
eHfpVwaStzdBzzzrAfDQtsGwe4FxqOsfEIL1U2codE0DzNDrlghjPfNw8lRm
fJejkYj3poyAnThtAT82/TH22/aR+L61LPALD54iH3FwNP1mAvjtESbw8DvG
oA70wDPkEQR8Im84Brjlhlyv6zoSgc/cx2M9T0vE/qqXhu8yaBLynlYp4Bt7
vmL/hKngz4ulou7jnzfYp2umQnd3IxU81ZsM2uXp0Fdkp8LvL/uA+HnBTPD8
h16A9z71kfrgWfyOadSF5uD9D5pNHPvSBP3Ed77P+dAjHXht0vumYy7EuUvn
s649HTrhOrmR3yy8AHbm/Gvw2/esqe9awPct12v+IS/y/stcyRuL/1K8hY/4
a62vXQy/8Hcm6iOqFgC/92Qx6+Iz6E8Lgsd4tpj+R+a1PrQQ4qm7S5mHzIS9
chYcosqJvy8FHviaibxSSmHomgq7Yb28zWResgjrK6kjPSl4QNmXJsWon1yB
7zwmi/60JH6vsQr8ve8H1DWMLcU88hrUT9l+pB61DOIX81rEcXk/A3/2Kgtd
U8h67KNvn4G315djnd166t8FZyrdQuvy0LHU82Be4jO+V2R5xonrmG9iH4A1
rDcv5AF8ZfkE/PM7+czunuAPm2RznVfi3/XAfsz/ibj3B8/pCft5Xf6usmtX
BVerdfr3Rvj5Yjl4zvfVWOfohfewOgd84/LqFuQTvcAjVc6B359QA3otFy/m
K2Ve+UXvmuAnq2+ijuULdO9HakF3dMIbed5xX5Cnu16LfK834wi5j9b71cZ7
S/HGvniVQ79fB/zSq03IRzT/gvcfUhd8xQgf5q++wl9H1wPPfNOX+bev6MOQ
VJ/P48v8Pq/vI/O6/8cm9hvJgf0sZwv+cL0veM4GX4F7pzUEjzFwC+rT63/D
dzE3At/Sdwu+e9fvqMu40Bi/6/et1BN+R75sVRPgWKetyK/2+Q4csqMJ9XVb
2VfjG+KR603Bb9TfRl2HXK9xbjPg6qrbWWf6HXayYwvsr6s7mE/LBd7yXgv8
3vV+yONlWkFHt4/1oWpe+6Vc1IO1op52J+2/zCs7uUnieoVzSuyCruBwbujc
LrdG3XGnXcCBo3OhDtdoC5xfmPnDjbnBV5ewg3543F74pX8lvlZ8UD0HxF+q
jljbvXzgE45Sb6nqKnTcmodxvVyv/l498pZOeVm3S91aGuvW61lDx6X0bPr9
7qHuJTfrkX/o5fYCP9Skfvi4I3Xje7kOrVk/7oTf9dcPvigP+MAizhbUN/rD
T6VZQw852Al63eL+7C+RC383yQk6tyN7URf1T27U4Y5zhl5L6VQ1T2rNunJn
xNdb/WGfH1mDZ5jngr4crQOQl1yVB30hDhnQYycEsu5G3udm5SAN6JZr7Wee
XN6b9tMyr39/IPbLpzzgVWYY4POLBIJXVHWjGne243MGAP+45gU/tq4d6k/r
7keckpQXv/fX9j95VJV/qpaffQzas9/Ff+QN5Dl1v5r24GemHgAeuSjzCq85
tme8fIC4PR/1wO2h2/Q4AL6xvtxf2cPv7WjPD0DnXDof+hJcbQfeSfHDiq86
mxf15gfbQbf/5wHWvcq8xgtyf+X2Rh5APZpanxqHtUOe5WIg+pkcyIN+FH0M
6h4DsK46WINH7WXg/g2obzxujd97zQU6qBf7kO8obM1+C854bwv8kdftxP01
2AVx7gl/9P+5bA0eeJoz8oZJsq7UfS258bvGO6E+YvoexCslZF7nnWVe4bgM
1sMtzQ0d4xMn8lr+8L/vrKEPPOlMnioQeNU/H+oIEp1Q992U+s+9Mq/sVYoj
dZgBzGvngf5ztyP0Zkf3IY/wN9dhqAN4vzn72B8mD+oIRjrAL/zl/3Oda72f
A3Rx/fcRj+XBPr0sdkPHif6Ml/NSv2eHfgLP9jLuyQO+V/UH0Hwv+1EpnaGu
A2iDeuGPu+FflL3S8UZb6l33ML+WFzz2rDbMw+4FTq78Y322Zl32bti3Vby+
V0vUoQzeiTxpfmv0abnTgvyhH3jsedbg59OaYz8G+8FuTLFG/fUh6kWv7MD+
upobdQermkIvfW8H61lzMY/TFPZqznbUTa7JBT2kf2PgImMb/MjZ78ClJRqB
J2y7mfWUX4mLxG9qvsAX+MHpC/2sLXDjWV/WV8r1mp9ugO/bZzPw77cviDvO
1Cdv78u6frn+R/2F7pPiw749OegH9Xc95t18wL+p/j8Kh3auCz18mA/w1bWv
6Gc1vw5xyCbyOl9R93SqFvSNl7yhK5iYg/rr/TWRd7bxYv1sNvPpNbG/fvUG
bxaRgzp0n+rI7/hvoF4jG365djXoiud7Ip+44RPweWpV+K/8nuyX9hl9hw5W
BU84ZQPy9Y2yoT+ZVAX5vqMezC9/hs6zdyXoHB6uI8/8EXH0sYq4T7N1rOv/
iLhscgXirrXg288JTtbrqzz45OVrYB82fGB+vCzx3mrm67NY7yzzGpesYr31
B/CTMWWQH/+ymvz/R+gn+5e2aDvUcBX7+bxnnbLgdl3P7M546x15m5LgLUet
pA45C7/3bHHwq3tXsL7wHfqkzSiKPG9LN9R35MnEvFsR5EEGucFOLswAv32j
MPq03FnKuDsD/bge2cAP7llK/54B3ul2IfRTKrsE8dfADDxnh4KoKzEWI29S
+C15ywKw86sWMT/4Fv21VueH3Ti+iPd/C7y3gXV2tgv5/tOJS/NA111tAXXv
r8Hb/CHxnaofqzIfdrvmG/AqTXID/4ydz/4qbxBf97NCfrnBXODJKrz/ky/M
b81GvvX8S+rWssGbF5tFu/cSOqLMj9yHM6kPeQnd78Qs4OaxM1AX1uoVdRQZ
uP/0GcCN615iv7d5Dd5qyxTwmr9IXKzeq3Mavkeeyaz3T2FcnAw9ZP2J0CGe
SQEv8SUB8fvk8Xj/h5IQ12+KB5+wZgz5s+fQG6v6eq1bGM36qefsI/GE/z6C
etRn0G9MjYTftR0OXNTHAv3zL2H8XUOoM7WAB7AOoT52MPUPZhP8/0P2QxmE
9+NtZh3xbeyffv3BGwTFMu9wA/s8pA/x9lPU29a6Bn7v3z7gNZWeU9n5Py/B
L6b1BP+6/CnyMiXPQw+X8i/XWwz2hf9p6va6g++KjIY+x3Kc/SX/Yf7lMfQn
dkfYH6AL8NKTx4gf8x6An/jYCXF0UgT0VGP98XyXfkf+cX44eIM6u8CzePwK
fcuuUOp+WRc3tB11+MHgJQKY3+pssC9WEPVX3tCdrnPC/f4Ohq71F08z+xhR
l/eQ/QHWsL9iG9Q7uN5nnfsKxDkrW1AfegfrcOAi9gexRbzQ7jr41V3T2T+z
BvDG1rPsZzgD/OHyqtRLngBfum4R+xM1YP/PC+xfsYr60RbcBzeQ9+nhAZw0
uy3jlNsmHcf8vgl6uOGOeJ8X7+E9F9yCutkNLuD/Rt1HnHjXD/+erwN0KXce
sr6Y+CPtF/x3YQ+hi2sbQH//G3h+i7xP5UeVnkM9V8Rv1LUGcb8fAq4d9ifr
lUPAB4YdwXcd0hnrtsgj5C/mnsD+GteF/X9C0d/g6SnUNV39G7zQjlDEy2nn
4M92U8/sE47vlXiJOsOetP+R+F4Lb2Dd5+0Dfzc5irqmW4jb3fuintonEnr7
WfeRr0rpj30R8gT1BdEP2YdoEOzMrGh8xyKh1CcPps7wKfjtVNqBk0NQf/Qx
Bv0Gd0Sx/m0Y1suJp8g3vXkMXil+GPvhxEDn3MNEnDcSv2+3CfnWDXFYV3mZ
r3kTC36++DP2WxnJfhcm6rcTwZ9+Ho3ffS/ORPvKuv5xwDnBYn9UvUrzV7RT
E7C+frGg3mRYOvs7TMD32WkB/2yTwT6Gk1gf/wzfRfXhVHFn0FT015z1nDr/
T+xzNI16/wTany/sszGDcX0i+uG0/s71PAvx7/4k4ECHXOBbYmZhP/VMNqFe
OTf7jM1B/Lg+Gc+/Jw/wUrF52E/lUmE/f8mLOp3j84Dbz6VgPeTL/7PPp67L
S8N9NuaHbqrAAurNU5FXrVoQ/MmR+awrYZ+W8oWQj+6yAHnemmngu8YLrtDr
fyHyQs/TaN8Ko07WeRHt2QvombsVBV+xZzHsxNNXyCtZFbMgT7OEdaOv8H4u
FAe+HbYUeRI/md+uHFNJ9hFazrqt1+CN35dGHdbDlYgTh7yF379chvW/7tT7
y7zuH1oOuizVh0PrvDJY11AO9b8PVmE9bJLrt2gBEeL0p+7IY6g6EcW7xpVH
/Nh+FfJ379KRrylQCc/TeQ3Wf3u5v+4DWYn9l9awDoA4alwV8DO1mcd/mYE8
zqCq4Dd+Wcf+NpmsP6qO9xa+HvY//h37w1Sn3s+DdYhZzKvWQP+xCx7sw5bF
eKQm+zh5oq9IG5n/UZ+ueTMP9mfLQj2OVW3Gmx7oU1pN/q6O22sTp3kAjzm/
Q13/AIlTdB7BE79X5cG1bkHiGh33bGBfyizY4dcSB2l95UZ838ws7Iu0+ogv
Upg3c3mPfhEFGkD/vHIj/WMW6gt22SJO3M9459h79mVtyP5a3uyrLPNbVR8F
iRN13ZI3+8p8xPq8Rj1nzU347lEfkHewacJ6KG/Uazt+QH3K4iasU9vEPsnv
4ceHN0VeY8Im9lH5AHxuNMM6rym4QOl9B33Ed6nYAnWdyzZDBzjyE/JxeVuw
PtSX9WsfWO/WEt9l6GbyJB+hM7/cEnxF3S3Ms3xk3rM19TZb4d+nSfyl+2O1
Bg9WbSt0Czc/Yt+pena1H8psZ57nM/TSS9tCv7dlx89+Yuo+q+1Zx7cL9dE5
X/j89tBF5N6J/iXpcr3ur+GA+uX9fuS75Hrd/9uBemA/5sF5//8cYPfCdiCv
vlHmVf3yVJkfqB0v+wTKe1M6kgBHvjc/6iuyEdeXd8J3Uf0EdL1NNq5f4cR6
Zz/ophI/o1/HHif0beuzEzj9zSfgk3rO4J2O+7F/L+PZ2c7oc5uzk320spHf
8XJB3eXtXdQdfUH8GOQCXnrqbvKTX7DOUw3Wm+9BvvXUV/TvijLYb3kv+2Cw
v8d6A/Hpy93AG22+ID46a+D7Gnvgt6/kgLcf2I75pj3Ip3/4gjqI4e1gb7/t
QR2i6oes3kPN9uAlFM+m7f9XxKEd2qNvXvl9iKcCZF73eW0Pf9HJn31xvkLX
lK8961X9WQf0lTqi9uB7l/oDh+/7hj7t+9qhD3MV9kPY+gXfvVs77PfUPeBF
W30BbrlsYJ/23YM8Wrkc+MEEg3r43eBdL8m84pNnG7BLHrvZDzwbfVdqG9CN
H94Fu9osG/a2NPWiqo+Eeh9Ts5mfNVDfXXc38PBnmdf9K52h3wvYiXqpk59Q
F5DtDL952Y/6os+wA9lO7Kvgx7qGT6hT6+JE/moH4sKHn+AvXJzYB9IPfqHq
Z9R5JThBNztkJ+KgIjnEz87QN/bejXi57xfgLlXXr+zK4N2MU9hPpoYjnnPh
TtZDZcMPfnVAPu6zH3DrrznQ/6x1QB5n507iuGzwOcVlXuf//YC7b2TTjtmj
Dv3DDuqdPqP/2AB7rls/5FWb5SDvf9QOftPfDzz2nznAn15tWde8HfiwSzZw
S2wb6qj/37zu296G9mEb+5kwfzenDXiPtB3Ab398hR/f2hq8zfPt0KleknnV
n6FyS9bDbuV3/wx85dcCfUJ+34J12y8bfftDmoNnfrOFdaDZjB+boX+C42b0
d3rwGX7kZlPwk7s2Q5dV/jNw16im0Fd7+bIv12e8B9V3ReNlH+CubPEXuu6l
Efh8Vy98x0nvES8rv6nzIRvJ84i/1vowW+p7vVgHJter71zHFnx1JW/qWt/T
rzVgX00vrM/x76k/qQdd7gj2Ax9Dv9+4HnSkBzawz+R79rmqC33vvxvBP3/h
c16rg77f7XifAqxLulKL9fWeqM/a9I756Jp4nrLrwMsdzAC/erAG/GCd9YxH
M7Hv+lVHXvu/tdQPZ7IPf1X0nY5fgzho2lush+yq5GnXME+UwTxvVd5/Hb7j
i0z2SxS8p3R7b9fAP27LxPoxVSIfuxp9MxyIY6tUwne/xj6frm+RF95XwQI/
7M5zAd5AVzCpPPtqrgQffjAdfrNQOaxb6xX4vl6vkWcfXJZ+fznji3TUVe0s
A7/zbTn4AYd04JwhpblOlgPnJL6m3rUk+PbBbuRLX4H/sSoJPvDBUuhq1Lyu
NyrO/s/LsA67yrzuY1AM9q33EtqNl9RfFWH/3sXkt14wbrWBX/60APvOPhV6
Mzcb5FubuNKPpKI+uogN8g5dFlJPl4b31rUg7OGT+dTRpKIuL13iJh3XzQOv
MjwF/rpyfvabms/6JvZ5W5EX+zd2DnVeyeg/dssa76HTbOpMEvGcI3Ijf7d8
JnUvSegrWCI3+1TPZh12Mtbbaivu35mILzOSWff9lf0NZzCPnIR4ISuH+H46
zwfhORqLP0GnOHYa9Yl8nlNZrN+YAn6sXBLW4dcM9sOdSvyQiPNBmqfzPI6J
1Gcl4PyLNi+oWxoPncBmibt1XigF/FGPsawntiCuH/4ceo4Ho5HvDow36fXn
F8880wj45XEmxOm1n/J8jmGwz/eews92fQIctmgIeM7yT9H/4c9I5He/DcJ/
Z4lG/NUpjH3QBkKH7BwDXvR5MOLSZ/3ZL/OJSeOjMw/Zd6k/+ypEow76wV3o
Hpb2xfWLeM7Lo1use+8NPtY3Cs8z9gb71vVGfU1qFOoTt1xm/7h/qWeIgj/9
6wJ+19XuwEtHIoCXgs8i3i7SjTg5AnHomFPgKZ7+DV7oSDj7+x1jX4+/qKsP
g57t5CHm/zphHZUKNaHvSyDs1PzfwTcPCKG+cS/ep8uv3HfB4Gm7+1F/2Q64
9zb7fGazjq6rgThr6n3wA7s3U5/kRL/8AH2GD3tTp+iAuu9l97B+VnqwDrw1
dF8D77CeehX7BbdgPfQN2KtdSxFPnrDFentwmfr/2XiO5jWgW9xyCv539Czq
YqtA5zPiCHiexEXwK63r4Xmrnkb+QvU7VTj7cVPcp8JlxonUM6n6fRUHbLvG
vqmbWKdvz7zqTfDz3TYzj+sI/iHqBuxbAT9+Rxec4zPlNuL06F3sk9kefObD
28TV+xBvD/8FvMT0u9ATfgwAj7eoI/VOd4CHax7CPv/4G/SNUffAN2YcIa/7
J/vd3cffLX+S+qTO4ON/fwi7V/c0/WIX7O/pD9HX4rfz7N/9D/LCgcHImzy+
zD7JPXjuzCP498U3qKPtyX4vMq/99232Pe6NfbnkEfm3++S9+yI+Kh2OOoU8
QcDBfj/q4sPJYz9iXeUA6Ge/R7AvcSh0ElcHIC5wkutV2NA2kvtiIPleuV79
s+9j5gUG4znVftTxnIl904ZRp/kYduxKHHHqcPYDfky9mQW6kPnDkNdzfoz4
3TkROCB7BPQVG54At3dKYx+A0cCru2OI/1+wr/oY1t9Ho89npdfsyzEGfqdh
DPVXGeRHxuN9PHiK+pSeH5gnmoT9JVgM/a0+4j5NJ7FvTCx51xz4kYJTYIcO
m5iX/AbcMG8aeaF41KGfsEJ/m6HTmGeLRzxbJjfrAWdwf8ez/0ke1kHMos72
GfrVjM7LOovZ7Bv8DH5nVj7yBrOJb58hX9+IfrznbOTx/S2wP1MLWJAXmc3f
/Qz9BP4qSF5xNs51yveM/GchC/odzAEOV3UBGqfaQL83fC51ks/Ax94pjLqb
zfPIGz9nf/ii0AV1W8Dz0xJ5rlBx8LdBruz/moS8bZmSyMu7Lcb5ZV+S2L+i
NHitHUvBwxRJJd9SBnVJt5YxLmY9xZqyrEN0Yz+bNPTD6VwO+r3LblgXnqms
7y4PHm+AG/I41VPBDzwvj981Zzn8WPlU6Ay7VwTfmL2cfRJSoRvPqUg8toJ9
jFPwHctVAY8XSB39/Bfgf+ZUhb7ikzvx4UvU46RWA780fjXrDF7R/tRgv8S1
4HMKv2Z+pAbiiMjV5L1fgZeYXAP8iWkVdRQv2Ne0JvSKqe7M36XRntQCT1Jt
Ndb56zR8r9q1WQ+4mu//Jezwb3Woj1rL+u6XyB+drwt+IGAt68heQacdWg/f
ZfF64K+lr4FPCjUA/rfyAK4emg773K0B6/vWc/419AnbbFl35gF9y5/peJ/R
ttRReGC9tXwNPzuxEXR3pz2oT08HHl7fGPuu+wbEfcveIC642hjnT9X3xO/t
kg4eZkNj8F2qr5fuh/GK9VZNLNBDeRCHv0a/FM+miAc7bmAf9XT2A2+O/p+q
zk7XG8i8rutsDn518UboVNe/xnpQulC1DPt4sa/zG9QLeLVknbs380Jv2Ge7
FetkvfF+Vr3l+WutwJsd9Gb/tzfovzGoDfScF33Qx/V4BvPRbVF/t3kz42Lq
wOvZ89yWbTw38D36ObjaMQ7dAj/4eybrm+yhI129GXYmORO8dwMHnk+0lX7h
h27cAXrLkM3QG9yU59F9XO3Zz5D6pe1vgA8bOyIunreFupQM4j1H5iOo7x2b
gfU/wwl8wvStPHcmE9837Af/uY39izIQL8xwZn5qG/QUvpnIF+xyht7s7Dbi
cepYRrjw/Lht7Ov4DvUIj1xQF/9hO3QTiewDttiA3Vi/g+fpZWEdVpN5jbd2
0O+8+zmv7cB25AV6vwO/V85gf87twFFKn6/8TYV2sCedd/B8ySziUgP+KIZ1
tY7vsE+PGcgLJGynTuwdz2E0eE7NDvYvfYf6mmntYGcWUP+2NYvroR30SFY7
qUvMQj1jaDvwLR/Jh6t+LLr+uR3jfT/gx13vwOfkaoc+e3N3gEfq8451tQZ0
Pmd2oN4lKRP7MdxAH9dKOxgPvuO5bwa+46PtzLdmsp+zC/iK4tuYH8/A/CoX
9lHZxnMbMsgvuaDfwt2tiEO3ZwC3K55cfcdJW2g33iCOmML5JlsQZ8S+RV64
mTN449Vb2I/uLfvyOeF5QjdT//IWcXpVJ/QDyeI5BpXeUvflhHU4eyvxRibj
QSec9zFZnl99pxOZeH5VX691CdvYN+wd40EHxOn7tlKPk4E81yUHrkPmTZZl
wj+q+neFL1U+Rel2WmcC//9rD3vbczPikdUZiCP22zF/tJnnVmSwTop2Y9aP
uoAM1EGcbvuzLlvjzAzg2+A2qO/280E8q/Rdmmdrg/xglA/u453BvoutURe/
xQf6mVa0M2pe8Te7fKEvqJcFP+7Yin1LfIADjXfQJfZvAR2dyq/pvvpv+TzN
oVu74gV8rv6usqMlmkMvne7FPq4Z0DtFNYV9Vvk+zSe8BW7M3ZT6wI3kpd/w
HNImPAdqA/lnmdf9cRvhu8R4sD7vNez/+YbwF+p8H91f4hV0gw62PP9xHftt
vmT+3ZZ1vh7sK/gaOrRO7I/d0xPfcVw6eM7/eE6TRe6j+2hSP+ZSj7zQWvBv
018C926qC54/Zg37nL0C37KwDvyL3Vr4hRWv2H+pDvxj4lryG+nEObVgP3ut
4blyL4HrxtfEuk1iH8sGL+nXaoAnXLIK6+3WC+L2aswjr+S5kC8YZ1XF9e1X
sg4llTxMVez331fwfKI06NN2VGFf/RU8r0Dm9bl+ldFvZNlyxGffqENwrQRc
tGI5+ZVU6lorwn89dcN6G5yK+p3SFcjbL+N8CvMO5bB/ty3hOUrJtA/l2Ld2
Kfzv6GTg6tNlgIv+WUzcmAy8V7sM+DfbJaxXTcZ7/lCK58otRv8W+2Tw1ZdK
Mi+zGH7zZiLsyfUS2C/erqwv4Pzu4ug7qvpn6jx/Iu7/WzHikx/nICSiP9uN
ItDtJy0gPnn+sy5eP9884OSiCcB792zY13Qe9VHPkLdtYYPve3ou8POtBNTH
uRSE/ZwxB34n1cJ+gDynqcZs6DYPW7jf80PH8nk2z6F4Rn+al/U7M1i3Ygbf
Pt4afr/3dPZpjAN+KJ2bebSpzLPEM97MRV39NH5fM+zGdSt+X8aVcRbm978x
vprK/sZm7vcvPC92CvQweS2I32M+UWczmXqSeMQFb95xn09AnOITB73T3xng
MaMnUL8ax3NM0ll/Og5x5QgT+pvZvQA/02YMdERlqW9clcw8/UiePxUDPnZX
AvOvwxkvP6EOIR75Xd+h9O+P4a+XPMX6ixmM97860gSc9YTndw5kfWIE4qzZ
Eczj9qeONAz24WEo++z1ha5wRDjsg0sw3tfyPsyPhEHfu+SBWesEq/SG/VR9
L3U/sDuMN3oCTxZ8BP751E3W7/dgPWsI+2ncgO5rwr/sl/6I55RdZn+ubqyj
DEE/TMV/KjrA6h/4r9Ih/F3nwGt0/vvnOUS6/8cp8Cdbu4BPsA4Gzjx6jPWB
nYjnH0Lfte4w6xX/ZDz7EPnWIgeon/yV6+I+8rYO+4Brv/9CncY96kt34fmy
DNYl3QEPadnG80ucofdwvYX82nf2j3Z1RL6pkVyv8c0mnjNlB57JdBO84vgN
yPOVag2eYdIN6BWPr0EdXdvmzPddYTzlxjr8BuxLcx54I3UO+zVXR1xgcxzf
ceYc8OEzqrDv0AGTXr+Pl5B3rss+JEdZp7AG9vFkE+qCzkJfes2Tz9ES67/N
BeCxrZt4DmgbzD++CFzkvZn5Kjt8h/SL6K9y3o991pyoW7wCXcQfu9hX0wU8
WA2ZV/mYeft43l575GcXXENcdpfnGXzuQB76Gnm/Q+Cp93VEfqrGDex3j2M8
7/MP1ElbyfdS+b19p9hftRN10LfJk59h3U5n4MmNt2HHAi8QV3Vlvf5d5OM6
XQYOaPkPdIDv7zL/chN8YtcerMO9z/Odb7O+7l/y6nfxPHkfQJ+n+khoHcUD
4J//gsHvBPWFDnRYEHmeUOh+WvSjHi+I/aLDoI+52w/xUfEgxKGrosDjzBwA
XjZXMP37E+YVBoJvzwxiHt9EHeRg8lSyH9U/TSZ8p1yD2T8wmL/XzPoN9il9
Fgz8XCsRcW/cUOyPK48QZ61PQ3ySOgJ5t8XhiKNtXvDc9BHQFSSEgv90fM16
9ZFYbz5hXJ9v2S9mDOP0CPZJfg87VWAsebAI8pMf+P3Gwq73CqPd/oz9cHQc
foddBPUeX3jO0ATw5PUikR8fbMU+mZOg4+0VhfdzKRd1aJP5XI/Rl8Y6D3Ri
CVNxvTonTvdDzoP6i27TgGdWPgFunJgP8eD56bRnMcjTtc8P3FVrBvsARIM/
jCnA/v8zeI5hDPZdwYLws7HT2a8smjizEPic4jN4vnAM6yNsEHe4zOT6jQEP
2bMweZuZ2N82TxEXnygCHeO02dD7F4wlf1UcvNnYedDdlYlD3URGCf7dBewL
bWJdTCn0Ybu7kH1B4rEOd5ZmXe0i5mvY//ZIGfbpWgTc29HM/HtZ1NGMWky+
zoz+4W3LAx8eW0wcYQYu9S7PepklxNVm9kOuCH1Lw6XgSUpY2P+zEvSojZax
foF9s4dXwXr4vIx1Awmsw6qKPPW65cgH9XwOe/VHdeokVzDuS4Qu60Z16Mc2
rCQueI6+HONr4Nz2ASt4/u9z8NuFa/A8rOU8T0Hwm+4bURO6jm1u7JPwjHxI
Teq+3Gh3Lczr1WL91HKec5EA3alTHfI/K9lXJgH45CrPVfd2B875+pz8Tz3o
dvKu5jn1ibAzVRqg7+Lh1dhfc5KoV2lAHmA18g9piahTu2XLfnproEvZ9aMv
kC3Pl1/N95zI+pdG7Ge1BvawXxL55MaoN2+yFvt+ZxLff2PoJa6uxvpXuF3X
pcm8sqsnVsMOr3/OuLUJ8g7vV9GOPkdeo3pT9plcQx4jkd+9Gfil3OuAf/5J
Qh7qY3PqZNYDb7omsS9rC/DDlvU8j1XiEa1Xa0l9IOtItiezr0sr8A8/dMJT
UmA/x7dCPBvlwT7PSdCZL2vNenBP6kNScN7i1jbs87kR9T6FU/G7htghPmq5
CXpm1W9Z19u0BR/Vy4u6glTWCdqhP9jhjcSZqdAJn7Fnn0lv1BWG/9CrO9Ce
eDEOTcF6G+CAvMxDL55nkYz+Ev0dqbvzZj1mKvkcR9RTq/MydB+HVJ6P5mTB
eUGb2E8mFXbyPvuClvBBfcDaFPCoEc7oY/yvD+uV0hifuoBPtvEF763m9bli
Llg/O32oa0rDuYHPXZAXy7UZ8df+F9CNtDLQz/aYL+taXgDnPHWBva3K8533
prH/jwv3qQ/ucy8NeoB7LuQhfbj+UxHHbTPQPznVh3x7GvNZBuxbNfI/6vxB
zU8Z0L1c8GFf8VTEj4MM6nN84TebpTKOZr/QEcR3Ni/ATzZph/v020Ie+IXp
f/08Nb5lP4p05mW8Ddp/9gGek4o4eomB/aX6CurzSVMRL6i+AZq33Qzc8iyV
/dVlXuMdX/B7nmnoT57jQj7Bh325U9E/vK8LeInfNvH86xTYzyBn/N3Wm4CX
PJOBS+s7Qz+fy4u4Pol6Dyecw75jI/tdJfKcQSfotJM34n3mSqZuzRn7osgm
npuZApxWx4n9tL1wfY1k8E6dHJlH2wg7cC6ReR/2oQ31Ak5cmsxzFhyx3mps
Yt4hBfHvUeYF9vLcuuasH8ntgLyPuxf1A0noh3PYHnp1ay/4nb7J0Acut0f/
xtreeM4lybj/3/bAOR82ElekAJ+vtPup/9d1RsnMX9ihD8xkntM3IwV+RPXl
0P0WNrJfU8rPfI2KI996gmdolgKd+e7W4NPOefK8zWTT/85x0+cneUB3GpUC
nLaoFd5nPU/kI26lIG/+e0v4zf/W/7QDWn/ZnLrldcR1SeBPBjTnfl/HflzJ
wDPNm2EdLl9HfQh1XFWaoi9Q1hrg8ZQk2NvsxuyzsYb8WCLrARuBx266in0X
nwPfWhoiH1dpFexAgQTYkxkNqdd153mnCYynbJkfcYeeIuUZ9DCBDYCXfnXn
ufAJqIv5VN8CfQjPzTmRQN64HutNVgKnj0lgnFUX+sNaK6l7fIb4t1pd9r1f
gXjN6TnrFutgvRVYybrd5/Djjeqwb+pK+J1Xicjfqfysji9WANf5P+P5PjVh
nyPdqPd+Bl56Yg3uCzfWUyYAb8RVI05YijxCf54f/VdV6oGXsB+RGfrqYVVY
x7GY/Qri2e+oCnmtJewHZgZf2rEy+NsRi2HfJrGuNncl8G+tOH8knucyV0Rf
jvmLmLeKxzr5Wh752ZKLWH8XBxz+rRzPF1sIXP1nPNaPqn/XOJP1X3XjiJPL
8Nyu+eBX2sXBXqWVJv5cQF49jnijFPoX+c9nf+844A11XpJuWzifOJn1fc1K
YF//MRdx05mnWP9hxSzovzeH9Z1PEW8eYL3Y0jnQxRWIZd5E4gXFj/WazX5y
MchfNKG+ovws8KXXo4EfetmgvunETPLt0TxvtxD9PvtY7otG/rRtQfjNEjOA
M6OfgK9OYF/Q9dOAZ8Y/wfrfnw95Db9pPHf9Mexbtbywe25T2O/9MXDUXmv4
30uTka+cGIU4cX1u9OvYPgk6jazHsFdTcwG3O03ieQqPsR99rdA/p+IkxLMq
HlRxb7FvzN9PZB/Lx9SN5/C8lvE8V/wx6xM/IW65P47ncUeh/iVfFus6x6Ae
Pzf1S35vyT+MYX+PSOqT05lvG8V4PIK44gXxxAjEQWFhxDnJiEvXD2P/yDDq
qRKIj4cAb5tDYD+/xDMOH8T4IgR91U7EIj/hPpDxZjDrSaOZX++Pffp3EOxA
rUjwFCX7Usf4gPnZMMTngb3gHxMeUG8QTJ1eT9Qd/8Zzdv56CD+x6V/wzdn3
4b9+v8N6ue7Ig2ST92t3E/z+zb9ZZ3HHxHN42Cf0b/bJuQuclnoJ9ek7urCO
4y51jBcQdxXqwv5LtxFf7DkLvqlFZ9YR3KZO+xT5yj95Psgt6vCPMS/yO/ja
grdYJ3uEupPfyPveJL/N8+jX/MJ+jDfAtxfn+YWH27Nf43Wswze72RfAhf0h
r+H9q/orzR87USd4Ffcfto19UHnuufU16gR+9BFty7zSFZxrP9SLfRVbIS9c
8jLPU1tLHqoJ9SrncI7POTfw+93rsd/ASZ7fPZc65yrg93b9h7r+fbMZt1Rg
H629qAfpswT5idRaPN/hP+D5DmuAkzIasu/Ecfi7MZ7A677NoOtcegr5iLne
1BW14Pc9zTzLZv73rVkveQbfd5gfnjvLnvvvPHmknex74ED9+VngvXP+yH98
dgZPPJ3n10cE4LuccmG/mvM85+gg+Ij17eivL5LPPApdwvSOyFvFX4buqDnP
50r+Fc916grihVOnyUf8wb6LV1GPP/s84rpanXD+acXr8CPHL7IerDPPjbqG
9bDnOvn3ruyjdR32xPEmeN2HXanPvIa6+613ee5FN55rcJP1mA/MWucb1oM8
uszr+q0Q8H31e1L3fot5wFCeq9oL36fnbcQvieGI30b24jmPt9DfICIS679x
b/YFusV+uU/4/frg/be8DZ1nSAzsS+6+5JNv4/oh8Yh/+vVjffEd1mElsE/I
QNaJ34N9HpXC7zIY/MnCB7QbKezvOpjnI99j38sXwKmNBlNXfp99wl8hfj43
hH177oPv6p3Jfm3DeW7RA+D8ie/Y/3c46unO3oOu0ukj7LDiY/W5JQ+AW3pl
c72N4rm0D3m+3jfs6zxjcM58UBC/uxVwWhbrAjoFg99+n5t6iQmMNx9hn26y
Zp//CewXEgI+yiEv8+8T2cc0FDzYy7zM/07C3+8YCj1/cj7oJBMn8Hz7R+zj
lB88wJiJrPt4BL9foCDx9iT29QqFPf+zEOp9kiYjXusdBp3YUhv2UZyC/j+2
4cBLCwujT2bJqexHEgZc9KwY9EgPZ0DH+1sU7O2x4qgjC5zJ/F0E4qxfS0Ln
0Hc2+0ZHgR+oWIrn885BXlHxzLpfcWngt45z2M/kMftslIHeptA82tUniK+H
lgNPW3I+9sXpJ6ifnVMO/aa2z0Ndhu1j1K0sqUB97AL2mYmG/sq3InDmzIXk
P6OhN6hZmedELGQfiBj60yroMxbgiv11Kwa8wZGq/LuLsM4PPmWfpWrAgecW
kfeI4bls1Vj3tAg6z5Ux1OdXB68V7Qq8UC8a9V9bJS7Q9fyu5GeiwQcm10D/
wymLeL5tNOL0wFqo07dewvMWqaNuXQf1xYrvVd9/ZSzwZGYd3Cd0KfXjsby+
Hs41GO5GPX4s+1TUZ3+8ZfTjJvi7T/VYL7aMdTZPWV/ZAHFx12U8DzeW52E1
YH/OZcgLX34KnJNsy3PEWLdVw4T3eaIh6rw82G8qLpb6n0Y8L34Zz/2LxXdc
2gi6Uwc31os9pS6uEfriTuA5YuueQh87qgnir+Ir6Idj2ReiGeLrFyvAw6wz
Ua/YjOeqrERcsD8W+p/pzX/y3vo9mqhbbkF9lzv7KsQyTmnBfm4rWTdtQp3p
JZnXce9K+JNF/F4tWkGPV24V+wuZwMf25vnvgWuYJ40nj92G8eA66B9WWsBr
ubSh/mEN+yrHsW92W/S/cl5DnRLjvjZ2qEN8ILhG8+/xWCdl7Hle2FrqOuKJ
i+xxfad1rKOKgz450R46tKtr2T8wHv3qyzhQJ7kO+pwmccin93aE3mnCetQ7
bJHrN3h6ev7jCF16o/XsaxLHvnlO+C6uHoyzzOjnk+YEe2LrST9u5rpyZp9A
T+LWZ/BTV5ypV/HE/adaiEOcUY+80wM6ELOZdsaZulYP6J0qmqFLPOCMOk0X
D/bvNTOedUJf3JB1sEt2cexj7Iz5I+tgT17GoT7oOHndGeuxTs7Ggd8o6gJ9
bEsP5KUnxsMO53XhOWge1DPH0465UJ/swXqWeP4uF/BgbTZQZ2hmPa+BOvro
DTwv3oJ9qs570v0TNkDX95V/t44L8oDNPRm/xyPO+sUFPGR7T9YNxbOPgQv1
+Z7s72UmvmIfzhaejIPikQd/5Ezd3XqeZxGPPiq1naFbVjyYin/PxPFcCZ5P
dHodz/GJA59Thbx6/XXsxxULXqKfE/mQdTyHIQ59OWKcyLt6AH/6xYOvm0+e
8+5a8l1x2O8rHFCvOmjtT/ug61sccB7f8rXImy83IX83w4H1F+vIf5pQ5zvX
AXWsiq/T5y/H83fZse/0WuD53CbqA+1Yh7KGeR8T+k1NtYMfmb4W61w9p65n
aYu8yYHVrHczcf+2Ae99chV1lbHsq9wa+aBh7uAha8eSz28N/dX51cDtBcjn
DOb1e1ZR3xQHPUCnVuhTUWIV6+n4HiJbIo/m6Y66gIg41HnZteR5ZO48py8O
vHrhFqx7XcnzX+IQV9o2Q71Mw+XQPZaIRR/1ws2gSzyznHG0CXa7R1OeL7aC
em8Tz2tu8rMvunr/xeKAw281gt51khv0PuOfgve71RD5O8+lwKVPYtiP0RZ/
tyzPxT4n/tpb6e1sgZfsl7I/WAz4tIENkL8ruZT5+hjqJ+uDD+yyhPnoGOhY
sutin85ZjHx6zWjouw7UAe6648p46gnwQ0Bt5Ee6uaLe7dhj6A1m1QaPOs8V
9mo18+w+tdAv1+RKPxJN3qwW+Pa9i2GvGvJ8ZKuaWM8Zrqjz2xmNfF+dGqiX
X7wQeLhyNNd/dfBOA1yhz5pNnPaxKs/JWsDzaqOpR62C/p+x88n/P0Zee15l
2P9vc8H/n49C3cp/lcCndZvH+0chnu1QCfxtxXmsw3vM+qAKPFd9LninYVGI
H3tXYJ3IXMR/4x9jv7Qvj3zKwrnUmz1mn9JyeM6Ls8l7P0adu+I59Tm3s5jP
jTRpHuhSaeS5ds7kfaIYD5aC3Ts4k/WskXg/T0oCX02aCb/zNJJ1VSVor2aC
fwuMYP6xOHQXv0xnPjcc9V9li6Ffzddp0E9FhIGHL18Udehnf8yH8/zxwtTZ
TgPfMDWM/XNswKPu5jk7VqHkkwsxzzWJ/QAfgTfLLMD+rhNZh/gIPMae/Ozb
MJHnXYTgPgl5sa8PjmO/+mD2ZcqDvP/C8T91QTq/YU37P5bxSzDqDoblRh3N
trF4zurBsANeudD/594Y5q1C2J/KivZwDPMmPBfG6hvX8Wjo+/qFIE+07jPj
vZHk7YKoU/oA3Gw1HPUd3x+wz9g7roNhwKWHH6B+8MNbnuM4DHZpRBBwxZ9v
2A9xOHiOK0F4/+1fkbccSl1EEPv2pEFPcGEI+4E8QF+gcsnEzYP4vR4AR016
xv4yA8hL3EV+/GEc8iWO/dDXqPRd2MmzMdAd7uvD/qW34fdvRvG8Rp63XuMW
8Xk44q6i//J8pBusXwvlOX/dES8Muok4IjSI9+nGc6JukJd7wHMo/+G57TdR
t9LsNuLnxV3ol6+x7+sN4M7lnamHvQq8kXOV9S2dmUe7ivc59CJx+R/gibte
Zf/S84xz/uB3vwo/WJ/ny7T+jXzXFfi7cSfx30/6FTz3gcuwn92OgR+0/gV9
4XwuM79wiP1L27P/1UX4kb/2g58c5sL+HhdYT+0PHrC8M/x44wvY7/N3U9fq
wD4MF4hv2a9njR3qVYPPQd/1y1aeQ9QaPGWL8+zz44PfeaEl49+zwA+WjcCX
Ps3Ix55lnn0Nf6ct/Fr1E8hfn19KnUpN4PN3B8HTNp3Lc7AqEif7oz/n6Hng
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
Hfmc8egBqQ//bS8ewug48uYuCN/4xRxeKHP5qRfUF6e1k0757kzmnu+AS1TU
dUYOzCz1E0vekW6lrRl410zpbq6cF3/GvZLPOUs44Z/ndQ780Fo5X9/N0Fyg
13n8HFrD954l/siwC9Jp/tVS9WTXGeqbTXnEBh+tpeaS/WbAQzsPj72F5gs/
xaivb3SBfqS51lXUDPWtuy/o3vy8GXPh6fgCXsBXqik68enCMd47L1760Sbw
6mPA/89rvX3diHovGl3VOfVHHzYQb+FhBD5gZ+kLXtM6DK3Mgzit976A3KIN
0/DnP635zi91ydmcqvN/yUl0pnX03p9Moi8kx7l+beHGSyapfv78OD54NXW/
N56ofTrhOL61NehTJpKnc1z1bVB11cm1ydfYehwc7BV6gwn4wx1XPlS3V/Jz
8Q9DZ3pS58+Mf8QjKh+PrueE+PZvPNc9UThW6y3pOHqoJ/KzuEvOzvNj8ids
8ER+FjvHCBfKLMcn5HfVN8PHCge9dRye4S/i0fVDDz7tOH7yP+OLOlq8HdNz
MOYiP+P7P0a49+UT0ilM+EH9/MZR6itflGtO9OBb8JaR4F3H8We4h6/xMJ2r
r9GnP/0CPdsQ9f0tj+p8+/FTrddVg/Wc/I+QV3hL++1cJU+s4ueGruZD+CgD
8DU8rPlXrw/QNfUTXpFQJnw78Do4Ul/hpnsO4w92TXWYS19y4sqYB13ET62X
dKBxpbzf8+RT98QHvlQ820/P4ksJbrmjVDyuv07iZ9pdvKxeh+7Kd+O4ntcv
3cUXHXgIXv0ReCchun/blej+dTik+u9aMPlrB+B/HqCODBCO1OEA/doerYeb
/qzz/dp3W3epnxnpB39zPzy9IvVpb/uie9ovHOzlNvEnOnmRX7ZXPI03tpJf
6IW/2T7dj59tgafuDm9uH365G1Rnj3MR36Z8j87zI2vJgXIAJ9zNe18l/K2J
LTl3xaqfLdN1b5lbSDe87m3N4/5Mlo7631Y6x0I2cz9W3Pcmndz7zcST2ZEN
b+FNcC1z5n0byfldQf6uFbnPBeRhZVXp7g2+3nZyCnLBHRz0vcbuUH+XsBGf
eifhsd136Pm/yoN/4wq+UYgP4VbqWvevyBdlnxYyF/cSfnK9WPOIkUXqT455
CW+pU0Sfskfzsy0+2i/9duI/c1D//cwAcgx3i9cdc4i6KlB8v/CKnxvPsYzc
+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
3z4eRF2QpXnE7Y74hg1GB5MtHdN/FuJZbRgKPrYWvL2T+vfdQ9UXn17LfWeJ
/+EQ9dddslU3PgMXdRumOc74ddq/Odbi5dbAF+J4DjoyG/riEVXP39Dj28IH
GKk50d4c5ix24oWeGoUP7Xr6azv0gGNUJ9yjHj6EHt/kD2zwidfDf3PQOvx7
NOdNrnD+zx2ktw0fjQ5ivb7ve47q7xaPAb9ar7lGLSf8uEZxnueqfih2Up87
bzQ++jn4uzprXvDRKHKFcpjvuKjf3zGG8za3KtfY8EsYCx61gTrKTX+/9VjN
268zp5vuJv8Nl8rvlaP9UuYmHeLk0eQl5ej9HnEnH3m0+vfVOeSSeJALPFb3
/085Vb6jBk93vOZl1TaiR/aW76KJ12T43mwkZ81bfgI+E8QP/2mD6udCb50b
v47XHLnxevVxDXzE+7IZT55sLrpOH+EM349XvWaau5nWeRsf9V+dxwkfbpPL
HMFb78V/rHizU9dpv2/w0XM4O1bnarMczanDfKTjSx6reu23tcov+8ZHeRx5
Y1UP/LUO3ZOPcBjnsfC916K/9sX/cxw8wBz171m++NeNw2c9h9xAX/GCOowV
T7VpDr7cFT83eJRjma+tY/7oS97HWNVR5TnCVUy8XEPXOh6fpVy9l2m+ml+8
No58gVzhKlt9yRsaTx2dq/N8Nzk+PuPVZ7nmCn/z9cUfexy6pRz1I7/5iHe3
Zixz2HXKVTf5LRg8A55b27XMiXy0Tv4Zo7rm1FrwEx/lo/UZq7lq7lr5pcRV
vEdD9zdaOoKt2dKBHiCv/J9R8MGy8M3z0jzo/kj5mZ3MAlf31Fzv8CjVET2y
ufc9hOeb+FEGj2KNzqWnlTruETp/Hq4WXyXPQ7z3v0fiN5+luckVd+Eth0Zq
br4jCzzBXfvlvxHoAbOoZ9zIkRmh+nbuGvzT3MDhR1DvZwmPsnUjH2Sk5vDP
stBNuOGfMKpq3Rp5I67kj4+Ch7mWPFZX8Z8jRlLPryXH0FXn55VR9PHrdJ+a
u2iffjAS/sk69WsxzuDnI8kLq/g7G005W+TTmfA6A4fJ0XMLcxJeZMoXNurk
HOEYTZ207zaPFK5Qe71yoKY4yKeieITWc3oOfA97dOLD1YdVz9Hc+UM7fMtH
CMco4tzLsanS1xj8LdaVqzX3whBy0qm7DnbW/fiiUh+UrfP/Fyvh/8uH4GOT
LXwp2Upzzz1D8ENby1zeUr613wyGX5ENv6sT+vrB8IKy0bdaqG65NFg4Z9Ba
eNQdhW/3GaR59Mhs9e/vdECXPYh9kcV+7yCd0YuB6sPar5W/68b22i8pg8QT
abJWvrUfm+O/NIg5yDru93biqd4ZIJ7Jj1n4PJiBp/Wnrsuq4m0a//8A/n42
fr9t9PwTBqgfP7+Wfra18FXTz031w+ls7dOOrXXOxA2AP7OWvKSWynuqMwD8
cC36iJb4fPbX89+3TrymLS1UP/ccoH6rxTp8S5rr+WzqTx7TOr0XUw6R4X9G
vdo+B1+vptJHLOsn3HvCOtX59k3kJ/CqL76Da+WrWaex5vVt+oJXrxNv7eNG
une69tc5/DG4zZ2G+l7F/bSv5+XKH+n1BuCZ/XSOmecINyh4jXzSyn93ndZJ
YH3xTmP6Ci96fZ14qrPr6nN27aO52Hfr1I+bcouM79Wb9blWPi1bapPL1hvc
ca14vD/Wki6sU298HNdpbt6SPKPBPclvyYbXWp35dQ/x5Btlqb/zeQXPqSt1
6WryZf4V/j6yq+b4d1aRf/dC8yGHEOYUq8RrSngOPttFOPbfq1SH2/ypPqQw
GJ7eavEN3vpD9fTtLuiI1+Cz9Bs63y7Mf9fovvv0keqG17vonLRZg//hI3zV
uqgP3ZglPCTkoXSki7qCE2RTdz1AlxqCPnctfLnvdN5Fhui+MPVTpnNh+tfg
rkHqvzOzhIueu8c9GoQPZJb0jLF34S8G4DOQrX1a+3PpJY/5C0+oXfH7Bt/6
luZ5nX31PY6t1u9//5HujxKfqudm9NUfaP/X84Kfv4o5y3vUnV7w81erLlp8
Tbz2pZ74YKxR3XX7Er6pHvAuV+t8+Auc8xN39D5rhLffPyee51B39FmrpaO/
fwZevit142p8d0+R7+gqHlnr1Vq3C8rh7TmT57IGH56j8ESdNSdatho9xWFw
IfAo0+cxnl8pvmmO5JKvVt+9dz94sn0VLiSfBnRZtsydV0o/ZVeMfslGuLfP
KvIC3sZHzJrcnJXwNLaiC7Uk136l5iwz83W+n7LU3/9vJfqvzfC0LOAhrMIn
eQP5ah3QK68S72LpWvmxjm6nuv3nlfjVr9I9fayNzqXWK8ibzmR+0Jw6IZNz
chF6mNfgmbyhe2RlmnwJ+tcldyhV/cX4dOGc55uSd/Y6/n6r9J6GttZc7O10
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
5Hk5yqfCOYH59Q/kptjDM03QeWXxHTkrDuqD6iWi/72ve2KFvertaknos+5p
33Z0EG/HLEn4TOAd9WMd7OChJTKv+QJ/WHvt69tJ7Lvbqr9X2uHzNkf7ffsn
+GraoYedLZyt803812yFWxydLR7yzQ+kowyw0b25LwlezXXpbe92Jg8iSX3B
4Guqa6M6C7/pm6Tz0PkyeauW7KMknbd33yGP3ELPr0Wi5v6Dz+rz/9IR/DUR
PvlJcis7wOdM0Pnpf0J1nl0H/P0SNE/xKSePpgM4XiLroUz42K/m6GiShAO8
VopfpLnwH79E4WmPDgivXN+O/ZukfiR7H7hMO3jOSehNduvcTzZDbz1H9+yO
neSYmElPmlTxc+O5FOGn05Z827m6N/vugI/YlnpjnnA/m23wsVrDn58nHOmT
fPnv9GktH+k68/X5929S/Te3BXyP+fhVrtf86Upz/XcZ8/Uef13L+22CLmMB
uoPV6jNbN9a6+2ie6lL/TPDweuR0z9ZzvpiGrrKaPufdWeQopYFH/3dP/NEY
cqOWqr55VRt8KxZ/6dX4azQEL0+STufuOvVpTs3wg52ruu7vDeL1ZrXQPRs6
X+steDN4ZUt93+h54hFdzsdfrBU+tfPg3W1l3tZa9W3NudINrceXdWNbnU8H
57KPivDHbKu+smw2OoLd3Ddm5PDO1vf6eq94dCPbMcdJwv/wgM6dQ+2oT5LU
z/YtFd7Xp73msL8nwr86jE7JHB1zovD57WVVeKyBk8YL96t3kjxpi6p9YfDg
T+HXYaHzbVa8+Lozz6hf+rajcHHfePmPtTlHvWLB/Dee8/C8+CsxFuL5p8Xh
x36RuZqF+InTYpmfXmbeb8F8bZb4CY2uaP++7AiePIO8cs6f1E46Xw/PJKfp
OvxSC3D+GHgy7+s5NuqIP0A0/mMf4o/ckXUUrflO8id8r06aY1yLkc/SL7fp
QyyFF74To/nF6jtVuLExr5wO3ngPvr41fccMcky+AXe1Ifd5hviZv3+j++OW
tfqsujHk3X+n7zPPGj1LDL4rD1QHDLHBtzhG+sHzPwlvd7QRfyAihj76oeqz
MTZV39eor35FF2/L/R5N3v1v6reb2YnPfzRavKnoJ/CH7cgL4HkOfSrdWjU7
fZ760ep3Lj/HP8FWn+etaPk/n3pBPr2t5gLTo+EJVOYx2cE3jybPi/lplj39
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
KkdgpvTmGewD/8qTjrNSORfpynfL1vkyg3/3LuXWvZwNn2LndOYCV6bh77og
m/vz1Uzp/dOoE5pyWNdfVoqnlAruvTJHOqZKrccU3U/NN8dWMm/dloIf7NO5
wtur5DebrDlgjvQCs4SXJrEPfJrN3MpjFvyxOxLke6B57pczqas/iGcO25Gp
uWSl/J/jeI7XZoqPM1O56rG8n2+mK7dlpuZ3MfIvShe/cab6hWjWiyNdfIMZ
ypWIgmd+n/RWPWZQV7hG6lxOlV/lDOk7IrgPNh/A8HxnyD8hnH93Vhp97upK
6RbDpa9Pl8/nLPrHAPmWL0/j/tRWSgcdAs5v/7sGN5+JPiU4hDndjFTq1t6V
/J5HguErNqZRJzw5i77+6yByjsrT5V9dRW7aM4Hct+/Swc0mVqGjjBM/c1S6
5t2zwTF8A5R3nw7e1VoF7ve8f43OVflLzwHnXNKlD0qnb42fwz7j60ddtEB6
W6e5zGX2WfVkF//BzN3mcN7d76O5SZrmYnOo037yls49XTjwHPCQ7V6sIxuX
s/+7GXOpP3/0wocqPZM6dvh89sMjnvKDzaT/9logPMqqq42vWpr0O3PxEXrY
Tf4nqfJHnQO+5OyK783QVPHq5yj/2gm89Pkk+YrM5j5vukT/m5UMztxTdf5N
F4XPJkmHNUf8jQvwDiNS8Ifxmiu97QXpLVM0B5yn6+fk25IEDrFQdfu+0/AR
hybBG79vTncug5mfpCinZS512vZT+Ll8mCT/z7nUh9nN3PeUJO7ngrn4DIyt
F84Yz9zqkznw1WPqqJsvxINj95jL37vjuHj8Ccqfmc884sRR8ISoRHhKVfPA
e1OPdPe55j2dL/9G9bn1Cegp7XmKmavuF68uXufaAvQ41X+JlxOPnvKs5iMv
/IWe8NN4nm/+Fcp13cVz/Ve8chgvFy96p3gncfQpRVeKx7uD75kWy+/93+XM
C57cLv+jWOm/r2C+fPc27Rex1KUZV9J3v/yD9EvRykm8Ar3SsW+Eg0VJz7pA
ONVW+ZdFMh90XIFfyoAt8huMpF8bfwXP6+Qm+axG0N9/pvm+ywbprsPouycv
oJ5/STjPX8Hwnnw031/7EX1pcSg80r8XgAu9o3yZ7BD2vfbLwaP6rQHXaAym
Lyi6XPveauGJgfIdvVw6nXeknwzWOXsl+9K2N1kvRwLBUYuvUr7Ymzovg/X3
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
wXLpnqzz0d6mvkmg/5tZTp3cFMV8+fYE+WGWd88l7Trn9kT2MbcK5i/pkZoH
JcB/2FFOPTkunPrqjjjwn8MTqA/9w+G3XxvH/DGzQj7GYd31huHVVuBH8Wio
8g3j5V9UAQ+2Opj66vY4+l9v7Yfbg5g7D42F/xBdjk7wsiDp9OOpA311ny8E
ip+fIH+pKehrygP0O+Ppg8ZOYn9o8sdXuTheflyTlQfa5Q8fz3tYOwkexXo/
/IHzE5grnZhCX/mFL8/rwwT4Mq9Oof4c4Mt9npYo/+ep6FaqfJh/fRUvfZvq
qD1ezLkq4qQXniy/HS9wy6cTlC8wlTq2l1fNP7wRo7e+jPfwcU/8Qr0S0RV2
1fn/58FcZnuC+BfTqMced5PfQrz8CKd21+dm/cWC1301RXoxZ73PsfR9TVPw
gZl0SXVzNP146BTqgVsviFcWLd3nZPgD4zqF10XrXJii+dp5+btFi/c4RX50
57r5eya/aqr25zPSz0aLTz6VfuHrNvVlXfrQqbwPTm06t2LUh00j3zm9hff7
9Wj61LHT4P+HNYFL/h2t/mgafPL/nFQOUaR8vaYJ1zohHmOUfJ+mUV/5Hpde
W/yru2ZonR7mXO+MBD/ZOk28gkOap0YqZ2o6+M+r1XrvI+VDNZ2/13Uv/J6f
w4WXzmC+tnQ397FXhHylZlDn3LpbfNcI1uNxzYmG/qm84whwoPpKzpF//w4P
6tlw9hmbT2J4CtupGwrD5Oc3U3PzbcLBwuD12HwPs4//LN/JcOVpVEnX9r30
b6HC1TXHbPsa3OeGEOHBlfLb/wqcaHSw/LtmKXfjS+rso8HdfAaTg/6F9JtB
6q+rxIv7jLmFje8Z/XuleOkfK+fPX7ldlfB4j36gnGV/nXeah7qvU360fzdf
wvhArREP2V//f5X65dWsl2t8pYOeLTz8LfEdfZVzXgVe1/oG+9SXDvkTzJFf
yqpuvNHgmfM013tdPEA/+d4twP8w5n/K7fDl7xt3uerkV+VP6y394Hye49xX
5dfsoG68SvrHpKXSvXoLD7hS/PMXhMd5qk+5kvlI2vOaK3jw3+2+is8/+6T4
pq7i4V+h3IpHqOMXXKyGJzFffumLpN84U23ej5167kWLwK//aKs26/m7afC7
1j3EOnmrs5rcwlnywXua/WK5q/67+fR3Xy/Wv+slv4orNK9/UT6bXpqnXMFc
I3CpfKK95dexgPlU9avse0/7qC+Q/uLEa+Kb+nbrYgw+/rrqPH+e+5OXa99+
Q3o/f3yEHppPP3L+Hd1nf+GC8/mdX62R7iiQ7399vvgh6+SDECR/g3nKJf8A
3DMjWPqCucqJ+JBz4vMgzTfm0Mc1f6y8qGDxaavIa3PbyN/1fLD41bPgDU7d
qPlLsHwpZ/I9O76AHzggWPrQmdS3ZZvhw90g3my/mei86r6Uv2qQcpCmy1/0
K81lg8S3nwZv4e2v4c/PCGL/GXEZ62KdfEQ/CQQ/XDQF/O0a5cjfGEw/9cZU
5c/+yLrYEqSctMnUmdG/yMcnUPkdk+Vz9St9+Kgg4TCTwOvO/U5dflewePuT
NRfepZy8UPluTdY59Zf2u1Bw8sQpOkf2wdMdGsb5MncyuRK1+9GdvhXCc/9P
BX5TLfvVnwSL/zaBfTi4RvyDEPlclYP/zD8s3aNw3YAK6s/KWvk+hMFz21Eh
v/da+SSEiB84QT6uJ+TLHap6eyL75NGT1MevhKlPnMB8+Y9G8cDC5AcyUf5L
Lfz+EeGai02EhzC3VXl4YcxDHBPx/7+x/YD0RuyH6ydQP8SfYR3NDgXXum68
cv3OUgeMDpN/3Tj5h3TQl27X9/88HtzPrmfM/hOu+ed4+JlHneAf2uevmYuN
V+62E3rtu8Kkwx0r3yFn8KXLQ7U/jKEOPOtCbvtvYeI5jMF3Os5Nueqh4rmN
AfdYKRzVntMZvuNI6andqEvt9WjyzMrgz9zhoXyoMNWNI+lPP/WiL1sXQV1z
2xjmyA5veFzxEcohHKU8CG90QO5hyo0axf1PcOBX+WC4+oLRnOOlvtyH6Ajx
AMcwZ7/dDx6CV6Tyi8foHPEHx1sYKT/msdTPmwLg5T4QpVyPsaofguRDGKX3
ZKz8KIJUx0ZpHjIKPez5YHzq6qKoi9zHKN8kVHnZMcoTGav1EkadvCZaPLox
1Nu2Xt7gqTGs66wx6CsTIuBbVseIVz+G/eSHCPDA5Fjy9f49Gny1KhIcdVoM
dUrdKHg4vlHS/Yln/sVIfHjCoul/V0UzLzo4Er/uBTHCx2LBxz4dJd1lDPzA
+TGa340kd29hLL52+2OkoxoJ7pejPNxHYsTHH8nfa+c62d8fGovO63AZ9fCC
BHTNx2KlcxpJ/fxCAjq+h2NZN85lel6J9CM3xKpOL6O/uy2R53sohrnNqhG8
D+vlI2f7Yxs/3DL5QiTBr7N1AUYfO0I+5MnklVwZQ78wpet7Unm+i+PZP3aN
1P6chr/uIwnUO8NHKz8oveYffxWzj1n381nbRzaD37k1Qbz90fCx92Tw/l+R
IP7+KL6nKpPcrlPqN+8diR7h+UzlwMaz3geUiaeRrZzuRL7n6EjqwMnZ8ldM
lB5hZHdOivGp7NILjMQ3dVc2+ug/Eug3F5bBQwvPwR9jYYLq8zLhzzn4rYUl
SrdSBi60PBee26+J1D9zR9F3b8qlP70xCR7jrJHwFq7Kg0e0Mkn5OKPoOxbL
13RFCvvMZaPBYa7N53l9l0xd3TIKHOnlfHzhClOkixmlPLsC3tuSFPnmjabe
XilcsTaFc/nQaOFIXbzHZPqPo6N4Xi8VqF9OZV6zaDT97z0F8OI8UzR/Hq0+
ooD7UJDSvb+ZOYZ13f57dqXIJ3OM5gX6/K8pyv8czTpNKRBvVnjaN6Pxm71V
vqzXp1KPFIwBB/AqZB0dE763d2w3P9bMg1Phg40fy7rIle+rrUcw8/3RrMep
+eSV/F+y+AajqN9K85Uvk0xduXMUecp27rnJvUruft/MuZwHXvdJovxIR4mH
mStcMRFekL2+jC9PTo1wL+qZmjLmzsuzwVueimOf7zlCvvSaF8yJU/7gCOXW
ZeHv96845bWNUD+Sha9sWJz4KSOUI5ypnKA49Vul4stl4GNg7ydmblnK3Hxq
hnxTY5WrXsp56pshPnAM/+4DpeqX08WXixEvabjyidKEF8Xg3zOkVDhzOnjp
ujj6jufL0PPuT+2ehxo++Qjq0sdSus8dk2tZCg7zdgrv2xLhLTtHMKd2S+H7
m6Pl5zmCufP/kpm7rY6hXr6iTPO4ZHDpZ2PFQyhDf5GRzPxid6zyg0ZS1/W0
9luDH8Sx3veP5PsPJoAbz4xlDv/ZSK27eOWjxfA7F5eh15gaB27pFs37ubGM
enV9DHzjryPBXe8Yge5yQ7RyoyLkGzyC+nltlHDjSPiNTSOoY5OjuJ93Rsq3
uUy+apGcgw9Eqr4qkw9JOHOrteHiB41Qbm8YepPOMOUklmp+Gsr9t/MsjA68
DP7tqhDlXoVT51aWMR/8NBi/CFt3adehm8vAH54NItd7dZjyhUegxxwdyP4f
E0o/NEG/5+sA9sN1YcKfy6gbvQLkUxEufcEo4cN+yq8Pp17aNxJ9XKo/ftQd
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
1aFcH39wmKuGMq+8+xzr4TY/6QWHUrc/cFZ6QH/5MQ5j/888ozxjf+GIw+Wv
cop9/0pf8XGGiC/dJN82B7jgpSHqWxul9/OTXnMY+/+8en5nva/ynYdLv3xS
Ouuu/r2UdWfn5Jp17Se9dRl17IVa+fn6K2d8pPwojoJjXBmg+zSK/dPnoO6X
H/yBd8rI+w6t5vweI57edWXM63/cC45Z7VCeUZn8xHahO7VxEjNPK1P+1E7q
wt8c+ntHKi/vD/FQHcKZRvE+dPwm3xNf8Lz4MeCKP+4Q78hX+M1Y5jJR29T/
+ihHYLTOux+Va+sjvfxY6tXd30lv78PzzBhL//vp18zpF3uJPzBGvgRf6bl7
K3d9rJ7jZnD2+zx1LozjPd/0ufxXPTmnLo5VXfSZ8EQP8X3G6Tz6WLxfd/kG
j4Wv8tGH8rt359z8fizn9cz14Cp3usOz/WGc+MPva/27g1f83wT62b9Ww9f5
w43n/sR45Sy8pc+7KC9lHPuPrWc355+rcIAJ0jusok6615X3uqVcvlsr4ddd
66Zc0QrlzvwPnKLcTby1KZwLS1bIj8Bd+MRl2p+XyZfQTXP5acKdXlF+lhvr
6Mtpyjd8SblIzuzb46Yr93OJ+HPOyvGeIR+D5zUXdOL9bJxJHXjzU9LJXKg2
+1n5dPqd5Y9yPpWdq8bvcxo8rs33grv+3FJN/l+59K3/lv9kY7XZr34eK371
w+KlnanGz2YS+Nh7T7O+Vlv/ro0jPDdN+ujFyuVx1rqcwfdveBGc80oX8e5m
CF9aSj33uws8hC+m8Xw/f0W+mi6ar10mH9Rl9EU+bvRBNk5o69wHv07/s9OD
eeVd08TfeF26ZXfti1Pkb/aO8rs9mVdmTVXdvob7nuwtvGcq87W314IjXPCS
bnsy+Tjr1zM36vRWvzCJ37P8A/nLe2lOVC788EN00UlewnvH01c6NvA9X/iA
04+ZiB/Lhg2cc794M08sG0dfPOZzfvdob96Xo2OV//WF+mdvnZtj2M9f2Szd
spfq/NGas38p/qKX9CnC685/RZ9f6ymfjzLhHlvpZ3Z5gJPYc3x7X/X+Tj4L
ntJ7lopX+R1zu9s8NBcepnyrH6hfX3fjXO49lDld2c/Ckd31fg1R7th21RPu
1GPeQ+FB7f2NecRST+W3D1P/8ofuv6fmfkOpV0fvUr3rKVxuKDrK5/YqF9NL
+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
S787kPlswU7u78Ou9OULBim393d+92R3+ubrB6N3e+s3zafduZ97hzCvueI3
8Xo9WaePD5Pf6a/CHTzAQQ8OB6f96Cfu769uyonW53N+kL7UTXzY4fIx/pb7
tsFN/iTDxRvcKr9jF+EVw9SnfClc2EU5J8O0z3/Bex/pAm5weSm+Gf4bdd9d
wP02lqK7aftE/bwT3/9iqfgMH4jP56RcnuHKc1lPnf3opWrw61Lm5ofeB4+4
0bpu8phLwQGeeZf109+63qUbMjrht7WfWtcNL6xM9fxbwves6/b/b+uDTD3x
JvyeTCfOo9LR8JPDVsl/3/q84UuN4b16dqV8D53QNbiPkz/5Su7DM8745709
EZ7P+8vhQ74ofM+nHL500SvocP57sZq8xYnyi35Z68W6bnSR5cIfXuR9tXFL
UxdMAj8f8IL4ftZ1c55Opn54+TnNsTqrwVumwA9/80nwRKfz1fCcJ9HPVj8i
X+D2avCFcnSF9y4S/6ChmryLMfCTv7+X9/Xd+mrzu28aKV7cY9Kzna5GRzVB
+bzPqm7oqDZ14vpJ4GCPvsBz/Mv6e41/hfyX6l6i35jqJN6XfDzee4V64hdn
+YdPVm7aa+JLOcM3T9TftXm58nSdhWNPlO/HKs6DTlfmsJ9VyAf4LeZ8C92Y
R9g+QiY/dbX8sNzkez9R58j74jt6iFc2kTrqk/XgJjbf2Mw5J5CD/PYHml96
KG9rHH1H5Uf0Az924fljNa/5WHM1d+WCjaZuf2gj9evnnuIpjeZcPr+ROvuA
R7cexKz7z5XX60Y/8kop86yITewP/d2pT94fLr+aL+mLBrjDu7T3DdPXbNH5
4iZ8eii4059bmXO1uuI7FDZEfdY38qdwZS4xeZD05j8IP3ST3nkQvCabr254
Yq6ad5WoHv5ZPH4XnVcD8JUq/EU+wi7cT9cB8rf/lf7kI2fmhlOKpZf5Tf4X
rspNKBYOvxOdVbKr+EsDyMn6cxc4YbCb+qlifv+Kverf3MRb1vmbvFf5QC74
VNh4mv1+z9ivnBLxsTP78r6VHhA+6Ko6vK/ypg/SZzpclbfSl31y7CHtby7y
P+kFL+i5w/JpdRIe21P9wlHl2TnLd8Sq3wwec4Lnl+6iurQnOL//SeXaOuuc
LBIPqpH9MMKZunpiD3Rth5vFN3KW/3cPdHwrlS//tbN4sD3ED2mV7s6Z9Tq1
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
al03flJF0hW+Dw9vehv4ia3LM79njfy4T/Oej+8jXfNq+PpRp4VX9NP86y35
rVi/0/4Znv3wPS56k8//ZV03fI7+zB8nrFK+o/U95n0sxsfgjZXwGHqd5nmN
KOHv+n6FfPPPgPv1GMi+fWi5eFRnmZeNGwJ+u2KZ+NPWdVNnDoGf9ujLwkms
7zd+JEPpH3OWSod7hn1g+zD4J/cskX9FO/vtQ/LTO/Cc8Hfrvtlz7ztKyY0a
8bR8q1vYP78u5b1KeBzesmez6ofh6qMfFN5YVw3/bqjy1O7W/nAYXP3nYp6j
xyJwxdsPC/8pVn/xsPjW9dX4vwyWr8vT+PR5nqoGTylVvvbz8KIWtIM/nBnB
vNJziXLa2qv/8Tk0/IuX5Ht4Wvt2qfz8l8nv5iz71cgRzLPuWo7P6u3n4HF5
lcIHsPXvpn+x9gGTX1OqfWAV/gK+1nXD4x0KTzjkHflOWNfNfi3d9DPvgfPb
/bLBD+U3ErMW3dGpDnwAfh2s/Li1yt+xvsecbyXMnf9eJx6d9TuNX+IAzosL
65iHpZ/TXKAffhSvfCx/6q5+v6/wgU/pf5qt6wbP6sN9nrhRvhDnqU9sXYPx
6f1C/qEd4O0be8tHaHM3Tmhva1f1Ug7UZuU+Wr/HPm9tnY5Zp1voE3zOit+r
/e3mraxHe98zPpf5yvX4Vn5D1nXDs82HT57/PXjjZ2eoi+7IlS/oj7r/XftM
Lrypz36WHuwM+NugHPwoFv1CPzPQ+rzJdc2mvz6+Hb3QnNPV/8yRzTn7O34f
/zoDfl6dDQ7f+w/yTpzPML+ozaSvSd8lXWg7f9fYDPnP79L8W+vxbIr6xL/g
7Qe0q55Jow+N36d+sl11Wqp0i3+zXr63vsfMaVLF/6wGr3OyrhudSDK8o88O
SkdgXbf3j9Yk4ZaHhY+38f48kATeuLpWeajah/smKY/sGPr8mtZqfEcSlJ91
UjqfNnCz7YnyLW8Qv9f6vNHPJsBfHd+k+U4rcyIbHzC8h2bOu/HWddP3xTG3
+uiUcnmt6+R8wmv64JTO/VPCG2P4/OJ2+bVa+5vhp0SL73Fac8NmcOaJkeCW
UefEX2lR/xiJvmD+efniNqsei2R/q+2ErxtkXSenCH6m7Ttk3+f7GsGre4VR
tzzghH65qYm6ZXQ46+UxZ3J+C1tYp6+Gwwd43wUe4GUt5MQFRTAnmuGK7t7X
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
T/qLxfjSJjQKXyqGb+D6rPaTk+AYzxbLb+oJ/A2eOAFPLKQ/uoxi6d/fP6r3
vJ/8G++Bz9y+nz5oQaH0DovA52/+WzqvAuHDD6N3fugo+NWpnvBP4p4Cb5lY
B68gph+6lbLnwcHWN4KjlhVLb/UiuLF/M3j7jmL62aeWig/Zwlzm6/7wBD56
FRx7leY4T/VDV75NOVMNzXqf+8iv6XXyPm9qhT/Qp594a6vk2ym8+pnempu/
BS73RovmLL2oQ3q8o+fVAi/luh7Ude+/C+/umhbO93WFzLX/vQZe8a0tzM1v
z9fcc6380Fu4PwPy4LHMWMf9abF+v/ENyWFdRH2sfV5zZ9s3z/5dz3fp4k8J
z88U/rOBOUVbC/PEaZmsl0Vd/hW6vjudfTJ18wHqqRbmI7YfnfHtVS5SuHhx
O1LYn92/kl9ek3DFZM13vkbHXdgsHpTmVh7fovff2Agu/XeC+F3fKje0gX7t
u1j61vu/Z//84CT7fHAs63Hoz+BO/prjTNHcMHa79IoN1LfOceAtLdvRGTY0
MNdYGSP92m+aWzVwLgfEwjvN/4P9IaiRedPIGNV1u5nvPNqgeiZa/tu74It+
VdfN3zPz0t34YwTXMYdaKR7Ipj3yQ64T7yUU/mHZPvxG9h/n/Lo7BB7yv/bx
Pv9yjHr4nHgOT/x9ANyntho/+wD51dfgD7PsGHXRiADl4R5h/a4/Tn/qCJSv
5hHlDR1jbtjppz7rOHlU3sfgC630h1/6yQnWxdFa+Vf4SS/QID+WY8xf7vGj
bvFrVO7dMeYjCx3CY5uku69lf/Z3MC9IaWHffqcWfKDURzmkrfKNOaq+21v5
IG34jb54FDznPU/maN+els/RUfp6h5fmTWe0fo+Ak8z1kN78rPz+DlHPVLvB
u+44p3rmEPtnT1fmO39f4L3yO6w5vptyTKz60D63/3OE/fAWN/mzOcO/uvMI
epxzbsrRdiHnd8oR6Y9cWXcHXOFXnDgMv/ETN/CWZ93E5zlcLT0o+9JWd+EA
h8VfdaUu6umJvtW+z6avdANX9/KCD7PkKOfO2268/9Ve9AVetdznK9yoE270
EY56lPPovCvr1NlBPtHOo/C0o13Y/8f7Ci/Ve7LMVee7HzjPr9b7YPOz7ftm
72tBXfq1o+ILufK+eQTQ94XWyt/bBTyhLgAd9DLr83bf+JWzePhB5HFsqZWe
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
fU7Frufv+lS40LFF8uNaxf35YovypxaCV/StQDd9Ux+466FFyidaCt54olf9
yNlt5GstIc/6hS3y8zyX+cu7fyqfuxcc7P3zwbEf+1X4bRc4z3Xnch+ivoPf
FdLKXDXlLPgP+Z8Iv62VH9cc/IX+73Pw8J/rOWefmktuyPQfxKdtlw/nIvFt
fkPnXtSt+eC5mjf9DS/OxqUNr/2CM/6fJo9km/jzF8g/eSU44fn9Ok/PY33e
tkb51P3oCh88Fz+EJ9eSB713m/KSzgbHftYHv4s5/fR9F52tPHoffDPu2ip/
lQXSyW7kXPhkK/x/7wXw4q4PYH94TPj58bnsh65B+ADkak79pHXfbN5KTDD4
p4t0KJ3e0pWEOcw5/Z+tyqfwxgescLN4a9u0T84CZ25TLlJE/5l1a/QOccpH
79e54AEuNDbR8Y+excxDPeDDvJlE3tCEfnK4YuUPvyhF+fHi6RXPEG82VX6V
ffJbmKb8uzT5WvfAtzk6WXr5NOZcGd3Cfyaic0/Kgi9d26M54yTx5HMcZl++
tkf6sgnwHvflwRsP7Fbe9wT4UasLWW8X9UgvMx7+T1cx/PCObp3v1nXDUypm
nfd3sr9tGiN9QTnv+797qGcKx2kuVgn+1tND3fXJOOX11GpO1y2fzDHw2Z6o
BX/76zSuOIrv+V8d+PAFDr13I5kLu9XLN6MDXPoKzXnHNIITPtfO3/W6df6a
fMsGcgC9WsENTgwBn9zdxPzoghb0fatOUc8caIHHGNcCn9PjFPjVIx3M9Xa1
6DmeEn7ViW/Go6ozV5+gv/53F/6Zhxrhf+Ycgw+woIfc1jeb4A0WHaVuTN7C
e13TCL/X8yjf39nHcznZiM531WHq8FX98t9uko+Edd3e5+K2i//ciE/I9kPw
AXJ2or/Y3CQ+tvV5g1/vws+5uVG+ZFY9bM/xwveg689ulC/iQfg/H+zj3Lys
ibpooXXdnMMH+HxXA3jUF+qvAw7ha5rQyLnWrX5kqXDR1Eb6iLr94Dz/PUE+
15xm4QYH6PueGSLdaLPmCwf5/R8MITdhR6P8aqzvMfqUofBY3moQH3If/VHB
MPSY9zUyXz57H7y+v6V7Or8ZfWXRfvru/U7o7/Y3MQ/9r/V541vjjL/iO03K
sbKu2/vdWSPo19Y18b5ssfojez6RNJIch9FN8Hze3iue0kj6sqMN+HLk7+I+
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
9IDt9KdOwXz+9yTlujaDJ8wLEm85EXzvr0bl8gSJB5ss34A64ahB9BdXJguv
rgEfeDVIfgIp7PObK7kPHwbhV7YwRX1iObrvb4OkG0oFP9lUdgavtucW2Wni
f5aSW7QrhDmpd6byLkvEpw2nT1mdrf2ziByWveHyk8mVrjkff9ehm+ElNuTI
5zxX61bXD8pvak+28J8I5uOb8uG3BGaCL10T2QEfp4j5xbo05X1EKl+vEL53
agr99ceR8qkoVj5aMr//xWj11yXMVcsSwXNs/Z3JLSmnj3gnQbrgWHDLCyvx
Tbo0jtyo3Fh4MolV9MUbo8CdYmK1fqrwl/s+gj7l1Vie+7fVyu0No49+OlY6
9Grqt+og+FeHoqlv3WvB5Zw36T2KAQ+vqOU89fCHdzohTjhYPetq9wZ4zo7T
/249fMsZvuC9H8VTn29XXlvyBu6b7Wth8ufb9PeuV95usnyfHPhfXboWPoxP
inhNnfDG7dwiU9+nwjf4Vw94pttq+VSkKZ+rVzy3Vejrq9Ple7MNnCplOfnC
QRnoLxL76ddGLoePdH+W8HDlZz2zXPy6XPovOw/a/vdWLUGnb/sBGh3JHvDh
qiVah3m6P/vhaS/9S/zMfPqC0Ufg27zzB++Rnf9o+pCjwt8WM685novP0oZj
4Aav/uAA31FextdHhCt+pX04VfluhzQf+VA85DjxPfagP3rlI+7/xDjwh9wB
5ibtXzv+8WM3OU976Due//GMjt7MF/Zzbh75xYGvXrb88fazn2f8zu+syIFn
ZeeFmXy4P5i7BWTjL/HtHvrT4L/hl57M0fu1h3WybCl+p6/mgPMM7JTP4Qr2
h8k5yqcblK+ydd34fWTBNyjuVz7aavjG12ewj43cBm48Zx3r7ctM9ttntsKX
mLqevOkL06Vj7WXfbvdhfuSfjo/lB906d3zhgfumSqfTqXPKj3liUCr7am4H
dchLAaznC1LEi2sVH3UTuEpiEvheuvJkLwli/7wgiXpjR4PmksEOeHuJmi/r
PX03lPu2LV45Psp5WRMqHXQc9czXVfIvCic/qzWGffKWCniGO8KZV46Jht9Y
UcIc5z9R6KDPipYvRAn7/JXR6I5tnyLjq19E/RYZy9zH1nMZHxr5/E9KQI9Q
HyFf7nz6kR+ThXuf5g3q+q0p+NvcHgEe+Eau7n8qc8n7w5mXBWbzd32Tzv6c
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
D6/i3Hn/JLlC5nmoGY+dVQVu/Plx+p0xpWflnwQOf/8ovJFPZgkPX6zfe5g6
2cxPMPL5lkhf8CKfaJZyK5aAD/y2X7jKLHCD75Zp39uHjjtsDnW1x3L54u6R
nncOfOnXV3K+L99Vg09cmfCcVcxr6u6UT2a5eNdrmLN8uE26wv/nunkOZebt
GH6V5fJzXqvP36R1Plf5pNX0RxYb5TM5D9zMbyP8apdq9PiT5V9xdQP9UeVa
+chVsq+e2cT7+Moavr+Z92vMSbcoR3KVcm8XgIv+sF285eX8/RcLwXP+J35R
46X0L10XKk9nB7ravYv4Pn2qXuapGeftQuUFV6EjHrJbvO5K5iBbq+hHknef
0jyEeYfnAvhLT3fDA/xyDn4Ujxa+9EMw+Cyz0GPmV6EL7rMfvOVaMZ/zaxXr
p/F+vadFNf/nk2zo0w/Sry0uwvfMcqnmv79y33oU1MDDF49322/U+fty6ft8
lut8OSYdUK76uOXgURdOSleYjV9lm5Xg5D+cAs/cmcV8wewPb/jVnWW/Lc7g
87NWs3+acSoznpaRDm52fI2+50X2tzvp6NaXrOf7nL4q3UcaOOrk9fA3Wl+n
T+9qum5+X8dvgscy95bwt1R8GMy4pcE7vsvn/JpYY/Qdn20Cv7K7x1w+KR48
wZyfYuARD+QnEwXe2Hc99VWfe+I/B4N7n14lnsCfrOcEH/wWXJbovLjO+nzm
o7nPIvnBXlZebRA+mbtXUNedvsY5ciAC/o85/9F8vm66ybnTI5Y51/Jq3q81
t+Q/k8j9/Gu99Gi34UsHJwmXWK+8hhvCW0z3zcA75MOQdp05b3Ya+9utauF1
V9k/KzJryK2vll7vCuf7uSzuT6Nq/t+Ki8Lbc8EJa689a9TR+84rVzSf/r3+
WuahXc/BL51QwHM/rLySP05Lt1sEj71mlXxBT4GrRBWDG3y2Uvj8ST7/ufKV
8lbSL8cfV67cbPbPwSvQJc07ynyzmem6gTsvVQ7gQXD+b+fAd/1yCbjK+APy
ey8DNy5eDB9j7z71yxXkAU2ukk/OHuZNVnPB9xpW0ae77MKvL7wSPPzQAvXX
O3i/TlYqv2m+cp+3Kl+7Cjzq0/nKZ98Cj7r7InDdlpUv8UbDB2AxPofnK8gh
uiMe4/il+Gm8VaGcx2rxXVfIf7VC/Ww1PtI2q3jv+lRIl7qW9/rsanQQhWXk
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
mwd2MGf8KZLneLyE/W35Nvar61HwS1/4TG7dzJw6PFb825nk8ry/UTrKWHQQ
HYp1/9fyvjxN4H3/tlhz7bXw250SWSfTCuUfu5I+9EwS86OOedLPLgNPDkkF
z8nIA8detgS+YivTOjT8iXI4v6YvUt50OvzG77Pps5ougM8wK5O//yoLvWFe
pfj/mfAV7TKkS60A53+Yzb69M1W+FrM5L7yylTufLL7uTOkR8uRnmyyf2Jmc
R3NzWZ8jE5lnzSuQL1k+frYrxZ9cla98kwLxseOUD5KjPN8izYVj5H+eJZ+x
QvG+IsF5LqRy/wtKxLONwlenT5rqnxLeo5YRnJsjk8ADH5aST30mhPX/nXI5
/1OmfLRQcPXJ8ns8XwEP7ZMQzfFjlC82Fx+Vc0E8lw5R4IHtK5kHrQugTv4w
Al7QmPnabwPYN8y+PQb/bDF416AA+OQNQ/U5S2rAO2coNzZQesyl8KizpPN9
5I8+4qNleq99lE86gz7i9kpwoUgf9On/myE/pdWqr7w1N5munJ11Nf+nbzXy
BeWn9Gid9BdezFU9veWXuwGcp7endBBe4NUdpaf4yp19db+7co42U3++NU28
IDfqxv2byck64op+9n3pSQduVT6jC3PkfBf4iu9sQ1du40w986YTfcqMneis
rzorH8cJ3PvvXco3d36pozT6wf06953Zbw9OUT25n/rh6RTlRU6U7+VBzdkn
w3O+7ggv5dAh6vabk6hPQhyoK0KPgLdHq19+y4G524bfOO+6TAK3ecNefr8n
8ds8M/El/8TQ4Z+SDmUy/YuVPeeX7Vn2geJJ1Mnt7TXnqmGeXv9F3TsB3KaN
6uGujvBUG0x4ySM1zy0cHJg7Px6vfvCKcvcc4HsMtqXOfHxV/AHhMLHjqOdn
X1Nekp3worHoZO/eoI5KshduP1Y5PrdZbx3tpPcZC7+xw5/MO/rYSWdqw3v9
zX3mhhPslPcxRnOfB8wNg+zYb/+1Eb76F35cuRPoQwNtlD/1GN+nXbbg4XVH
M9/Z/EQ6fVv6xxPW7G/vP2WOP8qW86ijteYX/8gfeLzmRNbMrw/9g+7g13HM
v2YJl4ivpdzh8fKLGCV/vDrwKj+dwNzzkTW/y9yfGnz9CeBaC6x5X9bXBSc8
MeFlX2zovetJ922r3FUrnu//TP2v+dzImyCf0lHKyWoA7hpqy1w+20r8T/XX
H9gq52gEubTlDc+h97DVvGYkPNLLDdH7N7QVn3yE+uvG54T/yq9+hPwEGsMn
9BsvPsBw6vbPmij3Zxz8sbeHU99+2AQ95vGxyrMeyr4X1ES+jmOUZzeEPsu7
CXzXnjbi2wyiHkhrSt7QWzbSawzW/LEZefGzbagbEwcrR0D+pd1slBs1mD7i
aTP4Y/dHC0caJN/7Fufwpxqjfn8I85RHLeC/1RrH7z02hDr8Q+EzSWPIdR0z
mPl1l5bKUx6D7snNUjxe03VDt2SDvtLDEv785pbgb63HSBem629YKNfbBrxx
oCX6xyEtWQ+jrbUO+yvXuyX4cJ9Rqp/7ge+VtwRPuz6K+3C9n/iKFvA/37Lm
fLzQHz31OOFme0ZLdzyA+sTs32jkqNswN79kqfyL1uC0rcaI1z1IeK94hits
1AcNYu6woLV8JseAW3awVF58G3jFF8bI92aQ+tA24F3m9WPed34YJN+bNuS2
nx/DvrfaUvw003WDZz8OfOmVQfJJk7+lxTjeC/NzN/BF03Ujt2Ss9LCW6GLM
uKLhz2EDLnRwILrs2q3hb8+1Ed44UPw9+VhetxFuaYleoLPpupGPOVY8IsuX
vGJwH/YNK0vwrrxW8KUtxmpftZQfjum6MWe30X5lKf8BC3Kjao2hL/7U8uXz
NfBkG/xnfrFE77y1pXwPxvBebx7I/WnSkvfl5Gj1OwOkI2gO/jlgNPPNgP7o
8Ru2kN/paPQ72QPYZ6yaK6fbBnymwQDmoX2bk5f0mo36lwHUqxnNuf9FY5V7
aEn9NrQ5PNjQsfTXFwdJp9NMvq9jeY4dB8GnuteU97dqrPzAB8nvpSn8Xo9x
4D/JpusZpuOnThN4xUfGCH+wlK9yY+WFjWPO6z+IuquN6boxJxwrXHQI86/r
pv3T4H2Mkw/wYPwintbHr/XzMfDnrQaBD7xbT37Oo8F1Bw6EZ7K7Lv6iXWzk
/2kJH89BuerRNvKds6RPr6rF+i+1ln55oOrAf9GtPLLm+/xnoPy7/gUfSxgt
H5VB0hn9I73zaJ1flsqjeQo+lmotP4pB9F/Oj+WHZi0dliVzkFGPmFc+HgWO
/cUgzt8/HqCT+na09PKD2R8+u0+f6DyauYnTEPgwH9wF7/rOhvlv2RDqir9u
ozfsMFrnzlDxN26hp3s2Gpzfa6jOo1vM0yeMUV03XLjlDfgA3mOVAzWc79no
OvxP8/5j9KUj5P//R42xDkvGyQ9nJPfz6CU+v9ZY5ssTR1JPDrmgHNux4Ip/
jmDfOH8BnLbfePqIMGv5PNQot3oc6+r0KOr2lafxKTo/Fn3TE81x6p5Gh9XJ
Vrnko4XP/A5eN9yW+srTBj+cm8eVE20rfrUN92HrMfBAmwnS+4yFt7PrN/Sz
Z+zg8U4cp1zgo+In2Ev3aqtz8wV/wFG54ZoL/31Y/v8TtV85UN92OyQ8cDK6
4/86is95kJyIOZPZb1Mm4o/05gH5oTkrf2cK/L0xe/Erm+8sXFo6mo92K9fA
Ff/qW070Nd/spr87NZU57wFX5X/tZL2tl4+Ex1TpDrbDY3GYxnMpnCZfzc3K
v5jKe2T+e+N+bCBfwH8q++GjqezP7dYrz2Wa+HVu6kPXgUu8wHv3eNBXmvXm
hi+0G3hXoDv47aUV9Ncz3Jm7pXqJZ7UcH4P7nvgtB/jA9w439ZXG+e5Nv/aB
H7hEWpV00J7Mr3f7SD+7kHXbz0t+7NPFq1kovzJf8RIDeC+eV0pP6kudMD+I
OsF+nnLSZ3COTAjhfLSdB0/yuj/4p3M4/UXaPPAlM5/W8FeJUt9aAU+1Toh0
67HU1V+WUZ+nhyhfMlZ1xWx09+PDpONOYB66dRa8ndci0Tm2SmY/WVVC/27O
YTRwvVTqxlVF4iVGws+PT0XvmVhAn7I+Ej+9dhnKo8nlvn2gfM+BGfKryVGf
GMN9KMnWnD0LP8a3Y/Ejep7N+3smE5+KKXFnjXowPY9zYU0m/JabiegZRxTB
o2uZjq9peLJ4v6Xc/zqpyglKVd7rbPw39iQzF0hO5X7mlZ3ChykZ/W/9DHRh
4+fyvuQmyZ8kk/43YoH4ign4+P0vW3OfKs0FErSv5orvuhSdUa94dNMZ+fCF
Vq+Ad5QeI5w2n/fi1ir5eESDt3xeqJyvtepbo8An3yyirv5ko/QXUcI5Z0qn
sEV4Zhj8pSNF4itupf5vGsgcqmOB8pE3wytwmy7eTg769EzxVxdME074wkex
mvu2dBr8n3fT9P6uoT5391FuSDZzyc3V8JlbBXIuZ+dznl5VPnjTUPKSnhTK
92wT3zMhAhxmZBHz3P9slL44SvtMET4226vp97+NAU/+rQB+8tg18tOOFj6f
pzzN5dy30jjhP3nMffYuA8e4Eqv5S7b2vSrOdzNebfAtMsSfn08fNCBJvjEZ
nL9tKpV3kyz8IV11ZgV+Yt+nkC+fk8rn9JgjHXEK9cB/k1WnlcLD/C0ZPa9r
gnhBReJjpzOHeiteeGkBuP3NdN0f6bttcqhjg7Jr5G8iPDBHusts6VNilJeR
qZw703ttPp6co/CZiTG91wZulad1G6nzPRW91ZV8fDAahDNPiUmSnj2Pffhi
MPV/tzjwHK9Czq+mwfAK6sVK31oMP+3dIPjDR6LEl5sJ/jnOX75qEcpZnkN9
ci6AOcutcPHey5hjes5gfVaG4gPgVV5DveXHOXIoCN7siAr5TvjAV0kMkK/s
XPnieqMXWOInfv4C9qV9XvJZ9UV3f3CB3i9P+ZZ7gme2WMT3DJWvl7enfDkW
y0/YTX56HpoXL5MvoviHru7gls+Wgfeedj0rfTD+XR+uYi7v9ELPNVW8wVXi
17nQH/3pLNx+rXLVnfGtNftfGftONXl8a5z0XJzAMxM3MM81690MvtxkeBqB
G/GHfzoJvNpnovT1L/xIJ1KH13KER1qwGT7/L46s2252zJ0XbpMfi6P6BTvm
RB22Mxe7Yq98Ilvwq+Ld6NZD7OXTO545yKzd8OQPTyB3OHaM7tsecMK6ttJ3
2MDf+Gp/DfwFW/HGVTfuO6jcvfHSHY9mjvPnIfRE08cJRx0Fz8HqCHj74LHM
xbZb4RtZcwxet/14zftGgfee/F34vPCoUaPpi0NPU8+fHi+8yFq5h2eUV6j6
fJoVvK+JNfgMdBqjvImR8HI/uITuw1znG76O4rE0uaw6WZ9ze4Tm+FdVR9lQ
h9wZIVz3GnW43Rj0pLtGSCd7k/2trY1yZ0Yw3/S8JTxzNN9/7VDqugN3hOeP
Zl7w3jDlYd3lfPl9NHjg6qHMxarusz9ve9FnDWX+uPgB9WqQNfht3yHKOX2o
PNBR+LR/MFj8jb+U2zgKXDFyMPvne0/g5W6yUu7MINbz2L95XuFW6HCPW0oP
+xw8/N1R4jcOVl9ZC732H6M0px4Mf3hibXC8cGvNZQZrLlMbPttv1sybnAaJ
P18HPeORUfJ3tZRfUF35f45mbrVsEH7RX9ZH9108Gh+8w4Ookx3ro5teZE3/
8s5A+Sw1UI6GNXXF2YHgAOkNlMcxSr49A6jTahqiaz4+SvP0geyrHzaSH90o
+p3OA1Q3NoK/5Gglf+/+mq81kj50JDyfDX2Zqx5vRE70geHkex7qwzl7XDlQ
9YYrz+Vn6smuTfDf2zGM+9DG9PfZpudwuQk5L72HKxemD3Mo36bwQvcOk39F
H57L5aboox8Mlz/ML8w7Pm1+jjn0CPHi+sL7bdgcXOXjkfDYv+urPFbTdXNd
sU7fM+UXzpe6zXkuz4dxPi7upZxQ03VjXxsmnXVvPj+nOTjGT8OUE9ELnCS7
hXiqw8BF3+1NHfu38KJ/hrDOd/+EvmBhc/wGbw/SvPtH+qPHzeFbrhkMbvn2
j7zXK1sIBxvC+VX9EzjtGy1ZJyeGyCfnJ/E6LOQ/ORR/nqa94BcdsFDO1zDx
kXrxnh6yQJdtPQxfsuBe0oNboB//aBh1Xa2e7OfPLaS/Hg6eE98LX8GvW/H/
Zo5QbpHpPhSY6hD/VvyubiPkb9CbeWhoK72PI7Tv9RL/X5+zfLj4/73gbR6x
gAcbOJzfdaMnOOFw03XzXM1tGLjoq714Xh0sWG+Rw8DPT/TkPr+vnPFDw+CV
rerF/na7Jb4ZY4fTX5j/X3NdVtmSXO/lw4Sn9QL/v2S6bszbRsi/q7f42y3w
U/1zqHSCvZQ31wI/0rJh7Esje1E/d2kBT3XMMPH6esnXzrQejJz2YfSDHj2p
W1KawcN8d6j65Z/Agc3+lobP8hDwzy4/KZetKbifzRD8Xgb9BB51rwm/a8RQ
eMX//Mg5tb0JPrGvDeX5Xv+JeuDDpujok/T+7u4lXzLNU+oMl59tb/lZma4b
/eBw8Tl7w2M08zaNHKeRmuP8Qr3dojHrYdcI8fB7MzeJM+1vxvk0THPVXvJJ
MO2Hxr+HKzewF74onU3XDf7AcOa2F3rTXx+pB75tvm7gur3Af5rUxWfj0hD9
3p7U1eNM+7/h7zJE+pSf2M+31RJPewg5UN17wpdu+S/+PylD0Lv91hNfqU7P
5Mc4WPVST3gFp57AX0odrHryJ+mMnkhHNli8jp7Cn/+i7hpg+nzzfLKW1uG2
B5rvD9Icuaf42HeVS2LJ+77jJ/SwJX/CD+wxiPr/ak90Ck3vSLcymNyrtr15
vzJu019UDuG9eP6zfOZvog/dM0RzT+3/O68rR2aI8mL6SH9xjfnykGHia/WF
D3niD3TTnw4XXtdP8/0/qB/+0XoI76859VXNQ0dyrn07ED5/2WX6jvVWrLem
luK/nQdnSBjBPu8+kLpi8ll4LFkj6EMLB7APtDgLrvL5SM3RLFWnnQY3traS
H4Ul59fXJ2tUh6leGkRd9PEJnmPzUfRrozV3+/C4+Cqj5J8wRLqto+LBWjMH
iR5Knfb5UdVRo+FF/DpcfiC/4j8QKRzeY4TyyA7Rtx63gVdz1Er63IPgaRXj
lLtqzXl6zlRXGznH48RnHi2fvX018IhtqesW22hOtFc5LLbCJcagV+q4Bx6d
lT140WvjeV8yd+IDOcZB7+kE8aa2M99v5Qj/ZPQEziOLbfJbcGSOfFE823ub
wRXzJtL3mXVGho/VJnAtp0nkI0c4ypevGpzEciK8qQ8d6LMq1oK7vjEJ/POY
o/wqV6OfNeueDH/NieKJrVTu7WTmDl9PVg7sUvhU9yehd7adpDnOEu5n2ynC
D53AhXIXCZd2pj4Z5wIuPXQROHmeK/z2mmnUV10ryUmZ5cw+GSQc+O486elc
5R/oht/IjXnwOoLc8LFZ6gm/bnk5/dEfbvBw7ntrLl+Gfu1zT9XDvtrHyuQX
4an90088qzk89yof+VkFUPdOn8Pc5O/p1A/jQ6hbykvkXzedfeP7EObpzaVP
d52B78ftMM7BG8Xg868GgddlRYG3/FTIvrQ3ED1+gxj4M/b54K7m/AWjT46V
31FOjbHes5Xj+U38y7whI485mPtwJJ77+VnmS16WwetI4nl1zAA3SAxnHr0n
RfMj5cuMi6Qe/jNd+GEGuVqbYvFnKMgB17JKYZ6yO5b9f2Uev3dvEvfnjQT5
DxcIr0uAX71KecS2RfAZChKEEyYxL35Won04XjzwZHjUCXOUoyEfzpsprH+X
cnxH42PFb0yHzxYzn+d4PEb+BlnUJ1lV4IqukZwjPTLRBXy6WLnPkfhbZubg
l/jjcvafkAj4lt1ytR+uFi4aBg/2dh74ZNZa6uGgEHCw33PpF45U817c9UfP
+FoOn3N1HfvPtz7q7zK0PtcqR9JVzyuJeVzUSs7NNlOF6ybgq7ljGThkvjd4
/q505aevwp+2VYD0p9nUh13Xwvv9byi40H/y4aF1WvcS/zT8bU3XjVyTteia
yyOZS36axzxounxf90TxvD7PYd94fZnO2Sj5omSKb1+l7xnLevbNFI9rIfov
21j4S5PTqZ/nzhVOEq85RYr4vWWayyTQ129Lli/TbN7H/UmaKyWpbill3x4h
HH5QovShxdILJMvXNE55YQXK5UzGN+CnGOnXctAfLU0DJ78XJV59FvXGh+nM
0bZFcD+7pWlekCUfjwjp5dOUn5KFT4LZD8R4PsnkJFrlsI95hpI/9Xcin38j
Gx7XpiD0L/tj4clE52qOGaD7Ga2ckVz9/Qz4PPbhXM8q0Lmm67PC1NcXSn89
XTmkQdQVDUuUZ+SLvs8xSHrM2fhdZ/jKtzZAvtBz5Ivu/VKPYPAGylRPein/
2hcco225cqbc5ZfiTf3QpVx+MvKfX+MOXje1kvlg3Wn0TQluyrWfJz6kM3X7
WGdyhLMWgPOfdILPY85TMHKINI/b6aS5rRN1zqAleq8n87s2T5G/3BLqn48m
yW9wIviny3L8UQdNlB+go77PCumYHFWH2Gt/XiM/TOGQeQ7U55br5IM6Ub40
9uRuZKwXvmdPnVwygfuwX/p6bzv5FY/HB+P3zfAD/aTP+mk8uOu/m7UfTlC+
4Rjmrcu3ML8rHiffjNGaq27V+hkLzuknvVv+TumexNdqM4p5istO6vDC0dJT
D4dfNGYXdcvCUfSP54bCr3hrr/KkrJm7fT5M9fwBePj9rZX/NYx+5y35C12y
kn/pEPZtx8PgkE9Gyk97EPjbtSPUOd9bgR/OHSQ8/AT7TMwo5hT5Q+TzeVJ+
FKNYn+GDwF1TT/F8Px4hXqKl/KXPim8wQvmYlvj5uJ3ncx6N0FzVkjpq0AXy
QM8O15xlAPyiqku8R/eHwWc7NQA9chdTX2DkTQ5n32s5ED/P6dfwZ1g3jP2n
pr90o9dVbwxT3m5f6uSVtzh/pw/TPLEffM4+d5RbN5y+ZnA/+c7dZc64b6jq
on7Ka7hHH5E+VLqbvsoXvs97vWiwchZ+UX7BQ+Ya7kOoGyt/oa+Z+Ehzz8Hw
hZr/onr1L/yovxwsX8Te1D/LnzFHWzdYPgB95L/3HL7u5SHct+59pOP+l31g
+BDpJn4Bv+pcG55bz2HU+Z/9Ah6YU5u8nm+Hqk77GT+Wkjroam2GwZPZ/TO+
x2vqolv0Hsq5XP9n8MwLpusGH3AI9yeiJ3q39+ufM/DNJUPEj+3FvpFQH336
iiHKyRUeUtMA/KrjEPEAe8nfvgF8pAaD0Vn88ZPmVg2Vj2NJXdf/R+Xtmv7e
qKMGap/8Hh/InQ3J63EeCI9u9/fybzRdN3C1/vTLD7qL59ZI/Mn+4LR3v+O5
vN1E+cUDmG+u/V66s8boWyf3p76N/k457Ka/N/QPA4X/fyf/q2byt7QUH+BH
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
jum8B18fU551TXCJ5ZWFEx5T3VVX+d1J/F3//Y9+5GY96vlMyXz+x9/JPwqu
j65kQzXmjFV/ow/6tR76rKXJ4IR9f4GntLe+cIPq7DPnfkzlHKv/ydfFrrMf
qP+TGoi/V4P3tP/35L26NZBfbk3qh43fkZ97tCF+mBVqfep3bN3TGJzBvy5z
0q/3iQfYWP1+HekE9yontwlznMr1wPnT70Z337IZ+PCq+uIB7mQdBjRn/Rds
CD/5/HZ4BSObS8/SkPpnwzbe66dN9T42El79pXxTW4m33Ex+X9vAc4Lbct45
faL1xdmIXrVSa/mYNeccHLkRvmJwG3hTy1vB31u6Ab7uvPbKeWwr39HPeX8z
yw/hu/b4P/RbB/42ppPmsx3hFz39TLw++XJn7CKe/9pPvgeWt9mVuuL0GvlA
docns6wnz8XhbX7ULTpww4le6DHnr1KeSx/hJ/1Ytw9W4C8X3A+ev9tA+X4v
13rrJ/+9wdo3loAHdunPub9zsPIIFmvf6896qD1c9e3CVOqMgcIVR6Bnzz1P
PPyBfP/Nkeij583DF6LHUHDOBmPZV0/Nlf/qUM6RvePJ47g2FxwgeJR8Dqfw
e8bMlj/Y6MvkP0wHRxo8Q3lwY8BzVs7g/pycrucyVrj6bJ0XM8THm4jP5KD5
+Jt9mI6+u+pk8coWo3feNlW+qVOoK2oslc//FPj8vtPEa1qpvnUyvmTVZsj/
YQ31yatJ8JSCZzF/6fe5fLAn8l48mK3fuV56w/Hw0n+ZJT+cTepDx7L+Y+bI
n3+r8pjGCG+cq9zw7fKjHoGfw4o5zNHmf8X54jpYOvTp4Cozv5SvY2/5wk3W
/G6z8iZ6fsqttnPdL3ivhw2QrnCachs3Sqc8TOf4TPWPm5VHPEo66DnSx20W
32A0eT2fzwJPCNjI/Tw4Fp72glnwVap8IT3aRK2TWfKhWgf+HDiJ7/l3BnqK
t6vlH2Keo9X7zZCuYTXr7Zcp4Jk95a+bYRnP94up2lcnyQd+Efy0kdPB6wZM
RL8Zu0B+vzOYW80fz/x031z6owKz5Ac7TjzM2eJRzwY/SR7Lej42g/t/Zibz
spEj5dc6mXpy5FzmjBeGKy9vonzt5jJHuzpUvI4x8qWZpzndYNVRo9ift81X
bvUg9LMXRtAXF1wIvuo/QDqCYfLTWCA/PflXpw1UXt4i6V6Vn5jcn/dr/SJ4
pDt7gld83Vvz5Y94aU/6u/De4B6Dl+MPmdIdPlWuHuLnrGLfHt9V/K5u8DkX
rZY/ZBc+P7IzuOudtcqZ6iy9XieeY+I61kOBTvJ/a6+81HXwyga0xye5Ulvq
zxyfy1e5Lefavy2V07eR92V4G/k8tGB9jtogHnhL5uDvGksPqOs1m4nn3FC+
GZvxgdnXTLqVBuwDm74Uf1WfH95A585X4iFL/zK8nnjRO+ATbmrM+fJQvnnp
djKvr9tYOSaa27bbrZzHRvQFW2rBo7hnrjOvFc+kOnPM2d/CZ3Z4fTbHrjr+
Re0PyCdBujbfZHDgXw8y3xknvllsNeV9f8/1tLqc79OTqPcW/UCdNrS2fPWr
0FeGHJI/Qy35SFfi+x1fcaubqwGu8k0FeAhFD8MnPJzMOTKkPHO64b+ojq2m
3IHymlv9yjlbLFn+QuW5z+2Osn72VqW/21SOvq/x//T+VqWP2F2WOjn7cXjL
maoqry0O3+bQk9I9VQPnzFmW833gafkzVCXPcWAcOP+WM/z+CUnSEcfI1/08
vz+wCvPKxuJd/JbCfahdhbnb9TL0Rxcv4e8UVIW+dUcZ9KEuafiTJFURv7eM
9C9p6M58K5Mr5BGtee4V6rrtlZQTVwp+RZ3r8PbbVVJfKbyryw38B+pXAs98
XgIfoXO30Hl9W0k5mCX5e7v/x33rX4l5a0xJ9DJ178Lv9akoPXgJeDXh95hf
ZP/YH0WBn/S8R75qnnjmLIMjlM94X7qJeOYUf4dzLjR9yJzRvzz4TPtw9S+P
pcuIl/4unPO6+XP86pPjqTNfqz8d9oocpUcJwt8iOGeHvKEu+iWBuUBCJLm6
7u+4nxkqyh8gQvqOd/Qj7RKUhxsOnl/2g3IqK1BfjQiH37UmHXnifhV1jkQw
p7tq+nE7v6wofn64/EBcyTN6nMA8ZUoYc9L35rr1XY5X3l8x8IfKbvC10sqB
w3cORcfh8J3seVdO+2QIOblD3eSDGsd7Gl5E83E3fPAex+KnVKww53WQRxpz
lDjq5CeFwRmcHCjLZ46VP20heD45PeULGgN/Jmth6dq80HH3iJU/SWGer5d0
+oXj6Mvciur+C4d5Esv9DCpC/ZNZeM7OOOXHFUXvfM4H39SgctJHFOU8dfEF
f04qK/5qEeqB78znnfdrchy+IqULgc87+lzrKxnHev5QiHOtgrlueQ+xOt8L
0nc09SWHenoMPLHfCqBL3e2jvPho6tJ0+cDHwsznnbouKFr+unnh8db15feP
iKavDMwLzrPLlzzu30rzvnfOS917yBed79TS8nPLQ/8VLZ5q52jNcfLRv/j7
gzPXjgHPaZBffZYf/pDFy+h8z0f9s0C47uYy/P7xeel/u/ij+/4iBhysfX74
0i38wS0/jwUfWJefuV72DDyvU3HSTRSEP9PPHx107jj5aOWH/zzMH7/NMbHy
yyqgeZM/OugVcczR/iog3bq5bv0v4zQvKKR8Z398gIPKKudRzzdYfpVpcfjP
5CnE73zux33eVFZ+14XY38b6k+tdvJxyjQvDzx/jBx7bsKz41QXBY0v78fsT
4uTTXkj6I19yvtLFKierIHzRYr68pw1i4BXULKhzzQdcbmqMcmoKgKOG+cDv
rRej/LgC8EYcXwunLq4SKz2dub7Y6ZO8lFsULR5Ufs6FMZ78XT2jde7kZf77
xhMfzkxaz9UKUP9kMN9j8aE4+fAXRNdfxZMcpTC9pwcKUl/5eX567vY8KQR/
5p7wzLNlqQPfFOb9qusBf/VyOfafGkXA/Yq6c593leX+ry0M/rDZFRz7ZJzy
bQvSt7Zzhaf6Kg4foXqFqQc80pHXtjiO+eDuQuyH597TLxSOpa9pU5D1k/8N
vKAMMTq/8rOv1n9FX1yjDM83ND+//8FTcLmLpaVvzUefm+1JKnl4paQ/zQeP
q85D8TdKKZ8rr3gUd/Ebb1NCeHge/Je23GUe2rIUuOWgfOjOLv0HjnezJPNN
T713e29Rrw4tJfw2v3wpdf1cafmRFgCXdnBIOwcuLb5uAfrH365Kr1FauZkF
8AXa/y/4w41o1sO2guK7XqH+vBTN/HpXYXhE1dM0x4+B112/iO5DGnVvQBx8
15hQzc1T8TH7o6z4csU0N78sXWc5+WaHwRscfRF/pCflNX8Pgx/lnwK+VzSe
9bAjHH1cz3PgGCvimVc+DpMv31n53sdLdxDO9cpnhFcn0F9viFCO5CnxoxLk
46d5yuJT6Il+qCSeYUn2/+BT6KcSEqnPd5aWbv0vcltyVlH9Vho8ofsx8KLp
ldmf/yzNvKzWH9Sljysrh6g0uq3U3+UvlCh/xRjmuR9+I4+jR5L4w3HwY7f+
xnouVo31U6S8fFB/Ya59qxrvxftymo//jN9dtmTqn+h4+S/9yHN8UE31Rjzr
1ud74TnVwIUqCtfNegD9Wrdk5bMnyP9zP7yd+8nSI1SQHnC/cPKa4vlXku/K
PvriDrV4LkcS5VO9W7lRtan/SyfCN8i4Cxz4izrgHjuS5Bf6jfJP67M+51dj
3fpslz9ePc6Rr6rJJ/9LdI5n6/N+PU6W78cW6vzw+uCEfWooX2Oz8P+Gws9r
83c93QTeMqUJuoNd9dBJFVgP7vGosXQB9aRn/5z5xb4m8OjeffSh+hwcdVQL
fIHONeb+7F0LPty+hc7xplwfsoZ8ikryQ67YnOdyZrV02W2ke2olH7CV+Jit
bQvvt35r+sSXK5QP0v5T3qit25czR/izo+Y7HfAdarhM+FVneBcDu0hXu5h5
0+Eu1LEeXTWPXsT+eagr5/uh7p/wDdt/dacvK9WT9zFgvvD/HtTV9/rQP16f
Qz91vSf4yZu+0o/MYt1+3VO8sv7SG+r6gz6qbwfhOzdgJj4Mcf3E9x6qXKeZ
4CqtB0kPOJJ9te8M+vTuQzQ/Gsec+vxUeB1HhnJ+5RwPvv1mivqp4cqPngQP
MPdU+feOYt9oMI3cwyZT4Lc7PgDOc38xE5yky2TwnAbjNMefI33rRH7/q3F6
jvPB/WZNQC85aSJ10eVFyk+cAF7x22TmKc2XC1+dQB+3Zppyu1bjZ/LtWPhC
WabxPnp8Rt/dZJR0/VPlM/AZ9/PUCPHJp+ncXC+ceSjzju7TNBdbLxxsAOuq
9ySei/d64e09lM81Fj/2g2upqx90Y/71arTmfavk09hX/r0T1beulW+b8NXh
U9AL/LAOXmjO4eJnTqOPa7VOffRI8vW8pzJfyLUWfuC9UfI9mKL5+0r21XXj
lKc2hf2hzgrq8LvjhANMps5PWiI8fIJwnonivy1U/s4E+U+OZ11dncu6/WIS
Ph79xihfabb0yJN5vlVGy391hvKvp6BX3T6C9zRlivh+U+Q/M0zzxInCgafh
V9BiKDqItePQNSRMFW9tEL6yI0ZxruWdqbzmAfiiJIzQejbXrd6mP+sw0xDq
ydKzNDfpo3U1SLmNs4UL9QZXiR4A7tpoLuu/Q0/lj/elfnaZiy57ezfpFHpK
FzwPf9E8XehHSnbT3zUffu+TTpwXizpTr/ovYr5woyN9R0An+q+1S5SrpfzH
mI+5MMvgv2VpL/55W/rWz5drntuWfX5hK+qrTauYjzRrIz/PlpwX81fDHz7f
WjkOzcDDv1vDue/kUFiflybgqP9bw3M83ky89IbUAxXWCT9vIv1XPfbzV58p
50h+Xz/UlC/Q5+DGMfWlF6ihPPr1+Em+qIefUpfq8q/eDI/6V+lq3yjPosgW
9LxRdZWbWQ187Kdt5HO91Lk8KEm//yvli9X+5CNn+9sd8Awz1Ian7fizWb+F
HcqpryGdWkXq+aU7uT87k/GD/S2B/ui33fLBSFb9GQ//M2Wf9FDJzBmrx6vu
/TZVOmHhYGWZU1c8IN5+ks7ZOOHeB9CV708EV/eOwe+i2A/o62MT8avpU0Z8
mEM899jK8t0Sv+vYj9KVVFTuTEnwwM8Og4Pdq8B9aFNSuaK/8h45vAv7PSX1
9/7O72xTkblPu5KqN/7g772RwPfkKaH8kWPyA0+Qr0ikcOC/qCtaJVA/Z4xS
3v1J8K438fA5V0ZwDpb7W3qieHCVpxHSGZ1FN/FlefDbpuGaZ13A93JGPOfL
8Aj0Vo4+y/qWlleOUji6s9OX9bzKi98eLr1SKnle78qhq3V4YjbX7or6oLLK
Fy4uH6R/9XviNC8Ikb71mvzSY5n7Xw/R3OoGfrBT4vC7WBGCHuq7W+CBabGa
Z4XK9+MWPrc+MZxTm4vIL+s287jwaOWTFpZP+3/g839Ew+eMKKw5xV34xv8r
LT1XIfTLiffxXTlfmn0yraB8KR+LZx4Nn//7wvKdfs789HgM/fUfRcBbfn/J
nO5UjPQXRaXrecW8706McmoKqw58hW6rYxn51hZSbuBb8WRimV8XLIyup/d7
9HqFY4TnF5JOwQX8p3WM5rYFeN+9XMhr9o3WfDM/euEkc92pW5uU5ny/mFc5
dy74f8aUFG8zD3OKSS7oeU9HST8bDB8jJh38zLuRvI8RwfATxpvrVn8XBV+l
Xi7wtMGu6H9DorgPtXKBw68z1y0+Fal89pzUbzXd4WHujJQffrBy9NzJJV8Z
KZ/qXNSrFTzI8ZkRiW69YzB173xz3elr30UyN1yQS74cut46kvVTPZf4zJ7g
zL2ipCvMJX6dF/kpA6OUsxyMj+5n5rrNmyuhvJIg+uXR3sLNStCv5csFrhvn
rTypKPlx5ZSfiTd5Or6R6HQCcrKfO/6rzr+bJYK6emQg8+7M3tzP38OY13hl
B8/PYa5bnlKY8JZszGVyesMDbF4cHuCSrPID9+b5ZgljHrE0Kzz8qb7yH4hg
/9kdCN4VkR6d/meRWuc5dN75kjO+J5w5Y2x21k9W4brVI5RvmO2Tj6vFhyLV
NwUyJ+qYHj/Vy1HiJ+fg80fS42NQqoTy33PKn8F8j+UHRCrXKTv74U5fcppK
RMqXJhC+0F5f8tn9df8vBYIn1EovX4goch+KB7EPTP34O6PwFembQ/2+L7jc
gCjO8ao5wdvPKEfMO0r5sDnEYzTXrV4iSn7FOam7HHzb6dc6RMmPOgf79nYf
8sL+jFQuUhA4tpu5bvlGUczr7+dkHjrEG15xl0jh3kHwmf28ydX6OUp9SpBy
573k/xDFOhkSRP0c5qX9IYq5Q+kg1u1t875Y/DRCuZw5lRfgTn7QlnDOi1XZ
+T2eHvLzjKQ/PZ1Deb4e8smMkr4yCHzVyYOzvt+R7A9hQdQn79zQv1croXl6
kPI13PDTmFECXvTzIPm7ujIf2VpS6ycXvNPqrvh8TiwJb3BFLvbJoenAP78p
ybnTKRf1hsPPt/PVEuB4XXOJb/we35gsJein/gmSvvIlc/nb4cJbApUv8wxd
5+Bw9rHh2eln5z5R7kCYeEHZOV9aPJK/Spj8ZwLxPThzX3qQ4uqDAuEh5L8L
f+9Dcc3jsoMHRtzGl/58KNfLZAefaX2TOW/2YtLnZoOfGXcD3le/YjzfToHq
F66pzikOT+NuIHyn1f/i1z2pOPezbA7pLK7Au7saBn8sV074lu8uw78qEsac
InNO8gUOXNI8NFxzn5zCEy7BI5oaDi/ROXes/uMC/fKYSPqjFbnhD3hdAG8M
ipJ+JK/4dcoxDy6BH5F3Xuq9ReeV/1ISfC9Hfuab58+Jd1oa3KN3QXD7+3/L
1zEaPlJiYc6LLafRCy8sgx/U0kLoNXqfop6vWob9eWphePh7TlK3n49VPnVR
dEa//aW8y1h4WU+Lyr/uL9WHZeX7Woz93Oe46tJyzHPHFxdv+Q/4Ti3K8Xed
L8Z7FP+7eEpl4UHVL6569QjrpFlZ8UaKK0f+F/D862Wpe38Ml1/fz9J/xStX
MYq6+sfDwmES6MtKlQR/O3yIvtunAvjwgBLUh9E/KGcnQfe5JPjq2oPwPUIq
iR9eWjyZ/cIVK8mHOVr12F7llVSif2waLfx8D3Xj0UrySyzDvppnt/KJEjW/
i9Xz2ik/zyry8Y6jTlj7tXCYJOaDB8Tj/W97KnOAauy3Q8vzOxtvF4+uBjhM
7grsGxHb5IdWHb7KjgrKO9gCb6p+TfkkVJQOYiO4cbea8EaqJyq/ewM5s73q
qJ9N0vNaj5/t/brsJzuTwRParBN+VQ+fnxPJwmfWyMevruqu6uiFPdZKn9WQ
971XbeGEq+CprmwkX+h68g1boX2vMet/Xz3mxQ+XgSc7vvr4LqNnfC+d6aGm
ylVvCA4/a7F4bvJPCG0q3s4i6UZbyneoufw9FtEvVGz7SS/p4Nob5ovf21a+
4m3wtQieK7+ItuLttxP/bY500B3gt+/tQL8QPId12K0TdXX7rujFRs8Sr6wL
+os63ZlXrp8m/L8z9+FFd/yOak5T3nFX8NKWvcQfmIa+snIP+KV/9tXcfxr8
n229pZcZKP7JFHg1j/tqPxyGjvvJJHDmSgOU/ziCOfVq5ensGYAO7sko+QNP
ZG6SZ4h8P8Yxn30wATxnzVDmTVkmaf41Ad7ajhHUXU2ngvsNHo9urs0o1UUz
6S82jIUv3WQM6+TCbPhjO8bQ18eNlZ/YfPCZk2OlP52ofn8Jv7PlaOYUhScq
52658pJGkoPz8yTmHT6rxLccjm+M/yT5kq25oLwvzt9nE+H/H1vD/KLeAPkA
j5dPwlrq1dLd5L86gvd39XL07x26KcdkhOq0peyfU/qmcg6P4/0dtEK+qYPg
vbeaAE7yaCXv0dWh2t8mKSdd191Gsk4OTlRfthxc8dZI8WomwFepvAR9we9j
mDtcGS/fgIXwGL8YA47x61h9/1zqvRHj5Ks5Bj+6jrPBD1uPA68YMZL9rcU0
+WFO4P4nDUd/ET1F+MlkdNMPhit/czLv46hJmusNhv//aKx8dycx/90+UHyb
kTzfcpOUB91P+U3DVD9Mlp9eX/nCDRY/YZrwqN7qQwcq53caeuEKPcFpu/UR
n3mact+64fvatZdyK6Yrr6crddr87swRXs6k/snYGf/8vl2VrzpTud4dlOPQ
Ef3vh1n4kPdry/38uS04WIu5wpnb6lxuI57SAvlpKF94fGvmgO8Xyp+5tXhZ
LdAHnVJO050W4DyBzeSLtRRd6v+aiwfYmH586Qr5Wzajnj/bUH/XSvTXPs3Y
BxbWBz+8sgped//G7P9OTqVdf6s53x82lF9xLeUhfiafzPp6L6qD1/21Fn+J
z+pobpsEzj98Lc/3hxroEYpXBvdLW8f6v1VDOXGVmHfk2KQ5SE3OixaJyp/a
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
9ofqh8G7EsQH+ycLc589P4MH7i1Cvd0ts/C9X5lHO7icxdszg4dk/x1+Zo3C
4kFllL/ZH9o3CvI+Ovwi2//+ic4lQyHmBfEZuZ+tTD1vee4FwaN+CVBO0Cnx
aQsKdwoQP/mMcs8Lat8LkG7onM6XQvhB1cjI+fLVefge3Qrwfu3LAA4Z/w/n
wu788CpD/HgvfvgHHua0vOL3pqcu+vmC+O35qM8v+yqX8zK5VL3ziueTHp72
OnPdPs/cnBfFfZS3mKr8xGD5rnvzPfOuyBdUuM0vXtTVba8KTw7WPNpLOSlX
OX+/CZKvjod8Jq/Dw9ySQ/2gO3OfL29QJ8flRBd/yU1+a8qxPZWDOfgs9bNX
buMfFZVTc2dXnvvZe8yvnwVx36YJR6r5UPmnwcxNannIF+WxfGZMX2n5zu74
ADx/zPm4Rb+/oKt0wU85fxOD2G8/d5XPxnPyJgJyqd52le/6S/bPGUHg/C3c
mAeVegVPu4r+3tXpeB9bvWJONCaQOnbPhxTmuK+U9xEIf8/DXLf+wW/kzx8o
Pa+5buf0b6jnC2WTX83bFHQe76mX/sgqX7V3KczvPnD/l2dTntr7FPucmqfD
n/DX7Pr95vstbzId/pkvsisnwnyPc/8mpSPfZFo2+QyY61Zn7woemCNQejFz
3XluHdzIGzocqNw08+/a+YybeHSB+GzfML/feW22upFrvz07+4xz3fn7/jbf
b59LNuFXr1Pow9zwZR2WRfXYqxT8wdzwC22XRfXnyxTwZHPd4uiZpYt8kWLP
34du+KkezYK+uL35vNPPzHWHPxmVVetc39/MnTya3VnYB7qY77F+FOa61dNl
hvd121y381CPNHyis5DPm8N8v8VfzOdt/l9m/HzGms87fqpT3dFfJ2aRP+Rz
fmc/8z3WnzsrdXh1/c5ID57jlKzoTN3Mded5H/XAX3RmVr0X5vc7/3FwYOe9
KZ5VPjnm33Xmez09lMOVhfP9D/M9zjobZK5b/ktW+Xaa73H4HA6f1vpsZ5e/
65sU+jYP8u59smte/5r1fMpDuerZxTM0n3fq0Wnyn0wIBPceaq47eM94D/Ta
NQLFEzPrwdF9lzbXrV9TDnjjIW9ZbyU9WCdfBFLHHjLr0PJg3eXnmV24tPm8
s49cd4VHuiar8nHe8PmkdPy9pbII5zH3wSlXi5rr1m8ss3wJzH2w/gPmuvWd
yya9hvl7nefqa67bHMls4uOZ73fOkVcuaZbXtzI7+uLN5rrTZ/xhrlu/kezK
hTe/05kfubuAS8cHKrfRXLc87nfKE8xGDto+8z32//ee+mFZDum8zH2wfvIf
8O2vGaRcG/O+W5/rN6p7cyiHy3ze1nkv4e03yc4+PMB8v+X3PBevXvuGWcF2
rpvpJfkdjXLI19q87zaf7yl6ur+zS19sfr/drx8w3y+djXlZE/P9Tt227C71
+Yysn953Z50Mu8M87uusyp1/w++ffAPcKUNm+FpvzfOy5dlVckOuZRTfw1y3
+/EV4WaZpNs11y0OcwXd98HMqs/Nv+vsd95X0NO5Z2N/e2j+XZtPmqr6ISv+
G3+Zv8ve3wviDWahrlhvvsf6x6Sk2ue5KKv6TfN55+/rfY7c7clZ6bsvvuH+
ZPobPND5HqsLesv9/P00emHnfbf/vrluz6VT8pnJKr2Suf/Wx/+U8nwDL0tv
IPznJHVIaZ2/tVyl4/tT/WwgOosiLtQJO45Rb/jnYI5zOx04T8k/yL/ImVP5
uW7g5yd+Yy6/Oqeeuzv9++sjnI/uuajbC3gIrzgi/8Bc0nF7Sk/9C/PrNbnp
13J7w8v67Bfyp8bmZT8/60s9v+sw8/Re+fA9a5NeuU6H8DXamhd+6aD08j8/
pLlqAZ3X/vLV/x4c9W1+5TNmoC/LdJC+2KkD7XrIgM4x7TvxmjQvbp1ZPqX7
5fNTmL4yaxbmYt/uhZ9ZsbBymqS/mLQHvqWD99p/J6vq2z1a/6HqxwOlZ98D
/rkrjH14epD0UDu5D37hnNeOv42ti3cIJwlnTpEjGLyl91fwS4+FSQcXjD6l
0JfoXIZKN9QxN3OKGlvUX0unkzsPv7/QRvkGRNBH/JRb+oX14jFGib+RV/q1
Lz7poSwPNz/PceHn+JjNKw1/41Qh9BQr1oDbJJbme2YX0jpZBZ68vzQ8+dFF
8f1LtxJ8L10MPIdhocrlWQ5f1/Fttn19ca2fJazPTnHy2wmTrnyJ5v7lpDeP
Um7RYu6Pw59xdKmrSoGnvVoI33h1Re0DZeSjskB4fiK4btdY5unr58EPdHxl
rV97nHwv5yhHoIr4JGWV8zubfTW6Ks/FLUH5zjPJkS+QDP7jUlE69xnwJR5X
11wskTn41GnM5cvXFM+hCrqqZVN5vw7VYi65rRp8pMmT1X/VQd8dWF3vxSTq
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
PXzpf66J/s5X+T6nGzD/Wln3E7/O4v1N5A/WCJ9VlzHw/4s2lw9tM/Co/GPo
xz1bS7fVCn+DUqPITUtozdzhTBvh/yPlX9GWvqBCe3RY+0ewDke1h4dQuAv+
pXeGs8906ST9eHf4GJeHid/eRb67vVk/E4eio/fszjw6up/0AkN4j9r2kN/O
IHJ5Hg0Rb7C3cPhh8oUeLB16H3RMu0Ypl3kg/VGRvvBeGo7BH2DBAN7fuf3g
EV2egJ7Itx/7xpl+9JvFJzKvOd9TeSu92d+uTFAOaUfWW8du/P5sY6Vf6yj/
wC6cy9tHkHu7tyc4QHJv+SqPZX1O7KdzvK9wg3HwBq8OoJ6J7Sf/wzHKyRqk
OU4f+FdTRiovezA4xtveWj/D4LfvGAqON7cn9UzsYHhoKUPFN+sOr2B6f3wk
3IfB/wnsAq++X2/xWIbIr6aD6l7lhZ0crv66veoH5YvNH0Wd07699Ked5AM2
Bt/Iem2FX7WHv7prtHTlrcSvaK1c6VHSszfVPLeZckxGwQO/0Fh5Co20zsey
XxVoJN+G+nqPxpAvPKeefOFq4Q+fOka+jnVUT1aXPnosdd2KWuyf/1ZFB31h
gnTlNdGV/5Qk3+CJ6HO/TpZeu5LywsT3XpCkfJB46XEmg580rCJf+rLye58q
f9rK8r+K5bzoOpX7X6CC/FRLMycqOYO66E55+WOUVB76LOnxy+FPWCKK96uZ
8pjWlEPfPTKSv7fpPPm6xInvVFy+8fOZU3vE0Hf/FPppzuWs+8Yx9Msuocor
WaJ8umh8b7IXxa/m9mL8tONLUucvLqB9bwk69weR4pfmE067VLktEczjnDmj
9VlezvteMEy4brB8jVZo3ldcdUsQ683xaXHOrfhQ1fM58Bdtt5Z9Jm8o58j4
QHCweZ9LhxKiXNRA5ln718FLbFiYfe96Zvymcn6BD/ySAuRmPsrIfOT0Burn
sgXFA8moOd0m8Sjyc473zMD6ebtZuvt8rKt0fryPnbbxXEbm1ZwovXxRtmt/
yCefzPT8XZ99zRz5aLDmCF7wh5/ugDcyLZfyTD34/XG7wanO5JLuyZP9p+Me
6vA+QfTdFdw1R96Pv83LnOCBWYTv/fKd/OGD5Iviht6h2g/CUXOCwxwX7jf4
EPjk8hzMiT4z9arF3w/Dr6uRg74pyYW66NTP8BO2ZAe/in0PvnTtV+njsjEH
v/0uhXr0qOqubOAtm811m+d6lPe9U2blgLxOwY/3GOswMqtyzUwd7rw3/f/S
/C4r88rDb+mvI06AR2XNIn8e8z0Oj6fmae23menT/3gNn23DKfKkemcUn+cF
/LSmZ5gLXArAT8PB2ex84xz81e0ZpYs01y2v7rzmIAHyIXkBXjTzn1TwxwzS
jzwHX6rxj/IT09NXFjB9kOW9p6g+EY70j+mbrE7lAv2103/Z+sH0a7ZevwQP
5J6P8jjMdTvfTtU+7y1+6UPwlqL/0ndf9WE9rH4InnZAfWuQj/yUzHXrn3MV
3G+AN3hXfdPf2b7xBv1XjDf9Qt/79PVD71AfOniC3TfM77d91z3lNqanr//+
If3+vbvSM/qAk+8x/a/1jX5APfPWBz5G1AP6xNYPWZ/DfTgfQ82/a30VHqNb
eeCtOvO+8IrH6oO8wLH73OPzd59wnr7wpL7abfpxp6+9+5T5yyNPvdd3wE/i
n4M/P/SQDuUOffSkZ/IBdme/yn87hX5V/NIf3NGnf/VfCj5mb5Tj5ik+ufke
6zPwXrobL+Hn5vc4ddSID9Rvv3rBw/npDvh2ZhfxGz3Zr9Kb6zZv64NwV089
39vgDztc0ClP9WT+8sJcd+Y5bz5oLuMhvseNFHi0LtIde2hfvQnvMc1cd+7/
fg/5otzkPU0x120ui5t4pzd4Lxa4kO/j5qb391oKPqzmuuXHu8q/6JpwdRd0
wdvSiW9zNcW+Z3XS4V/q46ockGvg9hVc0RePchM/8BrP65JbGn4nHqzbEuZ3
Ovd7qRt5SaU86I/Omd/pnPOe5rr1P3djDnLxegp1h/l+y9t1kw73GvfhM+Vu
l3BTDou57rwHec33WF8rD/Sh76/DhzzlKr6lG3P2ntfB80ea6/a90r9b/hrv
xWrXNPG38ItLM9cdnmJ6V3wMLrqiL4g315118N7cH+dcX+Iqvzvz/ZYfY67b
fD035rmvzOctb8h8j+V9uku/cAM+bQ5XrRMP1UXmuvO73qZT/riH+PM34bU6
vGXnfO7ngd7nD/P5paau/lXP950b56zXTa43ccH34A93+BJzboK7fvigc9wd
v9w/zXVnH1/0jrnSN27SHd8Ap/ryrc5rV/Qpn5m/1+qr36rOd+fvjTPfY/Wt
b6Ufd9ecy1y3uclv0fUU80QP5XUrRfxN6XY9pZe8JT7qa+WVe0p/Z65bf/qX
qq886Mdz3+J9XPCCfWaop3RMt+DxTnqOvrKtp+aVt8CFHj4V/8oL/eNec936
n5n9yq43T82PboHvVXikXBVP/t3VN5l3dH3IORXhST2wy7zvzv505Y54p7r/
dW4yZ3l5i7plmZt0IuY+2/nldekLXMEHGpv7bOtP+W0OdpVfh7nu0PgaXUGP
3MlV87LrnHd/XAJnC0gHnhNnrls89aJ82l2lQ7wOjrcwBZ/SPK7KdTXXrQ7q
vOofV+Fy5rrNrTjPue+8v3Zue4s5VPmz6FuPuGk+Zf5e6996Gt8VTzfl+5jr
Fvc4SR/Uzx3eUblb3Ifo45qHuoq3Yz7v9O1d/id9ejqtQ3PfrG7umHx73KSD
vi3886jwTzfwh9Db7PMpv8NDm+7Beth1R/XJr+QNLfNkjtnuDrjl5J/BDX51
x3/slTlfHF7Gv4c53yd6cb25Oe+sTvdH4eFeykd7wHl97gflTPmAD2R9yDrM
+AO8kTm+zA3nPNKc9CA8w2Q/cI/vHsO3b/m96swMeu+eUy8NOCj/1Yzgt1+a
usjiaQfQi0VlQk+64SX14d/fgiseyoyf+dtXKfAt9qkeyKzz8Q3zstG7xYvL
jI/f+Nfs/7l3g8OEZtX3mzrT8qN38bzqi7/dwUX+ADvRfy3JIR2cK33K/e3i
M+cAZ57kIl/iHfgtlMmleas7/kVhO8QLygMOUMQbX7iA7Zqr5mW+8LkveGyH
bcL/88nn31d+Dlu0nvPRP55ODw8kdhN8jJH58a/r7sfne6zX/cyvXD9/cLAt
n2mOkB9esZ+ffPs/0/5QiPVfNKP8H9bIF6swuNC5jOR9jFxFfXigsPy0MysP
ZUWq+J3yv8oKf+biUvgGZYoqPzSbdMGLpd8PAWd7+tFXapH2mWLKzckJT8Nt
AbhB5TDW1X7l2f0zn3zkKhGcF7Xz4FdWax737WmU3vd88BhbzKGfGlRSfMKC
0nPNkv9DaeEthZVTPAP+alw0v6dXUfrxpdKbd4qhrpsdqtycabwXt2KZB70N
AwcLmiTcI1b5I2H0m60nymejLHXgvkjxYCcK703gfQkrxfdPHsc+XzFBeqLS
8PoOjIWHeayi5iMx4tuMhSffKVE4QHn63yxjOV+6V2Uu9jxB+t9RyoOuBj/2
WkV0ZA9Hqn+pAQ/wbCI+ioNH4hft6P0tb6uacM7R8oOtL31cLXSsjt7c9tWN
lWfUAByvmfLBbzeVD3Zj+X4M5/7UbMq8e1RT/ACXDIfXV64F6/xuC3CbiBHy
kWstH0v5ItYdIh+t1srpbqec1iHyTW0v3nhn9Gt3BsMj8ukE/nyhu/wMB4GX
enWWPro3OOEXgzQv6CbfsH7ML+YMBMfL0R0+ydeDee7f94e/Ub8H+p0fhuJr
F9Bf/qu9qEOKjhLfrzdzxoSewrFHoutc3A2e7aKu0iOMZB9b2l7nXUf5Jw+D
D1y/g/qODvILGohf3y89lAPSjfdi5DDhXf3ASQ70ZK5XeATPxWUg+uKavYTb
DMNH0WMw69Olp+q0IeA2/QbDwynanXW7sz+804tDOPdXdCF/MKiP1tsQeLY/
dZLvdHf2z7rDpLvvAG8tsCvrocxQ+DM727D/HGsvf8LhzCPutZLfV1vlEY9i
XtaqNfjekDa6/6P5/Ozm6JXytsCP1GsU/KtFTeRT11h815HkUzxsoLqovnTT
I8iX3FVXv6cW+0mBMcJv68oPsIbOi9Haz2uyDyytIh+PMZwvS6rLZ6wyuF+l
MfLTqAq+0SkBn+SG4zT3l19lr/LyFx0Pvvd9ZfnQxvH+Np4IH/VlBfXX8hs5
OhG+0KZ48YFLSo88hfozUzz7nn8J5XxNkz9nOeXqRshnaQZ88i9i4OEkFceX
r8JM+MyZy4jforzpxbOphyuUlp6rCD5jQ+bS7/9TSvllhcCdds5VPnWUcsHy
65yarzydKPkG55N/y2LlbEZ+um5x5EWae4axP6QGKS9mCXOQjeJPLsmJr1Tp
JZrXhKjPzS7d9DLNR4rIDySbfs9y6Z4K8b68zATem2OF9Kf5wSW2Z5CP1kr2
5+n5mOM/8BNOu0a5KnnFK/BTrspa4eR54Ms98cF36L916COKB5NHsNP7k1+N
PSdzyf/ck3PQbaN8NoK4D4c85GO2Sft/EPOs9278vdHbWJ9NgtAPfu3OvK/c
V/IVD1Kusbt8ur7mPLoWCA+wdjrw0ktfp2pey5x04jt0kbO+gU97IAt68/pv
U9Cn7AJPvpKZ/SrXG/ClH/co9zAT59SSV+gKs33LXLVeJvEEXsJLOXFA+FhG
6vm059TDMd8Lv8rIXPvXZ+qL5TOfIyO4lu9z+CFTfhI/IQDewvinXC9yhHVS
JAPzlD+fgrfk+o3z4kd/6vOcT9W//M79HOJHf5TzCX3f4j/ke+nHueNct/3i
/+RfkZ7+4qGpzx1+WOQx5fuYet7qV0ydb3P4TjCX+c6HvqnsQ3CYDceVt+6p
PusO99PlhPRWHuItmOvWd+0U+4OXl3hcd+GBlDojH1QP9FC/3BGfU35fLT3Y
x1regZd19Rx9+ik3+VCZPsjyIM5xrjl9lu0jTZ9l97tz8KWzueDHtfW6eFYp
zItrpZOP4nXx8S5Jr5EOPuFL05c5eNi7VHAAp6+0uPlN+F19r8hXwUX8kOvw
PRw9vt2vXMSDvQpu0OSa5ggunL/Tr+l53dS8zFX+ITfApe/f1vNNJ/7hdfqd
xea69Zf5cMnuU0P/5d/td0f+DOa65fn8C37Y8558zFzQI8+7Cp/tjwfKpTWf
t3yca+jEzzyQP7a5bnUB/4JvL30oPsm7S/DDrqTYOunXR+QGbjDXrX7kCnpM
3yfc/7/fXoIvmgZPLPaJ8mTfXELnk6r+94XOF/N561NwBd3xgNfwll++v8S8
6d9P+IydZ5vfaXOSzHWLm74BVx9lPu/st/PSwJ1evWF+4Wd+p/33Unm+rd9S
Bw431531nisV3e6Zd/KvNtftfD8V3Xfz9/B8lpjrtp+9lALv4b3mCOa67acu
p+Bf7ZJm+7cC5vdYX1xz3fpfmet2nmP+XmfdTrosvuh7+dWY+2N5YhfY3/w+
SI/w6hK+Cin0+9c/SA/1+hL7SArvRT3z/RYHMNetj0gK62GbuW59sc11m9OS
Au5dw5XcpdHm9zi8hm7m73KW0/10aejDzHWH/zP4YortI4enw89zs/keix9c
QCe7yny/xVtf8/em/QOf+QsX/F1rm99v32dz3eqCzHVb15rrzrrPkAKe7+C9
Vi9prtt+3Fx3jsGXH+CZfP3ykj3/856Hdx3rgt9pZ3Pd1of/wJeb7SL+p/k9
Nnchhf0k0Vy3+5X5vOXTpAh/+MDcofXHf/cfdPE9zeet/9xr/t21F9gH5ur7
V5r7Y/OQLrKu/IVbbn3DunXum8Vz38OvSzTXbb7oBXhr+9/ynvY2/66dG5rr
Nu/NrEPro2o+b/UJF/GFqPMOncK/5rrVAZnnZXkFb8Btyprr9jy9KJ7tK/QF
0eb3W5/qC/Dc0r2GF5rH/H7L07jEuZn3FXO3nOa61RVfgjcY8UpzGbPOLb57
if3T4xW+FlXMOrd+Ban8vfNfKP/FXLc442V06IeUB3fWfL/l0V3m3DnyFPwk
wnze8v8va196Qp+1xfy7ljeQin7c4xHneNN3rKsvLrGuQh+Slxet9z3KfI/V
Jd9Dp7bL/LuWB2Puj+3D7tCHLjf3zfYDl8D5m9ymnkkz1y3v5JJw5hvK6Tb3
0+kX/jPfY/2Jr8GT32c+b/keF5lX5rqqvAlz3c59L4EvtUgVbvZ/nov1V77I
vLiluW71ZxfZ99anMFctZr7H+ghcAH8OPA+Oul77w+ML4rWeZT5YynyPPQ8v
MqfrewYdYpr5vLUXM9ftc5YO3fk91h/rIvzSb45LH2o+b/UB5vstX+dP8WnN
561v1kX8PfIdA5f41Vy3PiOXhQf+Tr/j/B6L01ySTv8o/VE983fZuWga7125
36SnMNctnyFV85Qj8Poemudoz/Mr+Dk0/Fm6G/PcLe6TBl664kfW7Wrzectr
vMK8pvGP4PALzDninIvFrnIfnn+PfjCjCzrWWub8tbqp78gbqu8Cf3KyOTct
7+6AcnjT4W9864bw7f3y93OjT/xwk3nN7APCbTw1d74DHnv4W/q+pV7MswaZ
esnZpxw/KMvL9CJnp9U9zqnSe+mzvvEVn/Mh/27p3cIf0sNjjHjE9TM7wbG7
+ClX6DF/795vlJPuJ/+fp/Dk+3+DD39kRvmxv2AfyPCN/t5M9K2zXoHP//ul
fAgzMc9aYz5v97lt4vVl+uRnYv3Ft7E+B2YDlws39bwDF2zbyjmYFgi//YiL
+AZblTMVBM683ZW+e9Nm8IS0IHwMTrvh4/flevRKT3IK73VVfu7nytMJ4j60
c8ePa/RaeFBHguTz4I4Obsxq+IGrc8HnH+shHe5K8UVzM7fa5Imea8Jy3lPH
x9vqzLzpK18sY56SPj/9Wt/08kNbAk7SM5/0nv70U66LwCEXFVB/FMDf23UB
9aeH6ROtf1sm+eLOpV76thA+0k6eo+3v5oAvxRZh7l8pK3iOu/ric8XAJfbk
UC7hLJ5LwzB8GH7IJZxkOnXO7nDlcQeLdzpV+qNw9H1bc6OLvzZFfkdR1MN1
8pHjXHUyOGRYCXhQ/QrC4zo0Xn1EFDq+gILwT6aOg/d1v6TyoIvgax07jnyo
b8oIjwqFF+o/Bh7y6zLKMSwOf2bQGPkHltNzj7xg38ONY+iDsifAo4grzfc3
+4hDVqSfXVMGHtHwkcpfqCTdXJx4NSPEs6oi/Wk5/MESRsC7qF1V+FUFcNea
I8G1ytYUTljlgsUdUkcK/6+r/NAayoMYwbzAowHz8ba1+f73Q8kBiamvPGL5
ENYfSr2avdFlfHAaaD0MVt/dWP4GjZVDMRCd2nTp9/2a4lfZYJBwhhbK124t
P8mBWj+tpd9vR17PZXPd+ke0ZT/Z0Fl+tgPVj3RUH91dOtyBnI83Osm/qA/f
k6e/8uu78D5694f3vqWf+qOu8lsbfAHdSA/288edlI8wAFwoexfmFJvai38y
QHz4Nso7bsV8834f5Xq3FQ+/pXgOPeXb1hV+b8UO6BEO9uU+9+8tP/DO8tft
r7ywvrzX2zorv6CvfD77K0e+k/whP/IzB4BXt+wgnVQ35QQNBqca1J734q8u
ypMaJJynDTqCch3gyV8YLL/TVvBA8rcVD3MQ97lqM3CP7M3R854cynzklybo
7r2aCbcfrnlZY/b/0WadWJ/74fBgb9WXTrOe8oOGM5d/Uhe9w8Ja4OTbhrE/
eNZibrgoGX5j2lDqwOfJwjeqkFO/egT7be5qyr2qCK54bJhy2BOlgyiLLr7o
CObLjStp347l/Uo/Sv4SFZmPDymDbv32aOrJ0ATO0+DSmmuMkZ66nH5PlM6d
sfJFj1WucZh8HcdLxxTDPrCoGO+Ro6//uP/Ycy4U/8B3k1TPlxIfr7B4gFPJ
k1oZBV8opQDr8PU09rf+kcxHEvLJ73rGJ39Iu95ya/+cyVwyexjvUbFc5FTm
na1cj2LsYz/khM98drb8eEPkUx2oHO356KwLFAU36JeNOV35+fCO5haCBzJB
OcIRC8AJHZ21rbsCpINYgD9PC51r1/3wW8i2WHVXnk+8Rzt/X8L+fzEYXca3
3vKlXyYcIEj+lp7wk/svE282B/M4R+9s9corwQHeBsJnc3IxbD27Snkx2cXr
cAEnb79W+2E2fMY6uTB3OPhR35FN+oL39NHF11OHtMqquY+pW6wfynr24X2Z
5Rf6hvn7hk2cO8Uyw28//RpeWa8tyhHLJP+uV9SToV/Cb68bwO8MNnWU/Tu+
BFdp7M/5cutJCvjRdvJGL6QX3viEOfuFHfK59YMn3PIxeszYnfBk6vvIf+wB
uNPx3byPZXzQ1wTdT4Efuk99ord4GnfhF+XaL39gb3iqqXfgvXh8hx4hj/gq
C/+jTzn3vfKAPPk95f6Db9D4J60TD+0z/1HPn/5Zuj8P9JUR/6nfPCL/cHfN
6W6noIc8ov3fVblXN9G3Hv5N/vbppOu8Ce7R43fxtNNxn99exx8s+H/yRflA
v596TT5pR7VOTB9hfUnT6NcK/Y/zpdpb+qmLaeB12f5kn19nrlsfizTxDUw/
5czDfzb9lH0vU+VLdgJ/+7evwNPeXAY/XHIKHsiRV/Rxjc11Z3yUcJr5lINj
WL/qi+DVGf+mfshmrttc3YvSr53V/PoF+Fi9C3x/9hT88/O+pL/+/KL8yj76
npnP2znFBdbD6YvS/T2n//0jBd3955e4z8fNdaef6fAPfMWtqayrJea61YGZ
6859Kn+Fus75vNOnZxRuE35dfb35d62/zD/wylpdR9/ay3zezgfPgXel3VD+
6TP6RLfz+M7luC0dk/m8PY/OSy/8X6rtB9Y94z5fMNft3PSu/JDN5+16PM+6
+uojPvDkkq0zXv4NT7LdHfGXHl+iXjzD39vjns4vc936IJzR9z+gj/7xMfhA
xTP43Q15gi7mxRPu89mz4B6DnoH73Xp6ye4PV85Kt/hcOY/mup0Xmd9jeazP
lD/1BHw40Hy/g2M+fcb+8ObRJfbRU/Dfuj4H58xqfo/TPyaZ67Zfeal6w1y3
/men1Pe90vtrvt/53c9Pwrcc80Z6YfN7rK/3GficE5Qn1eIZ+GSXM+hwc77D
7+i++R7LuzkDT9X5vNUPm+vWV/gUPOdy7/CVav6Y9bP2JH6kp98INzN/l1On
fPgLPu1Pb7VfPeJ3ljlBn3v2nXR55nvsPn9C+LxLGjpN8+9antZp4eQf4Bts
ecz7W+xUivBc+Cp7H14CHzgB773mu0/Xrf78L3SdXT9QV/s85vnuPSl+7Hvt
P+a6xZVOfsKf7fljvsf5O8acgDcb9BZ+VLcHPMdmx+F7PxS/8c8HvC9f/aX5
yFt0DWXM99h57l+cF9vfMkf+znze8qj+Yt7U8g18gA3muuXhHAc/jBcf8vJD
8MY6J9jnN7yl/001v9/ycE+C+31jvsfWhY/B5weexBei2GvwpfvmuVie/Am9
j6+YW0Wa65YfeBKcKuCVdLLme5z9/LuTWocveV+Wms9b/slJ+F25n4k/85D1
v/QvfACKPqMPvfaA9bn2BPxGJ2fN6tm1/q9rnR9/olxa8/32fT0JD9P9qXIn
zTqx/lunxNOWfnyFWf/WB/AMfNr/PUbvUN1ct/f1NN+z/qF0Rubftfz8U/DW
XP/P/mB1eaeYW828pzmRuW7znU/x3l3+j+f7/BG4/a0T4nP+B49r/WPwwJLm
89bf/xa6GFdz3Xm/G53U/nZDPnXme6zfzinh89fVp5vPW37CKeFa/+J3dNh8
3vKYTjJPdOZitu59zHznz1O8Fz1TyR9Jr98/7JT2/wvML949ZB1mO8n5Pvk8
ffGBh+Clq811W/edVR/9mPPrxEnmUy/OUO+1Mr/H8jxOwXPuc0p5zY/AGw+f
ZN4074R8pM33W//aU8yPah+T/6dZJ9Y/8AQ80ptHqauf378EP/YEfiZvf5cu
yXy/zZ85xXq7+Rs43jlz3fIPTrP+a/zCuvrX/Lt2HnCKc3PCL/L1Mp+3vHWz
n9s+/ifwxv7munMuFTfryuJuPyrH4Qnzl8SzzDXcDrGu+j4F325+Ft74m4P0
4+uegGOfMtctX+E73pfDZn92zsNK5ryzPAH5xnd+oTmgOd+tzm8fuOUNc93y
qVPYlw7slX/dS+GoF7k/q/bg/5NeuPfqS/CHY/dJx/GOczPHv/hX3Nv9/7g6
7/ic7vf/o/aqXVRr11ZUaWuVDkpVW1XUHkXtGXvviFF7Z5gZVpaRSSYiw8i6
5c6QSEKIHav8zn2eLx/fx8+f9+N+3E7OeZ/3+7pe12vIr/st5+wc43NTr+0p
nbLxucnXukVdV09z/2TNVV0z8WdYdYK6MaQwOOTQ28wlmx5P/R//38xNyGbu
Vua4/GqKwqu8a9SZJo55TL9fHF/c7Xn4Zg904/y9Uxx+ZpF78Mx/PqLzpYRy
NPLYx2KO6H0pJf7hA/jev7umCtcTT/gpdWO/o/J1rwifc8tz5lOeR+STX5l5
cYOXOkcOq26sQr094zX7Ty8X8Ipg6ZtCX7KuCvbzHA9XQkf86CXzytg9zC92
VAKn9XhJnbloF3yY2pXhFRd6jb6m0473/rc2/tix1+wP3tvkE1tNvv1vWT8t
topXXx0+TIXC6I4n/Kv570fgt7Z+zdy3NtJ/OdWQH35R8ilWbmB/y/xYeaMl
4C/lOQhn/lT6wVLkm7d3EH5VG/2vTZdn8lbt0YNXqAe/pV15eDiW1eDqv9UX
7lRR+Rqr6JcrfiZeYiXwlo9XogdfY3yOn7R0qcvwJX7dCD3g0mroSe2W6n1p
DH47oQb8PefFOqea8vnlmvjmTVgknLm5fHg+RU/920LNoz/H3yCnDjmMXedT
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
9bk+nPvZ5xF9xHXjd0zdRCS+BwX50vUYv2P6N0ckC1eFZ+Vk/F221+lEhHx9
H4D/p+bCY6x6UfhPPv14fWP9m760F8HTjuSBM/TPYQ4SHAEOdiGX+tb2/5q4
QrjyuXLEw/n/7n/XbPDVJjngTm7v/t7b8NCm5YDHjo7QOZUlnzTjOk0+aIR4
9ZniLxmf2163pRd1vmRwXq83Pjfnv5HUA4dSxQczft/kJeu987gpflEOfNfV
4ez/ry3o063Z8Btfh6tOS6QeDskGr04IRy/vfEP7j/G5OXcyft+Gm565pvzQ
HNaV7fpt9cXdWM7lCtnweH+M4NycHM16qJStOVo49Y/rFXQr3bPh8c6IpO6K
jJTfu/HemevR+L7p9xdGXxCVCW75MEy89HDltmczX+sbqblMqOo64zpNnvRF
5gsdLnD+bsuhzil6UfPBYOYFLXKYC7hcQm/SMJD9Z7TxuTlvvEi9t8uf+1PH
eC7mv8vKUTqnHMM70gUYn5u6/7PC1Y3PbftTtnGumbkWZ9GVeBrnrJm3G8Pf
2+mMcLZ8eNTdjXrArEd9paN/wHzKhjOb54MP9dXQh7y/Ltd4LmW8uA+7H4Gj
Fr8OTjvKCx7IwifiCSegf6l1CtxvkVF3mbnyCfItP6G52zP225+SmL80PMa5
OdCo62z78q4k/JlburMPRxRw31paeC6PXdl/wl+kmHjr+pvMW6+4oqcY9op5
ZZs0fEhs+KTp+23Ut2YOaIZ8PI6Ap118Ix1HpnDUQzq/3jLnenZLvkwHqZdK
FVadL/+QxIOsQ5vviuljdof6zfegfAJLwgNJlO90y4PiJ5SRn+cDfHWKHoQ3
4l+W/uL2I3xL6jtRR9Upi3/aw4fal/bi43SsNLzQwo/kX7GT+VT50vzO4Qf4
zBzYDh7esAz+cj7G9839a6v8oMpKn/gY3n6/LfQFHcvT5/78jPs291/mIHc/
VF68fJ+aCeesUwEeWst3fZyD+sGK4t++on6z9a2mPrgy/Ktyb6gHltsrl6Qa
PIdVhZRrv1a4nHL6Cooo134V876/a1jldwI+sH0F+O3BmvAte5aQX9wy9LNt
PhGOWgqdbKXlrIfcT+E37i4L/63DEvVT7/IRysG/WrsIndTVOvIh+VD5Agvl
Y1CfPrRVJXCGCQvkY9xQ+vGqFvbtefAoljeSj1M1+SLO0d/VWP6HNZTDNRu+
ysRm8meupfzW2aqvWsBrKlKXHBmrnfhIrfDP+aSB9Kez4AlntZH/fyN4VsNm
Kof3S3CVDU3QcS+cKZz5K+ltW1jgacykPizSUTk+rclL3T5NuE0ncNQKX3I9
Q9/hYF2t7C9fwxvsOB2+RPvvwJ97d7KgH5zOublOOOqZb/l/T07XXOkn8Yd/
5Pc7T1XernwRnbuL3ziV60nvDS/9yc/kvTpPka/ab8rn+hWe6sTJ1NV3f4MP
3/gP+dFNBg/f2w+fyekD4DdunMx+PnwAuOusocIzJ0kv85fy8kbI32AC+pRd
f6Gz/mk03z8yFr/EH/9iznJstHK+Rsp/rL/0dKPhj1X8i/frp9/gzx8apvyj
wfz+i1/lnzAUnW/4KPbhD/rz/bAR+NyWH6+8hr/kZzgKfNXGCzXX4yBw4OiR
6HNt/FUbXvThIPk/D0ff7TGV/r3qQHhrWwbLf3Uqde8f/ZSb1p+c65Sp8OIG
9MV3t21fcMigqcrd6INvgPUX5QNOoQ7v1gtfrJwe+ny68Myf5C/XnXX45wzl
pHTXXOk7cnjjZwov/Z7n+Pu3ykuaSV36vJvyEDtKRz8L/GfAt/BO231D/qDn
DPCl7h3BWwa2hWfor/fO/xv8Z3q1Jmdw00z00aPbMVda2BR8vrSdcpbb4qt2
vjH6+kVz6Nciv0BXHvYZueeu83jf77SWb1sD8rOqz8f/bdbnykeri49B8ALO
Hd/m4vN/wuffLoQH/ntTcMUqNclNnriYerv+O15ldfkhLJNvSSN4hg2qMR/Z
sFJ5eQ017zP2N3P9rkZ3bMunNuvYyvhyfLEGXCWurvwiPgTnfLVa88fa4o2X
QY+QsZa615bDaPudg6XBdf9wkP/AJ/IFLYXOfd5G+MC2+ZqJZ5V4r7s3/fU/
Eo5dmH1j/wbmWcer4G/zmXwg122UDkv5LNdeJ5vrysYvNfluFcAP97xUzstm
+oWQ8spZK5DP2zbp7sszHylTIH7XdvHE3umdn5DfunsneFT/Mpz70x6Dm6Xu
1P0pRe7edw/AwXruVd8h37wRD9A/2nLtzXOl+PvcBJPXKX/vj4vBMx+eBy5a
11k5gEWVO3yXfq2iC7j0wCKa0+Ukgx8cxJ/hSWHh8Nn8vR+4au5QGPxzRDbX
eccVnPbjQuism8q/bp+7fMOMesz0hbmFHs3vGP7tW94w92+TAS+ryCn2/9b/
paBXS1f/cpI+rvYreIm7U5gvD/fCv7ryyxR8MW8qh8Vbvs0v6Heyk+EZ/u0L
r29yAXzIvUnwQ/r4yO/6MfzAbjfAh6+e0d/1CJzk5A3xBPypr3ob3zfPv3j4
jQ8CNBd+BB+jbzw8pZRA+FTHHqKXXHKd57I0mDnUT0bdbuK119DxVTkPnmyX
T3178Sp6wHEX4G0uzUvBbyBWevbz9Ilj7qiPjkKP3zBEPmO5wiWi0MfdCgUn
2ZMLP+foZa5zYQQ4zKwc6TovgxuEKr+gcC51+PTL4AA5l3XOGt83cxQuCbeJ
km95NnjsLxfRpX4YLb+12/DToiLB99rEqN/Jgg9TL4I60/4qOMwa43OTNxqJ
3vnFNZ7L/CzwwIJw1kneDfCNl0Y/aOrvw5PFT6Qu3ZcpXpxwoRtJet+N3zF9
p8KVK3RT/M8s9MX9jM9NPMsqHz/jd0yeRZj8J1Ph/7TIQrcbGUqfPjqN/bPV
LfSk34dSh3+Zwb63KFN9UCh83dFZ+F9VMH7H9JsLE16XxTxx/i3Wc6MQfB5O
Z2memw5Oe/A8dfj626pPMsBzPj0PXtEhBx5gfDq640bn4W9/kSsfiXTpMYO1
X91NFW9YfJ7z4gnfR48wLQMeYOcL4Dx98+mzRmaA85e8gA59yru8EuNzW7/X
N1j4TD5zyd+M3zd9Q4PUF+eDb49ME94SyDzCxlsz8/yM6zTr0SDw1cxHmoul
o/PNC2CfHPoY/DMmTbrgQHiqj5+gv5uRQb95Lwheqw1HNevRdPDz5sZ12t7z
Fk/ho840fsecnwbyfmU9YT9PsIIz7/bX/vNMuWxp9N0ZAfDlmj2nz+qVzv28
FUiuUIvn1P8eadIjB0gn+wIc+3lqijnPdAwUz78AP9VVVvhmJ/3BP78u0JzL
Kt6jP7y77Kf0iYdSwLsK+QlnLqAfWWllfvHYXz7Jz8Q3sKI3z/JX312Af+xU
K7hr/QDwiuCn0qcYv2/mZ/uBexx4qr83Bd10OX/wourPpGe08nwP+aO/Ti2g
T2xj/L2mvjQQfn77AvbPK6no0OsGMkdboJydSengxjFB4hmKJ/wkAz5Y72B4
VvYFqeIJpph9bnvjc3P/ekLdOyVNc7EA9vNNj5hLdreCK/YJ4P6ve8h8tloq
OKdzAOt290PmNa2Nz00f/UBwht0PVD+ngdt/G0hf/J18gGukohP/LpDrWZgv
/5808bQD4cdG39N6TkWnvypQed95zOkOpMEb9wuAB/XJPdXh6exXbkHoebvd
U26ysZ+Y53kwc5yXufzOcuN3TJ19kPwHcnh/c9LwnbgeCF5aIke+JenwqFcF
yTc7izlvVjp+FB2CNJ/KVD5mOrziP4LIBatzi3MkIB1c0fb/2p7H55nsw78Y
12nexwusq1EZzD33ZLKvrrjAe1ouTfvzLenrL4DbWy3w86PShcvp/3VKZt3+
ZnxuW+9+QfAh3RI03zQ+N3kaQeAqs6/L1zSd9XkzSPteHH1cf+Nz0zcyCF79
m2jO8fhUzWWC5G8cpTonTToL43MTF79MPXY2FfytTjD1SX64fCOt7JMbA4Xz
hOIb0NcKPlw4kPptXCh9bpl09uGjwcLhL4i3Y3xu4uznwQMvB7FOEtPwRRkV
nKz9CX5FXhrzoOYXpNP3px7+QOfL0Aua053Dv716BuuttHFOmf3bWeqHupnw
afuFsm8MPyM+WKbwbeO8M/OQT2temc2+5CUcO88X3KZxruaDl5gXfOgDbhlw
R/Oay/hFpHpRr669S/1zLgo90QbPVHgZefCNZ17R33UKncW6eyn4C8fo/h9P
JR/3vnxXYqiXhhxTPZ+PL0qtOHxCfN7pyh9Sjx27ih/ImiPKt8rX/DqO/DLr
IfE3xLO11Xtmfv1h+fs9pi7KiMevtfhhfACmPsPPJDiJc63vIerqvs81p74p
vu4B9Bcu0vX8lUL9ed6F/r3KK87Hvqns85ud0T0lG3W4bZ3GyVdnjCM6iKpv
ee5vjHrexFv3i19UBD3jn7epA/s7aZ5YVPlHufJR3yf/hKLoueblKg9rJ/zb
ZUXkD5Yj34lt8ssqQt/RNYc6ZMg24dvSZwXcpe5qsIV6pm4JeCnf3Us267Kj
/5KPaV8SP65p73LE/qXO8S8DDmD3CF+OuhuVZ1oGX2i3J/gtfLJeeRnllUfw
DD3LH/bSAZVHr7q6QP7qq9A9PS2Pr9qfBeqDVrIPVKyA3vPmC/gVD1Ywv/uj
Mr6FP/ynfm0ZuqqblfGVHfxWc+rFmi9XAz85Wkh66kXgoo+U59XhA/GIFvH/
xtXAB+9eMXCzrguVp/Yx/CWPkvA8181XHo368RGllaslXfnK2uCZJ8uRJzt/
rvwS6wmHqQA+9vds4Vf1+H8nVSJ3uJideA4N6WevVhEONks8zM/AW8rUALf8
ZCZ1RbOm5CC/+Ji/K3K69ufm4JOtlC+cOU2648/xK8iuS57UpBnyc/4CfKB4
I+WeTGdeVrodOSl/NbWAa0xTfsHXyqv6XHlJ06kbB3QWr7ItuSEtpuNDtbIL
PgP32ys/dxr+LUu6wT+s30G66anU7R98b0WP2xk/hO+naJ7+IzkXv3Ql9yp+
Mus8vQc696o/klfeeLLer17MLyw/wRuMmQgu/V1v+nT73vgZOk4SH+M3/EAc
f8cn8I9JPMcjfeUH2x/9+5vx0g31wy903F/4Faz6h/1/Tj/45xeGCM//W76v
/aSvNz43/amGMwdZYvy/Zj0yBD5zxwHghJd/xj/zj4HCUQfqveuFT2Pkn/AM
N49UHuvvWg9/wdd1G6f8o37SXw8Gd3KZIH/jP7n/HwzCN9jGXzX5uP3wqbAO
YH1mTab+f9IXnX7MH/JPngK/d++v4Ks9foW/d2+ydHO9NX/phW9wyyma8/ZU
Tkd3cpe+myz/oh/lx2g8X7Nfmsr7ldVN/pmdWYenxO+90RXe75gO+C5mT2du
ld0Z3Kb8V/IrngG+uqwTc668tjyvMTOY2/b6Bh67Dc809c3TlJ/eTvmDzfAb
sc5UvsaX4u81sZj798sZqt9as/4n18fH2GGmclVaShdfh/f6lB062T0tuf/L
P5WfxhzlyDRj/X9SC939wrm87xOa8D7urm4x65U58+A/NPxMcytj3zDnifPg
1cTUh99Yv6JyqBdof64L7trwQ+5n6yXycaoL3/6ZfE4urJAfch18Hb8rD7/9
35XwvmrU1ntRmn0pZZV0x7WUO1yS66m8mn14c01yHB4WxYekwRr0O+2qw7eM
KWKhbrCXf8VHOhcKi/e7gfnXinf7eSHlZa+TT4h0GTOeo1P2WkddlFJOc8an
qqs3oFtZVI7/d+MT9CydN4EbXy2NP/+Pj8ABbLir6atdQvvqffEkN+t9Kc51
7s3Dn8p3MzjAhaLkWdzPRSe7d5v49kXxOXHKxU/p1Xb9vUXkk5yNjmz/LubO
+wtZ0XXL5zBmj/yyCmlOkUUd0mQfc64mb/CR+9eoT0w8ez/10q9GPWMrB0al
K3fVSbjQK3Rzv6Xhg1fzgHDp1/TdXdK4D98cThWPCZ3jHCt475nD8HNinqtv
Teb3X7iKl2V8bpszBhifmz6w7ty3Ssbntv1yZ5J4LCdY/yULqIdHJNFHLDqO
j/fZJ/ShU26Qk3v9FPjq6cfUyTOugx/+8W6O/xjexeFr8lny5lyzfwhvsN5V
fj9QuZlR94U3RnOdc08r10x445xo9KrtzjIPbZsnHtQV6pk959A7b7lDX1kq
ilz1iv7Uz2vugDutvkxdfcKf+ctXOerLLqH/GhMg30uj/jdz9CKVexsknUsW
fKpn4dz/AUH6nVv4RpYJoR7bGkyf7mv0O6be6ILq/wvSnWXQF8y7QH8RFcoc
7VaaeBcX6Iu/CadfcEujv+h9Hp1yo4viWxqfm+/VeXKQgy6iuylpfG7qmIPx
Icy7hJ59sdGv2fbVKkHymbzMPrYyJYV9LwD+54YY+GB7jc/NOj2Q/t0lFvzn
9k3x2fypn+te01zA+NzEEfy5ntrX2Te+T6FfGO6Hb8C0eM3Bje+buk0/+otV
ynsablyn6acUIF5xMvPxNjfhyy31E2/qpvydjM/NvugcuNa9FPrQyxa9j+ek
w0plPlJwE17NhXPS62Von09B5zjEn/0kPkP+0jfBWwqfA6/begu926XkFOq7
M/DrgjLhNQ21sE6qnYG/VDhbPl3G57b3z/OM9J634ZPMThIu6qs8oxzWVWKi
8MPT4Eg97+Dz8ywJftrD0+wzoXe0bySCGzz3Ja9q7F35HiSBW/r6vNf1m/V/
Inr2R97ifd1TnksS+se6PqyH+/dZJ4cS0dc38JFvZz7zx4OJ+B64eYFftXpA
/x6VCJ7s5i0e6QP5FSeByx3zBgeY8JB9IC+Bz6/o+40eMV/zN37HzE3whmeV
95D3sXWC8F4v7s/4R+IXJUgn7in8/An6iN6J+FTc9wI3ePRU+gvjeky83xsf
0bBn6GR3J4JHfe1DjvbrJ/QpvyfgI1HHi7673xPhk/EpnPte8lt+LN19PLy7
g6eEoz6RD94N+veOnvjBJj5RvfTu7/JWnvVT5ZolgOdEerMOvR+LBxKPz+1o
T/hsTR5TDyfeAEcN8xSf/LHO2Xj8MZ54Khf+ifS88fJZ9ea9O/OE+cJ64z7Y
+op73vASRz5THZKs3/dFf7rsiXRMSfglFvbV3OoJz/1MknTBvqyfeQ+ZI/+Z
CO+0jbf8nx8wh+0bzzzlD2/whPb5nNftE+BRx3vDPwy7zxztnwT4Vy18pCe9
J/w5gfv/vTf+h3/do17Ki+c93e7NubnrrnIrEoT3ah1m57JvfJSAnjrei/v/
Rw5/7/4E+Wd6wiubkau/N5H7XMUHnNaGc5rr1gKev9oXfPWXHOaJXkni//tq
fiR/j+ZJ7BttfOTbkKm+LAlemZ2PcqkyUpWnB+90ljc8zy/SpS9ORO/wmQ8+
Mz6p5IyfS+L9Le2DX+sn6cq5sDA/PXwG/uEPqcyvn1rk03tG/MkUzuvyN8Hx
lp+RziVZuaIW+MAFvuSDr0oUfy9Z/qK+8m+JR9fZxSI/ltPKPYyTPjGJeibF
V/jGFelnE+XT4i1fmij8nL9KkN+sD/PH+pe0PhOY10T5cJ+XRqpOTuD39/kq
rzAcfOObRPkM+PI+/hbCffsrgf0k2idZuC+4Yqck6rrWxvWbuupAzq/pCfKd
MH7H3F/9wV2TEngvumhf3X0O3Z9nArj0C1/lVZ3VfDZJvPQz2h/Owqd6YJE/
yTnykgqfZp//9yb8VfdzzOsv+sDreHpT+ho/+PxVfNiHPVKZX7QIBB928GYO
2CGD5x56Xn7UXsL/M7mfDhfg81fxVP2ZKZ+BEM0LTlAHXspU3RUCD7DGMfbP
Cpk6j1RHzXSXH8tt8O0aYfgD2/TmJp84Gzywc4T8NI4q3yGHOdTdCOqB9Qfl
X5TNe50eAZ425KByOu7Iz+QSvMrJh+B9bbiHPuKbGHgIIQfwVzmWz/25Eou+
vriLcOMH2h+u8tw/cqJfuPaQ+tz/mnyYHcVbfkS9F3wDfZDXPuU1P8FXfF9C
8v/8u8y52jPO/dZGPW/O5faIh/ZCPPObwg/3SIdr9AsmT8fKuTx1J/qg46/g
h9tbwYePbqVOy3yh+aNV87V/4Y2fegm/uqtVPsz/KtfS6GtM/CpD89yN8od/
i8/tiwzWye8btX6KgM90Ux7itxvkC1oM36rFuez/t9ep/yoqX8e7PJfy9uJj
F4cP+SAPXDdttXQZJfmdYfncz8fLmY8klECvF3af/Xz1Mvk4lVTO+wOup84y
5rNflLWadbWtPzV5E4ve5wuYfp9POe+KLARnWFveCp+7QP5dCzX3qQD+Vv6V
+AYL6JftKsMnrPsfOLzND9Oss+QnUOct9eGCOexj1avhSxlaCPxq4xzpgpW3
9aQovMETs+V/+DF/b1YJfO3azVQu9sfwe7uWAq/rMVO89NrS15cFLw2bDo50
uo54vxXQafabqny0euAtv1QiL/vUFPGWG3I9VarBXy1qfG7qUxvrPtTAd7Hq
VPGWpd9P/8SCn6++X7cV/mOD68F/GzyVfmRwW3inAY3xBbXx+mzr3Ocr+I3l
WpBrf2QyfYTTV/jlZrWENzh0kvxCO+BbO6w1/qVJk/X7ncnvq9ge37/tkzUH
6SZedAcL5/5k6uob3ys/pQt4YKWJ4JkOP4IHJnUFp6o5QXOoHvAYvX5Q/vt4
9H2xveAH1uopX8HxOi96K0+hj/Crf4Qn/4r/4aK+8ikdy3675lfy34f+Sc7O
3FHyi/tVuep/oge/MVQ+CT/z/3b8E7+Cpn8yl/HuLh3978rx6U/fvfUHeGVz
jesx8ZWhzKlL/KwcqN+Fb/9Nnbm5j3Ln+7Fu+4yTj9+v8GCP9hWeNkH+533I
MS/9Ozr69hOlW/+F9yW9N7hcyiT8n9N78Ry79GQdVpwI3/VwD3iJrt/DGyw3
SbrLH+Cr2/wzTZ+2ifAQinWDr5vYgfvz5WTl0nYmX+OVsR5MHuIUdLW/dJQe
vy253u2nMl/4+mvmC1da8d75TlU+XXt4lV+1AGe7NVV5K8Z6NvkFTdBxL50C
z7Boa+GKDSzwuqaLt/85uJOlrvC36ZxHV5qLt1kLX4gr73jRTTTvqKH89xmc
F4Uby0fxI3DjK7Poj441lJ9AVXjLebPg7Q+uRw7IgArCae2oP6M+xX/187LK
xZ4Nryy3lnwkSslfdC59XK2PuZ/zS5B7HjkfXGJYTfils4vBY3+6BL1tzZrw
t21zItNveKl4rdXFHy5iAV9fwb4xopre38LyH16p+1yV92L/G/qFH1byPqZX
hM9sy0M0+4fVrOcjFaWXf4EO8Xd71lvdD5VvWMC58O1q+OrdSil/Kl88xjXs
89uLy9/1nvSY67Q/FFd+ax719kIH8ZM/kL4jF/zq33XwkYoUkj+MclWmrocn
HPEf/X5iBjzDYhuVY/gfutRW6e91Frb7EvcK/sPMNHAtr83i57+Uf5cV/G3X
duW4vaSvLJoqn7QdyoV/jq750k30nvE7pSN4Br9oVLL4Brvw2yn0FBzjWoJ0
THt5L248TuF5JqBj/X0/+MOdx9L5xqNTrn2Adbj3Mf9v6XjVOQeUy/BQPm9x
wpkPc/25D/h7q1yFp/TiCPv2tgfysYyFNxLqBv9wWz59kH2sfCzdqZcm34M/
9sUV5b0eA2e26YJNvmcUeEv34+Kp3kGXdPGi8n9PaF6ZA29wR6R8rk6ybpfe
Fl8rTL6OnpqL3eLvWh/K35vuzdxwSibPpUGocnVPyyf/FnhsX/H9np6Gp3Qs
Azw56ILm1+/4pWn0lb+fpw/qelbztVTpGYOUn+snPrDwuv0Bylc9J/xBfdyu
s+RGbfOjz41LpP+68Q4fCwCv/jCJen7XGfmsBosvbXzf7LPP4gdb9gL4yaJE
4SFn9P6Gqo5NgEfX4rRyOsKUu5Eg3NIXvGhiuOrbG7wvO33gsZyOAE/46IZ0
4l7wipsafaKtP/jvGvzPbcbnZh55lNbndfqvAV7iOcSQvxZ0nfVwwIt+dmis
5gvX1e94wo9aGKc+5Zr4M57Ci65rnnID/MrqKf5qAvhq0evoPRd6CsdLki+E
8X3zXDuFHrCGhbnkrevwkX71hPd1wMLvx19Hd7n3FO/vdqv6yhvwTm94CudM
VS7VDb0Xp8QfSAUfS77K8+p/Ahx4abp8UK/hW/jXCeWMZEhPfRVdZOUT+DNY
0uG/5cfCu57tkYye4hb6i+9j5VN6jL5vbhb4wNtY8PbLx+A9LrsNfvI4Bj5t
hWOq828LPzc+N32Z3ZOpE25LpxyN/2Gq63s8x8znjgF3uu7G+ml+V7rpGM1N
3NlP5t5FpxMcC4+6oxv3p0OeeLax+HAOc6fOD8zjPEqIVf/urtyZPPjSv0Rr
33aD/1z0nvjGMeDnddzoZ23+q2aebhTr3PsIPgM2/1XTDzwKPCrpsPKz7inn
8Qr95pKjzGva5mseFw0vccdR5YA8AC8qEq19zJXrafCA8zHiCvzJhq7yG8ln
Xp8dpTwRV861lPvw1ctdkb/EEfEY88XvjQK333cUHOmnfHC/LVfEH3ZlXrMx
H9+SVlfEN3aFj10jn/dixRV4U8uPgo/Z3WfuMy5K/KKj8Lp73lO/E6X8qSPS
S97X/haFvruMK/uPxz3lm1zhOj9xhe937758k6LJf1ntJvzwHnXX3Wj64tuu
vF9295QPG8Pc6q4beNGDu5pfR8tX0xXdfdM78G8HRIGb7XAFZ76Ry3PpdkU8
Ujf0ofG5yh+5IvzfTfczBx1W6Wj5GboJr86lT/wp+v31mH5R2eIjRcOjG+/G
vvQ2E97m4SvaN1zFW8tk3p0fjZ73M1ftV1nyYY4BX/reXX4smdSBg+OEk3so
vykTnKRynK7zGPrTG+nMidbEUp+ccoffVZAqP/MYzQfd2VdTbsr/JAadxWtX
fImX3CRHwC+Gc7abO/PfPUmqA6OZ4+x2xTf1vyTeowqx4Dl2Hvh7v0qQXtj4
3NQ5eFCPVYgXrzJW68dD/jbX5bMdJxzYA53vnGtaV3HgZh4ewlVi0Vl/HYdO
/IQHczTHKOmsY/BtmGZ8bua9XYQvvSdGeIsb86M74dKnRIu3/+6+haoeixEP
012+5SHsewXG8zVzGtzBaX+8oNzzGOZi/3nwHD8OFu4aAy5U+Bhzrq4ByuWJ
4XxP8tCc5SxzhEnR8Poq6j48F69yXLTmC27S+/vQX/wcLZ6nB3Nqm77GXFex
PK+ax5Vb5835PvoqvgSDToJzrvXk/Mq/pt8/CV5qy/Ex7+t1cMJmnuwPl04q
PyVB682bOeD2E5yz/yTB1x10Gpz51HHmuekW+I3JZ+STc1x4VwrPt7mf5ibu
wldvam57Dp756aPsG+4WzdHOMeddfYT35abxO6ZvnL/8n4/I9yMNfnJyIDhh
a+m+bboJc78IRKdfyoV17pymOXsQvMrizpoHZfD7Pxl1oK2Od3ACl96VyT75
bRj88BRH+Tpm41N6JkI5TfvAo9rkULdnqe4dvAde2ahc+Zxcgi+Ru5t9fsYd
/HXbR+G722IXPLEDefJXiVYe2Q7qZOf78tuJA2ebtY05Qki+9CBx6IN6bFU9
/ACfpTvCY9tvVf74Y87BOjekK/8XP58Vj/GNWRDP8yqyifnynKfMPUMTqJ87
beK5dHznM29RHbtefvIvNF+4qfrZQXqcV/B+26ZKd2BPfV7ujXxa0sV7X5uq
/EOds8rHrLqa5zW9ELjWoSzpa1ZyHlkKo79bkgM/OWYZ+8mLIlZ8aXLkS7xU
/dEH8se7ozzKxcwZHxezqv7A52rlAs6jxOL4RlbKJ8dt0Hzl2ZVCB339gerG
+fSz7mXEE3vCeug4D97yjnLgJ98+k2+2nXzzypJT/3UBvhAhs+BjFK4AX+vA
C3jdB+3QZdyrLB33G+YmL2dprv0RfN3z0mN2nsZ97l0VnWNIYfCWwlOFM1Qn
x6F1UfC65MnMcVJqoBvdWVI600mp5hw9vhb+AJ+WIY+j5ESu0/lTK/tQeQs+
FhO4zhb16OvnVESfXmui/NYa4q8YWJUcrtkTla/XxGriqUdqyjd1PPXqk2bC
oz61wHeZIB5FK3Sjg+rDH1s2gXpgVRtwhsmN5D/5j3TTbckhatgEf8UT48Wv
+0q8ys8t6O8m6Hl1xN/g/BfgXTsmcO583AXfud3Kl2k2QTqvblb8azqiBz8+
TvVhN/hgrbtYmCeOw19r2Y/v9dQm7jhOua49eL4DfiIXvuVYrate+Eg07y3d
8d/gJPV+hs95+FcLfMRh9FltewqH6UOe+IVBmuN3J899YB/wsf595VfTDd5m
j174u079Q3k03+Kz2u8n+RAOkq/7j8rv+NlC/u8o7ZM9eV82/0JOzaYx1CGv
jOu37ZdXe4O/HfsHXHRKL3wqihu/Y+qDxgsn7ymdeA/lsk1EP9K6BziVDec0
/fXGa+7wnb7fmd9JGc/cdta35GgnfgPv+vw/4ut2AD9f3xadeOd36/lr4V1t
9F5MEi+rPX4Ll1uyTmw8YfO5fQkvcXAzC/XvJPlVthZe2hCc9uEk+v0NLZUT
Vw/f4A4Tuc+WpvBv235C7szrKeAeJ4z3wqxPjffChjM8naJcqkbMO36oxn2u
MFV5zfXJ05lWST6f0/R31dO+9yE+GDa81Dx3agtHLQsvuvYMredawudLCR+e
mQrOUgN+fs9i5Os1nyk9ezXhroXByX+ZLdyvKvzthYWko5+DLqB0FeVPveG8
XrtAfviV0PUPeZcDuIjnVaeS9pNXyilYwvtl87G07bfFXyivcKl00OWt8BCf
Uf/ELREeWBpfzeRH4GCjl0kHVIqcrzhjP7fd37mrlKNU0ko+wn10DTnL4UdZ
inB/Bmcrv3KFePJvmZNOygQ/WbRK/lpvwCv63YIv+niN8oVf00ccThdOtYb+
YsoL+eqkSA9uL12DclJOJkun5oAP57QC5ulvk+TftUG++k9TxDOjH1+0SXj7
U3TWmxLE+9oi3etjeEdVE9S3bhFf6AE8Q9dr4ANRqjf639ecOg599PHt0jXc
F88kRr6aO9ln7uThq/YyWvnUu8EreubBK9hwhesc6ih/qjzqrjlX4A/YcprM
+5CL3+avF9HvtHIGb2yYA+7xSyT+7XEu+F9dlY/Z5XDO/eeH2DfybsM/yQpn
Dnv4sPqgLN3/UHDja67Kc8mkju0Tgg//GOVRvs4ABxh5Xv2IG/c/JVW4RKD0
eu7i21jBSWoHvNc9mX6JN5VX4q+845PCCW/C5wn1gx/7l6f88ZLBi66dow5v
65WqHGh4aE3P0ke4eGvOmAjva9wZ4bRe6CbCbsCf3OpDH1fqNPWJDd8z/X58
uM4PfckPDY9jLj/tJPXk+NPU4R1jxVc8gd/7+rPihcZSrw49IV6Qv/TvsdTh
rifUJwaKtxYrHulxrYcg8TCjlRt7TPzSIM2/rsBP+1Z9X/8L9DupV+AVDPGg
v+6nPKmQKHg7B9yUCx/Oevg5Cv/P8u7g29mR6h+vwNPwdNPnl6RrEx41042c
09uX3+Mq5lznKH2uLQfK9M++TC5M96N6j2KYs8dHsQ5XuoLn97kGn7DsFfE2
XcHfdl2nL8uNUh7EUfEV46UrjAL3fnsUXGV8ovyQryjn5Sj15PfJ4EU5UfBy
v3FV7lWyeBqX8QtdcBiew4xk/F5qXKKvbHFIfp7ytfvU+NysHw6S3xGWIj/2
S+wnXx6izt+cAj7W4iL88JAD4k2l4iNXNBIfvIIDyqVNIxdmSiT4p/sBdKnL
06UnjYCnet4FHnvndPrxwhHgY/WdwUkC0plbuYRpn3QUnnaL3NuF4eAng53Y
/19kKs8rnH37qZN065nUbyPDpUM0fsfUZWQJVw9HnxvuyPvofVu6nnDxRpzI
1RqXDe/xQhi4xEYn9pPPcpQDGw5/6a4j+FXVbN67z0K1j+2T3/Jt7k/+BfnT
7uWciswV7yKMOc4MR/wN5txVvme4+GmOnF9H88RvN75v4gdOeu550gWH4zc7
0Im/NzmPXMja4VpvTszjwu7yvtQJly7SEd7yauHGw8PQj3/u9J7Ha6tffwwD
h3/qCG/5SS6+2VEh8HjtHPElcM9VHav70Gw/53vFXN5H+xDlne1XTkqOfI2M
75v8vv3iP+eK1xHKer6i+9DD+NzUt4eyf9o7or84ny3fyxB8+fbs17l8W316
COvh9T7pZ7Pw3zsSAh67ZT/1wNAs1eeh4PCL9yvXJlN8yxD21VOO4qXf4ryb
FYIOd5Ajc4GvM+VzFQqekOCk3KVb8u8NU06Kk/DVLOlHtM5ruXD+umekav9j
f/7UmTnsqTTx5I3fsfXfj5zEz7Si698axn3oYFyPrS6rnka97RMOvjrBmfqk
ZSo4yeYI8KJ5ztz/b1Lwb/k2XPieM+dm6ZvKf4lgzlXOWfrlZNWf4cwjEp2k
U0ig78gJ477FOVJffRHPPuYeppwvJ/GsrkqXGoo/88r90qFf43wpHs5zGeZM
/dnrGnOxIZHMbf9zgbd/O5b6fGME+VOjXcQfjgbHuBtBPeDizDll8+E0+TiR
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
7qKT9RmhfqcIfps1cpkjlx4p/+RCzC+is9Ax9R0Fbpn5n3ggtzS/G02d5vma
eWtQqnzDxtI3lX1Fv78qhf3w/Fj5pz0XrymZ/vfff8Btfnkm3kiCfDnGyafr
kXJyr7J/5o7nOXbJR1fSI075nhOV23iPetI1Gl3Vgamc48vuKV8gmjp/yjTp
9/N0nZeVTzqd57U6BxypfyTnUZUZ4vncBr/qFUauwXI75a9loq/JvyCejx36
o9Xp9NELAtiXFs8Rrz4VX+ty/tQbC+ZIF39TfoBn5DMzT75bSczHu/sqB2oe
/O3h8fhPlvQE/4xbIF/E68LBTohvsIj6ZNI16TqPKS9DPNJPr9Kv3fKQ7+IS
9gGbj5Dpl6l8lllLpWu+RH/R6TD44cZlvNcuF5m7FTkI/+rJCuG9F+WXeACd
6Z0V5KWOiQDPWeGkumUF5+w3IdIp7xO+vZK5ZN8LzNP37lGOib18mM/LZ2a3
+LT20scFKe9GuuMf16Pb7R+Iz1LCdvCltxvgmwUGKHdgG3qNqZvQHT84Bw5c
cSt9RNBm+eb5oefquEWfb6F+mPN/dMEm32mL3gtf+aqt57xeuI0+67oX/UvK
Ouaqz7czb5rmKR3rWnCz2bvF6z4pPpi9cOY94nme4FwuvUb5NfJ9GnYMP4fy
q5g/bthPX/noGP3s3JV6f504x7P/H1PnHZdl/b79vmVWpqa5M7dlpaaVuXKk
4GTI3htkg7JEZCiIIMpWWQpuXCjiFvfAvXeiaJmWmWWZZVn5477fR4/Pn/Li
dXtzXZ9xnsd5jAqe85BZqp8Xv8ADjfd7Crj62yvQjf60Fp+lxjPlX7qM51m2
ijmFTRL70WS5+AYrwQ9NEtGJ/LFS+S/lys1MhKddswY88H+rXvCyjLzNdfAu
NpbLvzHpungeym1czXs8koSOz7qSeYFXufKzEtjX0RvZ18dWCF+N51z6ZaNy
VJdrDjJV/gybpZdfBh4YGCe/X/FLry+lnt8Uqz5ou+a5y9BlD54qfdkO+a0t
o39sNxXe49pq4SH/4VFTxYPdDS8rcxn8hxlTlRezV/qapegrZ8bKZ3Uv++v9
JZofRYufv497/2CZfAujmRds3i9dRhk5RJejpLc6BF/6cBn17fJo+aodlv9S
mfLro+A//1QD3ji6jPr8eaTm6ceFty9RH6rvM/sEeOzFxfhgtIkGPz98THmU
pfiFhk0WDnxSPMBFzJVejSDv4/tT8jVapHsqQvX2ac7V0oXgwO9Phgf49mn5
GJSAP6eE0/8uU/7U3GLlIIdLl3cGvKimGDzBLFz+mWflU11E3303VD4GZzXX
KASnvRZMToQBRzLi4cU85wVh+AbnXMTX7u2F8JSehok/fEn3YAnnVZtw+fpe
Up5FsXLHwuSLIl/W0GLlZ4UpT/mK9l2J8hHClLt0BX5IQrH8RcPkw3ZVvhwl
uhdChZt9hT66qBifhO7h9OmDrstXpwSd2txw6Xa/kv6umHlET/3+n1c1hyqi
v/4tRLyIa8yVvivUuRQq34ar8i0vkl47FP/eL6+pjioSjh2G3rn1VepVx2Lm
ROtDdc9e4f/tV6TcilB0H6Ouqr+u/33jfD0MPH+IeMK9i1i3ncPYF19dUv5g
If4wE0OUd3xJ904h3zMkhOd86SLfs3kRuFbHEPqpxxeY108t1HkSQp2w74L6
LH3P9BBw75gLfM75Qt0XofDtHc/Lf6lIc5NQzTfPi+9XBJ6Zo/c+/5z8q4uF
e4TJt/Oc+DlF3OPfhIHfvim+5blC6gHPMPjqTU4xx5xTIJ5SKP3dhyeVH12I
j0p5KHrz+JP4qU4sYg5uFQ6u/vWxF8/ZOIcKpS/bcEQ85ALqw/hQ5QUfVs5U
gfzDQ+AXDTnE55wuYD67IgQfmFMH0ZclF4FHNQrVPqo/9wz95M1CcLaFIdKV
78WP0bf+58actGD0KTd3i+9RwP3ir89vvFv+0kXiv4XK13G33lcJOUTPw5nT
WexGX9C7lP931yTq7Ys7xU8oAW+ZFi7/7a3MNSxKwD+bhzMnCt3EvXCqCN1B
UJhyqCv5nJ+L4IM1DpXOdIPyqYvhi7YOo484WKHc2BL58oUxx2+5Vv45RdQb
E8Ok/y3X8ynifvw4VPyrlaoTipVjGA4ufWT5i/PN8PtN6/9eo6/iUtbn2IXw
/PvWn8+G3/t1sZ7nIn3PyXpfi+E//7ZIeoRI5VAvUZ+7RL5GMezHlMXwcFyX
yf82lnW+dKH0FEvhJQbGwD80+CMZ8fTl+MoujJVPUYnyIsvhyT+M0zy3SPu3
XDrxePqInxfIj3oVupVV8eI5FNC/7Pv/eLPGe2o+uv4f1pIPbuADG3HoefCQ
W1XovkuBL2eTB0/AMOc19q0pev7Z9NGVFfgJBKeA+/2Rxbx4d6XmcbOY4++f
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
fWiRy3mS4qv76xQ6guIc9Tve4kWfAR/4IRcc/ozvC9zJqNPLv0lunC86ylXn
ec5hefIB9uP7f3Fe+Qt5wp99xae6yP6dnwce1dNPfoOXqdvfmkeua4uJyoW5
TL/wfb5woYncL99e5nt+NE/zLz+996vi7ecLz/cXn/MK/p+t8+Xv6se8w/cq
+/2fPPErJnL+PL8sX8pcfFF6+oLDP76MvubzXO13X/StBn8Doz4zl/2y0hc+
zOHL8s3OY+553A9dZ8kl+dHlwbe09VXO9UXxges/x1D3GN6jYZ+bXNS8I1f4
lS947zsXpYvMkT+zL3jyjvPwKzbnoDf/xIe5z+jzzD175NyUPxf+J+vPcs5v
zQb//NfrOnOYs8pZy6YPWuctHcdZ9LCzcpQ35K38tTPUJw+zmP9+4MM9+9kZ
1c859MWf+8L3yD6tOVqOctN88b9NOaU+KAcc29QX3PKN09Kh58gHww8ce8kJ
vmfHHM2Rfemv04+pH8lifvGHj+aMwi27ZTHP6uet/Joa+Zpm8h5rvKk3uh2S
DihTud5e4kkeFP8/E35pqLfmg/vQFfpn8vktvTjPt+4Tvpoln15v1c974fVF
ZLPeHngpN2q38k2ypJf00jm2U34mWcyL//JgrjpqB3hFUCbn50VP8IHV29Hd
/5TF/bveS89/B33HvFz5CPny/a9t072WB56T6Cu/vm3w9wz715gf5Ae+N3GT
5im5nCeTfeF/ZleyL4bncu7V6P1+U6E+Lpfn8Kov8+VX1qv+zFNez0Tqh/3r
5OM9T7zcifDJb6xWfmU+5/DBifgt/7WS72OfT70XMVH+AyvwCek8D95UvD/6
oMnLlF82j3Pgob/27xL4D9nzxVcMZJ1UlUp3OV98xQD5cizSvpgvHXcgdW+D
Uunli+TrEqJ88xLxDYrke6mfXy3gfBtfxPstCVZOq/J97OvvfcM54hIGv/14
gfzGF1EPb5zEedtrvuaApTyHTyLkg5RP7mFxGTzAyAjWZ6t53DshS4X/xOhc
ytX6WarzP0b5a9nwon2lUxgyRTzGTO6di8vknzmF+mrCHHK4Diznvp45lTqh
31z5R63G/39FgvzeZ7PvRq+Wfj8R3XTbNPnPrNacPUlz0lTp4tfgj2GffB0f
mRT5ja+TH0UK7+XbGcytdlRwTp5PZb5s4FsaeSyV+Jm4plH3Hkjivju9kbr9
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
r4RJx71beZHzdb6FKodin3xmCpkjjw0TL/oQ91G7UuFdIbp3aqTLWEz/si2Q
97iqBhx71BL1R4GcA22Oy7dtGbzKtQHin5+4KT63dBz+4h2dhvcyYjX7epdy
fy6ek19BhXRh/pzDDS+TRzazkj662E95NJfl71rFfCHDG3xp2xX5p1Wxzl/z
Uu7AVelftipPykN4yHXpubaDT7ZwZ55ldYP96FcNv/cnF/Fa64QP7wLHG+wM
b7ndbe2vverjnKR3vsN9Wn6Avr7QkblA0l3Oh2NH5OviIJzt+5vkcB+nLs21
lx7zAfPQ6tPSbdnJd+IneNGR58Q/sRfP5Bf5i14W/mkHnvm38kcyvwIfzrNj
vc39S/qd28rbtZdO/Ln8lL6Vvt5B/mYv14Hf3adPae6IT/X415Sb89N11S/U
S/ffEK6l/BdXB+GBTeqYr/9BXfGKg3gpzcjxef4Mv7JODuCBo1qCm1W/RH7Q
Uzv4GO1bk6/U9NVaeFZ28kNrW8d5+XotOQ22nOeT36njPmxSC55sK//bDnXw
r5qDu+ZYc35e60iOVf/WtfT3Ftz7ozrxOa5tauFBjuf7Gz7HyENuhz/nxRHc
jxfqv4+R998KfHXPl6zDBW/XgcM0hr86ZSzr9su24Hg7mtYaz71kC/bRp++A
i556q9Z4Xje1ER/sXfLfl9T/3IgD2Sk3oX0deqMm+A/ctee+6/AOuGvxG/BL
33MCl/uoLXzO3g3hwc51FO+lJX9X8Uv4r37ryPdv1bwOXsnfun+Fw++tf7/G
e/sP6QicOR8qG9XRFzwWP8SV9bzz9TrOqUfiq7igX0trUEe990BzTGd06B3+
hy9r2T3m6QHO4mH+o7zdb+ChTav/u4z4y5/gS3E35VPhqnnoH+Jv1KIL83IB
N+j2G7yIjMvg+Z6ad7T6Ff316Yv014Hu0tU+wmfpzfPin7jDh3n1IfVDg9P4
upd7Kr/vR+730BPS03nqvPpOeE6N8hfc5Ytyhzns2/t1X3jCH7t0m7mk3x7q
6le8xD+pU1+2k3PAwVu+PV+BW7bczv7a5wPOcPIq9cyILfLl8+Pzt1yWf2YV
8/GX/ZXffUm+2ZXgS/5B6MSbXEIHV7ThOvyYIOXFnwePtV6neyGE+3G79At7
y8kTOaV7qv8p+FGhy5VnHU7fVHGM+WPZEvDYZpOVU3yUufz+Ung1LpGacx2W
r85C5rM7Irmv2xwUP7ZQ53YUz+HNvdRXLsItJ0SKv7EL/lVwrvi9UdyDf2yH
t2CRxfttGMWcN24r+pd/MqjfXp0C/l+1mXszO0M8sani52wWHyODeeWDONa5
e5Xyx9O4L+bG4VfWslI8mZnUS/en6fkol+FOsuawCeDDZeukr58hn9UZ1Odf
rwVHcpmu9ziDe2TzKvk0TkOv+kEK6/m9cvTaP8bBq9mbyjkfVC7+Qxz9RYM0
+UEtR29YGks/+0ea9DJLwYsKY6jD3WdrPis/OoMu2MifyYAP0E4+Zusi0DFt
mivfzkXi306i/3XIpM48VaKcoDDxQHJuGevlHuIfmofJDzMH3eUXheIfBoOH
x+fjZzirQHrqYNbJl/Pkc75AdW8A/cVr+fQFlnno99tO5Pdfmif8OUf6LF/h
If/lhGYrn91HOUGF+P8Y+EtGnwlv+AwvFSu/Jhtf8Q/Fz2leIj+HLOrkVZ6s
/5JS5adnUSdP9NJco4xzbKv4Qoc8hK8u5d7PV39k70Ef1GGFzv8s9d0e1If9
y9nXJzNZbyYe4lcoB3bFXPRr6W7KBV7NHOFQBv1pCzf6i8PrlF8zRzw9txe4
qNGPdo70WW7wiO6ul94kg+dw3Jn3vq2Se7lmNvqvYS7s37NV8OgSM5jX/+4i
Hv5m7gWT2fKzctF5VSU8KhV/jEB76X83Cy9N5XwbaA//8/kW8YtmCiexw7dh
1nbNiVLBl2Lt0Yn7/IevJivf2Ya5/63t8kmbIb8sa+W+VescThYOby0++W7w
unvJzJUuWzM3bL1X/iQp4udbcx99d0D6i5nCqWw1Zz+oOnMm7+s7G3hKLofF
K05hLvCGLTzeEYfkR50sfMBK86+D8kNIos40n8B67nmQdRKSpFwVS/FmD+En
0DWRHD1vC+njDjEP+i0RnCHbHL+OuhrhBkmce+9Y0k99dZT91XqG5keWer/H
lMeUxP7qM0H45DFwgP5JzFNOWPC+Rh3nPW5NlN+pBffdyBPqF5KUx2Gh/IKT
zPvuJIFrOVhqPx5XvZEg/0kz8A2rE9RXc+I1ZzGn3uh8kufgk8B+f92cPIh5
p3RvJkp3YKF9dwpdj1ui8izMX/ASjXVXAuehszlzVYeTyu2t/7kxb9Gc9/75
KeZlRxPpu/taKq/8BO/x9QTxi8w4f/YfV/+egB7Z05x5n9NxzvmqBHKCOpoz
L/Y7Aa6+KBEc7DNL5Y8fY+7zRSJ+ZV+ZKyflKDzbPgns6zXm9H2DDjNn3DAN
XKjteOEbh9F5vRmPXjLdTHj+EemjE/FJaGUBfyzmyIvnYOT7WsJ7+bxGOqYE
6rqHFtSf/TUvuJSgPG5L+qbmh+nHfRLl723J/XL3IHjmr/H48Vpaqj/dz1zP
Ll7+zBby697He7wxTTpKS/le7lGuQbz+X3NwnoA94LrT4+kfv7fg+fy5W/O4
BOV/Wcq3sxo91w9ab/ctlIe1g33dIQH8+Yk552f/anz8eifJX26CdPTb1fcl
yY/RQuftZvwWesTLD9ZM+soq5TvHS2c0nj6xqkq613jW+Wpz6Qo3ap6SqLmD
he6vStbPu0ncX6MsVV+tF387ibrlL33/1us5975Pkg5Iz+H6Gv7e0iTxyS2F
J5QzFyhNpK77wUI+FSvEH0vifJ5mIX/FZeg6NyVSP1RY4KO+cBn9/vb688fo
sz8BnCp5GXXd4hTlL9uCg2WVaY6WTP05x1rzoIXM0QYmM7f6w/qFb4/h+zSe
SZ8+0lbz0yLqqJwU8RZslScofuacVPHW7PCrmb9AOZ6p4DBdHJRvNR8+yfvp
Wj+OnEtL8uijR6SBO21yQB80O5v9+FOaft9Bc/9s6Rdmc34mO1GvnsyC1/3d
HOVuu143/n1X58onJBO8pYG7ctzmSieSzX3t4AGPffAc/EkqcvDzue2lnJrZ
4IdmeZxvF7ypD99Ol29nnvxXffGfOTUTnPxIHr43d3zITTuVLJ5PvvxL/dS3
JqPTLyogV6tvoOZlwjNPFXLPzg+WjiBReT1F4vcG636MB2e7U8T8t3sYfIAf
4sVTKpX/yWT5b8SJ31iKj1PvSOqTsbHwwdwW85z/F4XPxrpY/KOKljKPKJtC
7owBtzT61KzgPb4dJ1/laHxsEleS99cgXnm7UfiT9FnNczuXIJ+EKM6ffWtV
t8/Ab80qAv3g83WalyWDm20I1320Tn4UKcJFw8Tzr+Scz0iVP3kY58/6KvEA
08U/D2UeWr6FOrz1HPbF9mDe17dbxTvNlN9CID4z17Yzb+2QLd+VQPHzq5nX
G3xWjXzHAOkv9uDDdla5V/cnsl8e7YWHWVXIfCpqouY7B+lHThZLB6H85eTD
8Jd2LxIv0Vc6/aMv9P5GnM9HfIbj8odZrjwFX+79nmekoymHD/OZt/C6M+Qs
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
Qic70Fp+Ed/h+1FwlHV1yYrc8JsPmLN/fZI6p6M1517PR/jkuF9Ab3V5gnj+
j+EbTLosnzQr9ZW/q7+4rvmdteZNz3jvz+rk42qlOvwf+R3dEV/LWvrcl+vY
x9/ht/yNjfhRDcHr1v8k/qo1880rb9RRN/6qOZqN/BOakOMz9Sk6hb1Wwp2a
1sEf+AueSeoE5o+TmtWhW3yO/3msJffFyhZ1+GQ0gCc5y1K6jNbgk30b1aJf
M1M+RZs66s/G8DO7jIXv8b/63zf20U3gqV4bIf+Tt+vI83uzFr7+UPHxXuf3
X34u35LRrLe8t8SDfbmWf5vLd+Jt8tmfNODziybAHzZtgS/r+Fdq4ftaUT90
b06O/L7n3LP3rMEhk97iue14hn5hg53eVxNyfLKfqp+1VW5vozpwq8fMsxra
y2f4NXw+M39Wbo4NeoEr/6uDT/29dB+21FFN/lEe5R1wv3P24rkJVy/6mrlV
Owf0ql/+KR3iTXCelfbgEom/4882+ivNxezB7U1+lb/9JfmH23E/NvuZn7uf
416Ic2Df/e9HzctOif9mL57J99wXU46gv7tgz3s5/63mLIfkh+/A31vwjXg4
+7gvvnASH+DWC99LIw7nTP1/qg6/mlnV0uk4q3+/zrlxZqv8IlylL7im/N9N
0su4kdPneEX33Ubl4briO/rSBflEreM+bV3/c2N+6knxS8tVn7hpnnKcufCB
5fy9mzy1j44J31gKvl3pRX3b6Sj91IMy4Xu+8DHMash5XFSqPsJXeRkHla9a
jK9RX3/e70v7Va8qT8eQT2fEzffIlzKP7znTX7qeHejLJmfxvo4EKj9xO3jX
qrnyOw3mnsrZwny8dYZ8p4PlU1ol3GAWdcWEEPHDN8ivL4X9MjpU/rfr5Sc5
HV7f7TD52K8FNzuYKF+CcOUjrJZeYBrnrUcE992acup5v2n0110j6U8vrJCP
4lT5HMbwfXJXyJ8hFt3ioCnwHF5XjvDcGPm6T5HuY7F0B5HoQb6ZovuuVPk+
k4VjTFO+5CJ8vdaFC8+ZqpzEQuVJBYKTV0wTD7NAuVcByg1MlE9yAbqbnwI4
/2uT6Hds58FPNuidjT51ifiufJAr/aYPOrv105WDnA0u0dmLPt0iBZ7J0Wz6
/WJPeONHZ3KerM+kbunqIR5LqnKmMsATFrjwfb5Ik09RuvhmzuDDH6fDpzXo
HI2+KI7yWcoAB3slVbxcB+VUzpHv90zpmu3BzX6QP+qwZPFjbeBbvjdH+UpJ
0oVN4O8Ny1Q+UaJ0VZbkKO3Jko4vQfieuXTNueizDDwZY76ihfjS88E/46ZT
P388AXw4fgH49qwE6cotlCtUIF9i8Xa6mukcLqYfvxcPj/pLM9WNC1/wdox1
kfqsP0uVBxdPf3RjPOfSuTJ8CJ/EMZ86OBa+gdky+RLHCT8cx9/VZYV8MOL4
f5eMA48qWcE85UCs9LBjxLteJd7UVPrTeWOox2xX41fgHEt+kOcY+a+uFW48
Fb3/6rHwUXtW3FLON/yNS2PAZ9LXsU8zYphDFZvi/+++Tr5VUeByK0bCK2i3
DhzGO0K6gC/13DZwPreJxPfy/Ahw7+GVyqOPoM81/ZK+Y2YlffqNcPm7DlUe
0ybmCD9Pxheudph441vkZzKZ9dxluPgVWzWHnaw806Hy898pH63J0nkNF+99
l/gYEZrfDWfuNnu38gQj8KXfNJz147MLv4u4ScpdGko/uHoXfN3PwuWjOFQ4
fDU+GF+EoUv67Qs9h1309XdDdC8M1pyrGl7BumDppgco/6tavx+ofTpAORe7
5L8aRF/feAB1o4EHa1zPQeAbCwfS594U3pUewvNcOAhe+vb94JPWIfS5FwbJ
f3sf+q/Pg+Hhtx3IvXNvH+vkfqB4RP2Vv7BPflOB4Ie/fC6+6EHm+C5B8mcY
KH30QeUgBNF3dxtIn/7rQc1Jg9ARdBgIfpJ8EF1Mw2Cev2P932vMvTio3IpA
+DODBpAvk7mfefHIQN37/anfyvcLxwvUnGWA6qL96FBuB6KbK+xPX7B1P7rU
D4KUqzUAfsu7B9iPCcHyWxjIvut5gN9fHaQ+bqB4d/uUExfE/f71AOV/7SGv
ZEEg+N47A/BJ7r6HOeb5QOab5/pTV/TcpfzQAM7DHz6n/2q/C9+2ToHoK1v0
l196tXJCA7h35vXHN3LeTuaesQG83x39xdvZSd/RP1D8q4HkITrtUI5GIHrq
ggHMO2x3sA67B9IfxQ5Uv7Odv+tJoPrlQdqP2zQ3DFQ+2iDlLW6jvzsaTH34
6mD5OWxlXfUL4b6e+wU6u95b1aeEwvfrNIT6zWaL8klDmftPGQLuOqOK+3RM
iPIyBsvvfaN0ssHMwa8PEj9tvXS4wfh2bh7IvPjfdcwrPwxmX/cbqFybtdwv
nfX7nw0Qjr2a+3dKkHRAA+HznFgl/70Q+fsNpB/JXnlL+WfStw7EP+rLpS+e
p5Gf+jm469mlzHEKgllvmwaIj7EUHG9XmPriwdQPPRajHwkPg2f+02B06w0W
KU8qjM+3HAQf6Umx7otQ+Gwlg5SXUcw5cDxcedlfcO+vLEYH9NUk+MmvDdNc
ez791LBw5p53v1D9OU/5wpPAzToME585n/3rEyF9/XB0BC/nCW+PlP/hCHS1
hnmrsc+LVF7SCPSh4dngPDHRui9MlTMuf8uUaM69T03gVQ7MQPfxLJrz4ZqJ
5pjp0ntOkd+UCX7+0WnKTZgiX5pR8Al/nKWcxzj5iY2FT/v7LP4uA//fyKcy
U07TTHBCmyTpPszBu76cKTx2uvillsrjTpZ/1AzNfSawfiyn69yYwbkUa4Wv
wvuJ4gmkyDfMGt+DOdPodwy+DfDMxHufpjlFmvLgHMjb7RYnvvRszXmdxfeY
An/77Gx+P8uZumV5DHzjPXOoN1q6Uz//E00ftCRLvHpP8DeDftzoo5iNP7aP
N/yEo5OkI86RH4K3+CQR8unNp0955gdvcN5k1b0L4Kv8GCAfsDB0MR0KODcW
B8k/PFT6oCLV1SHyeQimL3tcLN+MMPIgjgdTBw4tBd+7OhncaUuQcLAy6mTL
KHzqPPylb1oMP/9JpHRJftJRLiG/r10M/JBIX+mRVyjnPVa+0N58Ts0KPn9D
nOYmPsxlPlpD312UKH20D7//agV9Td8U5ep6y6e6Ep5Sr1nC1b1Up1Vxz8am
v8j3Mc4JN6N3GJah/suD3391G/fmH3PhD7TyAP8ZVq2f56CPWOEmn/Pd8IKO
z1POppv88fbT9zkVcC9MdQF/M9nPORNTCF90khPfp+yA6uEi8XYcxAc+KP3X
Qtazl514NYeln1rEOWNlp1ywY+LbL6XfGW7LfRFwUjjwcvm3W7OuHE5r7rwK
Pz0rK3ByQ/6Ukfe6lvnmG1bUCYsuCmeoFG5sxTp/elX49hb8cCrEPyy6AW/z
153KubN44ctn+NyMatbVvxby17oNHt5iH/XPjxbSX9yl33n5sPQUFsJP7itf
/rjwAQt4Fzseil93Wvihpfiuv1APX7igubAV/bLP7/K3vyb/7Qno2ho/ZX3+
VCtfGkv5VzwDz3G/JT3yBOHJz7n3a+6KdzQB3tdbDerI8/sBv5p8S/q7ia+K
b/mzfOcs5L/9unwmf2WO4GShHKs36+ifnsoXzhzcwKQJ/p9D/uZcnW+Gv1Cv
ZsItX65FhzZWed/1PzfyDl6p5f4drbqxGTnmSxrWor8YDq+1uAm8U/8Gteiq
B8vv+pU6dOZ/8H3KR3K/f/4G/NKqv5Q7PBb+s1ljeLMmf8M3bmUOz7xj/ecb
fc2eoWsYPkG8u8bwV8f8Kb7HBOEPjeqo13+j/zpkje/H4PrnZnhebX+RT46V
dCL139Po//0Dfq3jreBjHHgu/6V7rP/cCdJVPaO/2HVb52397xvntX8wZyy9
IX2KDf/vtN/h/3S8jj50mB145p3HwnOuaP5oR07x9V+4R367wD5dbKs834fo
ps3PcD78bC191vfKYTwGrvW+Hff+N3fl63tYeJQNddfUrzWn3qt7Uz4DOTfB
2dKrmbs52cDDuXJdevZt9Gt3bMFF+18TnrmZPvGYvXx1rmhOVCU+p35+7gLz
qa0VmmM6Skd5Af7Jv2vl0+LM35t4Fh5CzmrpSZ3waT94grnDO8vln+MkP6Ua
nf9lzImOOktfcwhcznSh5tru4OoNDoKbzSkGR2rvwe+b75e/eoHWoRfP5629
4IHL5jNvivWW391ueBQH8pR7onvNZof0sFnw+Tf70MfFb6HOfzOdeeU1H/nP
b+R8i0qVbtGP+qdfJbyLI8nKZ/EXP6FCvu7T+ZynE5VDukbz+nj1+/6sk09W
ohP5NVZ6gQDOW/cV4DadpghnCGa+FrAcPdexGHSXMcHgsRZL9Nwi5NcdRj08
qEy+jhHoRD4OB78qXqQ5ezjnYdxk9AsfL8T3ID+Me/DpZHwbDHnKRj5CiHz7
I/Ct6lSo/Mog5mVHI8SLmK/7S377VtHCM/M1d/bVvCxaeEguPl1feFInPI+R
DiULvscxd/QLtcJXv54r3rKrfFFipddLF37orHzbWM4rj1nSI9uLLzSV/Mq6
FOmRbemX4+JZD+1TmT+es5V+cDrz4uqZ8O462zHvGD2Dc+nrZOU4W5PL8FIy
50xJovwELOUnPF35EXG8l8Dx8n9IBrdZOJX3+8E41fMp4MaxUzUvHit+Uar4
GFOkxxnNfeowS/rfGOU0iWfSOp3n4xml/tSEPvfP2eIVROncGyG/yrnybYsC
X4oZqfokR7lIMZqbm+Df/k2ueGtR1I3fjFSfmAcucSySOcXuL9kvl+fz+xmR
zOsXfQk+mVygvOBIzV+GMze8WqQc6gj4b6eGU8+MLpZf1mTwFuuhmm8uBL8N
D5cv3zDq+TGlwjHUD9YMQd90dbH6lHB0c2eHCNdaxr0cOglcvcFQ+JzVy8AJ
J4XBQ3AYwr0/cLn4J6H0Uxu/gI/kuxJe7vUQ8CvfL6gbzVeyPpOEd+0YSI7k
0HLhe0E6Bwayj5qVw684GcA+/fVz8LQ2a5hr2ATCy50gPOfwWnDIyYF6X/2l
N6+gLuoTwN+b87n0a+vFvw0g93Z3P+61nI3wYdYFiLfzOXXjj1XSuQTQL7/X
D5xzxlb4lv8LVG5Of+G628ErDHiXUW/Sn/rh+Q7+rjeD5NPYH77W31vht5ya
KNzpU+XybJX/la/mC5+yHt7fSj3/g49yeT5Rfodw2sfeWld95Pu0hX7Bwwue
4ZNe9LPhW5kvJHmqHu4lPH+7/AG84FFM6q3c5530X47e4ln1Uf5Itfw9vKVP
7MM9u7caf4MZXugCvu4tf8tqzTs8wT3+6gWu27NafYqH5rM9qYvmVHMfzfcA
N7PoqTnRbvnee4Cbte6tvmwP/JDTnuzHhN7MQ933gJdWe4qv2xt8vsce+Xl6
ihfUi89P3A0/pNKD/rG4J3Xypmrqse/chTd+BL/6w13yX3UX3t4T/Pl0Nbho
oYf8gnoqt2KX9Fwe7K/WvZR7WE0dXuMBblPaU/llu+AF/eOBDuJRL87n96up
Yx94UD/07yX/n53ym/UQz7+Xcup3wIdv5ymf2J6sN8+t1Icz3fi7unwkX9Ot
6FUHujP/HfUR/eyJLdJ7usn3tSd9dJMtfJ+TbvLJ+Ug+k5uVe+5G3ZLckzr5
zibONwcP8MO4XsqB3axcGE/5y32senIzOu4hXszFMvvI12sz88F53spz/ES5
e5vF2/RlTuFXv4+MePMmrStf+vTMT8mBaloFDnnfFz2g+6fSC2yULlX7Mfkz
6V7XK4fFW/4tfaTjXvtiHxl03yUfgzOfXKUcOi/lOPeWT+NK6tWNHtJr91RO
4nLO8yee5Gg06iVfl+X49H7kRV/Q/mP4pX2Wa77gI5/JPvJ1X6o5nY/w9j7U
XZcWUb+N9ZIfeC/1rYuUC+Al38Le3F+G3B8jr8mXOv/XPtJ3L8Sv+4afcJL6
52/0RS4GX9o7UX44fdE3HSkQn9NP8+u+6EDbF8jvwh+/vkOfKN9qwS35WqKj
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
+QT2hUe6ebF0Z+qjLXuz3nosZT3s9gBnO9tLvJSl8ql2l96nJ/ztsBXod8w9
lF/ci3P70Upw42gP+Zn0ApcrWQ3vq4cH/f7DntwjweKvZniAN67tyfz6aIX4
dfr99T2pJy+sF97uIV7ZR+B4yRuVS+vOeZjYU/6cm8Uz9ATH2N5LOPkW3u8O
T85DA+5h5G1soi/o68799eOH4mNUKX/QGV6Nxwf0d29UcZ6McqZf+18P+Wxs
Er/CmXre8HOjXqSKe2Svo+b43em7G1aJp2SvHN6u0mVshAfVwB59pU0X4YFb
pFNwgG+wtBs/77CN/qKPI+ukW3flyG/nXP3TgfPk227g3je3yv/QgfPKs6t0
Utt0v9srp6kr+7f9NvmO2mmO35m615C3ZawTbPGB3NOF5zxpO/trih14bF4X
7pdt25WXbafP70I/laO87Kb2yjXoIp7wNuak3v99fifxvraJv1f/Ocb7uLN8
BrapjrKFd/FpF+oBA//QqCeyo26f1Fm6xW344o63g9/1Thd8/Aq3irdmR1+8
sTP+Reu2yS/ITjqULvKH3Mp5NdtO87su6IyqtoDDHLUVv7eL7tNNwr1tuV++
6SRfjirlgNvAR2reGd7mkCr51NnSl/3c6cU6MfbTNtQVZzvjJ7Cvkv3+xEZz
gc6aa1TyPQNtdS51kc/JBuny7Pg+KV3ky1EpfogD63lE/boy8ogrmUsudkKv
veZ96d8rwV3XOUvX/AH8xv2V6ptclUf2gXQKlcqBdVG+7YfyIdlwS3228jI+
BF/qtYH31ciNfWT7kfK/1tF/Zbowrz/VQ7m9q6WrdaJ/717/PY26+RXiETmi
b4rRfixfyv69a0//+F1X5e4tYT5V4aB6teuL89bIl3RgnTTrLl+4UvqaJk48
T5/u6KkvLmJdHXKCh9P1PXCSHsXM8Xc4ql7qKj5ksdahE/XGtO7SHxWRf3fS
hblt4Pvgz7cKmI+Pd4V3atVDvOL5L35uxD3eo79Yn6c8X2fqvdT35EObR185
2B09VM8PwC3n5mnO66H7+iM+3ywLvquVu/zlPqBvDc6Cl2XAmY3nfi/q2MZz
5EPrqZzintKLpVEnh3lwr53R+f/2LO5ZB0/hvfU/N/rNp8gH20P9ey/hJNPh
oe30kM95L+X9TRcfzJv7Ludj8TaTwNna+yl/qq90HDPgtdb5M0/f8Jl8oqbr
fQWBU/2vP98zP0H+GEHcmx8PQLfiGi/9cij3+2sDmWdFTAM3M/ByDf32yMHy
W47Dt/B2OOde6Req62J1H00SD3wY+tB/Y+RPG4GvyJ1h1DljouCT3Iygr/z4
S+nWJzNvGhqlPKYR4mVNos/yi5EfiHw/DL5bRr3DVOrA0NHcj6fD5MMTx/q8
Pg7fkr9C4a2FJcjHw1w8z2DmAq0SwT0iLcATLgRIL5kkP3YL1UtB4HsRyezf
w9bMXw76y98vhZyChzbKY/UVn3Ym+yjd7oVfpaHMXZ1Of1HieF1zCPm9y2dg
uAvz4l7e8AGuztE82g1eR7iX+rhM+ad5gFvu9+BcPZbN32XjBW7ZwkM64jx0
QF6+3DtB7tz7Ly+Ar9LCX7xNF87hH+dTp2UHiM/jxLoaUCj/ySB0lNedpL8r
xmeySTj1gLsTdVdAqfKYJjMPqnUEn4xaIj/YaPRNGx2ka1uu82QK51iR/PG6
rtK8eJryB52Ys5dUyC9iBvyN7fbgcvfXK9cpBT5thj3n6qgqnfOzpIuxfZFX
a9RBpTG/LrWBh9xki3Sss6mT37Hi+YRuES99jp6zJbjBjW3yB8uUH4il8OFq
eDJueczRnpnJN3i3+Cf51MnzzLhPs/fBW3iv8DrvdZzmpAepKy4UCw8ZBw7/
92Fw9bIy7bux8t84xr5wWSZfl7Gcn3WnhGeukn5nNPyrzLPc72+tlc5xDH2W
+0XpXCrB7b8aI1+Fq/JR36I6cIx0VbXwM8/sVB73aPqCVbduyl9bfL+x4IE7
7oBP/nhQPKvx4DaR9+m7px2DJ/zGePGQf4THu+M0OGHXceIz/yxdzDnwupZj
4Xf5/MI6fHxJdfgY7vHgJ5x7KV9Rzx8Yw5zrlafiH9apPxrD+Vz7THX7Hc6Z
d0bzHvv+A9710ffgG6NGqX5+Cf6k9Y/CE0yZT3m9TJ573S/kMAaZKE+qgXDF
3/CPdRvBnKi4/udGH7A/lA8+SP6o9Z9v7FN+0/MfIH/CP+VL/wC+R9xw6fjq
f994Hv4MH6bNaPlCvFJnnAtdfqS+bJzywur/X6NP7M/gdd3NVVe/jJ/ngx+F
j40Hf+vyr/RW9+T3bqb8rL/EG/ka3WtjM/Tme/6Q/9UN6uSp5vTvLz+Bp/T+
V/KTMWMf/fIIvKjJRflamws3fqBcnjPcs6ssuV8SH8AL8jqlObIlfe667/S+
jkmnaSme/Lf48pUf4l7YpH397tfU59f3qf+y5N7xv6l8vWp4XAZ+tdH/9zr9
4+lt6CDWWlKH97iCHmF6pXAeS/lNXeCeHVrxAl81+iGcw5dyzhr19VZaz6fo
+7qshN/YQvjqs2P03VuXvMBvjT6ONdThZouoH7rYSF92SPl9JfIxswPXWnkA
/4oORaozbfBT2rVb+rh8zqXVduB42Tu492fmKA/IHt3TJ9vov5pnqs91lI51
s3CPDJ0/jsKpqpQHNIvnFuwCT3JPpXzyZ2pe4KK/t0J+L9PFW3MXDrBWOqaE
68orFl5UrjzTWPSkBh2BMfdpOXXmmzHcU67uvK8xS3QfTZbfgpdyTErl+zRJ
/B9P6RdK0FXNC0Fv+Km3/GMLOf8TApWX500+TvwC5vj9JqKnM9QPRj5pPvop
S1/qnDAf7qPT2fiCXvSQPtFPvouZ5OMMdGddhQeIr54lPoA7fFr7YOmdM6VD
dKOvMQ9mTuo3B36FIWfZmLcSpBztWdIj2yvnMZTzzTBfNrzPVvbcs+PC4YE4
z4R/e9EGvYlNuOrhGdSB/8/faRL4Un4SuUh3zDmXHCdTLx1L4Ny2HQ8P9vIk
nv+cWOn4xrAetk96oasy3mMmqs8jqOv++c8nbQTP4UkE9VVhhPCZ4eBdkdGa
F0yifgsYxvcpjBG+HQ5/ddcXyhOJE94YRk7BJ0PgbSZPY90ODZFubhBzwKp4
cC3/INUbA7VuE9RvBkjXL96dwffeODeciM9kYT/xJZI49/ZPfMHDMey3vBT5
sk4EZ+jzmfxUZ2r9+8FHXd0XntX+VPCKvr7ivfQVjz1d681XPt59qB885zCf
esuXuvFxH/mTzJFPhbdyJ3urXsqER7TGEx1TbE/0j+Nz6Av+8eLcHtbrunLc
weXWeEmX14v766s84d4erPNrH+JfN3Ye9aGPK+vN9kPp/grgd/3pRt3yy4ec
5/nF+LccdhfPtifnzz8LdU56cm6E92SuPWWR5nfuwgM/Eo90IfviiStztIQP
hOeUgv9fcpG/aw/hmWXK33HmnP/nPfSeZaXSgzjii1XcHb7Q7sWaezrRD57t
rtyuZVrPjjyfmvekp1v2Ah8w8pe7SVe7EtzsUwfhw93EE1hNn/LMUfdgd/QR
HddKv+OIH8W9bsynDPiGsT93VN/aFVzFa73yIBzgGQ7pJt1uJffpbEflpHST
L+VG5lPDHcEHDHiFcY65QXNkO73fzsrTWa8cE2v5oHaEt+BcIb81K/CZ5R3Q
u93dAN5ib628+47w6Ko2qH+0Eu7Xnv3VeIN0tZaaR7wj3kUln7PAkvPwo3eo
8z+r4lyaban5eHv6o9c2yS/XUrjTO+oT/+PvTaCeSWsvf7PN4v9P4D69+o58
CLfAJ6+2lI6jvXgmm+XjbYmvmmc79KF2mzk/L5iB5//bFv7J15vYvw/NqKsb
t1Wux2b0vA7mnJ/vtUN/Eb9ZvBEL6Qvqf98w17m7SX2BmXSvbZRPt5l+6j0L
8Vrbyn9vk/SnZugrU9qwfkw3gY9VmAnHayP/203i55tpPbTlnIyoAp/pZyad
RWt9z03wMJ3M6PvC28ofr0p5l+M1X2iDnvSQfCFWjpMPamv5Sa6nfo4Zx3rb
0Ur80grqsRFjwXXfbMW6/a1Cc9Lx8LeftgKH/LVCPPBx5E281Ib+8WYFuHGy
GTruS23orxdX4MvX1Vzrs530R+uYA840Fw+/nb7nOvHALZRT1p7+YmIFvtn+
9evZWJ91kE/dOvzQ/rbS+d8J/GfXWvyEN1mzfyd0FK9pnfj2NuAtCzor/2it
cmZt5cvRWfqatepnbeW/10U+86v4/r42fP9WnTR3XqF7x0q+0B3g3TksE1/F
mvd45l14WZZLlNdspbzpd+mjG9Wfn4bz/gMr8ZTa6/kvwk9g2wT5Vb4rPtUi
zuet1sot7QC+tKhYPmDW0st3ALf0LODvyrPi3CtvD/7QtgB9rq019W23DsJF
F8An72gLT+/7DvQXr88Xf8ZOugw9h+m58KLzbOE59+8gP7ps5o+htuhe/+2g
Pitb80R7fFbf6IQPRoMs1tVSe+EPnal/CjOkV7LHl2NXJ8752bOFwzvo+3el
7n2Sho6vlxP1hmk35TCmai7giO5gUzfhkMni/zhKF9xVc5YZmks6yX/vPfhU
w5PIX1vmzPo5/B74Rosk/BYuuYr3+4F4kgkv5mjG+/oD6UcS5N/lKb59T9Vj
8coR9uZ9NewNL2v5VOGf3srX+1j6x1jl//rRfy3uIx7+FOl/Jypn8xP+rj5T
hCcHim/zGX5TZdHS0QRKF98fHmbfSOlfgjTX6M/6uTZJuuxgcP5WA9X/hjOv
TwvFz6RqEHXp1jD4qM/D5Xs5lHvhTgi8oy8iqHM2DwMnLwimLnopEp/blSPA
n2cEcs7/HiVf1pHym/IHf24Xg196sCn1lbOf5oZT5FNqCn/pkJ/8gqaiw2o3
Ft7dER/qq+JpmkONU46qF3qfcQnyzzRX3aJ83srpmt9Z0k+FeIoPmSxenA1z
wCfuL3RYxn7EFpxnpJvym1LhS5yzx598tot4kmnSNTiiH7/gzJxoeoZ8IF24
d352QTfxOFt6TE/5NjjCR/0jW3ouL3SLvzmIz5avfF5f9oW3g9bDPPmmBnAv
X7Jjvxwo4Jz5JVA4vB3nQFUx89OvQ+nj6myU/7hI6ypc39NGc4oy8ol+i3jh
K4iuSPqFWPHibFm351ah96mMV91uo3twLedMUiL4UsIE8fPX8Pw7Jinn0UJz
9gr4GAnT5T9sTr+/YT3n/7szqdtPm4FLpFTBa3ovjd+vMlMO11ZwCfs5+Go6
mXHv/7uDvuCPLPZX3TjuryG7NI/I45y3Gatc3T3MWZ7Po0/xH828wHSf6uRC
6sCJo+Tre1C6hoXMKYaN5twzP6q8y6XSEZioLjpODtr+ZXpfo9DRhJ3mfoxZ
De46ZxT9ztwL/L8T1rMv0kyVG3tF/gObOB9yTcQr+Erreat8TU01T7xJPTlu
F+tn/mjq+VPfSE+3nznC7tHCZ+7Sj/Q+gn6h3yjwNPfv4T2+fZy5ZHdT3Rc/
0Lc+OyUetYlwjJ+oS4+c1/lmit/I9F/FB7gqnYgp+v22v8t35Qb3yGUTrbc/
NH/5mvlyExPp0J8Jf77H/vIZKZ+cf8SvfqDvOUL6mpfqmHP9BD/q5jDp2p5r
3vcL9Xxe/xefb8BhKh8KL+2v3M/fqeeH3lNu+DDyX87/zb52ui9/MFPq7ev/
wt/+6gdw5g9HS//+L3ySFd+pzhmndfi3fALvgjPPH0N9EviUc/huHXVOwTjW
w0u/K1euVnOTcZw/Fx/jy7f/is6rcfhxTfxZviXnpRsaiz7itQfib5wE3/hp
HHP55/eUS3gU3tQhM+Eqd+ULelj9lzl4kes3zJE375e/oplymevky7RLdbjw
26jrmsNup++bId7y/avC0zbL18hcfmIXwUur12u+M1554mfJW+xa/oKHbHxf
J+HvvbEcvGKoOX1u4nHxGxfz8z3mnBsda5TXtoj7bokldUvZIeG9xfi9tLTE
nypnL+/r5DxwOQOua/T12iWdSy665tespYusFh6VrXNvAnOHtVupt9MyxAew
1nlYxblalsZ6sLNhXjylkr5gxkzmd03t5EtZwZw6YQa+Sem2rCvvteBdnyVw
ntyzpw7/cDXzoInT8KUfolyq9JXgSK/EUj9cdoZH6r6cOiQ3Ch5ssTPn88gl
4BL+4ehWDjszdxiyiDys2BDwOsO9afQXLmb9Hw5QzqOrfOoKxMP0Fw/QnbmJ
73zwqBG+6PL8PaTXzoMfNdQLv6NzHspHyOF8+/u/+aYnvIKQufjbv+UifqM7
66omjXMvy05zUi/lSqRy3mbYossL9pF/dSr6fX8bdOJr/JSDk6L6xFp5f37g
GEOSWSchyh2OmCgdRxJ15vvmzBkdAzQXTuR5GvJYjedrEPV2q3j6oAVjqU+O
BQpvj1WfaKJzMhgdSt5/eRYjwL3Hh0pfGc1z2/Ol9FMhml9MUv7yUPnqhAq/
Cld9OFg4fJhyPEM4B3oOBF9KCMf3tWew9Pj95TMQAT7zPJB6eOfn6C+qI+Rv
4I/v65VPxAeIls+GH+fDuk+UlxSjfsoHvuLrfeBdt5kqPZS3fGA+Zg67Pg4d
33hv9DW9e3Pvb5omPzRP9svf0kt2S5A/gAfz99MfaX40g368kecLPaZhveXO
kM5CfJK5Pfieo1LEb3eD17qlh3xEU/FDeNWd/T66h/Tm6eyLd9yoA1N7MB95
P426ztoJn72SrvL3Tuc+9XSAr76jMzzD9Dng7Ssc4Q+XdwG//SSTuXxXB/GL
OqP7iMsU38lOeUYdwWGSspWjYSP/ro7yD8nTerOlrnhD/K6YBZz/z+zgpfz+
X79fgA7dtr5/XLRw4ULXzuiqwgvB+VNtVVd3ko9uAfXGTWvh+R3wCfm2iPnF
QGs+f9u7wmNLWA+fWOO7Prs96/xECXV+yQT507bX/VsqnqG19ODt6S9Cypg/
OkyQv3p75UyVMT9635L7vaidPn8J9/4nFvIB+A/XWibemgWfs6et9GsrhGNb
KEesrXTfK8G9Ky10L7cR3361eMLmrPNjbaWzXqN8BAvWW0hb+GBD1olnayEf
iXbyrVrNvOz8ePxFp7binH93jXhQ43T+tJJeYLXq5LG6B1uKl7sG3CB3DHX7
ohaaT62h794yBp3p4eb4fBrwH8N5ETWGPnfn28r1UE5K6hh4Hb3fFp9hPXXs
2NGcPz83Vz7p+luqi6mfOzeTLqaS+vPAaHRJN5ur36+kT3xjDHNM7+bSNVQy
t+0wWvVwc/bvo0rxkEfBo27WTHnEG8XzMUUH3bgZ99SP4g2eNEXP5fCWeEQb
hCOZSNfZFH3NqvWc8yEm1AP/NIYnFlqpfBkT8CjLpvRlb1WBe/Qdrfl1M/VB
G8CjWpsoB+ct+YBt4Jx0McGXu7CJzpMN+HTtMAHPedIUvaTvBvHrTMTbbKo6
eYPW1UjlODeVn3YF/NUNI+CflzcWD3ktdfKS4dRpAW/Cz3y+Bj1pyxHyh3yT
PrTjGvEnv6QvaNhYvhOr9V5GUKeteRO/iLOr5XswQjzeJuovVsFTejiC+axd
E+mPynXOj1R+TVP8XlzLVb+ZCHd9i339+0rNg0yUD/gWfKfOK9E3FZiqbm+G
brp2ufz8TcGfDzZXX78CX4U5Y+BvXH4bPebGldx3nmPhX+1rKf7PSvBzi/Gc
59dboaO/soL+6+449bmtud8/WKbzf5zw85bily5RnzJWfKoW3OMjF1PHJo3j
3Huppeq0Reyj4LHw/cJbcP4XF6HLzh4t/6tm8qUvhO90fBT75Xhz4cAF4gOP
5V4Y0UK5ePP5nhFjxWNpAb5kki8dx1jqkPfe5l4bna/7ZRzP8+WW9B3hudKv
jcfn5JVW1G+WOfKVMmcutrsVuHFVFrzr++Y85+ktwWn7Z4ovZ645eyvxRuZI
l23BfTeslXyS07m/2pvDA8xspfs9lX292lw+Ifr5xlTlHUzAH2NKW3gye1KY
FxvmQUYf0HbiVc5gnd/U/dLhHenl43WPW+Kb3bst80GHBPWtVqrD34U32Dee
OtPZhu9f9670IFM1F7ABp23fQfOCWPajnb10yh2VnxIHfmLpxLm0p6v4RbH4
yy13Bmce20353dGqV13A9050p95YFQXuccpN/el79GXNIjmH77uBF03qIV15
BHOrE57gLdM/lG5iEjyoeE/l9fTEP3BzGL5VR72VQ9dLvvehOk98lRPah7ri
p2BwgNf8pcP9BJ2mRTBzircD9ff24z4tDZCfhvx+b/aTvnsidUuLIOEMA+Qj
6qf87hDwt/MDxc/xBlcxD1W+2GDOmQJP5hSlYfDnzQaj583whP+zaJJ84Ybw
/c94yDcskn3U6kvxJ93gU+2Mlv5xpPodF+WPx8IXmmxKPWbvIv+0OOnlx9BH
xDsL/4yXXn7cden11e8kkGvwxIx1m2zPepiZxO//a87f1V85IInJymG04jwf
4Ajv93S6ciEduO/M7YQbp3NenXGk/xpqp/NhrnS1LvRNtv/lgGfhu7LNQ3wP
G/kk58L37uKt/GVr+sFb+cw34/2Ymx+fIP+fBcqf9efcftlKfiz/+aYG696x
Uq5oqXRzk6R3mCB/9aXK241iDhJoSZ9uuYJ6NTxGPm9m8sNZpj4lRryR8fID
XCn/rljhvePg7dSuIueicbzW8xjqkIdr4dVsT2R+bT+GfbFqPfqIPsmcbw6j
4dX7VqHzWpWqeZYp57zlZuGrs5lTZ46kHvPbKh5jht7jCN2P2zTvywYPbDlC
+sdd6jvy+bs+Hkn+1LD91GkziuAxlgznHnnjoHJvizlnar5E5/JtDb4ZN8vk
czVC+/rkTeUKiH8+gnlBl3PqE9fCA5k2QvjnJXhEf2+gD/17JD7h26/ha91i
K/yZpSbU8w1vUl957NQ80YT6Z+4t4Rt78Xv8awRz26XfSKd5AH3ojRHyOblL
XTH3iO6REZy30ffRCe47Ad7iP5J5d+hD9fXnxK8eoXr4EfP355fkyzQC/e+p
X5X/e51679xw6R2eaH5apzpEP2/0VHkr3woXHaqctT+Zc82/x/lwebD0HU/x
SdjzPbyCkZ8pB/mJ/PPvyQ/qU9aty6P/I+oso6u6ui6MQ4IGd4IkIe7uRAgh
uLu7O0GCW3B3l5aiBYpT3AoUeNFAKNIWKC4FSqHtd+5+Jh+/OsYZt4ebc/fZ
e625pij/6xf2eZ9w7v/2PbyyGQ+UlxorX+u/6KO3/Eo9Pz9OerG/pE+5D6/D
P0F+nsJXy/0C32CMcOzkt7y/bW9S1x1IpC598Qr/patX6a89kzg3975UbsJl
eJUbk6h/njwVfnieOeD86vxe8x5RL8Wcgv9Ttbp4+Pfhtx85ororSfzJu/LL
PQRPZlUScygbP9nkiexVXnl18eRvCP/cKTwtkee55Ar157Ot4i8lqh6+xPpZ
uVHrMAmcPOQC/JxO6+F73xae3/MMuHfsiq//rtEtHZf/+RLquvhE6hbHI/Id
mg+eczNJ/MlD8kWcK9+nlK/zEbMvzwGfyVOT+nbUXvEopoFfLayB/r3tLvTp
2ydp7pMCPum3U/lEE3meL+SDYb9VOM9o+OHZUqS/26i6dCTralht6rE8G5Uv
Mxye1fK66PuebWBelpTKHMHm92vDTf9cC96YY5D6oHraP1dRJ9jmX2Y+WZ/+
wnOlco76cO7/2gge5o/L+P4OPamvIhvB0zu2iP69QmfxXRuBw++cp1zaDuId
NRavco7mC23QlQc0Fb49U/Vza/D5w02lZ5kuvK4554uTzv286dSlq5uwHzZv
zvM5M0l+BQ3pl180F84/nvexVj3dX/4tL0fBV1mUAm/kVgvh+SPpRxJqqj9t
TZ7yqhHKXa1Bf23jrxo/vOHSoyXp/m3xVy84TH1KgvIs2glXGaK8+Dj5FrbT
nGIg++HdLzkmHaQ76Cf/50h4ZT+2B/9x6A0fZlcIPtI9O8LTmN9TPiTB8DD9
OqM3f9NDOQJB9E1rOisXrIvqEH/wqC1d8Nlz7Cw/Ul/O2QXdlPvQAd33Xm/W
7bFu4nO2vwPPyFN5Or2UV9KO5+DlKR+zXvI1bQNv4Zqr9Np92ccWtdS5UBU+
Z5t+ypVoIT6DM/PE8AE85zrN6N8XOIFbLhoErri/GXPPB1V4r0cNoW7f3FQ5
y1WUDzJUeivxMWpXkv/hMN6jq9Kx3nCE/9xkOHX7gYbKUS2v83ok8xebntT4
2ZQXfpIGn61ZA+rkpHLwkG25UcYfoz6407xy+Eg8H6s5cj18eN6XRtfgOl6+
03XYJ++WxIfh8Hjqwwm1Wf8eJdB7VpyIHrBPCj4JfxfTnHoS9Xa2FPFtiioP
Yop8C2uI71FMPmlWX2nqmmTq8O7FxNObxXu0rabwruLaT2aBGz9Jli6+mPzM
5wh3TRZ/r5h4HbPgbyQmMff5sbByrOZQxz5LZG6VvbD2sXn4YBysrnl9IfGc
F8r/LYk+dE1h+TYvlL9KknjyhZULuZh/d0Mi/Jz6hTmPui/hfMmXCD9qdSHx
Npfz/f9LkD98IfDG35ZrfpEgX8SCyqdboXo4Dry3TAHl3aySf2+89A756X+v
r1GdECc/igLiJ68VfylevnwFwCH3rydfaUC8ctkKgus+XUNfsyMWHvXsvHzP
+HWcU1lixavMS10Rvo5zMDBGc6i84Cel1jNvteFdBu+1l3/CBuUMCgebZCd+
yzfKjY1mHrHGXvq1b8S7i1IflEc44QblvIezL3nlpt95s0H6vnD6gmc5wY3r
bZROIUI+Ibk57+Z/o7z1cPpTh5zMyyZuZN59KRwcuGkucE6/jcK7wvHZGJ9T
vLjv6KdWhsFvmZFTfneb5G8ZIb/cXPSzf2yUjixMfg76/Kpv9T1Dwb27ZQc/
f7JJ510E39M3Fzy0dVu0H0bTF4zMwzpfu0lztwj59uS+pfpAeG84fcq2HMrH
2Yg/1dAw5nr5cwpP/hbc40Uo58657Jwjrb/lfC8fKh+27JpfbBC+HcL9C2Zn
XnxnnXQrQczjGmWV7/Ra5dkFg/Msz0qezod1zG3fh1A/b8sufHWtfNFD5C+R
jfNl9zrxCkKVg5BTfiZr0NuOCRFPMjv7ZK818l0Jlb4sJ3PMZ6uEL4WB47nm
1Hxtlea2YervcoEz51+Jf8K3YdTbjrmYX7ithBd6Kpz5deU8vL+bVyjnPZL9
0D4PfXGeleADdyLlA2wn3v5K+frGSM9rr79rheY70eKj2ount5T+N380eNcK
O+lwF/P7hkTJJ9+OfWPBYvRisTH4HZWyFx97Ifj5+yjqtMN2zPePzOX9ehwp
v8Tc6vfn6ByM5Hxvmgec7fJs8eGj8X26aCdfvlnKLY1Rf2EP3yxwuvbbGOXL
2IlXP0060xjOwcn2rJ82U6VHqKb8u7zSJU1hnj6imvo74eQFp4B3PYoH53ma
l/ptyUTpXOKku8+r+do46tIBcej4dtgr734s5/I+zSnu5OX7VBglPUgcfL+e
edHljZG/5UrrXDC+agX0fNKUt15DfGwHzddGcC7US2IdbnTQvHio/Mmr0xfn
KgQuVG4I7/VGzZXiC4NjzBmELj6yBvP3h4XlG9+f+wTX4L34XFi6zv5feewG
hy2q3N6BqkPqyP+wJP4JG/uLn1lPfsulqT+z9VMudgP2z0Vl4Vd06UtdFNBY
Ppnl2c9d+oi/0ZjzpZojOKFHL83xm1IPlK+IL8TLbjr3m2iOU5E+7nwX6dCb
6r2upByiTrynXZvp+1TBb3N9R+mpW4Jf9XVmLjmhI+/Rhdbst7PdmJeFtleO
iXx0m7tzfXFbzotC7aSz9lT/1UZ5bR3BnV56C09uAZ+kRgflIPigx8/WQv4e
ndBN9/elXprU/KsfkdGb+IP7XWlGn/JNd/A0W31u61fvfeFJ9lQOYIj6lIY8
/4a9xUMOI7/PphM0+HY/nWtR8oFsoHOtP/q4XdGcm4H15eM3QOdRta88RrN/
DqLO/K8avmRF6sAftvm1Gt/wROVZ1BXPPw3c/nhN5uYhddhPToyST2xtzYtr
i28/Tv6c9fC7S63N+1VhIjzDlMaab6bIV2ey8OSm8jdO0dw5XfV5C62rZOqQ
7DOk/2rFfLmV8mKezQInPN1Oc3nxLR/MRwcd0ln5szWll1SelEMPzsF/aii/
eDl1V7FezH/9qzN3dljGObKql3KfE4QzLJePWW/xGOOl71slf7n+1HW3qonP
s1Y8jYHUz9Vj5de6Xs9/KHzaq9Hst1W+lW/YMPjbx6Po93Nvok+cl6Y8skie
55ot9MW9xsB3fRPB/KjMdvQFiybyfiVE6BzfKV1kunIDI+gr++9B1//jDOmY
wugXSu9H1zZ3lnLHwuUP8CM49ur5zEn/jaCujj4BPtBnGfPHTxHKczxLP35y
DfPBrhHSNV+Qj+4GzfuilP9yWX5lW5TPGyWd1DX1s9vBHwZGCYe/qX1mt3gg
UdKpZbJOHu2X7j4Sns+5X/S7/Kicjkh0joV/hZc76Dh8gxGRzMXKPKSPu35G
uSGR4G9//sF73eKC1mGk+F3P1AddwX+gS4R8HV/K3+8GuobfIlRPvpEfxS/K
NwyHr/v0T/mu3JM+Olj52m95HyMfyG/EWzmtL6lzst+lHv7OWzmDT3XO3oTn
nzWE59PkNf1mvkz5BkTCwznxRr4WmeAenWPAja+/BU+7cku8uGrodx68pi7N
e1P9RTXw8KkvhBv8j3ojNo45TthT7c8X5I8aj57uxB/sqzl/ItdmTwJ8gysP
5UtwijnaiTjhw/eVQ3RYvO44cI8smZxTNpzczLfjxDO5KR+2H6jfvo0TTngV
PLzmdvq+wnHSCV6G/1ZzEzqIbdX4/rfOU0fN3KD3ohq4q91PyiNYI5+3OOU6
nUSn/HaZ8K5q8m04yv5/fL7ei2rymTmIbvrtbOV5VWOfWbxP+/90nacJ0ins
BX/+Zxr4RrBw3T570DufS1cuTyLn75nvec6/j5f/XgI4/7MtrDev0dofkjS/
2yS+U5py2RLkA7ZBvn9DpNNMFE9yDbjE5IHgtCWTxY9aDR+g+wCd1zXZ54+v
kO67r+q3mprLLJO/ek90E44170qHjz43WTqC2zXF355PXXGzI88zqa58sOfJ
T7s9+MBPdZRjPks4QEvV1XWUqztNfKRmrP+HdTS/nqL6tpH49vWpQ+wnca49
bYDOdG8D8RMmKPekHvruuY1Yb0fHijdeBz7Ytkb0TQ6jOY8G1RT/pBHziA3D
ec47q+t8bMTcbWmqeGXx+IZdbAyf5LtBml/EwqsZ21S+kQN5/k+i4Uk+aU5d
N2gAfPKxUdR7PVuIL9FP87Jw7c+tON/b9GUfeBumOUVL4Y29OHdsOb+2Ou5V
K62TbsrXDkDn+0tL7Yed5JPjLR+S1szLYjvCg1rtpbyGduCKJTtq7uxJHs2S
9tLxtdV8zZ33a38HfKJat1Ff4Kr6obPmO61YV7FV8W3I04X5QpaW0ik7ySet
m/hjzcnBjHCiH7HxVA2fuSn7cLlK4PmtenK+PG2k99eRPNbrPeFnVmyAvv5G
Ofkh9Ja+r554L2W1j/VDv5kq37l+ZeGfv+7Hc/u1Dv3R6dLgkM/7q76to7qr
FPvqyUHiw9TSfL+kcJIh2s9T9F4XYy5Wd6h4oTXpi58UpZ8tJhy1YU34Kv8V
4XxfOgI884ca8s0oopxN+Ze6JOs8Laz7j0Kn/GsieMWWguD8W0eLr1tdfuMF
xHMYJ153InO9kILSvY67q3NDzzMf9VuDifLLjdN8JJ/q3sl38VuJk+9BPvaT
I+nKyY0jj9Ipv+atU8F/DlSTH1Q+zfum8t6Fx4hXZi8f3amqY6Px6/jOTn3f
dPT4D6LEM8kjHfQM8eKi5eOUm/N3zRz4vd1ihG/bs//kmif9Tgz1W0l75Z7P
V05cNPPQf+zA7XvMl348El7Zttzanxd+xd8MXyW3fIEWwbtoGiGflpzCkRZR
51wNkw9zDuF+i+lTZoTJHya7cLNlylkL4/6vc6jPWsG5WTqC/WFvTunTV0lP
F6Gc4lzo4J6u0O8Sxvfvk1289xXyHQ1WH51V882V1D87g5nvJGeTf9pq4Zkh
ygXIrrzaVeCZ7sHw5ZplEY66RnlYwdpnsiiPZo3q82ByTJpmQZ87Y438bQLk
n/BfBvvUGngju/11rv2TYf6+CWvlU+SvuaR13egP14B7dPWTf9fnDPDCtZrD
+lHnbLauG/x1Lf78j/3kb/Apg/n2OuY1Dn48h3Tr88aPbL10Rv68p9ut6yaf
aJ18gXzJOWpi3cfkkq0lL36+L88n9G/+3a3r5Rfthz5uhfV5g1dtgA8QHyDf
D+vvMrjPeuWt+2kOaP27Nrzjwxr0qnt92B/mf8z4f9zP/H1e4LSz/8qgn1ql
nCMv4XXWdcPXWaW8MC/xyqzrxsdulfyyvHmvf7euG77oSvkrekqn/yEDPfIq
fBVe+KgPtb6PwT1WySfQF/ztrvUcjJ/OCuWg+aBfiLE+b/rulfRBbXzZz+9Z
z8fw/pfTp/zuI32TdR+Tt75c/Ac/9TXW8zG//zLWT3E/+fBY1w2Pa5lyn33R
CZawnrPxb1hMH1fYTz5R1nVb3/7bEs67zgH0xTet9Wl0WkvgMT4PZB9+bl03
63mxcpQCwavrZlHe92L2nx5B8GRWZWE/yVwEXtQ7iN/LN6v6ggXgug2D4Mu1
ycL8Lno+9fzOQOWUZQHHi5sr/W8Q5+ZO6/sY/e9s1knJIPmYWddN3S+/lFZB
8OerWtdNnzed87FDoPZh67rJTZom/4pg8NLfssg/eRo+MwVDlXeZjfN68BT6
31sh8BJbZKXO7zdZPK5Q3vc12eRnOBGcbXqY5o/ZpS+YwLzmSDjzlGw5wOXW
jEdfkxkp/k92+Nizx3Bung6Hd3Q3G368fdLQi1UKpx6ol5W+9dWIr3MTg1da
n0cXpTy4cOZoY7OB6zYaJl/lKPEDc4q/kSq+Sozwz9zC4QdLHx2jXO/cX/1/
bM+hU6x8UfJoXx0AHl4yFjxzhD2fH9KP371INfmf2yvHoQ+5Krbz2uCxedEV
zuoDj6hnovyI8stftw84bYck+WMX+uo/b9tfbHNPs14Li//ZU/r9FHIAfy2q
nNkeqjdqo7dqWYx169dd84LayscswTmVsxv947m6rM8rJYUHdkEfN6seeRBd
y0h30FF64fr6nmXUd7TDJyGtvngCZTUHaUN/t6+B5qrlqAfGtuZ3t/lRG58X
R+mzlN9t3xR8Pn8l9Tst5JvUFDwhixPP7U1T6UeawyvY4SS9bWPtD/KnneUC
L3FqI/7dB62Yf02pKv/eRuwDNdswv/jdjf3hQEP1ce2ZJ1b30hyz7l35doEr
dvAWn6oOz+HfTtTh932YX1yuo1ykrvTR0wOUN1pbPPnu0gEF0RfnrYVerF5P
6TdDwWFsfEXTp/XSnFH4askafH/3PvKnlT+Vjcdo/GYHyjcmhjotWw3Ol7eD
1b/H0y9PSgKXnj6MvuBgdXgLfyXx+Z0jhQOnyCcnUb4Qo8Q/r608l+rUgUHj
OF/+q89cwCWReqbBROoo30bwWPokap+con21mfD8ROH8M9hPDrZSXR0vv7JZ
yv1pJx5pvHRM88AhJ3ZQLkA1/t2388DrcnZivxobI3+2BcxTUjrLHzJKvkyL
lKPXTXrbCOV+LhG/ood8FcLlb7lMeWS98QlJEq+v3ip83Vf0U25mmNbbWuUp
D1bOe4h0auu/5nHY9u0FwdRRSd+Cx74YSR3uF4wOdORm+qPzY8QHDmb/+XOb
/Bwmsg9/H8TcKnMn63btFPWDIepbpdMPnqn3MYTPLzukOfs88cqC4XMGH8V3
aNoS+t/WwZyzI05Kv7YCfsiUEHJ1s55VX7lOuQ8h8sE4j09Ou2/ZxzqHMjdc
fUk+Nlt5f/OG4df3zTV4EX47lWcUylwm8Sa6tqV78APpHAKO8eS2eHEH0Nes
C2Fd1brLHMTvqPiuocKlf9Nc7BT80pah6OyWPdSc8bx02SHkRIQ9YW7V8TK4
zdJQ+H5tn4vHdYN+84cQ5X+9FM/wlvgzgdTP117Ip/22csA9lPPyRDyBm8pR
9YRH8b/fWZ/xV+QrEoDOqOlT4SRXdZ6Gyp/w2R1ypK+Bk9hHKj/3Oc+nxhXl
JkffNf/f9qfCky+ho3kVzX6e+gc6kWrn4XHVj2V/O/WQPqLkGekpYvAZG/Kr
couOfc17Mv3cffGsDrNfZa2m9+UOeHKvfdI5VhNuc0Pzsl3wcn/Sv/vwCjrW
jK2877djWP8DL/I7TtlIH10kFr/Th+c1r18Pz2dvjPr30/J/W8X88Y8Y5Uue
1PpcJp1LLDyfskfFR10gf9RodDe+B9BBfD+DOUse4fyjfpCfwBTm40HRrMMt
O+nHd07k3MwfT99dYKdwsIm6j3xcS+2QXm+8+us4+pFGm+CXho2U/2Q1eBRp
32i/HQqONzROc5B19DX1Bkm3Xk1+BSuZk67pA17dJF741TLlFfYSz7y6eLZL
5YvSUzh8EvjAmkXSd3RlfyhfnX0v73z5aXfQeZ3IfKrfLOoxj7bsnzber/E/
mo4Ot0pLcqxWJOu5TVVd1Az9Rd2anMtbJ7MPF2oIX7RDsvwBxtFvnq+DDuJZ
CvtqnnH4wxeuDR/GrQ642ejR8hFK+YqXGj1mGvV5Ug3pzevy+x4exjn7S4L8
EuvJ/2Qoddq4OPw30urLn3kQeM68GM7ZvfWZ65UboL4sQjzJBuLl9qbOTAvl
vbgpXmuD3uLRhYjf3oT96mBP3rt7QdLfNVEeXHd4sPX8xUtsRp7yla7gt9/4
Sd/aTDkFnejjIrypn3s2ly9ue3hQHspRDWpGnztD+byNXbQ+W0jv1ko+Ei7k
htxvzT7m15pzsJAL9fZbq24053xznltlJ3gjNh8Ao69pSr+WpRK+cA3bs97G
NsZXx5ZDYerwDso3b4SetG95fPk8OzPv82mILuZROc47/846F+qBwziXhkda
qZvy2moLvyoFr9JWVxs+b4p8e4pz/wvd1Xckqx8pKryuh3zdk3hfHjsof6Tn
XdU7ylt0AK+e1of1sLy6dF4O8sPsr98xkft0LYROZMgA/A8PJAg/zP+Vd2p4
GgnKTywg3f0Q5kH9E+T/kx/+VVqq/DfiqLsi8il/MBUewqtY5kru9ppzDVeO
VQw826J56KNbjoAnvygaX9Pg3PCTN6UxF+sYBb/6XS6+581R8CU+RHKfhjnl
5zlGvvHhX/E383zlY9Y6XDm8OcAJN01gX5oZJnwmu3SgE+V7H8b77pedOjzX
RJ7P8mD0U+Oy8vc6TKRuWR1EHzdJ+EDLKXo+wcK3s7LeqqfLZzgI/mdpq083
eRrT8W9fFgye/z4LvEGHmfKdDoFnUiIrOHCZWfKDCiRnNjQLvIhGM5WP7A9u
fPOfDPyjZmk+6yf+zOcM+o058PRseJrhgVnXjT/mXPkI+aq/+5QBPj2Hvj7G
R+/dxwzznJ8sZF/t7Usd+6/1eYNDLAEP2eWvftP6PmbOtoz58tIA5TL8m4He
dqn8J/3lU/QJHCN4qdanj+Y1f4N7TFqKX1ZHH/lXWNeNb9cy+OdTfcTfsK7b
6vgDS6Q38UT3sfl9BnjOUvqpyx74Zsx9z/esvUL8WC/wh+8/ZPy/btf4d3iK
r2tdN3i/cNpN7uyrbd9lUF8sF//EVfm/bzPAnZez3ja70k9lvskw82fXlfJh
cBO/988M6pIV8JOT3cQDtO5j5vCrhZ+7sY9ttz7/BQc2dZS7zkHr+xifKuGN
W13B/YLfgot2WyUdh5tyJ63vY/t+09aA4613F2/Bur/JXVwDjvfEQ7kt1v0N
Xr1G/mnu8kmwrpt+ZJXmF27gDJPecJ+byzXvcNF8/FUGeNEy+Se7gC+9eJlh
zjm3FeD8t1zgH758DW7ZU9eXuErPYt3f7A/L1Ke7yF/I+ryZ7yxTvkZV5Ue/
1u+4jHpjtitz4RdvwG+HLGX+FeSGH0Wydd3oBJbxvkS6iQ9gPR/jA7VU+bNu
4vda183cfon4227Cq/8E97u2CB3fH27sV39Zv4vJJ17EOVjfTf5L7/h7py3S
fNxDPE9rHZrffxF+aOM9xYv7K4NcioWs23te+I8lW9dNHvoC4fxe1O3treu2
vjB0PvOywV74EvzwATx//Tzqz9peyo+2Pm+eq/jtmd7ymbH2B8NLmkP9MNdb
fvXWdVPXzIQn1slbfBXr/kbHMk08Z090Zz9Y76Pxp0hnzpjXi/M9xrpu8iIm
U4ec9ODceWpdNzqHSeDnrbzkO23d3/jUTBKfxwd8w/+j8Plx7APfe8PfeKH3
utE4+Tx7o8u7+hfr8LsxfM/dvuyHHf4Ghy88Bry9jj+6xR+tfczMoUfRLx8M
kL+fdd3wAEeKn+8vnpV1H5MXOly8lAD8gRda1w2vM5V1XjqAvt5D84vPg6n/
FwcI97M+b+ajg6nzo4L4ver/o/1kAP3I5WDOwX+s62Zf7i/dfYj0yNY5ZfRV
/ZlrZxUeOzureK39mTOuF357WOfvT33El4tAp7MjB31TjZ7w8PtFoA+KziH/
sR7w02KiVY/llG9YD/a99BjpPfPAx5jfHX5CapxyUe3BW0K7wYurlAAukZAf
PMeW12Orv1ckyrc/P3XmmM7ghxers/4fFGROXbgTPkWjasB/yOOA3mdBB3Rb
j2vAd+1YhDm+zc/fzCtryse76Nd61fCaaykXoDh1S+FW0o3WYh76rrjylFsw
tzpdm3MkSynx/5vB63heV/42pcGBCzSVL199+MxLyuGnNL0xeO/JhqyTzRXQ
o+VsiC931UbKY3XU5+tJR9mY+tzmC2RwwfrgEtma3cF3oQpz8DL15R/VkjlF
YRflZ9ViPti+leYa8kXvlkL9cK8NvBQfN/XdKfB++7fTPu8B3tXtS/5yB3hZ
G72UWyFezaFOwiH9+B3bVec+hbvIB8yfvjItQbnMXfl7fwikfquXoDlIL/l/
hup7JojP2Ve5aZHwMYKEK84fIJ52tOZB8fKfHyyf8AT5BsTJLy5V88Qk6Tfj
mC80G8m5UyxFOVax9GtzR2n915JOJ1b5nmOUs1MPPliVatRRBybSb+ZpLPww
hvldrHg7eZqBrz6KAj+Mm6Y5fnP6xx1Rwnuny4+ulfCKSHCP47OU19xG3z+C
ffv3Oewb5TooRzJMOqx58gXqKD+HUPCiWQvBbWp1hccyLATe5u2ld0z/ebuH
eNTCDz8sV65ZX3QQjwOVp7wKX5GI/uDSuYOUq7hWfMKh+JUNC+Q5rP5G/jMj
5MMWIN+M7/BXsfG+jI+tv/hpW4XbjGU9jwyA71fte/nBThKeHKQ6fA/64m4z
lO8WIL/HA+w/6+fSd+QNVN7QEeW6LpaeK5C5c+Bx5tELl8OHjAiEt9DitPgM
q5m/vwjSczjH7zjxW9ZJlSD2E4+LvL9Bm/E/bBhI33f7Mv3spO3ggcUC6IMK
XqMe9tgFf+9KIDyc0FvC/Q7Ac84IYl/qchcfp3+OKHc1SLyj++A55U6zPscH
ySfhN/D/1efAXR8Gch6teMS67XoJX7g9Aczp+j4Bfzt4RbiuH/XJiceaP15D
Z/HBVXrS35WncBn+3iV38QDvimf1E33xZD98JNb+Rt3b5Jx0o8HyJ3+oPLjz
4MAnhPd2eSg+2Nmv/FXjg/879eHW07fkw6fv/0A82GM67yLp67f8wlxm4iHm
FLWj2M+3ZOLzvHsf+qm4GOFjt1Qn75a/ZbTyrW5wLozezrzP5v9gfGD/p3Pn
y+8ey3pOvwjO/Nc3+H/afCEM7+Qn1u3ZNfLxjpaPzWnlGy7jvT4VpbzOY/gg
NV8k/8Mo+Sz9KBxgrnh6UeJz7gMnSZwun/8I5cvsQmfabQJzq9oR6LOWbpOv
1xj97lGqo7Yyl5+VJp/bWPGsNss/duQt6QA0V/2O+59N1XqOBe+KWK/zcSB8
6V++4Lqr8CEJ78NcySUWXYPLcvaHn3uAey+OVo7nIvrcXzopryQWvUCV+fxe
tpxxU//E0V8nzWPucKAd73XLBOlAZyunuw08unKJzAdbz2R+tLuF/JESwFfb
pYtf2kQ+ZvFf93+Dk9ZXjliSeKHj5SdZB/w8trrmhqOls6ghvVh13t+04apn
EpTvmSQ/omHyGYtjXtw/WTkXg8ElPsRoPdcEh5k7kL5+dqT0xbXk5zOA/jdb
BHrbyrWFR/UVPyQEnUVCHc13eomPFKg80FroyGx5l8YHyEf7Zz3wk4Nd4GVN
9GH9z6sv/qHysvN4iS/XgP18bAflpbrDBwtoKPy2Pet5WVXxJRqLr96G3z3N
5WuOlZlPtpa/hxPnVNfmzDcHy8fewUm4U1POqd+aCtetIN1EM/D25o2Zi5Uv
L75oC/alco3Bb0uXw08yS0vh2PWkXy6l/JqW9CPF68ovooTwwzZf80QMflhc
vMS26l9SlB9RhLr6h/byA6wJb6puEer8me2V05GkOq0g69+zE7qMYwnU4WkF
0ON8tupq23yieDz7f7t8yjfpqt+lGj5FafbSF3eD/zM4Vv6cecQL7S6+cTS+
LvtzS+fVU/zDKPpo+y/8jb7MlT5E8z6ezg3e3qEvffScSOWAZ0e/Obg/uoCF
Eeofs0uvNEDvUQS/e/ns8CKcBmu+E675u/gzCwbhJ3w7hL5ygNU3mX5siHQi
IeIR/Qv+1nkIc+ShQcpr/pzB/G4ouIFdIH1Tf6u/M751w6jTBgTQN1X4Gz7Y
lpHiAfrBy1plXTd+B+LPPPBFr1pFfK3M0egI/H2ph+f/JX7XGPhRF3zkg2H1
v+bvHae8Bm/xBKzrtt/n6VjxRryUN/oenKf/BPGrvVRHveffbTlR/o2e4hX8
mYHf+2T8VcK8mF/Xtj5v9GBT5bvuTb2xXPf5PBWd0Tce4tG9y4Aflq55nJvy
o99kMAeYLn6CK9/H8Q24x/QZyt1zk7/Ha3CJhrPwXZzqCg78xrpucK4Zmo87
oxeOfJFh6qNuc+AVnHBWzvUr4RgLeD6JbuCTw61/1+Afi+6yr7jJd/GNeHoL
1R9VhbdW8hX4xvkF1P/FnXl/j74Ad/p+AbxlV2f6oJbWdeM7tVjzVhf5iFr3
Mb5Ti5Tf4QSu8u4Zz63PYnhly6uIn/88g3nJEvb5j1XY33JY1039tpTzKGsV
+L1O1nWje1kqX7XK8u18mkEexRL8XqZVhJ/25I8M9DSL0T3VcaTvaPkYnt65
pczXVlWkf/R/wvefuQxe+vZK9FP7rPuYOmQF+qC3FelTbj+BV3l+OXVITCX4
fvmfgLuWXIYvUHlH9plzj8A58y2nLppQUbkA1vex4Vb+K5QHV1E8WOvfNfzg
lfA9/q5MvWH7e41P1wr5XFWS75n179reS8dl6FW3O8rH6WEGfeVS9BFjKigv
7yF8yK2LwVvulwcH7v+7cNSl4Cf1KrBuLz4C1wpbojmvI/vDykfsAzbesuFT
OyrXw7pu/BQXic/gKN679e8aHGCRcjwdlfv2CJzfbSHvnYuj3uuH/Lv7F9Mv
fKyoPBHr7zX7xGLlNFUWTvWUdXt5oeqESpxfqdbnDU9/gXRVleSnZD1nM39Z
yHq7X4m584On/O43FoDzHKsi3oi1Dr/4XpocCCfljlnvheG1z6dur+2sXAnr
upmXzlGuaGX5EljvhXmfZ9E/ZtX6P6Hv/3qm1kNl5bY8g/88dIb2eSf8NAKe
a44wnflmspP87qzrNj5N9qnoX2Y7Ub/dtu5jeIqTwQcyKksHZ/27Rv87Ed7I
kSry17KumznsROrYyk7MIx5Y9ze8ifHwdrI7y7/a+nttdcv6seItO1NPJr3g
vT6VptyoKprvPGM/3DVKPE9nclt+f8G5ljpSuS0u4ELhLzPg36TJT9KNPsLv
Deu2/kjhGx7Kd3vN7+UwTLx9N3CAA9Z+ZebWQ6Svd6fv+Psl3zPXEPrKFh7K
y37D3+U0gDr2X3flI7zmfEnrrzrHU/qXt+DJRZQLuVzn2grrPDJ4SV/x232k
p7POHbMue9F3TPJVzs575jVTejFnjPLjHD9nnbNGb9lDue3+wtutc9n2u93r
Qj3j5s+6+s06f41/eBc9t0DqveZ/M59a1o2555BQnltTq64w/K3OzIUfhX3l
GxvfjM74ezhH8j66ZZdeu73yryPpQxOzgafd78C+5BND3e6QS/hSO/nkx8iH
Kpd0zW2Ze96PJZeqmx1+UHdaqx6I09wzL/yHsy21ruLhk/TLh69gzhbsD38l
Ku+gALkwN5uLb1yDc3CRAzjqgMbgQiVqkF9/uhD91MGG7J+ra6C36lUE3lqW
huKBpHDu2BdXbnh9+oimtZnjpJeAF5GrDvyom7XpQ31KiEdRW7rXOvKVLSV+
XS36SpsPksGpyoo/VlPz90aat5aXvkb50Z8aUcc2Ly+/l+rsVzObglf0qohO
80yi/GlbsP7DqgjvShTfo5X0sFXFg4qTj0dr5vhBrsKl5U+Y0hafAVu/Y+5T
Tb6+nbR/esOXGBjLHPZKF/GR/OCdnotGn5jWXbntAejL/okWvtRTuvVQdH9X
otFrJPXDZyYuEn+n1dHyBxvIe5QzFl/HlZHURc8Hyx+pmnLZoqQnTQXvcq4O
T+mvSNU/acpNS5Y/eYTW52jhabXxT84IQ+8zdBw+IX9JhzgzlP50znjW/+V6
9He/h4KfdJ+snIhG0sWHyjdjKvu/QzN0arODxSecjs9wUAv5kwTp353FvH5x
a3AV5yDNZ+dJL9Oe9f+XP7jHtvni7XQEn6/lL/78Yj1/5Qh7+8kfYyl6pWa9
wAE2+oLbj5U/3kLxS0f6Kt9kLf1R9cHgmQ98WLedvkFn+iQV/nCIH7hNlU3K
qx2lPtpPeS7blbM8XviJr+ZcO6mL7NLxJQj2pb9bsFfn+Ax0BBF+nI/2B3l/
n88Fd73jq/rwiHhri8DBHP3JDXx2nD5i7gr5ZPqh++t2Br1VybXsb1n92A8T
z4HnzPgGfdNaX/FRLzLvrrRZOdoBd+FbXIO3s2snc5mpAdJTZ+Ab77hPfgiB
+IRPz8S/9O1h1s/6AM4vx7s6F47DRz3mDy/o5/vSWZwBF83lr9yN38STP6d1
6y385FfxHi/wnl51Zn7d5Bdw/qpnlX/kIv5tBr9j9yPSafpwbn66K3zghN7T
QPld35dv/0nh3iHid90Hx3Y6Dt+pfbjwjXu8vxOOME/pF8Zztvm1mvdoPzll
BcKZox2+Kb3DD3zPg2HMZ0de1/u4nfMlI5xz7Zsr2oe3kA+7OFzv0UXh9t9o
3UZIf3cOHLjVWuZTwyOpeyeeUX7WCr7PzxHw/ycelz50MXz+T+HiRRwGt9ww
F715OX3/lQeUJzKT9+JmiHzAdstPeDLn2oQw5vundihXa5x4tiHKi9yq+dEI
/t6PwfIp/VY5oUPkLxHCPlBwg3K4BrLPD/3iq7AOvtDgAZxrpyKkU1utOWkf
9knbvMbwqZeBd9XtzlwvLRz8IWSR5iYd0dEPidT5soC5Q5324ELXwpkPus6G
153SEn2HW5RyWmdQN8Y1F54Ww/PJMV15Ik2Fb8fSX4yZgg/A2obwS2fEysdg
kuqZepyDXYXHnh6LLmNjLfwN3kUrZzlN3zNJ/Ntqwu2Hq6+Mx19oSjX4D45D
5csXLT1mHPv5Wp1HJyO0D8Srvu0HD6pqKPr3XInyQ+6tejtIueeJ6NS29VQe
tD9z5Dk10Of+2V2/uy9znJ9rsL+97Aoe+5sXPgCHpetP7qz3y0N8+2RwvCXt
qTeOuiivM4V94ENr4RJO+DdOS+G8/qWl+HiV4I8dqIV/ZlBz8aIrcA72Ee6a
tZl0yuWkR65Lfz23sfx/yqAfT6qnXLmGyscsJV+yRsrlaSAflVKst/INwX/q
14VPWLaYfEgawUN4XYvcrlVFpP9qLFw6hfmLrQ60rePKTVRPJik3qgC+3Fmb
kj8bV50+fWg++X43F66eIL8Ie+k4WsjnKp65Saod8zuXNsoVjVP+lx11zqFW
8rmKlv9kDvT+29vKPyFSfuBf+Awd2A83RIBz/pKN/dbGIzV8tgjmbj2zMVca
31lzojDh89It5u2iHOdg5bv9m8H53k35JiHiIf9Lf9qvh+qoIPG4PmeY9fi5
u/J8A+j3kz/Sd0zsJd+zAPWnH+GJbetDzk5QgObj+rxzf9Ut/urrP4IXZesP
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
/Dd9z2ryz6+CH7XbQ+Zr7tH0uYcrU7cHPdLcP0K+Rk7qEx8zb0qJUF1alTlC
y6fyqQhjvdV3A99IUD7gtjDx99zFq3khfVMY9Wcrb/hjj19TJ7iGcO78z1d5
u3/iXzEtgLn5CD90oNfeal0pvybUX/X8O+X6+VNv3AxWXt5HPn/Tl/15bCg5
R7s/sz84e6tuD0e/6f8v8/0K3tTb3lHSkWVDl73Ai35wVDXwhIhc4CfFvaVr
TuDzjvbo0N95Ko84CV702HzyEfXEx/JdMnPAkg7gNr09WJ8OtcHruheRbt2d
+dryuvguzisOb+2FG/yZiQ3l31JSPmNu8BP+a0y/trTsLfychBt4tJKffyV0
uzk9mP/a+DxGp+MiH0g3+ZJ1BBct40o+SEnhFe26MK+s58nfddlN53IP+Hu9
fORb6Ka5SW+uXwiQL6IrepNO/djHFgcr38dVOPNA+la7CPixC53vsj8O1rws
kjyLtk7U1T2GKgcklv767yqaR4+g7vVJQN+ap4p4dKPwfbLxtQw/pTL9dc5x
4nXXVv9eWX7OE+U/WV/+rhXFg53CnKVhI3Jmx1bC173udO2fzfl7y1VEj/PP
LOaMe1qD/5RxVO7GPOVxK1cl2FF6xsXiA3fT83eEX5pnGXq9HL3gM3/nCL/3
4Srlm/cDz3leEd71yXXy0xj69fuYevdbeJgJI/CxXFZJPM+t4l2PA78NqiLe
xS7603rp8verLB/OPcrdnok/bVfhkxUPio80XzzYKtIPHtZ+vpTf0dEJnnDG
MfCu26vQEZetwnzhnxOszzbrlddTkbrF8RRzmbXfKDenHPtef+vztnLs1LfC
k4vJ3+kovtBj1oNfHSvDvObgUeWnrAZ3bVpZ+W6n4AudWqv3par6vjPKI1uH
TnyTm/KaT0sPvlq6ew/ls5xUntoKdMob3DSHPUo/uH0hfLll7vSPaw4pB2QO
uM06N/qXf/fB3649Hd7p727yM/xBfteThYdXZX5nt505XcwYdOvZ3ZRLvkm8
tZHo3+e6qY/eyHmXPVX5OG7URdvWSd89AF7lB1f60JarlZfUGx7grKrK8VwG
/7aftW6NbtuZHL2SC5Xb1V48SRfmAmvnyHerFX6Gp63PG538DJ07TcCfp7ko
LzUdvfzPDcCvUqqKRzFJ/gN1lWvvyvcvOF7nWore96rKjRol/n8iuN9jF/qC
AsP4u5aJn5nFmXrjxkD4zJ3CblEPVxUeMoBz8GQI/PDnLuyfF3vzd43yZz/f
XFU84W4853HeX/db41fShfptswe+KNHu6Ek/dmCuUcRVuJ+n/BDa43u505kc
qB+9yBl/2QbcY1IVfHTLeDOPq9KKOdEfjvAb9/jIZ7gZ+HZSWXKuG/tIL9NI
PorFpRMXb7lHffbtj0XA5+f7sp7j6qjOKUS+pC1nzbYPjKmJL+KN/PifdPeX
H1oN5UfY42eyNQjebJMk6SnsWFevgql/PiWCL7XNre8fAo/ibJx0NznkTx4s
vXC0/Des8934+XzxtwnTe/1JvnmhfJ+rIdKZfgTPeaU6xy9IdfJ78U/Cmcu8
kT/8s7fiS0Sihzrgx5z3xzfC8aKEv/niV3DuFXNtL82X//IEX3ryHH/+4Gjm
wnnd0UMt/QNexMEY8QpcldPxGL8jW06W4Rk648v92+/wkcrHMa/pVUX46m/6
/nHSK1WSLuY+fL85CfDfzlZQ3sRdck6TEoUTlsc3LNcdcpYvVuf61jL8vgtv
w6v5XyJ4RfuS8ke9ofydJOkTi2lOdB3dqHNNrYdi8Io9rjE3j6iFHid3Ufh7
T6/wPHvXUh5EYfbDrZfBA1/WZv7VQD57Iy/TX3vVhT/g4QAfzIY3mrlwA+a8
eQvxfr29JL5rA3wvn+enrq55QfhzY/lwFpAf6c88/1+bcD7eyif98nnyAvI0
VS6wPT4kNX8Cjwpoqvvk4b2bfFr54831fuViHpRyin7hWXP2+a458WPJeVI+
dS2YF+fLTl7PsC/8sVZfeXTGh/0oPL1NrXXO/ptp5h5jj4hn2Fa4mXXd8B0O
gxfZ8hcMHmH1p8Y/9ih6t5SO4NhB1ucN7/dH6vluHak3fv+UyXzO6n9t+5Rn
J9VX1nWDVx0EH9jUBf726L/Bne4dhP9g81k1/9/f4EJlDsCDOtwd/qTv3+An
aw8K3+4Bb3mAdd34zR4E7x3ehzn1R+u6qTt+BD8P7iO/L6uvt+27Kw8wp2ja
W/yE95ms673gFSX6UG8nvuP5NN2jHPa+muf+yXMYsRtcPbQvdcLCt5nwPHfh
R3d1gPLi34IHXtyNrrPkYPmiW/cx9fIe5b8P0ZzOum5y4HbDA989mPeii+7/
7y7lVQ1Rrt8b8LGxPwhfGoZ+oaZ1H+MDshue7YAR8of5U/y9vfiXBo4QPmPd
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
RF85pj943c+H4s0mw+NaIz7qJPP3G59bCf4wf6DmRw/BLUckgx/W6i+/WfPv
NHz4/8KPNG8/6rpid9PJ6V0m/LCvfLruwpcbslT7WD/5JWaAJ1stVd50P+np
7kq3voS8sMn92ceKmD9v6LyWCn8eQH1e/C7r8/5SdJQjBqq+NV83+AvL0AVs
HqB8h7vwadcule+r+fMGbyUD/KT0UnwYBg+6B1/5Xjq++cvhyfcdgM7irwzw
twtLeU9z9Zd/eHo6/d9ieFmt+3PetTBfN3gQi9X/9gVfjb+Tjj/CYs5B6z7i
y6XBA8y5iPnRiV7SZ6WBi3ZO5H1f3oN9oOgtdOhWC8F54noyP+pu/ryBIySi
g7bwJI38G/N1S705cpHOhR7/fb+lPumTyP68u6fWm/m64QO4GN/dZr2of8aZ
f78xD1oif4Mewo1N8BtPLxZvvCv76tg04eqJ8s3urHzA2+nwIM2/3/CnSgBH
mnabdZixUP6H8ZyPx8zXDX5TIvzqpp147yLStN8uZC5zpyO6j4a3mU8NWYg+
fXEH+o63t7UPL5RPdUfpfE287/cXyf+zvebyd+A3Ll4k/5Z2+KVYpeOb2mkx
eSu2bekXojLYt48sxjfmVCz6teEZ8GxfLeHc/NGG873wPeHSS7XPt2FON8d8
3fDzWq75Tmv5Wpv3E8vfs+8vcDyLb7aB75nfU0Pn9Re552nNhNPeB/9cslyf
b6ac+gesz+1/aS7ZjHN/lnl/MPzjk5nLHGqqPN+nzEGepMhXs5H6taecv3NW
4mtRviH7c/Wn4PO1UlSPxfA+dn2ejn5qlfCc+uA/b5/hJ7Bttfxvo3m+XV+A
Z1Zag075bbRyDM3nmqXNtF0nPmQ0PtL33sLL7bIBPmGWutIL/E946UbloNXE
h3znW825NrAettZQvur/2J9Hb0KXlFENXmXSe3BUl838Xf2rwIe/9p65xuzN
zJGfaB7d5+908v828/9OVH016xO/M+82eAKnK8sP8Cu6jIU7hb9VZr7Q5Yfm
C+a6xeAjVmROZ2uuf4z7u5d9pl155euZrxv8nn3yeSiHLuB2JvQmsw+A150q
w307lJnc+ajDrLeIMqpjs6K32n+UdVKoNPVDWA75PJ+Qn0MUOLmlnrS8z/Gn
VG+X1Hwndwb+72flBx6puUNu6XnPkAu2soj80HKDiy45R927ogj942wH9KRV
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
qq9+86td5X9+hbnhPU/xgvLwXA5f1FzYS7wy87lszC/PcT5m85Q/tg3vV9xJ
6urvnuw/U3Kyr445ppxc7/9yvQ1/liPwVN3Faw3Pxlzgf4fg+xXwpf9tZaV5
6D7Vmf7cz5GZ4ben7ZP+2l/1yU/qq6G70dtaBbIvZf8uP/ntwhnM1y197Tnl
irpsUW61cr6KfIJP0mGjchaCpIP4W/3RevqpH6HgRVs/SC+8HlzrSBj16rd3
5HoUXQufqlc4z/faa3Tle1bRBwVE0C+veA0PcGiKcth1vf0L8JkLSeCN/ZST
dewZ/ZftCuUIFFT98ES4q/IRLPW5gT8/hv9we5nyx6Xfn/RQ/ldL4dkuK6Q8
lHvKDU9UTlAh+OR30+UzuYB+rXZh4Vp30g18/d188ISlkcpnSVMuz3zyrHsW
ZZ2cuZlu1KnjZ6Fj3RopHfp1+WfOZL2FFGf9d7uObu7ODNVdUcIPr8ND6DMT
/sPYKOqKU+Y+yMgNmAq/621p+LRfL2udTEUXdqu0zp1Lyn+fwrrKV0Z+bufB
AxtPgg8QW4Z66cUZ8Ml145mnFy8HjyjN3Fca+p7x4IEWXZ6Ra3uC59hjDLya
iuU1lzyGP94/o8G1/q2Av4HHcfpNu9HKr6+kvKej1P/DR6XBd6mkXMUjPF/3
33yzKtRpWw7RBz0bju6ybRX5vR+ER7d7iHCV6rwX3Q6Sq555mNZtNelb96Nz
3DVYfNfqysvbSz/rNJh+c0oN8Tf2yodhEPhA2drwHyy4hMGjGASu26UOddrE
veIFDcJPY0hd5jUN9qTDCxwIPhwYzT6WaQ+8qRcDhO/Vkx55J7kVAwfgU5FW
j3qgxk50oLP7g7dcaaD88Z3KwxoAL9SCrxr//67/8C6DdxOjfPYd8Ht/9qMv
/kv5WTl28t5t6Ce9WyPlz26Hx9irL/yoCY2pw9tuV45Jb+U0NaV+qLqdfq1G
X/Dzkk05d2ZsU15Vb3jOOZozt43bxtzBqy/66xHN5X+1TbzlPsqDbiY8bQt6
2z29yAfv1AweVFvzdSO3rif+rgVa0E/d3iK/0978/k7NwUs3bAaH/KcH/M89
zfFn67YJXXzrnsIrWirfZwu+BDl6ocuOa00dO3Cr8lZ6c66NaMV7Wmorff1+
8/dYfsfg1jovtjKPyN+LPKyg1tIPbhXvq6f6plbMR7ptgSc8r6dw75bsq5nN
1w2eQ3f69DItNc/drJzx7ux7h1uIr7gFXt/Z7uL1tWYfS90qnW8v9pmCLTSH
2iw+YQ+u2+k+j9oIT29eN/St25pSn+zbxFzgfDfhG03kw7mRuU+pbvCQ/Zug
R7u9UX6eXeXP3BQc6cgm+Ld/9GDu2aoxddrMTeAYE7prDtIYHsJl8+807mNP
fAAs69/wvdlEns7wbuDM6xoIJ9kkn9huzCutGjAff7WFfSahB/d5fX3xyrYw
L3DrKTwhmvnyii3gQt2745N8uC582tFbwPe+9WCfzFRXvu5bwSF795R+vLb6
7q2ao/WSn09N5dFvA8de0Eu5PzXAQwZs4z5U03pOqcY6d9+u+Vov+ZNUwf8q
9za+v18v5kpZ5Xe923zd8p459cIfcnBF6qVOWznvRvcCpy1VEbwoeTt5Rj96
y9+gIn3N3R3SQfcFH15eXry4neBRCX3xe7ToICx9wl+7waWj+0vXUJ7+MU04
9riBwmPLs/5f7QdXtxqC30J6Gfw31h4g7+zrb9y7lPwl9uOz7TUY3DWxpHRG
B/QeDaZOu1BCuNZB9tUrQ+UrWxx8+/ZhfGzeDcNX5ECk+oUj4FSdR6TRL0eK
x35cfi+jOO+SiipnWf4Mz8bwXK4Xlp7ilHxmxqbBky7MPNfxtOaP46lLWxVi
bvL4bLqBayyYqHWen/5o31nlYU1kXS3Pq7ySc+zbMyeAswVF4OfgeYH93/e3
H0IEvlXzr+hcmCr/87ycX5uvca5Z6pbfeijD58Jc/xj960xw4+ehyuO7JT/q
OfLrDpEe8ze+Ope5Xv5g4Ugm5fHNFz8wkHm9xVfHyKn8E/znZgDrJPEu9c+3
ROZNkX7wGWbex5fm1yLdNz/5sTwiP2uC8uka+Gku8Ezn7Ap00wN8hPc+Z066
c6Xm497Mu11f449UaTX+1fk90SlYv1E+1xrmXOXdWVcP36bDS0wVT8OD5+7/
AVx9vvRKvdyZw079xDzIeTPzx4Zu4DatvkpXsl11rHCGMd/h61rtUE6TC3PS
6T/lB7Kb+zDMWT6BmZRfv4f3K90JnnBzK3wdJx7QfcvD3NCUA5+r7EfBOQs7
yic2h/RrxzQXtpNOxBo+ZMPj9Ee3beBHDc+Vwft+UvVhbvys/meL/j37GZ7L
OxvxKxz/80G1vLePbfC3KeeKvnLHFfkJ2Ip/5SFd7U35bOSCfzLAC9xj1k3m
vA+sxVf3Ve58muat1sxZSgbRJz69y3n63Zq5zL0w5RE8kb9oTukK88G3LPYc
PvbpHMrjK4Cu2ea1nlcO8MyOReXn9o773zqHckiLwesL+Sh9TXbWT2AUeMXX
f8THyMZ717MMut3y38Vjz8p59KA8/L1xP+VLk1U5cZX5/hNW4u9l0flbDV/T
A9lMzAuyiddROwN8wgae5/Ns6ItP1ec+t3Q0Gf9vkezaJxuJf+VqYg6UXT7Y
zeFxrfY0oRvMLv1va3KRZvvBkyyWXbqzdvgGTA2GB+uRVTztjuhDv+VFz14t
G89xWhd8DLIVxnfRM7t4FD3Aw68UF86ZXfyxPvCOVpY24Weak3lBo4HoPadU
Ui65NXr8xsPJ4S1Xg/zuGrnx9/hzrPKg65HnUtZGfoyTwb2bNcY3wN1WOpep
8Eu/tzCR12sr3/6Z4knG4s953obz+twc8bXi4LO529EvZ1kID7ZoV3Lhf9rI
XzoR3uD9nty3NGvxnRbx/k7sZTL6hIk5VEctYl3t6aN8cCv5Ei8E/4nqw324
mUX73p8Zxvod18PE3DS3fMkW47fZqTc516Ud6N9PLwF/HtKb/KmvTuxX7ZeC
82zrKV15HuXzLlLeeld8Wec4wTfuMB9d86iOJuN8tPg8GDj7TPFIW5voqxz4
nuPThAc2I+/+lOYpt83Pxcg1bCg81lG+MePxG8wZbWI+7Mhc6ego1mG3msp/
d5T+ehg4c6PK8EsrOcoHbxD8xthyyk2z033rmwG/rITJqBNtbOSf2U25YIVM
xvn0Jrdw0c7yNY3geWW3Uz5dR+0DIfghNMyF70SBNvy9gT7KNbOW/0Mz8STd
lWufEz65dSPwq+dOvKcPcup+1uPzDvbkst20ll90HXwvG+Ymv6lVbuWo1sxA
559D84vc6On8qsknJAv4s7Ot/AYryZ82k3T0tsrpK4/vwS/Nfd4Jj90UxVzg
/mf6o3H2yi8rgX48/aP6EfnZBhVl3zv2Tv5dDrwvVQpp7vMa/deu3/635n3b
8u8vPhc/zVFzirzk4Lg+Yc771VE+VEHkkmfc49y3+HVY1s1pP+GiafhD5nIU
n82LvPVaN+HnXHEEX8riwXwh4hp1deJvH+M88me+BJ6zwEm5io7gvQnn5Jfo
Am5j7cA8YuNvPxwX+DOvbJjv5DipfAoX5bLJV2fWUfWbLtQtebNnUFcdVP0g
X4VGVqz/fPvVR7vJR/oXfLyWe8A39riBh1f8Qe6A1U753ruBFwV8JU/58Rb5
83gob/eLeHdb4Md2kb/Bin/AZ5pt4pxt4w2vtcHf8vNfz5y3jDd9q/V7zdnX
0F9HeXO+JL4BZ7iYIl9THz7/4pV4ofLnzxFA3VjoFbqeyJXgQlUC5HusvNT8
K4QvBcm38wm43MJl8IoPB9G/BzymP2q9BB2uZ4jwqAfycVoEjyIqVHjaPerG
bAvBqy3+8AYvLwMfqkILldcc8R9/0uCN/kn/lU85VoVN6GHPzcP3LG+E+pFb
6KRGztZcOAL8Z9ANcF2nWWnGPjgnn/Dn6+J9zaAfn10A3mORq+TdTJ6G/s61
AHPzPy6Bs1Wa/J/Oy+C5X8Bnz2cS79fHQvCCrp4Xn3Mi+ElwpHyK5CuYMlG5
pZGsQ+ez0o2Oky4+Epzh+28d4hh8G25Gind6An+2vKPgCQQUB0/rcAx823kk
/OqXkcxZuh+G37hzKHyDx8Xpg4ofhH9yaCg4Q/0SyiXcz3qwGYw/xoUocJiA
/fAA5w/+jwdr5HvtQ/fXcSD7T8ky0rPsJR9kx0B0lGXKUIdH7eG9+Nwf3GxB
WXDIyzvlb9ZPvljluM8NdirPpQ91rG8l5fTtog8a1Y8c7aKVlSNsvm7UP33R
SflX0pxom/i0vcGxnSqJR7oFP9UCPaU7rsLfe2QL/KvOPeGdVqsGTui6Vbq5
HlxPqc79/LRZ97mHcIMael6bxd/urnyc2ujv+m/me1b1pE+fXgf8auVm3rvd
Pbj/lutGHscm9P4ru6vPqku9nWWz9NfdybnwqStfrw3oyk92FZ4WjS5g/sZ0
g3dYuxs4z6R69AVuG/BjrNhVfsL19b5vYF5wubN4ejHyE95A/5XQFT+BEg3F
V9kAnvaxC+/79kbgLSEbwD2ydNNcpiF9XIH16CVduyj3pCH8t3pr06l/E8TH
ayi9W6p0wfHsV0GNxG9MBU+4Ey8/gUb0gztTybMeFo+vdWgT5YKl4rvbXN8/
qonmkqngQpkS6KfGNFHuRio8n77x8MybN5F/VCo4bWIn5Yw3o49IMP9+w5c9
Qc+9qfb/tcJL4+Fvb2wKr+96quZW8eqvm8jvNFX5aHHyO22svJs1/L8t4uTf
2xicfFWqfCzj8KsZ0Qwd1tu1zEEsv8eYYzeV79M68J8G8ZoHNUIv8L815KCd
jNP7GENfX9F8faklh76jcOyGvL+b1whnjpNvaox85lPFK4vjvCjdUPhwKv6T
C+L5PRVjNG9Kla9yPO9Rnfrq1/T/7u+kfr+u9J6rxefvSE7fy9rwAUJWg6s/
6kDddbk284uTqfgP23aCn+NZm/nOr1Twt4edwH/q1JL/xjrNFzrRt3auyX0+
ab6fhn96PLhQzeriQa3FxyOlk/wVq6q+SgX37hgPL71vFeWArGW/PR8vn+fK
rNub6/ieJwnyS6+o3Nv17NvLE5QHV1740nrmTT8S9D3l6Ft3r+c9Wp/AvHtS
GfC6s2vh2V5LkK9pGfmzrUenPLIzeuTFpdRnrWc/PN0ZPqdHaf1d5n3J8BHv
yvz9uPxnpmxmHnSiGzrxjubzwpijbMWPpX8P4bcl5Zu6XbzZXvT7s4vDH4vZ
gS/H5J7o67MWl5/eDuZ3g3pTD3SJlD/qTtbD997URS2K4sP85y5+T0g/5s5H
C1MPN9zDvne4H/eza2HmHX/uU70xULrjwup/D8nfYwhz5IBC1DNOh+XvOhT9
bIV88FdrHcIXfeIQ+QLl5fxadUj48DDmX4nh/+kULM8xfTh1y9Yw+MNLjzEH
mTmSefSKEOEnJ4TTjtS5Fgr/zfsUPN6aYzSnCIHHePWscLPxzAvOBUqfeI76
sN8E+TkHCoe/yNyw6CT2+YFByjm9Qh1yZqr8XQPoi2teSzfet1nTWFeW3FuD
/3ENX5fz09k3/vWWD+11+PYFZ8gPylv8k1u6D7PZB9YpT+S9CR+A23OpGzt6
Snefjg9D3J/4BUV5sC853KN+WLhQ9bAHeMuzB8wFii5l3zvgBp/N+gn4Z/vl
0r+46tx5yjzr/Ar6ndm/+/oXup9J6D7y5yHn/cJL6UdSOK83OzNnOfAWHv6d
NeSChTqhf3z4njlC2Hqur3JU//WJfTh+I3WgqwP49qJ/8H/23oyfxns75cx+
FV66lb4p3F6+gj+oV9vshIdvb48/56hM+O+t2aOcKRvq8DKZ8Qlsu499e5E1
/eY4K/LQfcx9k2UfvSCccFvWDOrQQ/IFFU64Kge+jjePoNv6kYO++Eou+v3E
k/INyw4/qrEd3z/iDPchPgfnkb0TOSDnL3C9enb831q7ZKAnvqQ+MRv6hflu
4mFehV9hn03+t97S+99i7vY9q/JbA8Bjr2Zobp5VPPAQcjoO39ccOYvy38Po
Ty8+pq7OmkW6qnzw374+wxcozAo+zMEC+Ge+fwXu7ZQJ35X6hZVv8gadRctf
d436LyoSHlHLD/TLu8zXjTl+FLzZdf+wz/9hvm7Mo8qAy5X8zu8Zb75u4LkV
4DFO+qlzJzM8rmjlg6zKZjLeqz6ZdZ9rycfS2mScT85W9BeB0fgBzrI3oX/I
DP85W0Ph3s7wJAdYCSdvAq9pizu5LTcz4/OzpKVwOR8TcyHz7zT8r9vg53Ym
EH/UdpnwkTvbAX/a6HD0v+cyMxfLlYDv4taCJp5rFtWf3ZWjVIwc+YtZ1N/1
Ji+pfmlw2uJZqTe6DABvaV0BHuyf2eBlNR0GbtymOvhVgRzKeRyDHjytrom+
ROuz/gT5ITTEZ6BsDs6XrZM1R2gq/moO+eFM0zpsYzLmkl9yonvqOlu5JB3w
DZhiLdxvnvjPncnZuSU/z/YL8Hv8tys+kOuziD85H1x6Ujdygg7/exd/iLkZ
6BG6wmMcm5n1uWyW/Ac64+86Mqfm9X/qPneFxxhuK33ZAnC8C125/xa/CEtf
OGeB/Hv1PQcdOO+yzwPHGxtHXs8Ye/riUrNYPxfacJ832DNfi5gm39Hm4HKL
beWzMQl/jykx3J8z9uJ9jQfHPlCP3CJbO/knj2JfGlvDRF6LPfOyHsOUC1bF
xP5pT730ZRD67uTy4KWF7eDH9umbgX4jivuc34Z6+HAP5QQVwY80Z27mmMGd
yZ0vl9+Ev5w1dULfjuJ7h6L7zp2L9Vw7VnlbfuDAY3Mwn1rUTDlKbuCcfbLT
d7drqPvvZGKenw3flch65AQNtcVHYkI2+oXPNXnuX3OiZ9+YXX6J1Xm/NmSD
l1sip/KAqsCDLWYFv9TCxzZ87irwfCf9i055grX02mXgk0/8ht/OOGvllEXh
Ezv0k3TNufEVqRoJnt/uA7rg/bbyPyzKezHhHfX8WRvVMwXgXed/Jb15bvGK
wzOYdz3hfPwzNzr9wsHCsR+glwyWr0hCIOsh6S51tcVn2Mhf9WW9RZvk/2kn
3Z+n8oyu46/+j534wG7aB67we6wd8H/opLzCEPN5ZMGNNzoq30d+3bHnwdMy
OeocsZXO/ZR8VBzpT6vkIpdw+zHlnzrqvMvB/C70sL7fSbkeWeVPckB9jbP4
HpnFu97LeZRD/OesP8knrb87jbz5PMxrrnwT7rEd/HljHvlp/0Nd57BZuRJ5
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
z/cZ5edzg5xQh9+R4Zu4s2/kvYZuq/Jc+e+5Sxd2Vf7/M+DnjHUX/vYXvEHn
6cq5yKT5/mXl6cQp79sD/uGl3+PhSUwWTushHPI3+TpOgFd5NjN1YKOz9CM3
x9KP+2YBT+v/K9/fkY9s/OO8wCfr/aK/a5Tm+17g5LdPfM1zMTqCrMoF+y8H
eSg+PP4+ymE8Bl+r3GD0qgtyKB/zqOrGQeAkg7Pz/JceBg+v2x/9b9kc9CPX
D8Jfai8d3PEczOnqHlBebW9wyE6+8oXYKz5nD/g/j3zlr7UHXVitrswRTueG
V3Ztt/LHu92Qfka5xrvhIXh2lZ4oj+Z0O+HzFO+CvsktLzyWOjvlR9oJvVjG
fMoVsvojg0N01Nw8H/OOpVvhSzRrjy9fq3ys53lb0CsltlE9k4/1kH4T+POX
luI7BcuHYSP64sqtqa92FEDXuXkDeMLWlsKNQ+XHtV58YN0nc6jw+XXidzXT
egjFR2XlavjAmZqiQ+8d+pX/Rm46v+/lUN6LOsv1fjWUD22Y5m5L8fW6X4++
9VBBzqlqS4XD1JeuP4K+4/cl8Hm+rcc8qHAh/IhOLpJPbAz4z90I5mj1F8Lf
61UH/XurwuBjWReIB16b99HhB2v0vQvwGdhRS7huUXRebgvoR7LVpg9NVZ7X
mvnwT97VZF7vW5J6YP988LFTtfm7lpVWTtxC9HF56uCfNrssOMaghdKt14FP
nlxGPOoF8Fpb1UKHmLssPPMH8+SPWlM8/yjNT+cLH6spH7AK6HechC9F1+Y+
YyqAtzjub/hvNTlHSlTSvj0fftF2/bu2SsyDzsynz61VSz6clZWDMFf7YU34
SPcr8TzD5sJTbVqD825HJXBIv9no8QtWVx5xZfj5C+fAf8tTQ+d+NOeC8zz6
0CW16JtWR9P3ec7je56vqfMomt930Rz66OSa7P8Hq4qnOpv9YVENeK3/8QYz
zILX7VsdfffvVZhX+s1i3uRbTbktVeEHps3UHKEaucD75avQcabWYTS5hCWr
sm/Unglfulm08umqSr8wi/OufTTzl0ZV5V89i/1kf7TOnSrwja/PQo8/PFp1
SxU9n1nKRYr++rsYPHOW/D2qcv1xJXQWrWdyXveryhzqeSX2859nMRe7UBU8
s28l4ZkzhXNWxfe1VEX2n/sz6ZddqopfXV468RmaS1ZVvkaUcM4ZnBf7q4DL
bSwn/dFM8P/d0fTdHaPQHeyapflaNDrE1WXgdf8xA15lVFV8UPOUVj08E5xz
YFXmKU9LwVefPUt+fdXYtz1L8T66z5E/ZzQ8pXsl4YV2mIM+vXB15a2UBL96
NVe8zRrwDLuWUI7VPHi5S2ri+20vrt9rPvOIG7WE7xUFp6pnXTd89lr4zHhE
ine3ALwisjb80ryF0TvEWZ83/o61mA/WCpcebZ58b2rgo3IylP1n8Fzyr5fV
RB90Jkx4+ALxcuvgK7goDPyn/CLx0+pSV3iESL9v7UuO75dUm+v9rHPEzKUW
4q/iUYc5xb388utepDzBOvgwROWXjngJPp+PY8AZuuWTP6e1zxu//7rwVPfk
ZY7591L4wKvryf8nr/KGlovnXF/vUYByoJZTR/k1xPf7RW6t85X4fp9viH75
mZ90IqupZ5411vr0U/22TnhUM+a5r/yYd+/cAC/9bgvqxtm5pHfepH2+JfvG
nJzowsZu0pyrtXTN2dGb9N8CzunZhnmZZ3b2ydrfSi/fDt3Hy6ziqf7Hd23P
fMc5m3TE27/6Mzjel/XezB87f8c8sU0X6sk1nvBXp+xin8/eDR5yRemvn+6G
53yqq/QpWeBXDNmnHLGezIOGZwFXfH8QXu7L3szjWnnI1/eg8sL6sN8OzYQP
0snD8PDL90df/zyT8gKOyUdlEHXaRDfq3jirbjT6tsHgyfVclWN+An5j1DD5
sWQQH/hn1TPDtV+l1zn+C/XSzlE8hw/pVF+dka5/LO+1Q2dt6p7zmvdNVJ6O
E3O6XBeoY8dOxGd77hfwlsDf5c8s//acTvBeRvwJryPndPbbcOEqW67IR3qW
fGOsPs74C/4DTj55Fn+Xo78z/MVr4snP1Tzd6u8c7+dyG7zN3Avgzw94lwDv
yia9w0J8e8a9Aw8pq/5l0xLxCqzrJoftruYyK/HfyGRdNzjCQ/DM3GuYB716
S1/fLpH5XdMN+r2s64Ynlqz53Wb1168T8D9MIe/V4fdl/DGt62YfeSk/qB3K
WXuTgO/HW/mB78VX6nMafMg276mHHXlSJgfjVYLBK1Z9ijf1XebvNd98Jf6b
C7zBake5T+VX4DwJVv9r5sYn4BXPtL6P4bFkAV91PY0ecMQr4V1ewivO0n95
WN/H0Sc8zErOcsp51SepCeDmPuBRV36XDui5fpcc8NAKXiLnt5N13ej7/ZQj
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
Hn39iAp283cOfs1zu3VPvqBV4RkW/KCc6/vMoVxrgu9ldLHhF/cIHHtKfXwM
1rnb6EsfigfYkO8T4Umu+i+P2P9LNrcrJw8ccqz0+xnayDcgwIYfVJJy5Dvx
HOoGo4tvmgiO0a6LHT5lON/nwUPxgbuKL1rQZvb1oPvwjv7qAu/OvbANvYod
vcCLjvCKW1ufN/OwBK23dvi7nguxwXd6pPeuC7j0Jevz5pxI1LnZ2Q6vP8wG
Xp4ov8oO5Bx5Wd/f8e9lfcrfNa0tPrTxeW2cX0nw/Ie3BAeumws/1U1PmZd1
a0aO1U3ruZk+Okl5WA3hzVbNAi7q/UR63tr4iNbPYDN/x6OH5DeFVBP/8JP6
jies/zyV+bsi30uvl4iu+by1Tsyc6TXniMOHwfS7ZeRfmsKcN/EB85rkYspJ
fyIfyPvKnyqEb23CfeXk3sFf+lAI6/+KHdzg4214qsfykpPe5l/lEN1mHYb5
w3ed+ic5sEus+5g+ztdOf/OHePW34X1N9oFHeuo8evMnt+RvmcVuzpW9p7/O
NUy+i7vd9CdrfuLc8brF97GlVz7aEfk13ZLfhbN8Hr6nX65yG/5z4CfpzfeJ
p3QLvfxPb8h/7LtTfju3lRf2El+a91s1f7yN/8COFOlVN8nH4458Ep6yz6df
Dy9lwR3OkdAn0rWt0r53h3Ph8n3Ox/hl8E+u3sE/p9Rdzh2Hr6ajnpp6h3Mz
ROeC+1zOfbdbrIft/8LnPzdV/sO3mbtVuwKvo88U9r1+4u23+1O8xAnUh/Xu
Mi8+elH96ThwmPbW5w2P4Rw6voYj0AV8cxc9dcwZ+b0Mo84/dFf+A7/QN/Uc
xNxw8X3h8z+LFxpLnbziPvOLCT8yByzWl88PeaC52A/UscN7Ke/vP1+Uw+Rs
tugBb6HTE36vw9/j59m1G/jDsUfglhn3gyd36gifp95j+XjsVl5Ae9Zhwcfw
RR/v1Fy+NXrAkkny3d3OObi+5Q3mCvIzabQVPkxcU/E5nzLnur5F+tYm0u0m
gZe+2Eg++9sG4l9p/wlZJ/925ZaWTWIe93ylfD5riTf4VDqg5covrqHclmTh
t0tYt7Zo5TKkML++ukj9snJtHHxax9w840L8dnwqg1/Zn1P/H51D/5WlIv5j
918o33D215xi45f+UvzhGcpLimL9p7xkPhszXbmoZXhPN6bp94oTXlGK51no
FfxzR36E6VdK8PyHvtKcbgL92u+RfL7ea/m3j9c8vZD82d7gD/DPGOmAIuR3
ZF03857RwsHCyZsoIj/8GSPF8wxT//gOvvG14ayHUQXwQzv6gb7Gd7h8F4Px
M9z2EV+pqcPoc3/Oz3yq90fO2YODmIM7eIPGx+gDvuuXBihPM0C85c/w5z/2
1TxafWhN5XD16Mf73itAvB1n8dn6yG8zgLqig7Pwz97y8fPj+9RxoY928PHM
Ohfvbm86crFdesLbGZKL/s6Wjs9n7wb+MzTH1xwE42vbWXVmVvldpIfXGtwZ
v81C2cQfyAifqnln+ot3WTW3csPPbXIncJ5d2ZhTR7nBB6vQER5vT29wjC9u
4tO2B7+a7QmeOcTq6w1/tx36xAlZ4I+FeKBvrdUO/7e7WfC73pUZHmbtdsoR
y6JcJPFsC7eF11rJk/rzryz4Cp5sLR10ZvGHvfGHPN0G/LBsFvrZS17gdV5t
4P9v9xAe5Q1ft2prcKQDHupbs4KfH2/N+lzhgU/aKR9wxZjW4tN6MKdbnw1/
zs0tmZtMd+P9He8jvmsLfJ7nuMlXObtwy5bKGXHT+ZVT/KuW4vG6SzeREx5p
rRbKoXADx/s7BzroD800V3LVfDMneNr25uBpDV3BwQJ9ySVJaQZePcOVemZI
LnwLTzTXenCVz54fvqC2ZpwXg93ASW74sd4c/67hk7mKb+AnPm0z9qvdGcH5
I3OBVy9vyjzONwP7v0N3bPrGJsqXyUA9cNAXnuTFJuIHpmcf88pF7tK4JvTL
OTPA38ht/b1mrt0YPHmsC/oXzxzgjWsbxuP/66z+Ojs+t3Mb4W9pd4ZPVdW6
bvzTGsKfGeIs/59s+Bt7NQTHW+SEvi9nNnJ59jRA3xfhDE/4eTb09Q0bc+7X
deF9nJpdecqNpdNMz/leMbv4ik1VV6Sn33ToqQ0Psik4RkhGzc194MdObwqu
HpkBvCiDD74lg5oxH8mfUbppaz076uvBzenfr2bg/T2ZDVx3TgvwhB9ceX9T
vXlPQ1tKH+1Knz7XC1yxfgvVb66qP//Ta7fUnMKVeuY7b/nKthZemkn6XC/5
HrQV39JDPFJP5Ze1Ed6SWevfA1+RB63JebySib/ru8zooDO1Jyerlqfy/jIx
t2rcQTnLnsprziR/0Y74isz1hs8clknvXWd4cd2yKmfTjferXUfNkbOiY12S
Xv4AHeBzvveCN1jGBZ5nr/bwtEO9lFPpjO9lREd0OnO8dL5Y+7l5fzrz+57J
Rr98Ih2+B791k19fDv6uei74D8d2Z//MnxMfD/cv4JDzuwsnyc5c+PEH6o1S
3eQv6gMfqfkH6dp6aC6ZXTmSwhXr9WC+/H0O5arIF+hTL+Z6a3zlb/AWPs+9
Pprv5JY/4Wvmuc/6MZcZ6q967BX6suP9qSdfBfD+tk3j+z+LjZevgXzjXysH
ZDB4WmCwcsrS8CF8NhS8unYB6RrkF7douPTIocL5n9PnvhjGXHV7Afa3Ky/g
UZweST2QNxycbWIKdWAG5bXdDpc+TrkkFcaqXi2kXM6n9Hd/jP+Kr5p6+in9
Y4eJzKM3RLL/vEiEn/liknxxi6Jr7pxE/XMuTjmYJcHZDj9Wfft/TJ11eFRn
u/UJHtzd3d09uAV3Ci0OLdDitAVeihaKlRbaUqBAhRYpXjwhxN2TySQTFwIE
SEIIzrdn/xaH7/zzXtc+02Gy97Of577XvWQrfjLDOlE37riHDnrRt/jZ2rqy
HoZlUk/O340+umkvPa9MeESH9zFfKN9PfIMMeAsd9rOu+jvBf7D3p6ZPqfIf
rf2ZE01IRT9+9yA+XXMGqz5PpT5M/kV5T8Pkb5akPNxf2QcqDpcOy+hTzLmv
fJx6jWJusj8ZHKPm73rvxqI3+SYRXKXgn/jcVpkgn954cNdRJzlnH0yQ/3+8
fM/+gZ9/cArrvJ6uFzwrvsF0+s3CNvn/n5O/8UzOdxer6tIL+AN8+7Hm6bHK
ubiCr0WrueLV2/ATqH6LuWHMItV78eKN3OF7fJaCl86OpY847Ub+WtvP5ZMT
o/t2lznyu2Xw/SKiwV0veuInc3Gl8Lco6thH3rynX6+RDiUKH7kxgfCoN36t
nKkocLaVwarrNjBP6RIJTtI6nPPI9xvxBsPF045SruJW6Z4i4Cdvj2Xf89oB
Lvd7JL6dfyQIh9zLPtA4Ej/SJinMW6fsRyf+cyQ+sd7CS9/+xJwiPxI8+fYD
4QOH6bO8I5Wv8Vh+8sfFN4gCXx3+FH+nl38K743S+/hc+bOn4S0cN77HxG9e
40PyyTnpQI3P2/ePJQVs5j7oeQXc3se4bvKnioKXht7QuRkJfhLvaIM34Eqf
VS9SuSqlwUNK3ZVferRwYOnrp/tSZx6P5v1Nr2qjTghi7jk8GnyjUG0bc8QI
+WVFgz/PawA/0NUCnjze8iG32vSxigeH+dgq/9hW8BjXpjIvnhwvPnlH5V9n
wT/xTGC+M7WHTTxyfqdDEnrwn/razH3hx1eauyVzP3cOgse40UE57ynoTxOG
gTsdL0aeeCnhkO1HKae7lJV1kMp7vWcc+Or8Slb8XtPi0d9MJkdpUg3lv6cz
X2j4kQ2crr6VeU4K72nNGTZ44g3I6xmaiP/tYuPzJq+ksRUeoxX+0qup8DmH
N0Qn/llcPH44k2zMIepZ4UGlwG/0f58DZXy/OZ9Ig28WOBW+3yHj86YPXQbz
tdpTyEM/W4u89Yb38M8cPkG5UdXQyz9+Pz8ag59txwpW8Pf7zH0SjPtm6pvK
WMnfu8fvGTGMHKtLRcl/35uu87G/jd/xjvzl8GT+Xb+e8GNnPNPcJ415X9lu
8IqtOfgtt9X3XOgM33LMY3xj6qSBJ6xuRy7PlswP8yBzztuCXKQlyfKLFp75
shG801026UfixWOvi8/tmGj5xsdrn6kOv/RQCDri2Tbp8Svb6Mv9OPd3C//v
UJ78rCbe7Ocz48A/6xvvo7mO7zLfX2QTL91R8wgXcgqyrOy3ywvJL+KqfOBj
uT/Bb/H323RRuX6xPPclr+LwCTvLPvaTDT+cH/LpI0JPsS+NjGNfWp8jf78/
mIcOtJEX9k1WnHnfnI8pp8bGHMczU3m1v8agR42D974tlXlciYPofC/EgVum
JdHXVNjPPlncxhw8wCZe2R74ljfiqOs2W+UruJO+wxbLfHl7BDiGbTN9U6IV
Pm1aMLjZpfXCJazCSwPQldh5mGZ9qvldLT/xJNdKJxuHvt7fE97RwJV8zwzN
70a7cR4t+ly8fRtz4ZYu8u1cLH8VG3OTtBvinyxQLmcCOo4+18UbWcD8/W0i
evCKV8V/mIve55Z0FlkX4S0cmCX8P4X898rn1Y/P5Hl5pLKvVj7L8x07nfOx
ayo6mqOn8FE8ORm+67wUcMjyf9F3bJ6gXNdk8OenJ5QLP4b3rmw6c7Rex9Gd
+Y3S3Fzzl6O/8XeFjUCP0+Ye67bCEfgtU4bL7ysDnvmsQ8yjnwymLup3j311
+kH1EQPFf8sQn2G/9Np9+Z3vMvBXWbRH52xP6cqF667eBd64qjt1bJf75AkW
3om/X49u+L8d1tzq6+3UP6M7y/fvIXjmoC3wPAd1Uk5Hls7xTZojd+B9D3wk
X4KN4tO2E//qMXzX3Ruoc9JbS9/6GLy9+jrxqVqJV/mY/f/mV/z+zi3Q+3fP
xo/i3RrqEL+m1GnnnvC8Kq1SjnBD5URn44+0a7n8l+oL781lDrhvBf1OiHiP
R/PkN7UM3tf0eryP1qd6vkvVL9RSDs4zzq+AxfTvk2vKV/+ZfPs/E45RXed4
Pv4M0xbhp3evqnit+fDAY+YLx64sH4CX/M7zc/GZ7FJZfOzXOu/mqs6sjG4r
+238//EhzftRhT5r/Bv2yb2zyCleZ/S5Jn/wDeuq0cf4J3QvL3z4rXRSH4uv
VU48rnfKXf1I+chlhHu/Vc7XNPzZzpSg/232TuthivqyEsqvL4Bv56Qp4OS3
HOU7VAi8qNYUcMujJdBZLyqEj2vYJPHzi7PO2xdOMPut5hOZm3xRTLy1wvAt
oydIp19UvM2i8kedoFyDYsr/LQ6e+dsE5V4VZf4+3xGcx2scurOaxYTnOIIj
zRjHuXC2CPzJyJLgCbHjxCMqSr9ZXnhIubHgP5cL8VwqliR/fNUYcJvYQszF
fi0JD/bTMeKPFRL/v4xyn8eiR6tQBBxyf2n5Q45WrpCDdEPG502e+SjyGnY5
gK/+V4b7/NpZvlsF8O/dWU74jzP91EgHckV9yibAMxoJzr/tnYX8rTLKbRkO
D9/6xoJPbBnw8/4j0IeGGNdN3/dy4oWOEC701gJPpCL5452clTNrfL8dFyqm
HK5qzsr5ddBcrBJ+g9tGiHdqfN7Mfaykv3eEnrvx/aZvQ0V8Nd8MV26X8Xvs
71v3isLDh4vfaFw3/TIqgHPWGq4cpdcWcErlRzcein/Lp68s6E/KgZcuHip9
30uLud9GlcHH4OvByr94YWE9lAHnfD6Y3OQixnVTN1IGH9S3g9H9+RvXTf/4
Mvy7nkOYt9Yxvt+s80rhu1tuMOdsOePzJn+2DH/v7aHcz5LG7zT1ZKXx3d0z
FL5ibeO6mTNfRjjncOqN34zrps9gWXD4miPAw28b98fEq8sqV32Efr9xn00d
mPH9pv/3COYRnxqfN3WBpeSPOpL9/IBx3axbS8HD/G4kPN4hxveYfZqjPj9C
OKrxefv5n+dIPntLZ86pvVqHV4qDD+91lj7F+B4Tz3aE93hxFOfC3gLSoTui
m34+BnzvpAO80y8clR80Vvl9hZl3vy0qnf5YzT0LycevGPzY0hPEDyyqnLsi
3M++E/GvmFyUvv6/IvhmtJukuVJx6q5fi8A3njiFuduvjvCXUgqBrw6fzP4z
vQT49nkHdAS/TMb/54Ijc7eMd/AEfCcr/8WRfW/5W3DF01PEd3JUrug75cxO
hXf3ZUlwTv+31Pl2HNW836XFt3zNPLr4DO5ncGlwBnfjnDJxsZns/w9Lqd54
Dq9j0Azdz9LMeZvkS48zE9w1rbTqmafMwV1mKse8rPDkXOb1PWfJj7qc8gqf
gr/ZcVr4u8KH5T/2+3zyhg5Ulk9pDn5HNxagB99fFZ3+pmz0IIcWySehGvXq
cePz5hztM/mZ14IPefgJ+bCFlogXUYs53bXH9KerllKX5tcRXvFQPA3liPU2
rpv6NOVof7eMfcbuq2zucw/hg/2xQudyQ/L48u7z7/6+Svl3jZXXkKm+fo32
sSbw905nSkf/pXjCzaWnM+pGk3/0NffhYnP4Nr5pWj9fSw/eUn6GydznHeuo
H2q1ZA64LJl/97f/gVvebSNeZSo6sqStqus6qX5LVX7HDs3LujGPc0uiPnfZ
+cEf1cxrTFAd+B3vdVBP+tnkePzEdu5RfmWfD7iiqcvYBx77pp90QFb5LO3H
H8zST/VDnPqUA7xH2QN57klGn2X6Bh6S3mooOjI7r8/EBw8zb/ITH/WbGPCT
scfQj8xyhp/zeQw6qUMn8FV4OIY+2i1Guum/8P/sP0F6HCu5t4H/gD9HTlFu
V7R4kqepf1ZMFQ8nWs/xHPM+5xnwgfdHi6d3ibnAqFngwKcs1KXDrvH7T82X
Xj6CfurKNfkvzed9Lx1ODsiF6/h7lBWOWjxMPL3b8pv9DLz3Tqj63DvoImt8
oblPqHS+nuKlrJA/ZJhwUV/5ba6RP1uodMoB4p9/xXNvEMw6qSMd4p4N4Ccr
jOumf06EdOib5Csbgm60qkX16nbqmYWheu/i5IP6Hf3sjVB4L38nykfoe/q4
f0PxQ6idBj+k4wHxskKUZ5FBPd/sF86RJ2HaDx8J7/2N59UnjPo5L5u526E/
1BeE6O/Nk3/FSeG0odz/9i/wY3l3Fp3F2jD6Ked3+MJFXMIXek4Y/rrhhcj9
+f4a3781FP7kpWL4jvrcJG/0ejg8kJBS5Bx1vAsObAlHxze+AnnxMd7iY4eD
A9euCo+uRBA8ulcR9CMta+NvmR8G33hoBP6ij+rayBOOjoE/EQlvsFBjm/l3
/RaH/8C/Fvm8tVSOTxr9fodY+ad1tPEcsuAn7I/T/KgbOGq3p9Jf2PBh29uH
3JwhL6nP7f4J5txzoM1cd/scrOxLydzP1sPBtWoUt3KeJuMj0WGU8Lqy5AEV
T0Y/e28sfgIBFfERtSWRX9N9og2f0erwPI8nKndjCnncI2tbqdNs6BGiJtng
f9QhF/5GFDh2nwk2fM9qWalTYulPH423mfvG3dr4fHok4t/4cBI8xrfGdXsf
0TNV/nuT8FM9UIvvf5nK/C5oAvlEq6pZyTNIgwe+egy6cqeK5EMFpfH3LnSG
l/h5aSv4bAb+qJbh/J5NjlbmYWnMTey8XDM320G4aBp9YlhfPt//FfPNNOO+
mT5F8om9k8N7OjSFHKiHnbifiY/Qs09IYa76Y3v4ulXvw0eyP0eT99cK/4EB
7/mcNvbP5Ebchyux4H4BcTpn65Lf5BwNv2JqHPOXwJrCdcOU9xoPb/lJVfLO
mgVJtx6nPKAK+E4M8GIesT8GPLBJSZ7v/DvKgzDWuZl7XIxcoVa3NJePoU7z
L0T++9ur0hdHa47wFv3m/gvgDLUsvKc/vJBv/xnwtJkW5THlgcudO6ncE6t8
JHI4p+r/SV9ZO0Z8tkeaRx/Fj6WbFd6a3z35SR5CV2jn25t6lf8vP8icq4v3
7p3A/LrTPviuJSzsM+Xi6NPLfcd850g0dVGPaHCAuG3UbxUt0u9HgD98tFl+
yxbpAkLgd23cwLmzMRre+35/5oxd1sqHMBqcfJk3eF2JVcxbU2Pwq/naS/qU
FdKnWJn7DHZTHfi5+I3CUbe6UN/u+kw4Wyz65ZU30GMuW6Bcp1jVjVfFR51D
ruv5OPnTXuYcrziL9XY9Tj60F5TXMEN6unjmPtXPkvcxZLp8zhOobxuekr/T
ZHC8W4nKkT9J33d6oni/SZyPAX9Sz2wdx/zIKRH/pU+OK7dxlHK3E5h3uB+R
L9lw6vwBKZxH3x8WX2sY11NSpOM+JL/WwfzOKan4eAz8SXPzgdwHuz+t2acb
dZfJE3TiueemoLu5tBc8s0bvD7oV099jFzjY6m7CJVI0j/iWuq5aZ/Jf0lOZ
w5bZTl3Rt6N4Aun4EmzfAs/qent0qSfSmXMFfQMe+0UbzS8099+7gT7iSmt8
LMvdl1/Tenho91oy98/MVD3wJfh5ajN4CEczyU2zrRFPpomer/E95rlu1PP2
/789X9jML3lA/em/Uv4MDVWnPQRP3r8MHDujHuv23n3pzpbKt7DmBz6teR5/
xlzjVg3mnisesZ8XXyweXXX8MB2zxWP/TDhGdfmkPaFverlQ+VBV5DeVo3zV
+dKVV6IfKZQjf6R54lFXkH9arubLc+QHWJ6+rGYefsVHZ9OP5JRlPcc9477d
/pj+9HpZ5Vc+Rw917GP5qZbl9/u+BK/2nIkO6H9l2X/8XsiHWXrhk6XkF/GS
+3N1GvhM91LUk+Nf4UPyeCrPPbIE/MCqr+QPMwn+7YNiwtlecE6VmkB9m1wI
nWDZV8yLN4+TrqoQvIVByuG6P477PLMQ++GbN/AxJozVvlQI/8bDb8Hnfx3D
nCLFgT6u2jvmUPNGkQ/SugB6pSYF8BH9YRR1Zo0C8GesDspRGiVfwQLijRQU
3ujMeTH6nfClQgnm33l6BO/7cuO6vQ5rXlTf7yzebAF4U0eLgc985ky/EFyA
eXR+kQR0ySPYx4q9tZjv0b4i8nEdJv/h1+CEdr8C0y97GHOx48Z1Uy9ZXH6t
w/geb+O62Q8VQ1deY6hykV5wPbcYvqPfDJaO2LhuX68DiyunfjC+Df8+t5CD
UjIBn+oh4HunXlrg/ZUCx7s5hP2qkXHdzDUpSR7ZwMGca0+M7zHnIMJvdw5G
H3fZuG7qBEuja3YbrPwI4/eYvk2l8YkdPJg5Zn/j86YfSlnwz+eD4uhnjM/b
37sy5aS/Hoyuts0Lvr+tcd3U4wzCXzfE+B5T71GW3KUFg9DVzs23mPPAruXA
kWIGwav/yPi86WdeFn/IooPBhxsb100f2FLge4f6M38ZnmdhzlySHJa1/eF1
ZOZa0N05yveyH/jMjhwL+LQjeHKHfuDhT7Mt+K2VQO/s4AT+EGt8j8lfckTH
XdxJc1XjuonTFQM/z+urfdX4flNHXhy+Zfv+mtMZnzf19Y7iSfZnHvfcuI6v
fAL1/ADmWX88tTD3LUFezJCByk1+Zulrh/9mlpCefRD4xvh81omno/KtBsu3
2bhu7gPGddNnbQh1Ti/jfpp+kcXxWzgxhP2/tvEczT6/KLhfiyHUM1HG95jz
x6LwOXsMER/J+B6zHzbeI5PPNgTc75fn4Lf2HByzjx/GfvixsW7N/964buqs
hoN7fP/KYv7uIUXgOf81ApznlnDaEGMfMM/JkfB8Shrvr+n7XkjrzVn+28Z1
E9dzkE/IaM7lKca+YfoYF2Qf+GIMc9VbDvStDZUPuHoM/LTcAvDcfnyLr8ux
0bxHPzrIX12+LnXGUkflOoA3VnlNfftkrPJoCopf8RKfny3jmK8FFpSO/iW8
i53jxXsvzDx3yyv4A6Unoy/OLgquNfQlfc3JKdwHO5/czKF/jh7zylTeU5vO
hVHPqN++nKq8m+Li6+bi4/duqvCx4uhn83LgJ4RPAyc8UgK/yrrZ9L//fKQ6
sCT6so7K5aw1U/qI0pynvz6GN+j2ieqfsvDTHORL9slscIwfytN3t5E/0rG5
miNXwNfiTJbyPuaBn1SoDK5y5AE45ID5wjEqi6/yEP+crxaKJ1YNXvqA+9R1
4YvYl55Ukx72AXrnkYupY3NrKsfzvY57KX4OrevouWeCq+xYhg/h3fd+s+n0
I6NX8L48q4der1c6uPGvK1lXKxrCE45KATc7vkr4T0Pl9ah/f7GS+emERvDP
d8fD0/txtXRbjcj3HCI+Q/xX0kc0x598YILq1f9pf2v1Abe09w+lNlG/bW8H
7ys6Dv5hyS3y+WwPz/BpnPKGtlGXjulCH1c0Djy2+U7qgULdpUezohsqsYt6
o11PcOa8KOUXGNftv6tOD+ofq4V84Rf7pF/ug1/oymj1Xz9Kf+Gk/iuS+XLS
QXyKTgwU3+z99/+q+fIQ+vEvI6mTax6B//y/4eBIbyKoxz46Jr2VMzyfJeIr
Fv5DOWJjmWuPjWQ9Hz/JnOv8BP2eCHRGqafQ5bWZIv1CBPzA0eeUc/oRz71K
OHjsy/NaDzOVgxAinsNF5QHN1HMPZm4++jL7p+ts8ViEN7a6zv7zw3zprIPh
GwTcYr725lPwrpVBmhfcYT9pvwQ92rZg6mqrO/czeZl8TQPhPWZ5Kc9xpfJn
A8Ax+vtp/a9FXx8UgM7xbjB6Fof14mUFKdc4XP7Vm+CxjDb+XdP3xsJc+Mw2
7nP5YPqIpnHkL3h9J91BkHKTE6gTeu2V3jBIOtwU6v8KP8JHKhDC/XmYybqq
eUh9ehC83xMP5WNzVDnRgcq5fizfmGPszwcC4Rsn58pX4aTmU0HybXupuuIs
8y/vYNbD3Hfs/19dgl8RHSTfgEI28Kn/6N9DQ4QDF7eRJ3hLuc8h9NebS9vI
VXJjvX0WQv+4oIKN+Zy3/HVDxWuqBk71SSDzms6hH3TBpn9DGPy3t6HgoqPq
iT8ZzXkRFKnrTeXfmEh9buepmvOCNjbO0Qz8yc9YhDt1tNFfZcWAC1vhXazp
Lt/LpzyXY7H4AXbrgz/Ai5fyRYyH1/R6ID4DSQ5W8/5PTIAP9mAoOG1dR3xB
o+KVq+Js4/woYwWvTWAfcBjLffatZCX32Mb5Um8CeUPxVa3gQbHyVxmv769h
Zb4Yofd9DHnl7atZzf7unxjpbcfAMyxSHZ1+bDzvl/t4/AEWGdfNcyhZ57Vx
3eRTVSNfPisFHHWUeK1exu80+9dU+DxnnMmv71EW3qxTCud13WE2dKLF8Tt9
lSq+1mAb/MNC6P093/tsONnAa1/LlyYFv9+nvWzmPp7+TPkvSeAYTbvy+TKP
mUsmJ4KTp7Sz4aucCd4yx7hu9+9v1ho8f2gq+0+dBHDdpcb6MfGVePmAyf+h
l7HeTHwhUrpIK/3p7zXx+dwRytzH2YLedl8VG32dP7q2czHKQymP3v9rL+FC
0fTjiSWVT+TC31ssCj7n+qI2cMYb2g+j2IdvGO+j/Zxb+R98zrmRnGuZb+CH
dL/Ae1Q5Il79FToO11Pk22aEM3f4Lpe5z5I/pbuJYD2kPIGHM+Y4erSlkdr3
HrLPnzwi3+Zw6oFZGfCU/jgIbjwpkvv8dzI8z3v75RcUBc42OREe3aG96NZX
RjLv3mpVzuAO7kNGKHXRtAjqh/KbyF8oHs6com0ourme/2Oumh2O/iUtSD7h
66STiuL3x/sLT1jLffOIAK8+6w0f48/l4qFFMl/b5w7vIu9z4RtR2mfc8F+6
sFi5hxbq4Ra34e8FLtL+H82/e/S6zrW5yuOw4B/b4wr9rNsn/L1NLZy/wRel
A5oBztbAWD+mP+U58ibcp+EDv8/C/rnhtHxjJjEH9IqFr5j6t/Q7E8llrhEn
n+E/6adqjVOuuo3fYz3BHPyv0cr9jKNu9P1NPtgj8OeJi2X/9/8VPd3aofAl
cqzkLU7/WetwIPvnJzbl1B+gzl/vBG8tJU7zr/3CRXtRzwTaODe77BUPp6f0
BQnSYe0RztAdf4M/4vENsH1L/vXfneTvFI++e/024W/twZE8tQ/c2wxf7m0b
+WMnaV1tQg/+Yyv8V+15hXY8a9V69C/Fm9MXOImH//BL+FFVGqNfuJSkvmO1
+CQNhRMqbzFjperb+vQRS1PA8eKXCWeuG/N/Picm3v4Fdd2a2loPacrdW8oc
fHYt+G+xqazDEks0b62BPsgjnbnP00XSuVdVHoS+/9d58BBOlJfOIlX79hzl
rZSjDjmWoXpgrvTR5eAtj37A/e89VzzY8vKVesj3fDwHPdfJsuyfvbPA/XZ9
gi4yt5T8wMWb3TqTPqhFCflcZcvP5BP67mWl2Ff3ZnO+58wQbuwID79Drnih
0+SH6Uh/+sdT9CyfTJOPbnH1NU/FZxD/p3sx+BsvnkrfNEn6siL0m6vy6Ms6
ThBeWhi+tz2P1fQFmSDeSGHwz6vPlBs4Fl1Vd+lznfPI/7o2ir5myBt4a3nP
VF85wxsfZlw3czafK6/QGb+IOa8tvD8v2Lc3j5Af6SsLOfcvwEVXDgNniHlh
IbflBfvbkyHwYGOfW5grvsSnK30IuMFK47r9uUx4LTxhCHVvK+N7TJ3RG/Dw
b3X9zHsc7y1zkIaDlH/6HBxjlAN8v5FDeC6VX1rwqykgvuIgeNqP8y34qL/T
3HYgeOY3zyzgQQXg18UOEM5mXDfrhALo/V/1j5Nu08L5VJBcKscBylM2rpv5
qg7gJwedlLOQI1zOuG7i2n2lZ8yG35haEL3tpH7o04OM62b9XCQBf41+nC9f
5FrM+dyhouTFl3KS75/x/WYdblw3z8F+8DBz9f1biiUwL+kHP8fPuG76nRVX
DpT+3TI53GfnYvgo3uqjXPjHFuqf4vBFP+0dB3/0iYX+owQ+mQX6ijdlfL+J
b5RAT/2gt/BM4/Om37QjfMVJfYQDPxZftAS52PP6qL8wrpv6akdwzq/6cO7/
bVw3dbBF8fNM7QluHJQFvzGrMH9vZA/5RT+Af3i6MHzLMj00BzGu28uRckXA
Gxf2pN9xeGiBx21ct5/H7XtqfmdcN8/LwuC01XsyfwwwvseOJ2wqlAA/pAe+
rG2N6yZuZDxfk9/eA9wg5L4F/9lC4LTXespPxvh+M5+sED669Xtzvs8wrps5
v4XhAyf2wr+lyCNwWvs6MfX9/XReGPfZ7AeM+2Oel068v5Vy4Jdm6+8dOoB5
TbhxnTmJ9PJO6BbTjedozgsc+P326/a6Znc237PMQfp9rZ+lOTz34+/oH+3/
rnnOG7/H9G16pxxMJ+qr6TngvUHv4PNvGKD3MZfnuPudztMBwj+fWugT34BH
2d9fsz40rpv//hv6xJRB8MZrG++vmWf1mr47YAg4ob9x3ZwrvJbeVjxeF+HG
W1/CY0kZyr8bZ1w356za3/YN5fN9tO9lP4e3eWg4eOCCl+xj6/PFhzSum8/N
uG6+H8/IC642kvlyqHHdzJ97Bp9qpjP4dpk3WofP5AM2Rr497yzo/PPlJzZe
uomC8st9Kt/y8fJjcWBO1zdbON444d4O9O8tH8lvcBx+nhMLgKs4ZNFP9Rwv
/Yvx/fays89D8KjKk8QvLcR88PUDzrvGU+T/XFR5jsrRrjGd536zOHzRfff5
PUs/Ep5WQvrTe+zzm2dQZ75zlG/SPc33Z8I3G1VaOMA9eHSO0lPUKiu/hfd6
nNnwMVqX5/uT0ugHf5/DehghvxevdHy0ms9n/r5Bfs5305Qnu4gc9kJV4Rk6
pGnuvxi+2dAa8PaHp0jft1Q+/DXEa00EJ3dZwlyyQU14mNUTlNfwOTzb3rWo
r7bY0LFu/UK64Dr8ziax4qEtZ3/LqoP/xjMrvKORq8RTbcD3f2ll/Y/8kjpw
UGN4mGXilG+yXud4C/GxY8QT/h/12MyW8CiOxeg93cS6atqOfmeLFd/UT7fj
J7Cwk3xULMrB2aHzuov87SM1p97JvvpZF/FVophT75ZOf0F36TUi6H/H7KXO
f9MD3ZBjmPT137MPePSmvvoyVH3QAfh7//UVDh+CXinhIPX8vf7UdeNClP9y
iPfx+0H8u+1D8IVIP6xcnmH0ud5B8tP7Df3F/BHgzHND6I88/tC6HQOPqFgI
OFijf7R/ToAP0yhY+NVpePWzJ8MHGB+IDu77s8Lnp4hH4ae6/V/l3k7XnNpf
vliX5GPwCX3ZDX/6sjZX5SMxVzmhxveY6+mGfCrmy2fYTznRt5nfFf1UueR+
6NO93MQTXqrv98HXq70nvFDv5fJP81H+uB9+uQ6rpb/2Fx4SrD5rHXq07gHy
3Y2Qf/5GcNHH/vB2LkQrD3QrvM14f/DqXnHK+d3B/P25Pz4bexLwt5m9R/m8
/sr/TeX+l/6B/ijIX7jKPfFXf6ZPLO0Prn78Id8/4jDzhab+ws+f4Nv2vxP0
cS395SOXR/3wzUn8u3b7x6s+Fk/pjPI+/HivPd/g5/P7OeYvvwXiD1a5MD6H
uf+hUzgYCA48xBGd9eRb0gsHwDcoUtrGOecmfWsguUs+8jN08Nb+EEj+TngV
G75dAfyeqGD6kRG14TceDmN//iJMusiG0tFblc8YJr5oM/AolwT5JBvvqf19
W93axrwrXT4nFs0RusBTPfUYnPZpDPOszj3Rodd8Jp9w8b1bOuFXufG18klj
lWc3EN193UJWcDdjHzPf42E27ldxK3VknHwLnfn9fctamfNb8f1YN1p/V3mu
fxMtPfso8NuDFa2s9xD58o0gl2eM8XnT5zZSuRUjwfeyjM+b89s46opOY8D3
2lQmL2lHAnhjp9H4rI6oiI6+ZRL4zOej8CWINH6n6Z8h38IZypNqUNLKe5gI
PzNqEPzJSOM+mLwk+WSucsKvNfsN5/XbBOkNe4FjW5/ho35COWibutrMvn7F
E/hg7Ww8ry3t+Z0P7sXg6xEnXK4lOv3WKfI/iROPtKkNPqWN/bylFd+PqfXx
eWgVLf1yNOdLWk3p2UM0/4oCf2hblfygFH9wNjuuaM7jy9voKz3Yh5vKl+Ns
SfDS5q7ip4XjizipKHnxba4x194cBv5/0sGGz85l+duH4cc4/636vvPwxN4G
w6uflC9+yD/KHQ5mXUXkoAOK/Z06p1yodN+PwNnCfpPeJAR8b88D8MlpvyqX
JAT+2Lh04WAH4a3tCEZn0VP69HH7pIsPATe+FQevo/ku8NhVodzPIlbpEL/9
cN6ZPgIRzDGfbQJ3bRPM3OpuCPPHDevxT44MYd1eDgTXSvyKc8crhPmOh5/4
QmuUZxoOLrHCm/yUKyvAi16Fyp/WHfwzbYnm9WHMp5q5xpEr96nyX8KE89yC
35U3n3nZ3Qj5J1+Tn8lc5uzh4fxdiy9Ln/ux8NII+AYh5+TXN43PXwqHT3vh
DPOvm5OoH/6JxHdi/Sn1RxOVbxuJ743XX/KzGiN8OJr6M+KEdGejlLsUjf6l
xTHOr30jqFcPRVOPlTrMeV1pKPPxg1HSZfwM389ngPwwo3QOHpBflhPnS8ko
+aPuB3/YatQ5Jo/BIp3FXnhKJ3pIzxVNPTPlO/riUZ1jzP3koUU8OuV4Dumk
HMD3vtzb1Zd1UH6xlX3j3GZ4jFXb4mvhEsvzrbxJPJlWrH87n9bkYW0A76re
HBy1kbGfmLlw6+ChjW4iHM/GfOr4Wul0GlJvF4xFN/HDCvD57Nr8zvmx4GyJ
S1knnWuSZ3QoVrzlxcqjrMa8oEsceKnvIuGZVTjfnW34tEQvVP1cifnpu3j4
n78tIO/y80qcs7UTwNkGzhM/pAL69A0J7P9fKZ8itIx8rozvsfOk42YyD11U
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
H8gR1Cef5Ol+BklPNJrzse0LCziYH++1XZ9i+s/lg89P9sPP5O8x8rd8acH/
w4c+evA4zYOM6/Z9tKE3+Pz48cp/fMPzbe8hnvYE6Y/ewMde7y7+zyR4ks7v
NFe9K5/eqeyrMx3QlXdxl75yBn74TYvg9/7GjfvgZdSlpu9SUfJG+6lf2/QJ
84KyjuIVuNCnhM3Rv1tSc/nbwhXnM2e5Uho/qBe36Gcbf0pOd45RP5vnhAv+
BiHyNXWuBN9mwW2dU8vwm/1IOOr/boh3tFzzmuriF11jn8xdyfnyUQ34tJuv
iye8lr7vrzrwxw5fk//SV8p7rY+/09Br3Odl61XPN5bv6xX0BfEb1Ac1Ro+W
e5n1VmMTuu+mzdGFuV6mjm21DV8Ln1bkYi+5LF7HDuFy7eQPeYn9Nuc77Scd
6FMKXKLf/H4vuOjn3fC3vHxR9/8H+qO6veAJD7qkufDP3P9VTuBgwy9qrnRY
/k4DwDd2XaIvq3mM/fzEUOWxXlF+9F/4Pv1t9K1m/X0FnvCI0/Bnvp6gfNX/
NEc7rxyrKfjth12VX8plzcFnkt+0/irPMfbaBx6ROXe5Kr7TTeGu8+GT3Liq
3CU37ZOfsm6P/Ce/BXd86n5YCj/n4DXmOG38wbebrYK/Wvwa/ey+IPD/Tl/J
t/A/6v82YeJTrWfddr8qvDGKv6vYFvnZ6t/dFgt/eO23/L05V1lXPoniV++h
H//4mvxY0qhbcveLl3Wd+V3p++J1/AyuNeM652OZx3FmHXP4CH591W/Cm3LO
0zr/U350t6QDeiW+2Snx/YTHLigAnlnlgnKTXeQfVdgGv+eKeER3lKNXwkYd
dlt+a3ep32ZXsOEv5MH9iXGXrqEK+TKH/MhLyvagjv2mlvC0EHze/nzP+6pn
w888Cp7bdPlUTG0ifbdN+VN+1F2jW9nwu0uPwV/fT3yY9jZzfd1+gF9EYX/5
xnSSrj8bX4JsX+rbYt3IZx+WB34yy4t1+08XG/rtZ7y/dd3IyWrX2QZv9Rk8
bae7uj8dyBN/kyPfPx/w0t1d0GXPfir+ZID6oC7kRm3IRad5Lki6P+P7TRwl
W/zkYOrqSOPvMvv1B+DzXkHM6dxa2+CTp8Grnxz4XmfE8z0YD97ex086gvr4
as417rO9L/Hzoz6vVNtm4qqTQz/M18zzuKoNvyjjOZp8IB/q/17luT8DPaRf
8AW/HVqW+3/kDvzAX3yYd+x2tJn7Z9cb6EaDPTVnLGSDb3dJuUUe4hW8oT99
cEY+sXepKzq8AE+beRKc7Vd38UVzpSM+HkP/7Ao+M+2h8L2fhRu7sG8fTVeu
6A/wCcvclt4wGXyj/h75Dd6WztomXcAO4fnGe2ee9xauV9vMHKrYTeaSx8PE
Y1nPfu5yQ3zF4A856WbOzg347cd84TeWW6nnfl06Mg/60/tLYsxzt/8t9r0L
bvAzj32mc0rXx7qoXlrAPvDRLXSy8delo58DzjzwBnXpl1fgV5yYwfcXvAm/
LvmC5lbTyJV+c0M55v9q3jRJvqM3hUv/wzlydyz4auXr1I123qbpNzVcefE3
qJfuHqM/Kj2Uf3e27sPGI+KJDeS8nnNLvKlfqLsS++EnkHSTvs/3AHXLyZ7o
zTfe1jm1X/q7bsoHvy1fmr3yw+/EfrL9NryaPrvg56e1Zx5XT3PP8d+K79Ea
PPBfF+kNt1InBLbkPSrhgv9kw284H5s1RSfyzkW80PXSnzZSTqgLfY3f1/Rx
E+rjd/Sbq/x51mq+Vld+3a7yw1nFOv+8Jvvz18Ln3Zarr6kufZArz+vGEs0Z
K5C36OHC+/X5IvCrumWVa+kqX8EF1Fe3SuEn89SNeWuzecrHLMn7ZdcXmDri
OZrfFWd+elP4ed+POe/cCjN/Oeomf9rp0lU5cD+D7oifOZlzrZdRx5p18x3l
PkwA1+pj1MPmuXKX+Xulscw7nj+XP6T8auqOEh6VR3+UcFd5T8PpO5rm4uP3
+V32/6bD8C/a90T5IB7opC4PYZ748jF8sG88qLvKD6Y/qvcIffdlL/aliwOE
5z+k72jmqTypvuw/Xunojlv4yH+4LzyHuxnkHaf70hfY8Un7Ok5MRw8eG8D7
2L8PdWBKOv3vzwHUSz17yb9L+ujbgeh3NnWHj9r1PY8xkLp6X1f4M/7x8Db/
DmaeNbIL/IG68fBY7H415nnfQfxhK7nGTsGaT7WT3jYG/7TWIdLNtUVfPN0C
vjEqTHk3bfDd6mqB53M7lHNwdyv5vhr9rMn/D2Z9lm0m34kwi3hw0k00E/4Z
Bu+uThj7xp3G8kcKof9aHC69dmP223LBwm+j8B/+vTH7Zz3hddZI+p0mjXiv
nYOUDx5F3+FZn3XSLlB+qlHsM3PqgXe5+8NDW2VhbjKzLn3BaX9yz+dGC6et
jT/Jv77wdYda6FM61pJuzpc+tHEMeur+tcBj7/lY4HtZpVuvwfvy2of3ZUMc
9e2/wgOH+cKvu2sDB8uoyX1b6UvfWipe/rS1OAfX+6Bnj41XXkxN5Zv7gJPb
bMJ1a9APdvCWf2w8v2duNeEJXvJziGd/G15Vfb07eOODePlsVxGO4c73PE7A
p2hLFeGQ7vgKXk8Sjl1ZvCwP5hGxSeimT1dW3sRd8FX3ZHD4d5XgQ86/S26U
U4pwyMrwr5LcyNFeliL/9krSJ7ppfpGsOWNF5ozF75A/XiBVOGEF1vNk4/Mm
HzOVef3miuzz8Xfgzfqk0hcMrggeknwH/vPRZNbD7fLKMXexwPdPBUf6uIJ8
AFwt8n3E765jZa1/N/BA33TxuyrRjzR1U15SKnyVixXx6/vDRbnkydLRlON6
6i34zG1SxeepCE4e5YK++Hwq88GqFfHP8XIFT6iUwvm+uoJ8zm+zzrfIl3hB
Ofn33pL/ajK46+GK1BuzXcBhbCmaP1bmnKrlBp5TJBUcclgV+U67CXdNph+s
Vpk6Z4tx3eQlJDLf+bui8gFdwbG7JlIn7KjIHOe+K/rlRwnKN68EfuVoPBeT
d2ZcN30rKivf9g7+os/j2Q+HVOH+X3ZjHzuSoDzoqvStw4x1a+byxgvnrBYn
n7UP/iRmvVcN/LCKh/TdCZrT1RQu4YUPZIskeMVj6rCuXHx5XmUSxIOtw1yg
qi9zvRc25iYj6jAPnSg8OTtO+TJ1eX8v+jI/ahtLTm7xurx3Qb78njUxyqeu
C86w15f7vCRGOR315KPurzlFNOfdL8Y+afrxBeB78Fu08j0bcq71CxLfNRJf
na8bgv9UMPZVk18ZDl93TUPx5wPhN75WnrW1EefRkSD2wxfSo01qir7jbajl
//Kv7f87tYXwsfAPOKG9X/2hBbqnoxHMg1wCwWcWtxAuF8E5u1b8w5EtuG8V
IuHn/+TPe7SvNXP51tHgovX80P9aW0v/Ho2f6m3xf/5oy31uY0G3/oe3/P/l
Vxwp3u8gH/FRO8nfIJb3pbcv99+em2bq6xKkf/ehDnToLv+WJH3eWzruHuCl
ISma33lSVz/tQR34W4rl/3JbzPq5l/Ixlcu2xIv9+Y/++FGEP0CPEO7Fvvp0
sPS8T5hPdfSQ384QzXceg2cO8JAOcRj7lXcOvrjP3cTvEh91fC73rbYb9Ux/
+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
dPkFndK5sFa+KCngz79Z6VtnLUfX0DaFvjjmCDyrokXol12SlaezX/rNeeSA
10lmTtpht/Im/iSHKCtZ5/U28QZ/Yw4yOplz50mJ/El+Fi8uRfyKQuZZW3/E
79SWyH5VLRue1Q9fc58XJImnlwo/8JspnCPHkqknw5LFG/8MfrKdh2/nCc1L
kO7+E97TpSns83VjpQseD+/xRLLmXBHgNtPGilefCH/1s2D8w+NGMb9olqh9
z4c6//Vh4LRP4jUX2KQcmTeEkyfC5/nJnXlQm0HSyyfKn8pVOov+8KV3JzL3
vLJO/IdX+ZzPk+DffrBGPpy9xEtMVo7eSvF7X2I/r55MnX9jqXKpusgnJEW+
Q4uYd1fXXPKHFOVT/CNf2fbMB7unKs/3b3RGdV7AP3NcKvv5ztnMxX5uCS66
P5395K8/wHkmtBAenqZ8vVngNqcaM6d7Kw0/nEU/4S/0SQPOl/MpPPft06jT
TjjIryMNX6Yq34Pvjaqt/KA0cLbor8mf/aKaBd++NOU0TVEeZWX4+ftSqfc6
fk6OyfAKeh8z5Mv9KfyK3Kfo2vIz5Hc9ietfPKIOn5oOL2vHOM4Xu37c9MVP
l3/gB+Lxqv7snSkcYDTP95+bZayLdPgwzUZyPs6/Ap7zOF317TDei/MXqcP7
ZfJeN3wbX8G3L9CXvZkhH903lNd5psx8bytnMJe353Tb5zGtT5FLbv+9Ju48
kHrPngtj8syy4RMue105JifF/8xlvtNgAHXg/ePwW9bnULcE9uV3fWGlzm+Q
B2/q7qvgqzWs4Fd2f3ITT3+VdbjCQk5u0yJ4Ly1eoY7taKG//qFI67+X/BsP
y/9QvI7kHvAAux563q+Z84OXxfPZr5zuLfDwK3ZXjvM++CHFJeC987qIl7ib
nPHgLfhQ9e0o3dZOfCMjtsrnsCP64pa74KdN28rvbdJBetjt8sPcypyrT3v6
4hHS7QZuk09LW/qIaVvLwAW2sc6D24AbNyqFH2jZxn2Ia6l85xK+5+md9CN2
Hat5vhajS/Xazbqd2goccpn6brsfuInHtyQf/GIRuEfaHuH8zfBD+L0Q3tHf
u4WfNFEuRn4ZOqi9mvM2Zr/tkA/e5bObevJeA+Yd/jnCu/ZJJ9gAf7n9ufBg
f90nX8QGwg1ylOd7AL1kywbKDc/D7+6zA8rZdBRvPEd+pwc5H0vqc93O9zPx
qQPigdSDr5WWCU/v/QPwBsc58HzHZcB7sechmnkidZS7nY6+2J4XZq7/OuLn
pIsPeUC5gbWU/5WCj8HfB9HfXakpvlYKuvs/Dyt/tjZ85hupZXyvI/LvqgXv
vWca/MODh5ibDKjB+myfTO5VxyOam1QHB9iaJJ7zEXBOpxr41l5IAlfpVwYf
uKi65p7GddPf6Yh8J6qpX4hn3RYdln6ninga8fKrPMLzqlFV6yf+uT7X9H+v
St3yWgJ8PEeL1nM1zourCfLdtWouUB3f4PpJ+FjetYifU138jQTytT+zwA8P
rCrdZYJ0/RZ02Y2qKfckXjk+ZcKfq4L33o0jB61bGb93Z1XlJ8Ypz+Ww9PiV
leMTC1638hC80/uVwYX+isE/064jNs/3SvBtfowWv/2gdJHG55v86Rj288FH
4L2Mr87+OSCBecGrhzUHrM45/jgO/NDlkPDMquDehfG8v288w/eqK5c2Qflr
h8EJX6wBPr89ER/mfofoj/bW0Fwjkf32v4PCH2pIV55IPk76QeUz1pSfeZJ8
DA7xHE/XYt3acWP7HG7mIfr6Dg749b2ZCm/54UH4iv0clHORxjo/chB935h6
6GgqZSgv6RB1V6v6whUzmcsMP4D/0rz6zLsbZYrvuk/+n/WYc63I4Fy4sA8c
9XwD9r3h2fAtG+yT/1UD8OpWOcpn362/21BzpSz4dVd3ynfXERx7xrO5xg76
oCkNqU/8s/HtvLSD/bB6E/DnOGO/svOZkrZJd9YUPUL3POXibcNX7XRTcK06
BeC6UaU837bNpUMp0LlfqnO/JfhYvWL5P5Sg71jRir7bq4h9aU6ReLMt5etY
rPqkSH4UbcC1Ptmi/U05GnaercnPKuV+TpPv04dt5WOwFT/w1/O5z1vbyX97
G/qCgdJRlr1Iv3N2h3yqc5XD0lE6kZ3UCftz8F3f3Vn+mcJdr+YKx+jKPlNr
P3jyZznyLeyufv9Amfn838nmOXq/pLn5IfjwAZnah3swT5l3mNzDiZl8/tme
4neVgSefylQeZR/NJW1l6KMywbUG9qfO9D0hn41n/ddAzp1hJ+UHLr/Hdm8w
V21zlv1ne4bmlUOkVzonP9s0+sSuQ/AbqXwefn5+CnP5xm+z/wdekA4lRfPZ
4cxnYy6xT5Yny1d2JPjqJ1elC0iWzu49+ZvdEA8/kbn2ptHymbmBj83JROWe
j8VPcsld+LG7EpmPRIzneV29Lzw/ge/5x8fiSz+i7qoQJ5+9ScrBfIRvz1Tx
DJd/przRCvDHLgi39J2Kn2fnKvC1rkbTj7f+ivP0n2rwgtIilPdt1P92HGVF
NXTHb0bh/1P6HfmYV2tJpxwFv+Xb6eL/ywf1aRTPceXP4os2lC9oJPPErbOU
T9EY/8/LEfqc36nDi5qRO/N+BLqt238yd/Noia9XfJhyhP9GJ7iyjfIywjVH
WACv4HwHcK1r4dSffyxmP/mgK/dnZLj0Ssvl82b0fea+Ha79ebX2q97qH8Ph
8T52gh8+tY/FxOvnhcPvquUivXx/eC9tIqS39VCdPBjd644I+YR7y1/9beUC
R2geFCD9yzvKS4qUj2swPuSD3gd/+y8CHeKxcM73Ph+Qh94+ir7VMYb3vdsE
co4CopTPm8j5PvwT6X+jhTOkyiftC/r9KrHyic2hfv79G3iDh6PxZyjOk2/z
D/JtiCKXc0GR8tqmwwv6Kwr88PVSeCb9f4U/kxhJnx6zg/p2yGz5xEajIxi2
D37vjPnoWxvFULcsPgyefHKRfCxj6dcGW6XjWIGecVms/LtOaM6+1kLOQjy6
6UHnqOtGuvH5bvHSeV2WTs1TOd2J7M8/3FAup59yo5LkK/uf5sjB6CKHpKnO
eSweUQzr87N0+SxVAcf7PQn88FCm+PO1xPPMsuC3mC3/2/o2cx1eLuC9eCmH
+dGoxuji620VjytPvKkW6OuTdoML5RSoX26Lr+bVIxZwtCL6zcWdwDmjjlnM
c2yA5mivd4N/mHpa+XT58CUWdreRL3ZWPKgc9ocV3ciNWnjegm4lRb6anW34
E5wVnzmLPn1SZ3iVD88oVyWfdX6nq41z8wx5LqFF5B0UGtfNdXhav7dEc4cu
NnM9vniS59inlHr1DeN3mfNSG3jXk2L4KvXa2cCFDoHLzSiSPlT5REnicw4q
IAfttSY28PGt4NJNC5n3XXQk98qniFyhhXl6L2qDo67P4j78qfngj1Xhzcak
kHveLE86uIo2cqjjxbvL4b14+SFzt8QI5cdli4fwn/DPYOkInuHtN+Qn6Ysv
yu9p6HpqX1L+sjv7SZc0refTyq12xn94TJL862zSRS7n+tV48IQHh6hvP1rI
/Cs0Xj5a+4W7zpMvq/jzd3fyviyZrVyVWL3vW6XPmiVflATNqUuoGwt/kj9z
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
Ucq+N9y4bucPNfeFF3SxhOd71vgcs672Bp9JLZF+/4YVnNGL9e9VyjoZbPxe
U1/tIz/krZpfG9dNXxBfeMLdSsHbLxp/197vJXmpX97C3w29xfO97gVe+ncp
uGI/4/7Yz1N3b/altvJrqmpcN3X63uBmYVvkP2BcN+dZ3tLVbmHf6GBcN+cq
3uqjS+Bp7zCum/6R3uItF4O39LkNHn7KC5+HxiU83+l3WCe/efP9vYqpN2oa
/96sb7zxS/mnWPjDHfFUffAx/r0Y36o5d8B1Y3yY+xwskj/8XSt6bB98CT4s
lj7UuG763vhx/tpzW0wf3XtW/O39wKtHP8MP71vRAQTAS5xYrPnpQ/B2L+O6
/fPefvb5xnWzLgjCl3VEIf1XN+O6yY8JVH53Ievz1CMr9XWI+KLKU1hhXLfv
a+eDwPF+z1dumvGemvP2kLL/67nMuaH4t9VC5WPzTEdgXDf5rMZ1O0+qfw79
zoUK7Es5ofI9yJRfxBM+Z0uofG/EhwypKB5XuPjzmfKrryxfoyjeL7805T9W
Vn0YyflVmqZ5ZVXqogtRyj1MUf54VebO1ij5ZyYrN7M6+oI9MXz+C/r3m2qB
S8yMI/+rIEn7nnHd1OXGM3dzTIIPGVOHOemOBPC3lYnCOR2YH/2n8yU/Htxm
QD1wnnXJzCmexqNrc3IULzFVPNtY+cY04O/WScMf+/MY9J7zG4LLJaXLV0f4
YW4T+btmsc/PiIUnfKMZ9fbYPNUhMbwvUS047+4Y577Zf0XK97J5OfPVfHTu
9nm6+Z4rj29Mkb5npOZrL5TLr4v9/9MIrcN24udvVc5dJP3v1Y7gA1E72X+2
h4FjVO8snctO+LQrntWZXdGt7NvD3NmOT5p4bnfpPvbKrztY+rKXhB/uQy9z
N0i4R0/xEw6o/gxhPb/dh77g7hHmUCODmGu06qc83DJwVDvuZL6H/ek7ThyF
X5oYCN/v3dflz2ArA4cNAudf9Cbzi9JT1JMPAuW/PRQ8qtsZzosbAdyfMcPh
Ldc+Lz8HP37XzHdYJ6HGdTN3wxf+w/13Vc9f1L7qq/1wNL6s467KH94H305n
6fG/vomf8yFvzv388ayHxnfke+9Nn1LjY/nh36N+frKZuZidR2H6ot9nbnLU
i/6o2ufwltOfkM+1zFv+tF9p7llJ/oQ+1AmDv1OeTnV8HZd64Ut/4wf5EtQE
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
Q/vVOenNneBVuqUxlxl4Fhx11Fq+zzvp0uGeZZ10W0ee2uk0+UcZn2PmDqyD
X5qfpvV5Dhx48zr5Y6SKp3EWf1H78zLfkzT5B55Ft97WSfhPmnDjc+BgfZ14
7r+nMu8rNf69yX9wArdcmQIu+uU5eNRb1zGPmJfOufnxRSt12gad45nUsRWv
6nm5gT+EZeLntsW4btblbspfSweHaWK8dyb/xhVfDlsq923zFfwl+rnK7zEJ
nHPgZXie3+jvzklUTuIlzUdcyLO29xdmPWN8jtmPuWo+ksC/9zO+jzmPdwNP
q5igvNTr+DBM3qhc+0Txcm/iT/uBp/TviZr73Gbf67mJ/SE2lnPw3g3WYaIn
vtMP5fOz5yb+A8H6HGsU74udh2zykzbjz/lVpNbJHSs8kM3g3mER6CyOGdfN
5635y89h9Guxd+Wv6w3O3EL6x2hjfzbrAeG6d0LE037A/ZngKx/gEM7TDcY+
b+KW/vAna4aIn/bYaj7PaoGsq3rP/BWfWs06a1UweV4jguVTWhH+W1yI8taD
qStiK4PztAlnjjwmGPykZ3XxkSLBl1KD4I18UAM+W/UY/CqniCfQo5b8i2LA
ndID0NMdrEW98UO8fDP8lDNYR7yFePl1+4HnWxz4ux8nCe/1Aa9LryecJJn9
tlR43dX6mj+mah/21nynIT7z7TPK/o+T2HHM0CbwTx5mMT9t7qV11Vz51Dny
fRVf7mIr+dsUyB/Gi7oi6AV0gumFZayvzdINtUPX1q8EPva/nprjy5/8RIn4
lpvoF5Z3Vk7oNt67wZs4F37rhp6r1w78qFtsEv75MnVgn93yWfUEV/m6F33Q
p3vZfxZ40hcEvqL804PiOXhynv7Uj+9T4Qh4clsP+bD1V79g4Tne2wjfdc4g
eA5ZVnRDWzYKx3tDedzHyH3b76acuKHgq31OoZN6xYW+w2EY/hhup+Wrsx4+
1VrxTqNO00dsdgZ/+2Ok+qwL8JB9nOUHOBr9S9xl5lmNXMAHUj/E167BTc2P
Nig3eQJ6pa/vUEeFuWo9f8rn13zIHGGVq97TKfh/3n7Cc3/XFVx3zVfgQtUq
g5+0duE+2/X1Jk+yqvo4F9WH0+BLNKsNLyjRBT3C3z/x+Y3qKffERb6CM5Uz
2AC+Si0X+tNBf6Drf7sJfCFvN/QOw+fAP5/WCn7Uy27icf0DbtDZ6GdNXZYr
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
7ZDCe6wyB36pYzdwpzWprLcH8+ivY3vDozuZBl/66hLxqwfCs52boZyL1fi8
HRkJX7F9pt77evrozg7ocw9ny99sK/y6fHfpkXPxnQ7ZDe662Bde1pM8fDN6
H4BvPC8E/tiGPHxrexxVjkyk/AEK6CO8ysgR650EPvxdoer5c/I3yDAZdUT3
cehfllyWv+hofDU/LGZ+euqmmZzQIhNzoQngNmH36H/bTJNf6yR8SFY/gY/d
aK4J34IprJ+J/+o8WQLeWHey8p7KnWLu8hd4ZthEvZfyp8C/V+Jzu0O+f53/
Fc9/OblFDwvkU/cPeMv5ZSb8bYvl3/Ivc4eMpfAzHSYyLxv+HF/ZSktYDwlT
8CGxec4c5MVC8fqmwLvOewwfe+9c03+8EWOeeI/3vmyq/BbGK//rBrrvn4qV
r1QkXvRl5RGPJi/Gbyz3e+5ZfCm/yQTHTinA5+1oGfulhuU9GnqQceDt1UvJ
wWkaT76V1W/B6KeO4O/xT4SJuUi++AB7wRXXBZr+08kavlDbwWH6eJngo2ej
z6oi385JLuDeu7NY/81L4Kmm2sEnTM5WHusK9KGBNqyrLzKFry42G3Vp4wHw
e50zlGM7T/rr3vh/HkiVP+FMvmeDLibj7+uYqvNwMr7NvX43/cfnt/al+4uY
6636WeeV5oNP8uVv8z3+HuWSqX+a5in33HLOGLyUZL7nJ1nMfa615D3uTGA9
/5gMb3+n5Ryz9s9lcdL1RJO7t6Uh+/FlHOvwZjh5cI/qm/BNimf+7h7C+daz
LvOOpnGcDyMDyPs+Xlu83xj5XXuhH1/ylnL3YtDptHeXn0lVE+dBrHJbnMya
A3Mv+MXKj91O/s8v6PfPxIl3aiv9/nPlBcdJ52LDvTzuCbyOXXHKoxkMn3Dt
A/CuJrHCMfpyPvT6m98fEwtO1bKneLCWe9PoO+Pg26zuBk/Y7zL41YJY5RJ2
Igdw+nl8At1j8AdO+Z3PHU6BM9SIhf+f9YvyMU/qXo4Dl+j+s/LjToDXWeet
1vtyV1vNSY+hd74epxyN76VrPsT8+kmc+A+teW51DoC7XojlXlvbSrqkPfSD
n8Uxj5jXgnps6Q506MtUF13+FP/zBpvQ1/SIVa56E/iQozaCdwXGKkepEf6Q
zddTD1dRnXn2Y+qHr9ehQ18arxzbj5g7nFtNvzYmXvOFevgUXViuvjuO+WOt
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
0iOvZF9vszHhb54Kf6xlCTj5fluTce6/n0nfnbSJfRHhorwq6WqLtvN+QzxN
8JCymHPt2a18nADwybIsnc8HWYepoeByaXncawtOgCP9EkcujBUHM/SaZ+CT
Z6SZ8GMdKx+AS+KN5+EzsGAcfqT2N8DVl45lPfQfLz/tO+CN9lNM9E+TdH4+
NnO/zYFn2H2SeDvPzPjfLCQfZ3ex8t2ewzutt5i/d0aR/CKec574LCNffkgu
z+3SY+E/i4QXjYGf1vyx+N6LwOEbjKXO/Oopzy1ygXxxi+Xn+QRf2fPzpBee
IH7LY3jITebCN7bm/Rn5J/flXzfDxLxO+r4Zt4X3ToJ3XalIeN1V5SwXwNOb
Lz/tR+fBAzdnSe+cD+70wsy/+78U+UzmoYPoe0K8yhjyZSrncw5cPoxO81wE
8wKrv6UV3/Ddr5ydIHiJ1nrMyMvbyfs9741f7o1M6syKm9F3t3CBR/pPunSX
JfKvsBNfMU16zxVm9JTDTeS5veJvL+G8mjsQ/NPqZ2LkEc9jDhjS8zWf3Ng3
s7TeuuL/cDtR+2Iq58+Z303MKRPlC1SMD+39diZ4nfHMTx8UgKtEfY8fb+d4
8tpq5gnv+gb9+N5X9UwW89AfvgR/PhRPf/FFGvzGuObMgw5FK/8ijvPnUkPl
lEUpzy5MuoD64NWzo9S/BMNvnPC+zqUo6uE//MX3q40PrTlS9aSP+LdvwYve
FqFcYDfxRauwHoZHcF4dd8IHMugN+LfRUZw/3e2Fz78sJaciXPz24ay33x9T
PwRHcB/NGgKu9fSBfLoi4XF9OwifYfe74odEwAMJ6INPwuyb5B3nR+Dv0awn
+OT/rqK/KIykP+3cFbx330XqsaBI6orOncDfTp6lbmwTCT9kdgflH5nh4XQK
h9c9rx3P2XRcPnWR0tH8CB7e6hi+nTcjyan553v5bB+m7moajf7Omp9unAsH
0Y//FcXP/9Qa3DhiL/7ee1QHftmKe63hbnCe1ZHyf2sBH/X6NvFUI3m/iU3l
j71JeFQEP+/TiO8/dC3z912R9E0RDeHZJpSQl/Q08nVOuuFruYq56h+qe8vV
Zz6yZIXyCKLFf6gnXfwy5t39ouEb1HlP/PPFzIX9LX+X9fkOqkXu54j58FIy
oqTzfQte8Zdzqbs2RcmPWrry6rPASwdFo0NpVIn6MH+6/PGimQdFVMCXpssU
cHJr/WzguuXkXzpJfUoM91GrF/SzceOVXxCL3qGV6vYpxTz/oXHiLTyjH/m+
iL41OQHc2+MpesNfxlGH/xCv3LpH8Mo2jBEuavk95GbBV9mdp9yKOM3T79DH
WXVzBu84iXn6yDv0+w656NCLXvGQLX2N4YuVjX6tRzJ6nNKb5M7YZqq+TVbd
fgNcYmE684WuyZrrXQWHyUlFJ/hHknzCL6PLLp+Ez5VVF2bldU65QD/VPhGc
0DNVuuPz4AxJ8ezTo6noUpueo4/uF4tO/N1UeCONzqAfrBwFf6l+Ct+zR5n8
HsOpSxPT6Bf8zfD6vo1Qfo18Hvqa4DvtCy01+FZWf36j7jwun8wg1e1p4AAj
j8mnNFC+Fmnogpcdhbd5XrrdBWni8x/i53v6y1czVb4fB8jl+dpX6zxduPcB
cpBH+2jekaZ50z7w1ZFe4K47MrjfP95HH/rUC17ipEzukf17yY264snn66VH
6LCbdXjcE36jbyZzrus7pfP1QD9+Kks84Z3SXXqoP8pQbt12cMUernz/1pn6
u7ai813tIj+xLPDDFdv0/F3l05ijXMXt+JqGump/5WqfbocHeMpZ50wu8/0B
28i/3ukMvnFG/OS3tqGXv+sk37Nc8fo2i0/oKD1srnK+NoOvels+t76efbnK
q9oMLzTNkf69wmjlEWwFb/F0Qmdt9d82/F624uNa0Vl+y+KzdbV8bp3P13YC
l1hYIL/crfhGhruI55Mv38Ut4G/TneAz9x1Dvdp4MzhMfUf5VCg3tsEmcufj
7dgX90eL/79J68SB/CbnMdSl1r/X0JE5wrfcMYZ5ffMtzDV8nFj/6aOVv2b5
eUMn4Mi9YM0xNHIPNoG/VXfkPVr1NQZ+vJF1ssde+HCe/DQsP2+tg4Y7opt+
mct5dXgTvO5yjuIpZcvPcAP85C127N8/xNM7vJGcF3978TxzlNe5CR+MNAfw
20//3+dGPWnP/dVV62T+JvZdLSfe72bplK9tIq+82BEfjI/kO/S25TkY/taO
8tdVfsquzdI7/791ZeSqbyXPa4qLck+U8+i1k+fm4YFe2+qLYuR47OT5L/Jg
HnEpW/OLHfK/dePvmqF5/W7LvrDes2Pcpa/Plg/JTuFXHsofyaKPW7ADfm9N
T3C8T9Lh60Zt53ze5IbOvU4691Sjnejr77hTh1TKYK4xYE+ZsZ8uecqvJp25
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
BA+fe4j1YM3bMubn7lr/h6kHrPoFa13cxoP5rMsx7uuDfnzPAA/W4ejj1APD
grhP13rIv+tkmXhd5Lx09YSv++IUOPb+CN0vHjo/zwp3jRTf1Z1+7d+z2l/R
+CHsc+VeqHKBnKaUGOrGl87yVVBuVIU4cPuzTspFulymvBZ42oNd8On94Dr3
+FvJzA0vu2j93GLO5ZwqPryL+E634WM3y5Cfj5PO57vS9WdQP1xzgsdo80C+
09nMRy45C694Kj+Q0dIBuUqP81zzoELmszNclGtTTvny45Q77wL+dqkC9f+D
Ccw1Il14nn9VFj9tMv48dV2Ue1tVeR/TlQPozDnwRQ3lYs/U3N9VfKpa8sX6
sxReiwt4TtR7ylFaKJ9qJ81b64ifqTzQJg7MTW7Ug29g9dU3fGwd8VvbY+kj
DDxmealRN9RwItev+SfKQV4F/2Sgs97Xp+B77dbBK/jMGX+Vy5+BG/y+UflK
LpprSNfWf5t0Ri7ix34N32aO9PVRTspzb23mPewGV5ziCA8/sA2+VQP3yS/d
STq+tmbqliM631y41/78lT5lc6n8f5w4h207gCesKaMfrOKkvqyj8LTT8j12
Ad/+u6t4LBelo3eBF9qyN/mqda7hh7bIBdyv8gD57N3WOeYsPthg8R7vsk9t
3KRjsqGP9n4Cz+GyO7jNaTvpGZ8zh/3HXf4tTryvb8uDY9TxgBcx2k15KBVN
xj6f5KnccB/pnavBI43xFW4cQo7Yp++gG+3pJ916JPy6rLrSxfuDiw6OY902
/Qi8zuwn39FEdN9/NwJ/W/3KJyENvtaQz6SXD2DfvZNtZm72pcmY980MkN/C
GPC3dt8ojzuEc3VlEbzKm235/i9D9Xum4Ms35TeTcW/PCeX3XJ8B/+3fjiZ4
QKHU805zee/1u5nAKSN4Lw6L+D2f9IMv6hGledly8LdmQ5TvHKPnX6JcJ1sT
OTex9NEfbBJe6gQeu+kVf2CnGTzXB53142R4jz8cZF+XBZvAo6VPKX8cftfw
aPT15TPkn1/G70lPNIHrZIFTXTzL+lycqXyrHPGaLpPr9F6+ib4qR3yD62bm
rsXgzN2y4I1fvAlPrMVEeLkP0tm/n98U/3mycNRE5VZcZ67RYhJ5ND8rB3nX
VTO40njypN7LUq7lLc6TmImst5Y56KPr38R/9cPxPIcPsuVjdpXz8/MC8Taz
wJ8vn4d3dzubfLGUDM6B0FP8/LVk8SSFJ7cuxffVOxaeZO0M1aXHzPRzEeCx
76TRBz3aD35VNYjcqPgEfGn6bMdHNNedddsxSfzPzfDfariwTr5Mhoe2Z4P8
9xyU65TEfnmrhOf5/kjygKz6Ryt/Iegv9um/A00Gr25MDHPVqgvBmSv00T6V
r+OO2eQrremiXKFI8BCrb6dxn/3OvmgeSv2zv5h50622ygMKVp/+Kp/oWxP1
fhC8hTO58P1qtQIn9ArUuZfOc7vyGXjyOX/57Sfp3rGcA9b9HeIv349Y8DS/
j5Qj7wsf/m44uef165jgAQtfqhsEz39tLdbtKU/pSryVV1jFxM8JZ3N35d6J
rwj+2dpbPmzOnJNHyokf7iVd9ijy5R88gwcV6K4cveHww68+RMca90ofMYT5
yPT7pfKRYp27DVRens75G57gpdP6Ug/8dUP8Q0/64rs9pfe/DF/lmAe4uqmL
GV+J8+QntvOUf0VH5pKmU8p79ZAe+TczfLZSdB+ZHppntdNzPoq+4IYHfJvG
bcEJkw+Kp+HOPGXCd+CEx/fw70a6qd5oZaZ/284ctqur8OEW5BAN2sTvSXdT
nmZTzquS9eIFuet7NuH+/X2t8ivdWG9JDXUerlLeqAv4ud+H3O8Pl/L8p7oK
X6oHn7zyEvlfuTEHrF+H7x+8EN+baHf4KgXvMI/r9afqVTfWye6a4mPPAJdb
506/1uIt5gWfTEc/m+3B859cDT/P2lOVh+4pXV5l/DoGT1I/7q48nTeUI1mk
HEm997xy4NLvjaMOGeFJnRbwAj1aYQG8svLe9C+7n8F/ezCmlBxiL9bzkifq
N3Ol0/RWXtUDeFxVc+RP6INOJOA+/Uv1LPDeP3yor5rdEX8sTX5TPtQDlW7D
twlP4Xn+6iv90U3694HJ+AVZeRRGLuBVcoc/jadf7uAtnvMl8UZilC/pSf3f
4ZzwhHDxLb3g27Q5Q91eFia8yFO5z2b4YM1CqLeDveFZLS6j7+gcovXsrf7U
BC60NVC6Yx/pWE/ItzMAvs16H/qCyOP4wi32xY/xA3/pNY6hQ5zlC87Qx096
wCPK7/Aif6Sq5Tw0zllLv2bwUJSPExUkntIh+Z16SicYxPoMOgA+9swd3Dgo
gPdrzQExcnWcxaMLlE/UbulenfFFXBbIvfnPLnKQBzqJzxnI/G7NdvkBOmhf
BzKXf3eb+tNR4Pnlg9Edj9wKv+7hKJ5znRBw7PVb5Xsw6rVPvsHj2Axe9MJW
vPdg9UEb4FP52Eh/GgyOXbZOPN5h4h8Giceyluc5eQh64coh+Ml4l4BLWHmG
hj90CP3mnDVl+DINYh50XHqlcavwC/1xsHSdoeh3nq+EHzVmIDrlnFD8ZP5c
AS7nMaDUeN9WPNbwWVsBDjCxHzwE23Dx0leQRzOjv/JEQuX78Re5JEf7ci98
HaF52XL4Pz790P3tCkPvdnap/Ot6s0+rhMPHaLyE9dOgl+Y+YXz/CYvxfc3v
IVw0XPi/5XMjh7gnOGSFCHCYipbfY/AWeirXI1LrcAnrrazna39jo09bKh10
L3CnpGj5Jy/lnLnfW3MQ+dgULwWnqtubvJKasfC43l4KX65/H/D/DjHCN5bg
B1jWS/6oMfLzWYIPRkpv8Taj4fulLoEfeLmn9KHR4HWFi+WP1wv+5xvR+FP1
WgIePqKX8nlVF7ksgi89pyd4y5/h1A8tF8LT7txd92y4/JAXoJeP7C7/CvHx
0hbiD7y/u+qEcOHPC+QX0aP0P32c4U+1AJw/oLv8S0PFI51fBt7fnf1i9T80
5kUL5YvYg37weTjnw8BF+OvW6CW/1nDpOhfhm1Gup3xIwjXnXYj+/fte4KjD
wuHDzF4EP7N3L+WYh8kX2vK59X+f9SSf+rbwurqLyY+r3ou55Kww3pcVHzb8
7/po/8qPqO0y+Wn04zxPC+c83GLZF8Y8cgDvKyGM/V7+/+0jI0csFN6+z3Lm
dysGcL//GMbcLW8l+PyCgfDqQ0I0d1gOHzVioPxOQ7innlh+3jg3B4HX1QoR
3rsKv9l/BsE/PBTMHPznNeCrrYbInzlY/LcS1uH2ocw7HgSJr7gWvcDeoZrr
BePL1219mdFHvjFCzy1Q8/oNzAF32VC/dfYXr0A+D0tt8Bv085XP5EZygpbY
KBfbDzztu834iiTb8vfG+6ou3YLPzL5Rwq984Dc22qqcd3v8Dap7iiezFf31
V3aaO7jDi8vZynm1yJ65Uj8P8B/XHcwjejjJP8EDvuKTneJpu/Dc3nOVD+ou
fFqmO5OH2MFV+qM9r/PXrP8/z03zoAOcw9U9mXv6i0fX4SD1RpCX5ggu3O/R
h6ln5nlTtzi6qp89ylx4gT9zlvku9OlfWe59Yz8Hio/qyvpscpL1OTJE8wVn
+ZSaeT63Q+AhV3KhHww+pTokXH5QTspBO8N6Gx3Be7xrr/PnLPdym0j4b5/b
ad4nP/CmkZzDJnvpYi7hX9o8lvzHx/bKG70KTr4+XvlxDtwj5W5wD7ZO1nMb
xTo5eoN1OD2JecHHdvKLvg3+fCWVnz9sh17pzn2+58MM8agd5UP1FPy/ME/z
XHvuwU+fgZ9PGI3Pra8DfcRHljrW8EUby/ta5KB6o4L8sopLDf3wEHvlBFUE
3wudyJxusR2892Nv0oeOm0y9bX2exty/OnhF7xn4bFyxFx/ybfI4OsyhPgmw
E+76DnrYauKLzrXFH6D7++Ta7J+vnPRR8veuh/9VhSXwHo/YK++sgfr95dTn
jRzgK276BF9Qp9XKJ7KTT3UT4V0l9H2NHTQv+Az+pO1G+p3KjuLDtEQvFruV
+Xs3e/Cr9FbgJ7e2KwfNTrlR35iNc/rxzlL5ZPP3Bn6Hfi1xv/jhDtKd/Swf
0aPs0wd29OlP29EX3z+u82EUuETmb+QR/1iqfF4H5Q9a+lDDt+cM53OYA3jI
4m746bW++Pr5WN93h97Cw6/Bk/nYUbymAcrB+VvzSmfxLoby+ys+kK7fRbmW
I8AhWz6hb2rgIh7CKPmCPlfuqot4g07gV91eoospdeEcq+IO/zCxool15y6+
rh99aLfq8EKtfYrhxxuMzu50LXCMweKBfx6J31rDOuQyV/GC1/d1DOtk8YfK
VfdWTnGyfDgbi3fqI1w3DV3hks/Ea/XFh3Z2Dvy3zi1N6O0Dya9JKIQv1LgN
+tyfgqgPP5oAnrbhJ/wAKwdxnh+Ygo/lng74fN4IQo82bZZyQDqhZ38jnPpk
wwJwwsDeJvgaEdQnD5eRLzNpoAk+/Ct/1FXKtbEx0XdHa46wXj6NDvD9mseL
d7cdn8b6nuhtfaWTcthvVp8DLrQ1mfPzzSPokU+Emwx8KzwVH4B2JvhUQ+Lg
xdV4lS9wSvzkVPh1+9LRu9mcF18rG926NV8AHg78zzkFJnRFysPtdA2/073j
8AEYmMrcfPVV+aOOR7feRDnUDy/B440tAo+tl8g5FnQZ/CpynOm/PAWDJ3ZN
+24c/MCP05nz1rii51PAc96cRh7KmgvSZeeQj9M3Xf7PZ/ArcEmHr/tWGv2s
+aSZHIsEE7y6VHgOE4/JHzhSOWXKldh7iHXSPcSk/l667L1mg0f0o/TsHvHS
GW2Tf4IrvFa3OOHAlvdu6C/sTfjpxMkvuoR51qMR8pOMAd+4/hfn57ZB8kGN
IJfhl4XybbasQwP/C9c8Za4ZP7Ju5LYnh6rfny6/4v+xH62+lEb/PoHv/0E7
eJKPA+hbKxSCk/f5Fry0fYBw+DzlnrcCF/3UX/lZmcoJ+txk7ONefuBd36fw
9x5oYkKH6K1crTjx6z6CT/61t/qySPBha966wWvxPC0fdvmy1mK/13vFJ/QT
n/8tE3xMd+XUy7fzi0p8/1g3+U056dwoh05/lRvrtshOPOpnzPF/Ew523Yb5
3fNH9EHPnZQjPxhdRsId6uTaLurLBkhH/7d4dC7UzyV9wccOXRevw5V+oUUv
6R0uS/ftKj+BbvK7Pq/72lW+Qx3J7Sp/mvzEUBfuEbsO+AMsK0WvNE9z1cB2
mtMdBWew3gvGHK0tfq1RB9DjfOis3LFvlQu/W/2so3JRW+H/XLCN+srBEX7F
hBZm6t1Nmnva89yqNeX5e5Rwjzdz5D76shHrpM9q5vi3nJmzn/6EuV7NVfAM
11mes5EP8RE5UOeXleKP48C5eqYu9876hfLJdJA/3rvkrF2cV4rexR7/z29r
kY8ZPVv52o7k6zm9ZaaOmM5c8itH+U1VlT59knycXNCZzqmifTcZPs8xF3DF
m5WZo02cIN8/Fz2HCvhv1yziXo5y5p7a8oI+914+fURrF/Ri456ha3YfjY4p
2hn98tgn0h/lwGOc4oZuNP8xOMZ3OZqHusFv+fIh+MMPmfKFc6d+63CXvnhU
unIw3ZmXFf0tPCpFeeju8KWn3KB/z0yU/5Wr9HRX8StLikW3W0VzgdTL8F72
xlDfHnBVbstFfERPR9If7XDlHux+Fr5BzXB4uZOcpfc3w898Giic1km+E6Xi
1/mrLnLh3G5Qyu9Z6AePYpSb/IdPkOPQwl958W76e4/B8zkl/XiUntv8w2Xy
aSrlfvWQH7Xlc0PH7FmqPGRw/vBD/P4/PZinX/SAn9Zlv/w8Xfj8D2/8K5bs
LePcdMVvqrMP/c69PehVLwrPvOerucwedMG/Sy95xEf5GrvA075zgAd+0If3
VW6H+kR7/l3r/MiYJ0p3afWlNNaxL3Pw1pa+2DhvbeV74Muc943N4G8HbTQX
8OXcvrWBPuh9y+fW6/CGL/Xk6A3CD1/xr/zUR6xXPvgw6cv8hFuuBW85MFj6
NX/pf8UTWzYInDzOV7zTVeDPuf2pq01+3Bd/rFRuVH/ee6wf9VuFFfCjOvTF
t+GAv3xl/5KfZF++v1XXaeSnLitDj9RbPBl/cLO/l8ALndhLfgXiJ19ZDB7Y
tgdzjd4B8OSzFsu/sYd0Yf7ye1+kvJju8NKfBOq9L9Jcowfzgr0B4gMsEP+z
K3jsgQD59c0XD60L/BOvV/4n89GxhnYGr3AJlM/YvDJ0D52VQx2kHCLLz1vn
Bms7s+9OB4vnvED66K6cn4OD2Y+35qMfr9eFucP7IfITtnxu+BF0ke9rCDyx
A/PBA7274LccHgYvMXY+uTCPukqPHyr8cx76/T5d6Je/DtU8fR7v/WBn6SVD
lSdr+T3GvuoCPn8uVD5g8+Ehz+zCuXE1RLjlfOl2u3Bf9AxV/sJ8+F3eXcGj
koM4x7r8Kf+ETtwLOYGcMyPm4tfXtxP4yd5A9NSd/kRn7daJf9dVOuK/56D/
/baT5hoB1A//myveZkf6vvWB+BXsmku+89ZO9JvdA8Ftgv/ED9b6uXGuB1L3
Fs8Fd3qrM/h8fX/xneaIl9hRfMIA/fwc8WY700e3CAQ38PqT73m/s/jeAdLD
/qk5Vxd416O0Dp/NEw+8C3wba46JdXlPW4DPyarunFfvBtE3TV4ETyyyJ/hb
gnJYrDiqob/vxfxuourP84s5Z5b3BM/f64+vQv5idNNzewkH8GfO5btEuGgv
+NgefqrfFoMrVu3NObDID/xh61LlCvUGXwrzlb/WMvbLxj7grr/4qv60nBuG
T15f3S/SUzdYwb6e1l98Qh/dv6tY54MGkLM8z0f+nKu03gbB37Pqbgw+Ywm8
wZ1D4IsGSMf0xTruzY+HyffGE/7ekLU6B+RfkeTBeZW9Fv8Kv6H44zm6K/dn
Pfv3yTB8Bp66KBd4PXOTwOHwxKY7c76lbOB+jLJ8bsxtVL9lbgDfPmXD/Tjb
gXn03Y3yZxjBufeuI33fQMv9YvQDdvirL7KT3kQ5aPXtWG/p9poXb8ef3Jpf
ZtS79sI3duFrus4J3+kO9tKF7WE9e7rg/3DPTjkd+3hf77mB491zeJ0bZfh5
eeOvGGkPHnv0sOY+3tIj2AlfOgpOuMVX9aEduqewE9wXg/zh6f1mT50fYYJH
fTAQ/C1llOq6MuqBgcGa941UX2+mrmgSouc2Qnqf08p5D1H++wjlOZ5lPtsh
nLpx6Qjly1ykbuwWJZ/qEcrDvSR+vnxNrw5TbtRl8PyFMfA2/xjOnNr3Oj4e
l+KZGz6yAbe0uQ0uvTmZeqClrfSVD5jj3M8AB942QnqrR2WcF1nwBl1Hyr/0
qfxaR+PbUH8k89CO/zLn2pFP/+Jhw31x9oXy9cZyL9sMV59VXv5d49S/jODe
j68Ejyh1Ivr9Mhuef9tq4qVMxQ/kJxvN72qILzdT/pbDpROshX6z9Rx0LsE2
zIlS3kOf5TW/1NhXrUbKd+4DcMWti5kzTrMV7tdA/NUV8FTrjJRfwSf0CyNW
sp6njmS+/7AJvgF+Jei88m3xC1raHN5m2Aae86UR6nOlo6+1WfeR3tfalmby
B7eqPhlBH3Tka3i503cxz/IZKf+H79Gj7dkPH7XBCPlKtcUPc+kh+OQ/2MBH
Lf4Z/8kNR7i/om3xoa38u/hgZarfbMmH3dsJHGz8GXjvvrbwuAq6gzv5XpIP
qi19VvM+9KfrrlLf+torp34geVIf3Gb9+zuKpzGcXNr/PVBuoKN4aCOVn/KE
fmqkI/jhFXv5lz7nXHrbkftxmLPySsqhL37Lmfq5vpeZPr8yOIOP5iwf+5Nn
VFodvqWtG3y2jFByddfWRld70U05OJHitdaFp+fqKVw9gRyfCg1NxvOz+t8a
fjap+IW+IR/R3V7wgrZlSnf5OTiqvy98huLR+AbU/Vq58H6cV6ZxZmPOeuR7
k/G8a/mr/p+k3KtfTeDEgeAJ5WeKP/yHybivL4TQxx2dB4/3UQ8Tvp9hWj9L
zOTq9TORVyl9Vuxy/F1XDTEZ+8VbOdFPS8zUIbYmo+44Iv2U6xZwmC6u+Hmm
xkpnsQs/yXhvcl5ux3Hv99mv3Kgg+RMmcL9/ehQ85EgEOTtWvqWh/zDRj/dK
NMHLSJbO6DS45fM0eKd1U3VvnleOc654dynUOecviQ+WD35YLQl/v4BL8JnH
jsVv1qoXM3gN56SnzidfaXuMzoHz+BV/MgbddMwr39TL8LicLT9v3D8p+Cf4
XZSvbB5+oZeTpc86C88tIgOeYflU4fOnlKeWzHqen0w982ep/BxieL/Tk+Bf
1T4iHXEofpV9E6ljWx1gfTYOEI834ZXPudaVJ/6TD6Qrf7gZf8tTjvAJrTop
A79YC7992UjW8/Uo9eMrmRecGQJO6xkpvGUJ57xvP3DdJWHKX5unHL3u4J8f
iefcepbynjopfypY/mNTWZ9vtAf/bxak/rpYeW1tyVdq6i/d1hj+3s1fmcgL
9pOPRA6/J+ELE/pVb+qlN9PBk+d+Kn9Ob+meEsH3ujXEl+APD63naOYv1y3n
gBUXOOSu9xJKHs3Md0zMRd3lgxRkxp+1hnxTXXXfecnvtLJyppyFV7iyv+aX
43v+6iyfXnt0yoefab7vJB3oSHCtx4+4NyOc0Uc/HgYO7Htf+cuOypcZyPnZ
6BZ6FlsH7vdtfYTPX4OvNdCBc+ydXviUbrykPtcRHUSzbuQTjTlHvRHsqH6q
k/QUZvCEaAfls3cgR2/tCeXS2snvvZ3mmIelG7Vjjjb4e9b/ub3MSf1GKRe+
Nevqzg75eNuqDmnJfM1xi/BVW+a/fVowN4nZIF2bLXwG92acJ/tLlFsxApyk
ZSPu8b4r5DNvi365UwPN9f5Cj/advXiMH3GfvlwKPrnWTr6R9XS/LGT+28cW
XXCH93hfK+fCv9owUrq8t834Hc6Un9VI+aDW4H50mEa9V9FWPtVvyh/YUi8Z
ultb8NhfK2kuU0Q/XsuOc6DXG/BaC8cxF3a0l962PLz08YX0Nc3sxf95Th/9
7hjpNO21X55RP9fJFY/InnX+3WPlCmXx3n+1Yz33fSD8Jw3e7GeOfP9698lV
6ZoGX6jUHhxj7W30X7WSpB90YJ1Mk99m/wT5KjhyX/xxjb6+dpx8Ph2VV3JZ
PLdo/PEW2cuf6oL6wTDW7feO8uM6p/z3MOrY7g46l86AP1wNRk831FE8XrN4
REHUVyF21OF9SuEprRA+OcKe+qHKcfIpIr3xYThqr9xhS59i4Fye+KY6a582
PwJ+6/l/RJ11eNV1+8dtsEBFAQnpbtbd3d1jGywYo7tL6a4NRgwY3TC6u1tg
xx1pREEEg0cRxd/O9/Xmt7+e6zqXz+Hs+/3Efb/vd+RpzttF7+syOexpufRx
fpnMZ59dICfCM4c+9GqmdIIX4C1MzMJPbEQ299pP59CX/ZApHk6W8pfPlFFP
ZTDXaJgDb2rnSfFa06n/E3Mrcn8Mvmc68/R6efhZHT8p37M0dFgZmtc4HEMf
lyj+5L+5qq+OghtcS1YuWFfwhDGH0LMPTsR/49Nuyrs8IL5QAjjkaZ23/fZL
/xtL3sqLXPlM7sUXzll+hqW5FfksBn8hWnP2PPne7IYnUzUa/Kp1Hr5VGbvK
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
b5CfXgD9WlKO5nTiH17yAR8wZ3NPZa6RLtKb5zk/R/5La8EPN3pJL99V+p01
5EB5eLPeAnPhKUWtVR/tjf/eb7ngCSdW09df91KOW1f5lK7Ex2CQeynPNZc+
5dUK5hfb3KUL6Iav49mV8gF2Bx9Y2k25civIxd7lDs4Z0E05qivgfUW7qY/L
U79QjL5+v5vOQ+HkJ4qF87uKd9pdvNwV4MB93eD/b8/DFy6+WP6QrpwbJd2V
g7Ac3MnsCs/Zgg9b7v0jy8rg1bgIZ8jD57/LMq1zF86l3XnyMVgOXlTDRX4I
PcSLK5Zu2hWerX135YcW43fa2g395vnuzB99i+Un6VbhX23g1OXfb7wfl1L5
T9DP9lyGH6adC3/v867KISr/3PJeI53Ja3DuRj35ZJmep4vu8W7KQyzWuerK
eTIhT/mhxeidPxO+GpPHHOfHYvHS3dDnrukm/dRy+Z26gnv370q9PXapckyc
5e/dFdym41LNHVzgu55Qrsqu5Zx7D1y5L2rnyQd4hXwdPaQ3lA+Pw0p4+LU9
dA50Y/4YsRK+3FhPeKGJ3ahj31ktfM8LHrVdLvyZxavgLZd6gaM2ztHcdpV4
8p7Kxc6WL8EqrR9Pzb9yVP+vJc8lwwcflTXZyhNfI39FH/bjB1nCjdeAg030
Fk6VDW7w3nry4BL8NBfOps96tZH5wtgA7usL2cwlL28i197iV2DZtwuyxT/f
Cm/cJZh5lltWBY5q3IMh8hXP1Bx2m+6pUOUudSaPY9NW8TlDOSdHpYtfsZX7
4lwIc0kLL9Gy7r23Mc96L6wCnzTmbSXyrwijbolK4Zx/dzu/89/wUvCeJO6R
5B3KUQrn3DidqHyZnWXGuVspSvlBier7disnPZr145SknMR98hGNxwcmIJHn
tuWAePgJ0sWr7npyiHPp82TxXROkTzwCbjYqWXyAOPmFHgG/HZoinmGs+FTH
yFlrlsq/+5PwtDEnleuXwXrrEs/5+fgMdctfXZi//xMv/0b5kfrlsO9Ox4sv
dBmf8INd5cOQQD1/7Yr8b/PoF1YL7+pzjXnld93BAwfE4jc+9Do8YduezPGX
RMOLzr8Bfviwh/ClaOnBS8HD9/cCn2wbje7+ehk+JzX6wvt9J4rzeapZddRr
Pmo4PCWrm5xXffoz378UAV7teBee8KDByj2Pgjd77CHP8+Fw6ZuiOd8+fiye
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
C9CcsQn+mVv3cN8FBcqfvIX4lgfBbx/4SU/dSnyYQ+DqG/ypPy+3gT9pewxc
/S1/zs/2HZWrclJzLn/On8/sxJu6QJ97K4DnML+8XzZ80K8w1+gYxPv6xh1c
cfsN9tHSYPri1T7gDN+YOfe+DUEf9Gmg/NDuwivYH6q5cBj4ya0fyKW18FqN
/ikaH8W4n9lfDuH045MT0FF6P0OvtCf8puYc0ns+h2c1NpL77kZn8NULf2se
GiM/sa7ia72NTvZADDikZw98565VIq88JE66p77kCH9YxYRPdCL1W/8h6Fs9
Pzf9//1urNdR8resXcE7tZxvCeNZJ5samqj3O1G/BUwl/2VESxPrM0394Gzh
Ku1M9KUZnPPdCsQbtAOH/K4LeFHUYnxcW7iQz/I4S/31cnD4OG/w3rk54tus
MXNPBCgHpxv453ublZscaUKf0h1c4vx25dHEgwNb9MvGubqHfKVBncg/uiTf
+GWHwOuuZ5rQ/fZjzv7JCXiJhT2Ub95POPMZ4ST9TOhQBiin+KLysoeCX73V
X/45V8zSN6Pvdlee6ZWr4muNMaFjeO3nfxm/zbJRJvy0e4FX970ML67dKHKC
3ukv/fVV8LctI8mlWjJIuqSr6NkXjiA3p8MQ6rfo8t9j4CVDwbcXDwa3fP+8
fDz6KXdpEHVayGlygraVPweDfzMQXlmtY+TsfJFjwpe/n/z8D4D71UozcY72
EU9pl/KMEkzoFHqq3tjKvj4ZQS5SSU/pvzZozhIMP3lJT+UkrgEX+swfnqp7
nvxtlpqpG93gkSZ3pb66VigerL0JXWEO+Oq9eeDqO63wgy3Jog7fMJO5g38b
E/dnlu7ZyfCodzQx/b/OyPBr/ZqctRd1TPAi0tW/j+QcKK5hEs8Sn5yEoeDk
ZZ/hRzolVT7S/eWT8LGJnMdE7uV2PdBxf/2uydA9ropX3n229PuvKnTQRt59
Bvhb0V/Cf6Kpx3oni/f+u3IWoqX3j8Of5MgT5oOLYzivUqPgexc8Avcbp//+
fKj8kx/QJ6ZHgM/Y+Ym//b1yeULxIfnBQ74BN/CRqx0G7vq+K/fLsm+pDwtC
uB8DHeV7fJG5eVPhaXesxR8+jb7SFAQOtqedns8Rfs/oIPm3t2S+dv0A/Lqy
QHiVSc2Us7YHnGFkkPwEGoIT/ryDe3xNoHy5v+JeG7UFXfnsQOFpX+L30maD
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
zGRuuMRP/gn/guMVzWCuGu5HP1X4N3Vm6RT55PupX36uPIsJwod95Kf3K/1d
kzEV832DP/cLPJ9ao5gvZ/gqv/4x+q/o4dLr+eGbsfpH+SANhTfb1Vd5Fvel
SxqI/n2dN+9r6y38QnP7MOe97CWfMTM6nQE94UEN81JuuIk87n15+n4Pzu32
1+THlQNOe8ITvtzgy8INsuQr6KP8msvgt8eylM/urfnyeemGMpTT7Y3//Lvn
8ONyScNX0MJbMHjvp+FF5KXK/9YbPu2bJ+HNHk6invn9db10HJ6DOQH+bbr4
Cb+W9wuGL0gM/e8UX+kHD/H5yBhwg6f+yo06Ak/pfIz0RwGqow4q9yea33kz
QHyh/fhubYik/pkSIN3NHngFL8Lkj+qvubxydbcES48coDnCTvGmgsGX9gTK
J3CH/P0C8YvYEgJuuXS7/B6DK3BaQx9eQn86LpB13jcY3PLSZnCPGD/43o+C
NIdVjnk1H/SYk0KU17BRPDQf1cMh4Fd/rlfOrxc5IGuD5Xu2Bn3lOjflIISo
715Dfk1lV+rk5WHME39ajY7vuSt80WNh1KVvrKaPmOWieXoE/eCdlfDWRruA
H6aGg0/+XQyv44yjctzCdX8tE/5vj451V5j4rkV8/1Zb+GkXIsTvKqJPtLOT
T2m4fBgWV+CNhu9tuPSD0muHW8E3s/i2GXyvQnwma1nJLzpCuZwL8LPN6aj8
lCjw+XuFrOf0jnz/35HSPS2Qf1oH8VUi0ZXXXwDOMK8DdfU3Mcwvhi0g92Fa
R87D7yPA+c3CJye24XuiI6W/m4vPQIM28AMDo+AJfzNPOsQ26Je/iiL3odsc
+s3oNso5iqDuHThLevyWWs8R1DPbZionvSXnXrsI6dNnKq+khfiNkfCRqsyi
73ZvSV/wbiR+Mp1mak7RHD6YdZR8S2ZwXg1rAR+vS5T4xjPAOfs3V58YJR7s
DPkfNpefXgRzjTnT4fslNMUf47cI8Xmm4x+7vim8x0FR0vPO5Fz6qAX7+rZw
s9GzeI8eLTXvi4InnDlTuefNlGcUrVyqmeAzPzWvyKGw4DBjZkon2xze9cUY
6kznWeRVVWuJv9m0GOFjs9EpH23Be8yN1j2r5+/fnLnMhGjxr2ZpntIcPcL0
aOZ0cbPQxfu1AI8KiGb9/DNLvpfNlaMdw3yq22xyqze24nm+Fcvfe3yOeGWt
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
mT9szVzgI0/mLzvzmct82gZe1jte8NaiFuDv8XF76Yk8NJcshK/7Wzv0IM4e
8v8pVJ57B82z3MH3Gi0Gt7zQkXlBlCvroepifs/jjvCxv3bmHuyyBJ1CUEfh
MC7y31aeVKzyvN51lT/ecnxQm9mJ1+0qPvwK8Pw5DpoLO6t+W6m5tgN4yB1H
+QmvJC/vvvKtptuLh78Sv+4yB3j7F8vrFsOPb3WZgQ9udpJ/lL34eOvlm+Gq
9+soX7hN3L9zveXH4iDfgK3gt2/5Mhfzt1d/ug2/x/t+muvZgt8O2C58L0A5
RLbiCe+Q70QQOF5DG3A/C4/U8AMI4d750Fb50fu4LyZGlMoHF9/UHw7CW14R
KV9WG3DC/YfI5TFFK5/FWvjYUfG3Y8Hf+tnqHjlJHmXDJOYsYTY8nwenmNfX
TuY5V7WBT/XTWXiq9Tsxx/nBBjzW+xL+q7YZ8pOxFc/tqurnTPl+2KifvQ4e
m5KN7sDRDl+Rvibmvz551G9dbJSfWCZ+bHd8gT63ob/+73vNa3qh21ptLR7p
Ha2TPvIJsaEemHJPPIf+zB8rW3P+t3wo/chg8CiTlXgUj/EH8B7BXCzAmt+z
oLwvMHhCo+lfvrDVOfA7c7fScfJ1sZcO9AX1cJ/J8EyuO4ATtvlXPPYZ8gty
kD//G+CHDWeTJ/6rA/OL9u/Co9uXr3PPSXXmh/Rrvy9kLlnPif736sfgDHWK
qPfaO4IDvPxEfpjLqJfec2Id/vM5PJOs1cynkp2kr/mSfjN3PXwkSx1u8A+/
grdzewvnRjVn9ekN0eGWbVO95yzfkib0dy12MffxdKUP6tiK/vrWfuq0+87K
72srnOGI5k3O+Pt9YUUu89Pj4mG6wqP7zpbcdp+z8LTrunI+HHSUz+QF+uWV
rsrbcsVXbdxV+LF27tJPeZPTUVDKvZPrQT/SOgD+auOb6Cks/AfjXAhHv1z7
PjwNT2+e894o+Rn+yH3q66P8yvgKXpbBM/SH//MiVfrN5xV6McMnPBP889+X
1HsWvy/L89/VFdzY603T/+sIDJ/FHsrNeU/65TBwKlM/6Uk/BqdqIF+sqGHk
Jm/5glyhGpHs94DR4DBH64BnXoqW38IE+ITzGsFnqxErnftUMzzlFsp5iVXe
0ExyZza2NVFXJYIvfVUAjvfKVnkxScyJUhaRO1zL2QT+nCJcaLmZOZ4XuuPz
najD765B3z0ukO9/nH7TqCsfboSnNz0CvuLczqo3Ssh/XxkHL7FKNjxAjz1m
eBPp5A355cg39SDP53I2vM2TXfFL/OqY2bjHb/cQLzFXup7Tws36wV893VVz
ljNm9M0DxUvsLN3TSXxEx/dH5x7dRflNx9in7/Y1wUPoqlzaU8p37gMe2Kmb
8uVPgEc96qnvyZOv13H0tg55+GQ65ymP4JAZHmeWifqhG7jos33yK0jjPW7M
5b8/uhP/geqJJvDCLPmubzHDd46AP5zXBR6X+zrOgcJAcN1aafLZXm4Wb8nE
eZAmP+dF5LNsKH/vhs4wjbpu6gLOgXN28HVXpL6eR+PH+HEHE/sqiXstZzrP
eVj5OrSc74GJ8BbenAgOFt2YeUFanPRcY+WrUMf0/znjxu8ajv9t6hf4OcxR
bnjiAHwXZ35kQtceznrL7sU5eaZ83xn67DDhS93Jryl6y8Q5FiLcLEu+sv+q
ngkGV6/ZmZysW3+S17YhUD4hyeCoy34t5f/vjy/Kp/Hikz9mvn/XX3nE0WZw
xB+5ly18eMOfPQze6cu7fH8bX3R8M/yU72YG/6niAy590hPe6fbr+L1EeIlv
4AL/03RJ/vNe4sM4sk9nnMPHaY4nfZC7cu4untJc0p35e8v2uneOUpcO95Au
vhW8zWkHpAvz4DyxaY6+4J3d6BHcPcBt/BtLb76dumuaB/7VDxvAz3y2VTiS
G/yNX2vBd313g/J5XeQn+YUZ3fcq+Ua6yHfoU+Zlp5eBQ551lo9TFXDs2YuF
AzvRN338PnMurwXwbfo4aS5cfo8b/Ny54IcbXOCd7ngLHH7dHHgOB1zhyc8r
rwcMn7ZZquddpSv/R7nP05R76KS8lT/xZ3OfoDmvk/gSf6DfqT0OPDnRWf7P
v+Fj9nCs8GQX8rjH/wIe2GAU9Uy+E36AHzzCZ8x7CDiMjxP7esYPzKMvDwQv
6u4o3cQ9eGvt+3HPxjkon+V7+BgNe1G3jLRVDpoJ3esvuazzT+y4N29c43t6
5eB/u1j4ZPK3ymvOou+LshG/+gJ+/nXSee8RNvShnc5pXp+qua019fP3J9B3
z0/CnzC8/HPDb/Ko+Gbx+LN9bise1xH0cS9i1S/YMB+0OQRetyJKfm624ise
UN5NpHKNbdnvu/bhMzAwXPwcO/qvTXvKDD7wvyHoxHvbM698vpv3uDcIHdCP
9vgpLd6JDteSg2DoMRxU9+4gx+SBP3XyKUfl/ZXQv3ztL78IvZeELeDDST78
9xMc1O9vgs9Tw0t8GEf8T4I3wuuo40m9ne3AfTR5bQXOafBkHbhf2q9hnUS4
gP+cdOI82btKuioX9TuqGwtXSefoopxZ1XuJq+Rz5QzO8L6bcvdWKW/aie+J
cpOvUTG8phbKO452k75sufTp9sJt3IUTLlX+ha1yajyYI1wogvd10hpc196L
9fBbEXr5yTbyN/CE1/r9EuW3WtEvxHgLp10sHbcVeM5+L57nlIXaFx3AAc55
4X/y8wLx6NpxnmwVDuw/Xzxn6bj3eMv3u0B+p22U4+bD/O5OPrjT+VaaU/gL
/8kXztNGuVT+1M/18uG1FrTGPyHOhzrf4jNp5Fg1Fw/NS/57M3nOa5pU+MsZ
/K7p4ms14Typ4SO8dIbmIOJJ/uKr+dcM8ZCbwney+EUY+o6p/F3hDemPPvXm
Hl8xGTwqtYF8tzzZF68m4ssaVa8Un2jlTfSdxHq2awB+PtxbPL1J6PVa1a/A
z406b4LmTV+h8zV7UZ88mQD+af8VOI8FRzJygsr/Xcu99ddXzCU3eNEX/zwe
Ht0HddXve7EfK33DnKhlHfoXFy94pFnfgPf2qs386Lzu38Jv5MtRW7kzHuBI
Hb4Bf/igFv4t/j7gLfbj5W9Zt+LvNfz4xoPDO9at+HsNfvI45UTXkb7YS75M
48BjvWor79VX+UoT8D8MrCsdtI/mU+Xfb+QU1MG/pbWv5lzjWbcb6sLHC/IB
90gbr7ynOswli3zhP7SeAF70R13uR1cf7dMJ8h+uQx6ERU9h5N6M43x2KP/c
4NN4iR8yXvzbOuBOX/iK/zBBfNp60vP6yNd6Iuv/r3rw4mb40GflTII/ebE+
9cPnXvLRmggPasNXFToOAyeYyPs9U0/4j7dy7afIp7eh+kFv6uGwqZyryY3R
CW70VF0q3uzWhvDi7njyPdenwvP8s5Hy09WfHpkOrzK5Cb4BP+rcaD4DfMa2
mXI63Mh1en8a+ORt8YqHuLHOz0/DL+VWY3CM6u7MEbrMRAfRo6lwldd8p5nK
UWoq3wwXdDfXZ8Hr7thMPnsu4Dn1ZjMfrNpCeXnO6DdL5igXvgW5OT+K91gj
n/uuemv40rec5ONRfu4ZeGJr/BKru1TkWBk6yXbyOXdm3z0sLDPmbz3aKy/b
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
/DYpjPNlcy303feu6/PDmMvMq49ee5tZ/nLh8vttDJ5W72fN8SOVw9iSXOba
j9DTvYjh/rZvDw78/jnP7wrl3ed2NVOv/Kl+NkFz5F74+/32jn5kUCL5CP/0
hVdWp6R4gJXBdSMGgeOtLY//ZO107Usj4Ln1tzeRJ5gl/nYeOO0id3BLe+mU
HxaAv33rTR56qyrwFq5OBO+qFwTut6CGcLNZZvKNo8l5b1FL+M988ms6JMHD
nF2X1+suw5+wTKaJfaA+3+f+SjPnUE307EPqwz+Zsc5MLlx9E/4g2eDw/TYp
b6WpiXOxAXhCx63oiye1MLE/1pevy1bWz53W5KqXrKWc4s3kv79rZcI/p4b8
WDZIn9vcBK+ornzzNitfuzk8T/v60pNuFP+tiQl9Tj3phtYrt6iBCb1ifeHh
a9BZW9UxGfXZsaLPt/j7Xlpuxre9qglefh2ed/tF4NIzU03wE6qjk2o2C5z5
YoyJfbya7vtUM3VxuAn9eRZ16Zrx4Plz/MGNEzKZpwzJQwdd3Av+sEumfIpy
8Ind7Yp/6cE0+egOw1ezlZ3WTwrrtuUgcuqHFK1Dg8eTxPnVry+8xGpWwlcT
hfP0Av98907rP5Hn/U5X1sn6P6nHrsXqHOlgNs7lrOfqf2M0B29thk/yWHyn
SHDLNs3Ah3N/Vh8XQR0+PBvfhv4/ip8QRn+6qw64cffr4EjrQ6RHq0Z+ls93
1OcWfyeDl5FFjtvMi8I5Q8AbHdLN6AzOUQcOCBJvOVnziJPivQTy+sAY8uam
HIUv9Je/zvcIzREOUO99/oFvI57n3T3yy/JlX33lb+a/b2Muv9VHfZYXeHKN
Tcw3T3rCczsonv/wtfL9Vv9Yyp59Zv1yfLcuyR/pSSXmDmcXMa8MEE+sf3kz
PnbzmXdfdRNOXtrMdZ0l33h35eeWIJeq8XTp+9yUI/Be9epkdKNz3fmchm+V
yzCeenKNG7jN8b/kA5+vXBjxJ4e+Fq6Yx7k8Sfrunb+D460dBZ9qvpv69Cfi
nwyD1/ejC/yHmg/FNxsELtrQRflT96jzv/sfOrXh4t1tugN++EcfdILtnDWX
/1F8qt7CcxzZtyuYwB9K9ZBvmxM63OE/wPOM/ITrfNIB3dyq7+Q71x6/wacO
6isvqV5qe0N5JvDnPS7gQ/68JXijZU5t5BF8Td+6oLn8Ku2lPzpFnb+yMX7j
jew1Xzsu34Bs+ohrdvLhP0q97VZPuUW2wgkPiCdQkzwIz4r6nF3Un5lZPHer
KynnZYe+f6byyypJl7dN/qvp5CPsqSi8a5NyvVP4PkMqsn9Gb1Qflyz+rQ3n
9bEvpatNpl+baaN9aT04ydxE5ZvYyld/Ld+/IF6+Vbbgq6XXMMcfGsN8842N
9Ncr8JH7PAre1OxKyqlZSl9sE44OyLHoe1r6maYL0J8ODQY//8Qa3Cl7nny0
ApWvURF/QosO3dB5+cMDX1RB9clM6Zt8lCNZUfz8GfQFZ72Vh1JROYnT8F/y
8LyhPG3xsacqH9ZL83o7+b5OA6/uo3xzC65r6EOK3m/08R7q12zh656apFwY
V/ios23Z5y+Nl4+fk/zS7cCNe49XLoATf9fTjnOnSQH4hkVvbuRT2LJ+auaj
i39TCfzE3g5cqJz4k4cr0S+3tWW++XgMeE5cRT5nhy15KxbelHF9reEzfGYv
3egY/m6AtfLi7aVvHc1z7VBBPpMO0m3l0LcuLq99yUnzuNH4sL0uL98SJ+H/
o9CtvypLXzbdhXqj90jlU5STT6wr+/z1Efzd78uCo7p/4F0Mv4VvYBnhSC6q
Hz7ogktLT+1KnzJ1qJ7T0vQ7peQvZz2E59HLCt7dAVfq2KVD8NnLtVJOvZuu
5xD13SXl+yT/ilJDhbtayXfUXb9riHCAktTbcz/4PAwkt8iuOH20jav0/gOZ
y/z9/jp/302864HKbSmmvMKi9xvP8QD4df+PqbMOs6pq2/jMme5iGIbu7u5u
EBCxQFQMYmZgku7uUEpJKQmxwBYDsBUM0JkjBwwMxACme7611+/m5fvLy3Ud
9pyzY+3nuZ87DpZngjdXQS8wN0X6ZbNufSfj5SubKj58WSb8nHjldydr3zCf
d+7vUVWUBzpN+RGlmfDFKosPk8T8q2NJJvo48XzeSdJ+VZyJb30cetXdU8GT
U8xxrI9DFeZ0McngnyXm+9g+R3yYp1K0P5vzYJ+fqhznsvn+Vgdr1q1OpJpw
41T2h55ed3QBVs+TBr/XOW/WP9B83sH166SJj+et9478CUNTlbdijm//XjXm
Fw3T5ffrLR1udenOpvN9Yn3AnX6vzpzl/Qzuk7d8tM9U5/07err8dX3EM6lG
/fx0Ov17kYt9ckw8xylPY3+Ld9GXfVlFPJY0eJ5BLvpWx1fQzm0y5EvpYk66
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
rD2XeiPHT3oif9WT8y4JT1Tet/DDggX4JGQFwV8a6qc8vkX4Go0NEd7ix3x8
522/5VDlcvoLb1mm+XIE/n79/OXnv1J6/yjmO/EByj1chU915UrUe8/6yf9t
9SX5IeJj/6qfchiVu/RkZfDAKF94aO515OP0iqOPOOEDD+Sb9fgdHasCztbb
Be/l5Y3al+KZOxe4qNOubqK+/Uy6+D9czG2HbRFOVUvvKRd+Jndtg5d4rg76
4ggv+qYO2zVPrCN+iDfPS+Vn5Y9dH97m/d6aW+3SfLCR/IK8eH7r76VOG9tU
/UjFZXR+++ST2Qxe9EiXeNqHpB9prTrTm7nJ6MPK+24DXj3KW/60R5T33Z68
0bu8lQv2AvjtXR01R9Z5+PslfKI+7iLel1m3OswTzAvKu0un76Nc4NfZB97t
DZ7T0iU92pvsYw/3Ua6iS/jhW8yz/uqPL+VQl/CxU5oTDSJnYbW3eCPvyydq
KP6cXVya352lfsi8i++f6CNexyfiA4/GnyfeR/jDF/Jdv5d8xlEu5hT1zsEb
H/Ggnjtz/i1v/jz1pPeD1KUfeUln+q34G+OV8+jifHb+ge9z/wTNX3zQjbb5
8Q5Pw+K4vvANsq7IJycB/kyKn3g1vzL3HzpNen/V56/8qfl4qvg2Acr5us57
Yct03Q+B1FE5/ymXcDb9+y8h+LT8nCt/ocXS44cxH3yiWLlOy/Vch8F/a18m
X9nV6iNClZvpBc725Vr0XIHh9O9rTX9qczs2wdscHoFuenQweuont6ELWBmF
nmhBpId59254C7Wj5V8UK7x0H34OHZWb8F48uF/9w8LrKqk+r+mx79lVL8j/
M07zROGfF16lz02vLL+OhuLRvYYfRbUq8nlo5oHH+470gNXAhyPawRMbfxr8
sHt1cOAfO+JPWPkT8aZqsD6nG7knwV9wPpfW1Hnr5SH39xv8VT6ppXzJ/h54
A99rDlVb++Fg/AB7XcIP+Vod7pPVI5Sz8zM8rrQG4jOM8fB7rnH8ho3AOduP
xTeg2n/ov8oai7/9KDrc43k8d1Oa0j/6TvRY/6uxxbx3zrUQfpIIP+1dbzd5
123ls5GO/n1DEPrxmh3od96dLT11lBu8qhNzk6RFHq5rFfTpvbooB2o5+uLm
tdzkK3ZTPss6/F3rN3QzH+0hP9unPHa/DG3hJre2Jzy9f7cqd76tm5yBXvLN
eBZ89WgXcLkXeov/s8dj94OrvdzsE/2U53sQHmD5IOXO9wF33f88/px1h7np
h/vJT/UoOfU7RrmpZ3sKZzsC7tTOrNt5ekfpg/ah4+5sjuM8NzW7wRO+7wC4
3ydD0cv79GR+V76fnPcbg93wyXpxnquZdesnMdBNPdsbfGPmHun6+0jX30N+
4M/Ao4sy58HqyLuBV+c9DX/yvTbKveqi9fXk5uTIf+BMZ3D7h1Zz/tc1cMMn
a4+/yuIl8EvjariZK7dVzuZceLYTK7vx424Nby1wpkdzdJ3nlpovp4I/xwW7
mQ81R9cQnQTv+oQLPmqVptJ1mvvW8lxK2a9aN+a902MC+8NnedQJXo3hIV8b
B05e9wb6624Nmcc9er/8NP6UfrCB/FpHi496FX1KYV3wh8fv8tCXXJZ+vK72
z8G6XlnMm2Jr6/3b1wMu/x2+VffXVJ3QXT6oX2ouU1082M7ouz2faG5SnT6o
cQd8XF1ntV4NH/5abTT3eZ9+30e+ZL5NwQ//e/NO/rXVMdTnfnadkI4glrlb
59rivb8Iz9DJYbHXpxq56luOkNvyUgw+w8/Fsf9cOgjO/FS0+DMxvBeuPMf8
vZF4Rz+G4SOauQNfkWWR8LpnB3nIy9wCDjYkjDpzpQseacEG5cWEUAdGlqO3
XWbeU04/mRZKXT2imDnjkyvkCxQqnkwBOrsJS/hdYeHaV3Ppp2YvFO4RSv91
6KZwobncJ5dC9L74+xK6wxnymQzBT3LxNXzVZqWBW1YJRW/e8jfxGZKluw/W
nOhndHMtE8EbOwZrjuChbtk8Sfm5QeCcp9zoJc8+Ln/7IPrKTpnkHx2cIPwq
QP6KF+SLNV7nMwC/1lXnqefTH2AumeGPP8+xL+V7Nkb5X8J/Sj7jPD8xmvrh
tPRNPT5BB5QxUj6K/tJvniH3PHO4+Nh+ykl8H77QS4PBt4/5gQ88/y7nrfNA
cMU5vppnvSW+Sl/6iC4+mpuflI61p/LivahLn39JeZSd8ZPZ71KfdVw5qp3l
M++iTnv1mHKmOsJ/C/RB//jJYfk7taOeLHJpfvE89dJ7bZgvt/DlPMcfkg9V
a+nUXPhgvLEfvD2wJT601YUTTt3DeR7SNEu8JOkQd9G/ZDWQvt5LPO1nOJ9x
9ZVnaupVp95/ZZtykOvQn8aZdaeeWPK0/Btr4s9Qqfyy7Qs/3qg5++2cdLNu
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
feF5NuoGfvLlc+SC3ervRl/XTfkjB8DTzg0BBy7oCF4UsV94mlm3/N52whv3
wIt7eAg67ou3P79P538Q/gBfdIU/c3Sf7rdBym3vqjy7veCcx/uCl17ryry4
zU4PdVAPN/6QncVP3obeeXxH4ZCd4O2PeQqeZ0xrPu8lf4N/14J3fdbYjZ9S
O/HSV5A35FPPjQ9Pa+UtLoavu6yaG/5cG+lS58Fnrohzk+PSCn74iZngivdE
gcd+34LjpKXJ3yDYzby9KfVk9FTxpX10nhuJTzvRgy9gqfKDGqLrCX8MHL5n
AfkvoQ2En4/z2PdhmxvgOWPryJ/tXvaZmn+I710b3t2uUfzeq79oP68h35Jh
4Jl9LjFneau6dFgDuH9e+UE6haryy+1NblT+1/KBrEJfs7yrB9/ZL6TnjVNO
ZUd8Nh76mLro1zjNudopd+m08rhj4dtEtgQvnfluluZJzBECGqHTb/CG5tQx
mnfXg98+/1XOz/Fo+ULXgm/Z6UV+l7Pf2vlpVXK7dj0vnUgY/cIjlTyWR5a3
n+9fSXrD01HKqd+Lbrpp+BX5VGn+soN5oqPXtniPeV9YP+7N4HuOT7j1C3Up
R2kDPMajAcyV7i0DJ3x2FTjeW0Hgnx2L5Ru/Aj89J0fS2U/+yZPv0GLx3gPI
G3J4ntY/by6+Inn+0q3/S25IyCz8kTaK/1DvL/ilfhnC6/yka/id/Ihz5n3t
7K/z/JSX9Ivmv0n4izp6K6vbvCzf+8nyFxVf7mgWea9PPM55G+qjvNdM6qte
E8AVg/zI7Qr+gfPgfhR9SmuX5oDfghfNGQfvbpcP+pez5+ENeh4ghyjGpefl
S+qo+fcwJ63hDS6a/wk8t29GST/uTf916GP5KI7U/eOt/LXT8Gq+GA4uWuYF
7t3+femMBmsuYOof6wP0tvrW/sxhnzb1kp0vvkEft7633lPiP6w4iQ69Z098
XO9Tn7LkZeWfdpH/bbn6hReoZ3Z3ws/qIS9w+x0vyBeoo+YIFdSNJ44wv27Y
Xj4J5jgOvuj1vOrG1vQ1n5m/a5/D/eILtYSfPK0MvuXvzykvuDk46myzbu+b
PdRps5vIn8HUmTY/cgc+A0H1xYdU/b99O7raHXWZy283607/vWCb8mfrKBfS
1KW2z9sCbp9VC37sk+bz1j/8KenZq4uXXqq6dCO84qVV4VFsLKH+77Me/KRG
FfD/Lmbd1jmr6e9eiWU/ecKs235llXC/GOrkz83vtTqzlfSbQyvJB6kcfshv
K+R/FQPf/rL5PnYOuxScKjOC637OrFv96BL5ToSxz2SY41tfxUXkaHwQCo+i
sfgSvRaBO9UPhe+xtJzjZ86X75l84SaZ49u5/Rx+724//Aec82l5s7PIja3i
p/utVH93FvdPvC/6ryfL6KdmzBC+4SO9ofm85Y1OV16Jizp5vvqsX9LwJf5W
/KuzwsMHp8sn0Kzb+kv83l/ThP9XgIuGeYOz1c9Aj5ln1m2+kPhUzvGtX4bX
nRwK68+ZwXHe9Lqj07Q5DeniUXgp59clHmAKvhbPlGYyX3Up1zsZ/kadUviW
T4inWjkVX7irZeBRZ/2UM5XK/fBFmfwk/TQ3TJFvgHh3e/2UE5HM9a1l1m2+
agB12iOp4BW1zd+1389PuXJT5VdcBH64xU++UlOl6y/MxJ/Dj7rd0V9bXbJZ
t32xj3QNCeBOOXmZtm4Y7yu/wQR89vbmZ1LPuuAfLhK+552HHtzxl7N+bJPp
K+vmSx8tX76aCehefzfr1kfTj/oqJQHe/rV8zttVvzv4p9PHtC/IxCfWjxyl
FxKYa2w36/a59GO+cDqRuUl787uczyX6UV9FJ8pXRLhlnB98gJqJ+BmezIfn
GS8/urIp4GaV8+WD6ov/w6UEjj/GrFudnS/+ZlFT0Oc2NeuWV+Ir//wpnOep
+fhkNvCBX5E6mb5+dh7n5xFf+b0ngA9fzwfn9PHTPC5RuWAFrJ/1gdc6KFHz
NfkPnPCVbiIBHeU7hZn/ey87654k8W+lr9/tJz7qtDs+pQ4u/KEvvhw/TWO/
/aoYPmSCv/DVZM5/gbkPbb6ezk9JMv3+NrPu/P0dvurrU+D/f15GrtOnvsrf
SWV+95pZt+/92/7PGehJR3vJ78gXXcD96cKNK8CHb5rz4Gy3f6cxh2rkxXvH
7bqjc7fPVQV+Ef9441f/XrrqjQrO/wfyUZx0ex/zAk/4x0V/N+Z2npE3dc5D
3sotmsGcsa638u+8lANu1i3fwCWfDbOP2e8/kznaARf+os+bdYs7zNL81we+
XIzZt+2cdbby632Eh5h90uKFc5Rb5wde1KocHK/VfPGBA5RvZT5v/XgXkAv2
UWCWxX1yzD5sefSLqEO6BOETMsx83s6dFsP7fShEuYrmfWefpyXkuZwMQXeW
Ytat3mwJviJfheH7UbOY+qH3MvCi8+HyQS26DI9luXwDzPvOuY9mFvF+7C89
Rcto6pCcYt5rFWv0vMSCFxWZdaub3sBzui0OnNB5T9n9bxPzwTPV5KtZyhzw
6Gb5n9dQLo85jvVD2sz17VATXVjXQuqKFlvl41pTeFoBuO6rW6lnimopB8es
W373M+KR1gWvTjfrNt9nJ/vP6QbS6eTzPR380+aJN6SeWVwALtr+OX3PJuJp
FIKvLjrA+9fxC7XPuzlv1s/rec1528BfvWTW7ZzjqPxz2uHbsMP8XtsXHwc/
D+ykvNFi6qW/Xobvd6QLOrJ8s275eie4n891hwf7ZQl1bMkbXHcnL976MWte
/NfbyiEaoJxKs271ru+pbh8Efn6X6oSpH9B3/D0E/HZLMfPTHaf1fhnG/ZlY
zHx2xhn27fS78BVvW8R9eO1jfB52jAI362zWLQ7yuerAMVzHJ24f5zz+Eo4u
zLmuT5l1y8f/Bj+Q9uO4XnVL7vA/nefpyMPw9PJUZw7JhCfQ0fQvdi5kfq9T
F/7iYV78xiTuzx/KOT+f/yzdXCLzi8ZmH7C+nb/B96iUDG5cWzzqzn8xl/ko
Hbx9gxd91uJ/8O1vPYPnOt1bvqw3eB8Fz1Wd76NczjzxbBfDN9hl9lsHj9xe
Ij3RSuVT+PF+mVTOPK7lavG0A+UP5pIv3wb0bi8Fgnc9EQDusXczeuq7gpVn
EYav48odzPefD6J/vxnpwfdst+rhEPpTv1h0nTn76V92hcnPrSq4UK8jut8i
wffyapGv1PNl+O0PR12Br1Ffue0n5W8cAw4c1BTfuS/fUh5oDPPoWy2FW55S
HlMldA0t23nse9HrDHyeU7HMlwd3hmc45hPxqKuIh98D3W7aOerk5fF39LC2
//6O57dtvPzwB8oHIFO6rXh49SOGevD7uI231EBX/s9I5Rld1f1QS77c96In
Hf+X/Cjqgj/8/hB/t8Et5om16il34DEPfkV50qk1wlek1RTlp5fBk9/UTPVP
CjhqqR/4ZElz8L0fMoTDhJJn1LUl5+2lOeiyJ0bjSzntNl90kYf5Q7yb56ot
c+HRK/BHHVfbzdyyre7D1R72lQbyz+yAHr/DJvDwmi3c1EOd4V+VbiH/ZWgH
NznxXeTDtsPD/KYbOUG/d8GveMFu+U/2caMH6kS9VLoHnOpiX3KLtnWiPr+6
l1ye+waRt/5QO+aYr+/lfrts1q2PYyv0p413wnPuOMAN7tUO/qT/Hn7XkP5u
dA+dlC+zF17cs/3Jmfqvk/J69pBH5u6Nb2efjvAt87ZLf93FzXPYHr7ios34
SHzU1g2PrL18VDbyfN3TArxxV1v5Ha0hL/5AQzf+ra2FHy5Dl/2QuS62n22h
53Eh/MOfq7htffFES/hyl+bouYsF173eQr40M5VrEwmemdkUvCsnBd7giUB4
pCcbg/PPT/JID+nGn7UhPI2hE8lJf74U/eDy+sp9nsDxX83HV6RnHeUOPEjO
+6v/KJetOjq4r0fDgz10lXlNtxryQR3Jc+f1i3jyVcW3HCp/jx/h3VWrKl+F
/swdir5nX/qlinw1e6OXv/aN+E6V1b909fA9PmefCa1E7mfrDsqbO6t82xj6
gpTW8OqbfCA/ySj5GjXHJzb9bfm6RGn+1ZCcspTX0R0PjWJ/aFFPfsWvSkcf
CW72Xk32vaePgycPCqG/+znOY//d+oPox9dr324dzXl+6jn2vS/EzzkR7sEP
cRfztbeC2c+fDIEPPOcZ6b4DlJ/i66E+34R+9nF/jj/Ky0PduE54ka9yvkqZ
6z29Eh/sybf9owrRdY5bDk41Wfksg3LlE7gQvHSWDzrTc//J/3wO+7PTl9nz
8w/1Q9cZvHdKvfHHG/rnJXDKVOZNA73v5BnZuc9U8LeLFcz3O16mv/CdLL6x
dCInL6GjPPwkOqaZ5vPWXyiTOuTkBOWHVlBPXvuB/uWnR7gfPhX/resF4Qnj
ma+9pbnzqG/gUQwbKz5bBfVk7leq9+5Ht/uzcKpEUxfZPvtu5r81zLrldX8E
jvTbCPQd80ydZvGUM9KLDad+W18GnrP4A/REx4YyB9xh6iLLp32Xeet7A3jP
LihBj9PqLfRr4/qqXyumPjz+uvq4XuI9mnXLEzkBPjazO8/dTrPu9GfDXyYH
4e/O4MYJ5vjO9S56Ab7l3Z14vhy80cElwo6hb/2zvfzkzXGsH8RheI+TTP1s
cTSzbvevQ/BVnm+ZJb7VZeqAffL5b8Y8d7v5vJ2r7QM3m9VMPuTF9FMt9siP
qzFz/zhzHOvn9yw8wDn1eP+eKuT+yd9OPfZ1XfrBdqaOtfPQ7dyHQ+qwvy0o
Yi7/8WbwlsdqSUdWAN+gaJN87aqJB24+b/GMjZyf1Kry2zHrtg7aAO5aXIX5
b58i+r61a/Fr+qKycFTzPS3fc7VyvWN0P5jP2z5wBX1Kl9v8zyLxUZeLnxlJ
//uJWUePRL2aEKFcMLNuv/cS6tuUMHTo6wvBXZstVI5JMHyAceY8Wz3mQu6r
S8HMFx4shv9TOk/8lgD2/y3qjxwekeUF+VIXLVQfFDQH39SXfHm+nikWPjkb
nuEDPtRjVcxxbD+cIZzNi/P5WQE8nHNp+nw5PpBBRejL5qUxl5l221dQ/JaH
0tEzvmHWLe9T97M7TblC5fj1hZehW/RKxz/tUbNu/WkqwNuXp4EXvVwBHthe
fl+eVPiKL5fBf3vMS76Fyo/+pwy8Mcp83uY5pIhXWZJpf9cqs259q5PR5U0v
uYPHOs9LjVTl9ZTCk3zTW7kMKeDzVUrxIWwtv9k8cxzrN1CUSX3pRX1Vbxq8
o8FFwgO9qce6Jyt/oYg87vbyl2gxVblyhfBOB7vwY3l7Kv3m2wXgtAe9wXXT
hYN5hJtll8NbDkmgfz+XA3+v7HZfNkX7bS46eof3ZXW6Zt3WqzmZwqXQh7aY
JB54DrzKn7zAP/dMEb89L5N5ird4iQnyi8gnV+h9b/i9exP1XOfD85zjzfvd
wUttP5tPXs+L3uTZTUjU82XW7TzfhQ+JOxG/RC9zfhwfkFQv5WolwDd2eJjW
T6ACXCJjMjlZPrn4ZE4spy9uMJm/G5tDXtKwcp6LIxN5Xjbk4Et5j7k/LU42
Ed5yUjY+pc6cwjlf707ketU3n3feVyHl8I46Tmbe9LVZt34Y0qvGTOH5HZvH
/e/Mm5zzNmQyPPxtOfAePdJ1PjxZcxP9rlxzHJtrmgDOc2+B9PJm3c6TE3lP
XRae/E05fLl+SfAeJxXgY+DwD63ucJp88IrhVZZ4wdNwcFHrg1aCDj1fPoSF
Kbx/G5vny+IF8jNsmybeVyl5WLle6rNSeR8NMp+3fYkXc8braZyHrmb99lzP
6acnpiunxjzvTh3YsFxzujTmgO+VgWPXK0OPkJTG9Wpp1q3u1bzfLS8lXfpx
s271brdxwnT8czabdeow6W2ngyv2N/uP5WGY41scfQbziBHe8oE3+5jNQZ8B
3pvrRZ71O8XwKqfMpA752Bu8cZXZ523fPVO+lF7Mo18uFt44m/fsA76qJ83x
neez6Xz4gY6PqPW3LNb7YgE46rhA9FZ5Zn+29e4CdOgZAfh+vGD2Z8uDWwTv
a3+wfALNcaxv0TLmWS3D0J1tMp+3eYtLpVsPV52cf5mc36XCf8Lw269ZoOdi
BThneCTvtRZm3eI8q/m7faOZm39TAA48aK0+H6u60axbfdMGeIlvV5Z/USH4
0pBN1A8jq/G+e82sW5++zXquayivx3xPm2+wmd+1oQbv0255HKfJVniw5TXE
P8zhvX9+s/T+NXg/VskWb3Mbc6KfajFnT89mfv3Hs/LNrgfP7YdsruPk3eB7
vzTQfZLDc7plL7lmi5vga705l+s47IByA0195Vy2Meb723na83r/tlaukPm8
U0+3O0I9+WcbcNrv8sB7Y18QD78DeqIHzXGsLuxl5jsXO9/BaW2O7qvyh+ym
HKV8nZ/XLylXAx1xv0L4sXFv4Q9cpx/3w4vmeln947v4Sxf2x5fpmQLq8L/f
u8ScRL6gTfJ5Lpp8qDpksPBJ87ssX/8DzXeGyB/JnE+b735a68Oo2x/KBiev
+7H21ZHqX3LoO1Z8Lt+Je5hT3MqlXg07R71R5wHl9ZjzZn07vkUHt38cfMhP
zfe3OMj36M29J6CL7G/Og83Xcgu3fIK6rlMRz92Jy+CQ1yZTVw8361YH/yv9
WlEifXdb8VTv+QM+8x8pysO9jf//xff8JY3+d6Jw/r/+gT/8wCz4xk+Vwwf+
Nhve/ifzwbfvc+FvM61I/ORlwgm91SeWaB9bAc/E0e/bPqVC77u18B8cPryt
X/2ke32K/W2OH/Pif4Lp62dvp56/x5+++PcID3j8TuY1HQLxLXkphjz3r5+7
g69aXWYVcMifD7IfjgxhPuiqgV/fghfwv8qQz/b1uvBRQ15V3l8E/JmmjZXf
/Qa+T8cjlTvWgrz1Ue9y3lKjmTt/0NbD/fEhOvTTMdQPozp78G35WPrEWOn3
uwlP+0p57pXh7S/vI13nt/KtjVMOwgAPddMPXN+P49DfxQyF9/XSj+SO3aqq
POsR6Kn3/gJ/u21N4Xj3eeAd/KVc+Fr46Q16SHzdmzwX1WvLJ3ACfLY6udIL
1wNP2zoRHOzxEvLR5jSSb+c0csMX+7ipd5uCj+1O53tOC3EzV28GzpM4W7k5
UfheXmkBrzhjIXr/2Hh4iaGtmZN+vxx/yOxa5OCsaiMfntXgmdcbwMPcdBsv
3YC/6IxmbnS47fCBH/sU/My72pIj3/e27n6bBz/7zuS/7+uoOnknf7dtL/T1
QR3RhZXsAWe+r694ie24r4L3wJ9sN8CNr3pLdKBxuz3Mu/qTW/RmC/E8zfGt
z1tfcMsJbalXT5vP27mzWbf1X3v54eyGN9uojxt+ewfNl3fi/9mqp9v+/7h2
4qdtkz9DRzfz6zbSHz0tn8nWbvhsbXX+N4CvxpvzZt9nrfCp6L6anJriem76
gJby5V7qsTh7y5pu+prm4nkuJHfpmzjyp2Y1R6/acQ566uAYfAkSmyp3YDq5
QiFh8Hh/aYxO58tk+Tn4u+E/N+Q8r0kU/9DLzXu5vvJxngRf3V0sPLA2fgVF
jyhPPIe52NO15DP/IH6wU/6Gn/ZeNfCxRvdwf9a5qnqmqtbN82XfC1fw4Smq
olzsITx35qWP3i8OHo5vf/yNAy+io+kYCy5a2NMDn+0cc8bVMcqD7iyfh0+k
34ykrs5ui4/Hog/RIRZGovPq3gr8869T0hNFyKeiqXxW35T/TIRydRt44Muc
5H36Vzj7c3Bd+am+hJ703jD56FbXfOEouMrDQVfQ/1f2gOvvBzfzCtQ8K1p8
/r3MrRzdH37S4NU/PqscTH+OkxPIvr1oq3TBvuRbnfCBH3vfBtUhPlfwT6qA
9/LaGuV4eqPju6uYvuDPZcox95FPb4HyuJfgr77Em7lDYI70INK53/BiH3jl
X3gLZ2Yyl/+2gvpz1nVwrfnpwje8eF5e+wMcoLN5/9q8FvM+tbj8VXgC1RPh
95aaddtfXhHPapLqGdMXWHzuR3Daksfw0ztk3tfWT/MHcI9tj2TR95WoH7+o
/vQh/KInFuPfGPsNdezjD2qOWYweZ/x55shr74e3uc4cx+LpX6jOvEf5hubz
NofgU+at7UfCay0soi765Cz5TQeHC8cz605flHFaddFQ5gWXiuHLHXoffOzY
YOVFCuc59a54IP3RI39UBD+z9VvCu/qQmzNOOFuzN8C7NvWEJ7zEHN/5mQdO
qt7orpzZAnDagS/TF2zoxP1Zu5D++tIx+Sh2wAfgzULpmo+KV9NOdUshOqOU
59H/ftTqDj5p+faHyJ/a00J8cvN3rc/DPub7Ic3Qj3xs1m29tk/1fxPyHMeb
41he9h7pKxvRd/xs6lurx9+hXKp64snkww/xfQbe7IA61NVnb/cp2zhva2rx
u7bnC4/aTF26pAY+QnmmjnXus7mbqM/PxLNvLDSft7rujcLhq8j/1tS3Nqdm
vfyOKuPz1tT8LsubWCvfhlh8n5bmows7tlp9RDT9TjvzeZtfsVI+k1Hox88V
8H26rVBuVyQ8hGX6/ItL6Y8qh+PjEVIAP3PeEvCW10PYT1YWSLe+CD7w+8Hq
jwq5Tx5fJP+rYO7nzoXcb6/Mkz+kP/rNDYXUyUHz6H8v+mQprwZd5OA5yqGQ
zr2jWbf37yz4MD296eNm5PP9p2bcyU+xOhdz/q0fZJp066XwBg/ncfxA5WhP
K8m09dvofOYUr93GPUrQEa8thB/yYqr8E8xxLP5XzHkoSpVe26xbOX8JOGpp
CvrW1aXgM91KwGk3p/CcXi8GJ1lh9h/nd9yXIlzI/F07ty25/D9/TuujXAT+
087sY5aXn6w+uhjc7/Ey+rsJKTwXDp5p5x/l9GULk5V7VQQ+ecR83vpgT4Mf
eC4/E/13mfDqJOZBMfngqAWl7D+vJQmfz83Ev6ycOcKfieBRnfIyyeMpZ24y
NEk4hvm8c/1+M8e3PmAJ7A8v5pDPvtAc3855p/BcBGRn2uuZaz7v1M+TEuiP
DuSQa/OI+DyhCcr7yMbXMbZM9/9k+bNl38ED7X40BXy+JBtfgs7me1r++hT1
gznoxH8pZ07xeCL7VZr5/nZeVIFPQu9E5Tub32v5/BXs80U6D5l58EtfMsex
8+4E+OpheZnyLRBOJX7muVvwA4fLx893su6TW/hexpXxffpN4X16MRvfSwcf
s+d/onjj2fhM/i6eVdeJmkfc5HdNKBYP7Umer7038SUYUyz+2ETNWW7C161S
wnynwSS9f7Ol9y9iPvXeRHCG0+bzznvwVAnvr4aTxSfMwVczXrzr01PEm82V
n2op922dRPJ3Jpr7zeZflTFf+yoJHtrDZt3m75Wh3yxJkn68IBP/4VJ0BN9N
hefWp0D8YbNu9b7T8GN8qpD702WOY3OxUpjDfm3WbQ6BuV5O3VCQeuc5tTxC
cxyrb0wFF5pQzFwjt1TvozR8Dp++vc+UoI+om45O2VUKzrzWnGcHFv8mjfnF
9yV8n77F4N655vM2v71EfrBF8Pf6p8MDd/YZq481+5L1NUyXD2oJ+HOpWbc5
KRniM5dxv/1SAE51IwN85scy/H5XFbBfVZ8hvmUF/rSX8lUXzeT4YV68f78q
AJd+fDbnLdklvmIB77Wtc7lPZvmqzjfrdk45Hx7mtAD0jJ/kob94ZYHy5f3R
Xw/L470csRA9yCcB+FDVzpfvyhL8VzsEC8/JB2cesRT89slQcMI6OewzgUt1
34bAB6iSg9/LS+KFOjiq9QnIgS/nvUp6ogjx63I4zzmreZ92i6Yu6psr/5x1
miNUkj95HnhUx43c5zOryL/OfN7yaDZR346PF9/VHN/6QDzFHL9BNfkZZoNv
r9giPl71LPGn4CV23YK++1R1eHcnb+g+3wYOvK6m+K7/XYZ3sl3vu9rSSZl1
u9/vVC55XXh3q25QR6Xtpg651oB6+6eb8h/YJ1/oJszTr9zi/VLrIHhvqxbo
mC6bz9/Oi7e6vVboVnzN77I+/Ed5Hr9ti9/Ca7e0PxwnF2xOB/lc3eL+nPey
9n/N2YOzuQ8PnFBuV1d+V/dc5o+H3uB991Bv5bfmot/p+Q7PxZG+4Ns3c+S3
cIr32tgB8HsfFM7c8gPNHQbCT3DuE7uPn2ae+MAQfD5/zNbzexZe5QPD5fOZ
Dd743Sdcl+ajlJtgfpfVD32OLmbaaPqy1dm6r75ifpp8H/yEt3PgV6R8q/n+
WOmdhZN/flH+LY/IhzYXnnbfLPIQp0xAR1M5H9zyV498vSbCX3LqZ5tT+6vy
WxOV96rnevpv6EEqpoJz+hdRt4+SL9mSVPjnTcy+Z/lL/zI33D+T/nFlGe+j
sTnSAc1TH307h6uA+id2ifImKvR9SpS7tEw5p17gLVfLed4HrFZOqDd42hO+
Hq7Thqz/6R2c63chiNyZpVupk0/6gAM8Fw6ucv4Zcp2+94Wf38P017Zf2U0/
XjOA/IK74/DDbHpAPNtA5ZtXQ8fa8yj8meJg9LPZdcBd336JenVbqHC2hvDH
/F/T/CUcvPFkc3hTr7yFruqa+KUd2oIzNPxAPqjR4mV10vc/K/5YDLmiHbuR
V3Lmc3zD9sSAw/zXC//G786hb11SSTrW/h50tBfkn1xZOZtDwFeLsuCxfBUP
Hjh2JL4BiT+zj4VUky/Kvcqt/gOfk2PVlRs+lryerv/K/78GPgYDHoGHufmW
8nlri1f8hHCPQvkn1JMPVSI62cwK/Ek+bMh8/+FU+Z0GuvGdbowOKGymcuTD
3fDwm+KH8Nk8cp2mxMKH3NIc36H4pfIBqO62c6+AVvhqxq0CPyysR67QsNbK
VVznoc5tAr80XLjfHxvhoVVr7Uan0BZ/qjZb4Q//1AGfz20d8Jdw8Enro9oT
P9LX2pOPcHM3OHyrPm7ye9vJH3IPuOt9/d3w1VrgLxexCx/RmH5u+14ray68
ayf576H90L+3b6u8pz3KFTLrlk/Zjvt//G7pu83fdeqw0PboSS/u5Lwd7cH3
79gOPkPMdnwVrnZy40PeGt5jp6fRv89vLf/V1sqxXe+BD9AUXLd7C/nWrlQe
Vl03Oqfm8DYPLFGeV3XypJqJt7l5PnhXsbmOFm9ril9xy9lcl2NRwjmboOup
OwNf0/vD3OhqG/P5Eanwyb8KcMMPawg+3CfJo3mxm5zouvJfegIe5vIi9H13
15Lfhbmf7XOSfSeHyPYNY8kxz/sHPvM31cjPXXCP8n2u8r5rWlX+ACM8zOmu
MAc8E0euwR7zPFo8w633Wqz0WX31Pb+Ff3UhGp55kx7wuv/9Eh13UBS868BO
4NXTP0avMTdcPOG28HI3f8D++WQEPPb3W5JflnSKee6YUPDq6k088MJfx9e3
Xwj3bUpdj72PK73CfCcphDnXiNr4IV8+jn7nZhB+a79WlR/vYXynVwbI36ky
+1Xb/cot8uN6hUd58PvZrbrUB718Yqh8oZ9h3t3TF/21T6CH53YLdcseL/i9
u709tm55eW0W/VUFfcHqUvSY/6wUP1Z65A8LpeNeIn/RCnCh2XnKY12kfawc
/CEwm75y1Vz5h8iXZsG/+IANmMlc+EQp/ITef6Hr7JPG/fO9Wbd6gt/FY5wm
fK9EPk6/oF/+fIr0QSW8r/M8ymOaCJ7TzPQXlg+bpf7L1APW162Y/jf6B+r5
Vo9wHyYU0m/6XLiEPmec7p8C5ukTz6Pbin+A3MM++dR1338Jv/HTMfLDLKT/
PfE5dddno7kf/ikQnvAJ/UjXEfAPPfl8Pu2M/O2HZTGHzGdeP/hD6XmH8N4f
UIj+N/89+KLLBkn/Vcj3HHgKffTp/ugmPIX078+9jY5mVV/VM2bd9j1vUF8V
9qQvcPoX68NzUnP8buDJR/P0/V+CR/dfR+GfZt3hn5ccRR90T3t8YP7KZY4c
cwScakwb9TV58Fr/Pki9/VlL8UBy0etlHhCfpznz1q/Nup2r7CNH+Pum1BWV
c+HXndoLjy6pMXjm3Wbd5rTuhKdXuwF12mrV4d8/I75Bbeab3+ZwPxdto26f
X1u4d458LLei+7tZQ3PPHPwnI5+Wbrca+HDHbOb1WzfiR+cbL5wwR33EBurb
G3HwAVbkgGcOXQ8e2L4yusuJufhe7lsr3kUl5W+adQc/WL4anL9TNHOQ3XnS
CSr3ISSaucC8fHyoHP275cVEUp98kad8h2XgPG3D6UPX5ggnX3yJ3Ixg6vyx
edTtExaRk9IlmDrcWbc8jYWcz4xA5YWZdevrMU8+kH538F5n3vHAXPmIutg3
XsgT7jELXrHj22n1aLn4nY6dSS7ArQr0qsFm3XkP+WWQd3+lDD1saK78u9Lh
B14qzeQ9nitdXqpw/pJM7mezbn0iUu/kZdv3QT78n5Wp4oWWkKvyVgF8m8xU
+UKUwJc7XMhc4I9k8meDSoRTFfB3n5wGrrj5ds5OAfrB8VP5vc3Mur3fzXHs
v5um/qIgk/rG7G+WF5zM7+pWJHyvRM9jMny5ALNu5/qm73DO72Mp6L4PmXXL
7yhWDsVU6dfyyM1pWgz+4OQTOf/OlZspX0/0mOcS1J9mZ9p6zeF7W58c83nr
R5kDf/VbcxzrW5yoPPRs/DwfLlHORQJ48rfZ+H/2LqbvdnBC5zo1N+tW91RC
v7Y/QbknOZn/83+w+EICf3d7Nj6l75dq30vADyQhN/N//nLOXPdQAnzpu3KV
71MqnluC+nSzbufxpfDnn0iUH6ZZt/ywUu4HB491zlOrXPKYLpdo30ggHzwl
F7yrWQk+fvdP4TkamJP5v3mTgw+Nnwx/zH2T81NeBP780GT8GaKy4f0eKcZH
wjmO8x59LBvfyLFFzAUOThRf6xb82PW35xRPwp/ZcCMTPpRZt/fLE/hvXP1P
/rH55LulPMn1rWo+b79XPjkmXz6Bf+yJG/iaZuTr+zwp3OYGvqZ1ioRnTmJu
kpfNfftyofDwyew/OWbd+toVct2/m8z76DPxUf8uFG6WgH941Vz5heq8XU6E
b7Yxj3z2C4X8XnfSJfTVeVzH+GL2n4KpfM9DBfzeSZq7tZ4mn9I8+JkHiuBN
bUwWLmeeR4tbFXCcN5N5LwcXcl0mF+GDHZ0GLuTMTWxuUqF4uWnk/owq4fdO
KeB6+aaxz3xUjP69VwE68cbp3J9TtS8NKQCXm5BOndNEPsB18rn/t6fDW3Nw
VHue8uE/r0+Xf0iZeK254K6jMtDF9C+Dl9te86DPpvM8Rpl91eZO5sL/z52p
/CYv4UW54BXHZ+GD8ajy4AbnyodkDvVGHR94UBdzmQv3mA8+38M/i/dqtuqQ
+aqj/NCJ38gGpypfAO7aIkB54tnwLV9YpLooUD7POZz/0UuoTyaF8Hdzb10G
319Kvts3IfJNuiV+4zLmcSWh6PcjblGHDNPcsFoE9Y+D49n7YJXmI5Hwsr69
ybxm/lr55ERTz3hlMzfctZ564GRl5s79b7Hv9d+k3Kgqypu+pZydp+TvUZW+
w8+sO+/nNVtUt1RHV9X4P35v9tOam1cDp3rhn8v43W9RzpGpT6wPtVm3vrzb
4Z9/WAuc9sW/wS0/eJY5+0e18Vn95h/0NY/ugtf9Rn1wlXH/iYf8nPjPjaVv
+g/9zpL98Ht3NgOHrP6f9FCHqAdeayEfnhu6z48Kd22r+fJ/4oG/gN9sb9WN
q/9lDlh+XPzJDvzdvf9ST25+RTyNzsLHboL/Z712CV/+nup3bkp3/5b8dfvQ
N627RZ32/bvar0ydbN835vPWn+h99r22A6nbh98SXvehjmPqcJu3dpPn/bOz
3G83hykn6Jbu/8/03rmbXMLa5vNOf5X0hXjRo9HTrTLrztca/hV8ztP3qr/I
Zv7ywLdcr/pj4YdkZeM/3/uifJLHU386z4WdL2bhuz59Av3d1Rz0Nas96kee
JO/ynTxw+DO/KLc9Ab7rt3nUOZ1+o+7dNFU5nvnUFX2vaV6ccod3auvGfzQv
ni7fqhKexw+yVafNlb6pXPtzgXzmF8uXshwe78wSvTeXwQMcWwFe7apQLt4q
eDWtvJWT6Odh7rER3vhZF77He4PhNT0n/DPGB5zwvgh4kg2f5fv7+qKvHxgN
Hpi5m7/7jh/45OY4+ezt5z50fKGtzrMaeGnlI/IBCwL/PFFHONKLet5DlJPS
0MP87SS5VKNC4TX5NffAO38Tnue+MPhIMa3hg209pfUI+GyPdQA/TD+Nzutw
JDmwP3Qhnzrv0yz4fVHgjU/2ki/fOfqI16PhNYX1gyc29Tv5JMeC+90/xAN/
Mwvf/hNx6Iu7jRCec4V5Tfcq4mGO9qCfuAqPd1RVfOpqPuixvA2ffzT3qc7v
uvAwOEzsLfXLNcGHpz8uXKIAHWj3usp5T/DY+dRdFfB7i6U7zkiBjzc+AL35
3gbkm4ybjj66dyg+nI83hhf3zFz0wl0qoad+ran0s4uV71PNbffJf5vzPdNX
eOBJ1HXbvvP1VvKhXeexz1HjJm543a3hFTfYRD7Om63c+AUqj6nfNg85JB3d
6JbbgV/13eGx+3+tHm58C9sKN94Fjr2/F/rrgjbgt6t2g6NW9HWTj2m+p/Xp
2klOk8PzdK7nueby6d2JDnpVPzd4VBt8pRzfUft7+nH8me3A99rtEX/SHMf6
0bQXn838Xesf1dMNvt1O98Mz4KJ/dXbD8/o/ps46zqrqa+MM3QxdQzeSEhJS
KiDhDxAVAxFRanroTunulFBBVEQURUAUAZFQREWducydO93dycx7zv4+wOuf
53O93Dlnn73XetYT3fBFv7ETvLp+dwe4lPT467eQ3/1WRwf9T2fw4b/WO6VT
UI7SU8LlVpNz9L8m8i9V3tCSpU7q/roO8PgO+C2UW8jfe6omfNF9HfB7z50H
z/bvag7O3Xb4C80JABcNtNaPOb9b4wOQ6+UEjyuF32xCc/wtb74vXD0fn6Kq
zeA9lp6Mz2fNTPCrV5ujp1v9lp5jsvj/jfG/ffMVJ/1VJHzRvxvig9RuDHjj
6FB8JE7Xc1FnjAA3Hmy9j0Y/VZt5wdUhvEe9/pIes5byhgbIl/g35tQPapC3
e6u3E/3dL0GG5/p5deUJ9uD+//czONJP1ckdCOzqJKfhMvzGllW4z0M7OOmH
vuOcalEZ/u28lvjoDjmLvvtGZeGQLfCp2Pclc7oplZRX1Zj9cIO1f9rrzUe8
zfv1wDMDPqJ+21+W9fBiTdbDH9b+bOOGzeVTPaYq79eo/eJTlVa+QAX5h+ym
3rB1gobX7yY8eTNzxvwi6rErhfTFaWvB32zdk8Gnc4WTrOTc9y2SX1AWfIbs
ZeiAAgrpo7elBTPvWCg8rRB909tJ9HGl54Ev/VoALlocR50fH0D9UL5Q/j/R
wcwrfMGNz+ah4x4TBt9m3wz28z1WP2LWq873GdPkZ5hH/bDfQX5Tjynyjcyn
Hp4TCP7gNRmfon6P+pR/0FE2n8g+fziX72/3F7qkSW/KJz9PeTH3VP9MUC55
LvwE3zvMPbuMV86ReIORv6o/+p/8E7Lpy9Ku0S/8OEpzwEzV21fk1zec865d
NvPuG5fVjwzjvg2zvt/0M5fhkxwW/nk5F97RG5eCzXP66znl2uTCi9h6QXX4
YHDv09nwH3qcE9+gP/jkb5niz3xF/2L7eRpebBb17anP4a1t7il/1Azp7z6l
D73RjdyfjWnwlyp8TN86uxO/f5p13eQfH4cX2roj/I396cIfjoFjB3YAj92Q
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
q/SsCp8wqx38t/bKhX+zjsOc6/s64h+1dJWTHKzG4GAenZRztBb+akELBzml
XfBHrb4Zfl219g58ebq6wLe2wbcc3RWdfkg35afvIbf6fC9y4W92h0c38QD5
2sOedZBz2w2fpbSD8B6rDVT+UVf58xxygmsMQedu+1gaH7+D5NF/Zl036/op
8Ntdh/B7nPM8fNee3dH/zjoKvnfTum7mXD3Ar/47Ir32c+CNr/R0oSP7UPlT
gxzMB3qgj768H7z6Xl8Hfovd4U+G7wJf7fW0gxz3rvI92Ir/w+8dlbvUCT/P
+PXg89GtHLyfHfh7D610krtlPRd7XxjVlvX2+WJ067m1HZw3beEht5mPj2tw
DfTsN9qQ0/T1bPDqilXwcY1pDa/yJ1+nOQ82lnOYfbZhS5e53/6e8BsblMCn
+kv5XwPec8LfyeP9OtcEX9CO7+B3+n4GuOVm67qZU70hfmMi51FuQ+WXjSev
qnok5/In9cnr/MR6vww+FyKcrY54ntb7aHDN/+AF/VNTudtDlG/1p3j77uDP
J55Ftz7ztyd4psHZn9Fc44byNari7zTyaX7PH1fQI9j7j/3vV+/K/Ojny/gT
llQkH6dee/yTD3wrP8PyysltDh/4PeXBHS3Pevu7iXKvvsDXpXp5/DRcDZ3g
qp8q36QM78sLdcmTanqc8+WofPJj3fme+x+CT9q6crtuCqsKHhu7Hzxhh3QE
68szn3ptJ7z3KUXUdd+UwrfEtVH5IAXwlE4USFe4Rjr6PHgdV3OCmeetUF1a
yJzxbhY8nPrL8V8d8siXKVV6yQWcy3/libeTCM/t2znskx558huPw9e9b8AT
fz8zx41mXn/IN+gxL8LEgYWDO7WfCT+tUZ5wsBB8RAum4WvkyqXvfveB9Cnv
ce6MzlW9Fwi+N3GydOiZ9Edj/8Z/ctibzAEbZcGj++Qe9+fh60HozLKoE7Lu
Mtf+6DXW27Js+XrdFg/nZfA9m+9n1uUN/CcLRvP5gZnilV2VvnIk9V56Ory+
KlfoZ8sM572onqG68QfwnAzlGc3KVH+hufbc59ENbcwC/8y/QL85dgj1akYm
vAvXefJfnh/IOVg/C/3vlnPMYX/tj64qIB1877sz4KXv9JbOy7pu728vfC6/
u57kzH6eJv3dp5rzdgNv/C5F/JaP6evPd8KHv0US9f/9o+KltIen8VUy/ewX
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
nzZsRl26L57+K303uVfLm1Bv+DzqX6RHK+UBv9EvEXzvlZ3046Ubs54fJoC3
NNnO/U+uD77tSsQnsO9Wcihsnbs57+LpR5I24nd3pJZwe/E62mxkbj6iNnX7
+URwj/Hr4Yv2codv0ySF9+7VdfTXFWrKByAVHtpPa3mv+7kzl7mSKr/NNfgp
rZH+3StV/NXVyuWpgq7n22T2h1orqG9/rghv5ECKchmWs04KKrAPt08V32wp
PKJR5cB1aybLR1F8oWmlqNsTk6STku/cSyXSpz9aP/N5X5qWBD5eV+Zcncuc
4ler3zfzuxTmKW/O1f2xrpv9PAVfrGuzwb0LC7m+JxmeUu3Z8Fo3F+D/OSpF
/mPKie6pHOrKKeC3nv7qf4U39k4VP9lXfq154IrN0/GxXOeHDs7mc5o6OZN9
2/btNPP8fHBX/6yQx7ntxv8gHx6XnZtg8FxfcNpLueITZsLPfMmPfrB7Ljk1
dm6C4fX7sb8FWdftP+ewfAOG+pGj8XR2IH1nJjrNssJXEzIDH/dN5r57gQ+8
m6488YyQx3lABv9Lh7+6TDpQDy/mSofT8SUYrZyI0Jmsn1Lp8NbKZIJX9PcS
DiB9d6NM8Q+Vt56bDg4Znwk/Lc0T35XwdHJk5mdrXuDJPOgb6/ebOjwLnPxf
T/g29azrBq+Rf1olb/WJWfht5j7K7/DGPzYpk+f7X5bwGS/lIGeCX31gfY/h
tXnD431gfY+9jjrlsK8e8mbfey4bPqHtI2f43J7gug0y0Ne/nkFfdm5GMHi5
9XeZnI8M+TbMAIe8lEYOjq0XNvWxdd34+lmfN7w/a5838+Vp8Igqpwaa55yR
Bt71/jT86xakgtdlpbJf2X6eBhcX//MRXrd/uvLjrH/X6F7Fgzo+DZw8KwU8
c22qcqmmBUtHGmjOyd1p4F2F05UDmAHf8su0EM0v5ROeiT/trVT5cM4kT2pv
BrzHxunyU/WiH/89S3MK6Vi/80EX6cxGhx6bzpzL9p2w94mfcuA/R6XD1z2m
vPh5OdzPrhmc+97+yhGz3hfDp0pH71k6gPv/IFd+p6nwyW/7Kd/cum74dqng
h3/6o8+tkweeeSFVvLgA5oPHrPfa+GSmMtfYOZvff7kAnDNTeoQ2wjO7FgXy
/qTKT2aufDut62b/TOH7bf9P+/kMsfY941+cIt3KXOV2WddNbmYS+3z2HPDe
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
5h77nczD+zrQUbRzsf/vc6KH6w1++Ek7+W3uQh8d3t0BztYaHnL3LfJPsO6D
6bes62Y9bcCXdWhrdPRXWqK7X7uG9TClKc+raXOer9dyfC0G1gdfbdfExf+3
0Mn/V0M4qocLv8A58gGu7DD4yzONeY5B/swdZpUjR+l+I133xj+hsBR4bwVr
nZi5xgz5fBbgm51ZV/znKeTIL8mW/0lt/HV9JuHnUDYN/XK/WuCxPV8nj6xj
PL7cjavDtzw9ju+fEib/5yrwSwePAld86AiCb1ARXPTMUO6z2/0gcJzy4Khz
B8Hf9rzLfptR2gUPpy94b9ivylux9gHD++rlpF69ylympxs4auennZzPPzJX
Wl/Khb99Zyfn5kX2+R+LQx77dZi/+xz+KrOL2Q9PtEL/Pu8r8L0TRSHm71na
DJ/Vup+Dxy4vpJ+KbIRu/e0T+rvyqTf+rId/RdFR9vN6uZw737rjn1zlEHx4
2xfF5C5WdVIP7uVcfiELvkRQeXLnQ7fDb+yeoTyd0vBCl27k95Skggf+VkTf
+tEa6YZSmDu3zGfe/dkKfDxGpTJfu5ut832p5rnKH6mfxly70nzqnBrJ4EVf
JXPerZtDPWPnXJs+O0H8Rn/8nTYmwo99LgYctbKPdD0J0r9E0pc9PxMdR019
/pqL/vfracz7Pkkgb2W9Uz727+EzvzBB/ZRD+tDJyt+M43x88C/z2ey3xEOO
U27U38p5fxN+XWn5Zb1yT7qS18iZahyrz98Bbyn/MvX23Wj8Zz69iW9k75eY
R1eJBkdafx2d46sjlW8VBY7091Vw0VPD5XsQJX7vT/hn2vWb0R3J/7/WD9KB
DkGP0Eb4Z4WL8mEbpHzJKM39v8eH0GMAcz3br97m8wafkx9XP/E/I8B/yp3F
77RtL+oQZ4Q+/wU84einWc+xYeAzE06hkzrbhftzKFx440n84m51Ul7VIzzq
Y3Qux9ozHywVCs/NcRT+7e22Tz5v36+6x6QLa6u6KAw85OsP0f2VEp/Bxj/N
fnJQeTfN4Rt0dynvZr9w8mbo8nqFPtGXGT5xU/gbzV3Se+6Gx/J6Y/bJ2eqP
Mnbg79e3AXWszW8x7/EOeMhT6qPrX+1iLhC9lb7pWB3wTBv/NLlLW1Rv1xG+
LbzXbzN5BM/U4r2uKb6onddg76fTazIHsXmtxu9E/JYz1ZULHw5/4/O18Bvd
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
D1QlN2fWYvDAIs7r7pj5RFXwzBeT+L27nM8xczjn840PyCf4cJ5qD855+iE/
9+ljcrR/cN5v+LbSpz+/BD7wVud7Gt6A87q7LlYttOE3NbWoZ+vAY0yYB0/y
fkML/Wpt8PNaM+XX+pAFjl4NvutTk8npnlFF+URVWQ9LJ8DP9IVb3M/K4Mxr
om38KsLkA1BZ+O1YcrKCi1vgy856MP3SSPwntwZb5PFUlE/sMOYIZR+wr74R
Di/31CDxBu/Ae4wv54en/Y72gevgTl+Gcd+/HYCPxPULnBdvlMLP4b0+wodP
se/9UUy+mi/a+B5m8Pk1isrP9jlylA56xScsouelOzzYVcfQ1T5XhM+p1408
94f+VX8d6IeH2YnnNOxP+OGRD8TrcPYHowP4lfc/nA8OGdzKxud7D7jKh3ny
GWsKXr1xt3hx99FJ3WyEX8dj3zIvdv2QjS6gHr/r76+Z+2TL9+On2rbp357Z
xPz0wB3xIavpuVsPXvf3Dc7rxRVt9Hyr2G+HXaNfDigrn4Sl6F/evYqeZZP8
nFt9xHzNzVs39X0x/GBbLpIv62X21VeC9XtnU49dcM4Xdx0m5ssHfjrz2eDz
wrvuKoc0AV7czvPKc7mFn8z+ePT4h5S/EHFNfdl4ePgrlVvxyiXV2+O8/+kB
zdzvgvh1Y+R/qJyOjmfg87z1odbDGeURn6S/rjoMnc7XZ/F1aZeDHq32B+zP
rq+d6YP80hu+z/nS+4z8/H3CRd9lbjXrFLrU2V7lxr7l/Y93ZHg9KaoD+4tn
eALeQtBR+qzn+sk3taB++Jd6slIf+guXT2L2gb+Vm/kC84WPsulD0/bj+z31
efmN58in8Xd9z2fRuQzN4ftf/kV5kT3At3srR6DVXviQ2U/Cl3DzT93+6vSP
3Mdiyru8Kt+h4d/Tf/3ZhfOxeg66jw92UYdndxI+lsW8stEO4WnthDdm0c+6
eiWDp7ZhTrpf8/QlW6Rrbqnrma06cLPm1y0K/bgMrroBvX+JJuIT+oXTroeP
1Lcx+T4uD9P0ZWvhm91uKPw8Q3P8z8RfasB6+D5DvnOrlaNdV7lCGcqhXgEu
VL6u6hM/PmwbloMvbagjv6YM4RifCj+shf7iPVv362PlUFfDx8bV05n7vkR4
YBXyvD7NQN+6Pkm+hZWVH5EBfr5/IXVvUiXlymWoXpqv3NsK8O2XZch/aS76
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
aw0oxOfN/HQCOIAdqHwNj3IB4vAHGxFA3T4zjX7nQgy6sxP5Hnzh0+ANxsbS
//6Uj6781zTlXsWIR+e8bvbhNHg4g2LwMWsv30KfF//PcbHklXcq0AtbOu9i
xQPP81B/pfM8bowV7pFPvk+3dPlLxMoH0vl8owP1we/qonwW11+xoD81OEMM
/n5N7vM5gRZ9aF40+62rgzY6IQ/8VZcvauZEuejEF3rgE74dCd71v1z8Nt8R
v3delHK4cvmcKB/4Z/MYzgv395p+Qfri72LwQ7iQhw/A1+ngbJ+Nx38gIY9c
rfOWfH3HK7fFed3kY4qvWDwGnGpIHjr99yz5tY4Hf+jm/K4CvpyZ947H3zjI
uQ5GF2Lh99JwPDyZuHtct4d8yiWJUS6G8/kGv/DK33u8/KKd9xueoMV8odR4
/DyrOp9v9JJefFTuj2ce1/O+cF0vc7pfo8FFNzmfY3DuAr70eOZEJ53X3XLi
gaVzPIbzqGU++VPDtE7+iqWP7vwA3f1Yi3Ohfqx4yw/An2O80qHHogMNfCAe
rxf+z+JYfLP/fiCdu75Pkwny6w7g3OxjKac4Hh7syCB88/Z71LfGa74ToPmv
l3l0n3j2md3O82jOpYL9fyL33dWbG98UD/k1P8aDP0QEg6f19Mifc5JwhmDm
4B97WW/bEuD75YeAV2R72VefmgJ+ezKU88udMxqfhCm6j0XRN72uuWG/qeQy
jyvq/e/6mLysqfJ7KU4fPcgjnXKidMHOfujiEVO85Ej2nK5crZKqizzyu5uh
nOiS8s/0gMf6nNfNnL6UcjZTOY/qzFJOYpjyYtLg4+2fzfObV4Zz9kKKcnbm
wFO9U4b+/Wgy5/XzczQ/LYv/1eYUcJLkecqJK89ceFUK84is+eh6elQEF40/
xv1tukDPbwXq/AvJ4rktZo5WvzLXJ/QY+MxDSfA551em72iWDN87+iPhUdXk
q59C/fnGUvG6a4LDrEiV7nWZ9N114GVNSRUvcaXyNOsqxzlVc+fV4OEL6skH
L4X90/UnN/hRfebRr6eRJ57xOf4PVkP4rqOEZ+Y4dY67vk82Jq8qNJV9e+QG
5l+fNynEgU1/sRlfnVXNdH558DHYtQV/gFWtwCUe97CPzdoG3hXaVniRRz42
OzQ36SD/Q4/qum+Fb3cE/3F9Uw0faxf1W0pn6syXC/iiP3C/vnocXOiMF9z4
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
Nv7928Bj211F3+HOiYyPxVf48wy5BA7m5sKbucoX+Bw+dYk837yqPNfl18Fb
O3SB+nNOBHzm3auZt7a9BK9yewUb3tUK6pyV5/ldl8vYPCcf09d8fla5DyVY
t5cWgWPvPiV/pxD8JSbMxXfo0klw5qhAm7pjpvIZj6M7GJ4n3dlU5kcnj2t+
natc5gTpGo7Dj/3xNnrANfHgw+eOKy/+hvgVccIDc8BPJl2l7/g8mvNoaw66
j7YXqdu/G8f8/Vi2/LLOUz88MRo+wL5s6QfP0L8nfIjfS89s5toDTuEH9b9h
0qsW6EqyxPMZRN27L134g1O3GH+Td/DLna5+MNKrvOO38GmvZUsv46He8Ayg
frhoo/MdnIo+ekJ/8YFtdPGvJXN9svsVzqONn82/ynHozfr5UnPn9w/J9+xl
eKQjLeVPHVCd05M52k6PfA73U98OeFa+rB7NF4SL7umuutepn019vFc62SeE
n6SpD/pRfImuymkSb+2n3fSP/R9Tnk6a6tjd+H/u7YzOt1ga9d7oXeAhFzug
v5udpnznb8Vjaa/5bIpyP7f70C+1UR+Uphzbr+Wb2goeXbs05YlvpS/Y2Rx/
J1dfZnQhm+X71ExzllT4Tt028v6bjxbyVM162kAfOuZR8L2EVPGB10tv+Ah9
YivxQ+auoS79rT79S7dk+HtdVpMX0OJhnpcQ9X1nV4qPUZe69M9k+aetgLfT
po5XfGLx1T8Ft6xXSzyBI8xNRi3huXN19KZPPYI/XmgS+PnzVei7XzpCPukC
+YtWj8APbdwR4WMLwbUeVKQeG3SEufzEBfKhrUC/vPyo/Bvn87yMDReOcYT9
05qDT9rIMl5yJ47w/k2zWc8zy6ATzDsin6vZ8q8rTd5u4yOqG6XT9JYCj6p5
RD6QM+BXjC5JDu/io9J/zVC/VlLn1FHVvdPpd9aUoK576RjPe9Q0+YuW0Bzq
mHzPEuGZLy3GPtPymPC9yfAzXy8Kbr8gmf7riyniVxdFJ3U6RXP5qcpVL4be
bUyq+txEeJXnizJPXyLd4jfO55gcsKKFuLrBs6aAP7wlXll4Cn1u88n03RVC
4P2OTWH+0mYyfMsvg+nTH07TnHEyOMlrIeAANZVD8exU8fZDWIdFNU+Jm8r+
kBFa6ONqdFCT4X/+WQTc9RFnPzE48ST5kASjy/smhT7IxSGND3Sg6vlU+S3H
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
G5z0ub4J8L2jsyq/z8E63yYe4KMs4DbXHfS/I8ezf36SJXU/MefleHSLBTNz
DgY7eY9yjoefVjEzPMn2DvRrOcazrk5lSuVrGbxqguZQWembNguvKzMBPb7N
hzQ6Xyd5arfHK289C99/KQ4e3Znx7D+LMzPvC5AOesZ44beZ0bnYvGUzPxvP
98/JBK+7qRO8wr4/9nuTlBV+1/dO+SRMAjdrpHXVVzzGzydq3hfAHNDtkD/A
ZOXuaV7Q1IWeceuU1Jxx43shvnHDaToHg5Xz6//c1KHT5E8YAl+uSUqOvHTc
N4PxAZjmkl51unxFlMuz08KnovMseOO2v7HxC3Xx/s6ciX5hpHJ5/paP7mez
5AMZjl5mkFN8y1nMSY9kZx5RWHjvzQjhTjm4bzOd7APl5ihXKKd4hi7mzocj
8TF+l0v6I6fmRHPAfy7l5nPbf9vgGfPQp9TKi/+wjSfb54R7HnXLsXx8/0SH
8qHme8Bh82l+JPwqbCF5N2cKqB520tcfX8T+P7mgfFzj5FuykLlh8YLKuY5R
jvki+fl8AH/sq1j5eC/mPuwqxD5QPk46hWU614rAy42R78fx5dK5F9c8N5a5
RshKcif7F1dOd6x0K6vA//OUlN4zRn59q8Gxz5XE19HeJw3/eg3z66TS1Ml/
RSsPZR3PZXQZvY/R1I3/rOO8+KY8PrS5YtC/OzaKN15R83f5V+fYrPqnsuqQ
GOrM/VvBjZ9VEf7vYB/LuQte+rSa0mfJN6PvPvnz1GNO99KlXOwD8mVtwFxj
i3jO8w4Kb29A/Wb7Jxh/28PwBhs3kV7GUg7mEfgJvZtRh0z1aJ88pjqhFfXD
EZf8YI/BtzzRkjms7U9rdDjHpXdoLX6aBa749hT70uiPyUm3/TnNfnFO/p8d
OPdt3bfR616Qr++n0il4pRe4iL/Euc/1HnmZe/4Yy37yd2f1TR7q28lxOme7
8J62dQvHlj5rXxfdN/m9/OvSXKy76jo39y2fF//S7j2Vi20xH+/iw1906DfK
Abfoj9Jd4f1K7gPv8TO3fJYSqcP7f6fzxc15XeWG8usHMh/5y0Ndnfk2eU9t
BzOvbO5VjtU9D/rwH8XziRd++Ii54XfD8Pmc64M3ePIZ92HTCOG3Ps1ZXjB3
mDQSn5ONPuUmvFY+5h/K9bhK3ZUmDTkXryaC+z1I1PubkbzgwdN43z2J7J/f
Z/aSTzNTvjHXpH8PVB7KHPqm60nohr4M8ZKLtYBz/O8kcONL4cK1Fiuv/Ib8
tXLR/wasVF9zU7kb+cgp/m+1/LhuS9dZUHyhDZrX3NH6L4Zeu9UW5np170of
WgJ9+sAdnDs374G3x5aFx3j0T+kFHoDHRldEbxt0kOfy7hF+uTVriN/4D7r1
O4+Fr9am715yTP3OY9X/9eRTepLz/c+n4iM1kq75HHPkW0/pl083k97zIvt2
2+fo92Na4u/niQNHrfCSfuddG3hiW93ibb7S/OsT+vrsCfhu/e8Nvk8tOnnx
G74mf7m34rt2hj854Y7yod7JD6cb+NUvD+BLLEjrM3hPr17w7tI/l19BRnwm
b38Hjjf9LfPlVVl8zKe+B2/pnAFcLk9Wn5kT/PMj/n7js6DvfhEI77TXcPmp
hlr4xQXD61s3Cp5wdC6LPtD/ucm3He0lTz1/at664UtOwrchqqgFrz27j31z
GjjStTKWuV89c4qPGoFvbd7KFvtgTnTcOSPBXbvUQL+fL4fP9L/75+K3MLQW
uT/J/u83dcM8L7+jHnzXASE+0x/n9/+9wX3qkvc0ISv8yfgZwuerK6cpGPxw
7Gyv+ffq+v9dww/0/y6TFzfHy+/0f258gLOTU/9uNutzTVWLPBf/dZrzYBa4
fflK8gcI9Zn3cecUcCRPSXLevw7Fb3PbBJ57Tf99M/nnweC0rcei339XAH7s
l9n4vWlGie+XW/6rgfAqT/wKzrwvDD/P6kH4tWYaCk/vZjYLHXEgvzdRefHZ
AyzDJ9gR4OO9+8GLjsW/fowfZWYfuGZ/4dvv4Fu2ykSuU9U+yut5RZ+bMyO+
pll7wStO8wy8KzK98o+64kf6+X3qxpD3+C0//gz8bf918dneKee3g3ToV+Qb
mSwfnk+EJ3upe2cnU3cV/0g4qos+68Fr9sOdLb3qJ+XP80r8paZecPQL0mG9
xA/qWCP27bxnyNNp/FJ+y/WEo55kftrrOftVrtr4f/7+r/p6+X+mqeZF93lY
fICn+B9uqAjPvOZ+5pt/P2GOWagcfrNL/lT/+ARea2gZ+L21d6q+eoQf9Zti
+O5m3Mq5476PzutIIXwD/lsPb3b1XeUn5sXHoM9KzVPu8LuW5eR977CE+a+d
l2d4MmHMTfItZL+aeJO+snAw+WJfzwU/dN0AXyof4DV4kRVBLvPm68qDyMi8
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
wuDti6QL7rqMc9BXmPu5OcUvcQW405si1Bv5tD4zrBCeUzQVbzf69hVcT/+i
mjdZ8LVurMT3ZlEJ9oH9yulOWI1+YU5J6YnkT7hkjXLcSsHDt++D8Xlax3Oc
VxreQnqP8qc2kDd0pVyq3695DzbCT25cXrxNF3jXgo3y1ayg/GLxZo9uZP/Z
UB5+8iineGibwA9vVUx9vkbnsE3vaRX5h7jEH9jG+dWpWipOaPdrydvQ+w+u
KhxbfNquO6kDM9ZgLvlc/hILd+Mvcb4mejSbn29woZ2qN2qKrxuDL3TSLuZ3
v9Zkf64Qx76dfQ/8zLV1hRs4pJver/vfgPrkfZxyjg54qJMbKsc8Vvqmg+xv
OxqCb9i8XDMP/0v+A02EV2v+O/eIeNQfsq6musQDPMa+8b382Nc64a09Pi69
QCv5nQqfrH0K3v5vH7OvhnnxM8xxnnXlbo/OwtaVG1nxBc6ddR3h+w30aI55
kXPzUCfmkhO84CHfx4Crj/ySuWpOr3wh4qSj76wclnjq4Y9dzAXqduff7eVR
PrjF/K5Ed/nWuqnn31vch6E9mCv95pYPWDw84fhe4sOLnzDhMj4M3fsqT9Yj
XP0qdZqjL3zLHfHS11yn7u0wQL6Fyk8vc4v18HoQvijlfODb3jvwnOOGiB8e
L/3UfZ7vxR+Zyxzz6fx9pJyCoZqX+ah7szyVP/9w5mvZruCTU/wl9XPoKHit
za/gO7H4jXJLRyuf4or4CW+ZAzYfRx+6IFF59OnRa383Wbnt19jfsmeSrnya
5uPX2Df+yqK8lRnsVwev8f2jA8jXWDZb/lpJylUMpt9fPU/z0yR8DxqGeanz
F6m/u4GO76ec+DROXKr34pb8zfLC/3m0iu/54Zb6vg+E/6xTDtFNeD4hhdAn
DtiIb8ylG3ouRdCrxm6SL9Bt7UslvOi/dvD+Bt/V/lZWONif6nPvw3txVETn
mPWg8oke0OdmrCae2GHmBZMfxEuH7GVeckS618fkhf2vHrhTg5Pog3Y/kW60
IfpN1xnm7/881VysKbhxjQv4pl55Tp9buqX0rXHMp35/Ad4+/yN00/9Z8sF4
yXuxoS08uhI+5m7NXlKHd+jA3/e9Ip7PG+ZuVT/3whu6SX2emMy5+eAr8MPv
7ymPNZlcj8DuXulayXFr9w7eTrXe8OJOPNdcJp0PXeq3PJcc76iHt6X3mX//
6UBw2lHpLPgm/s/NnPB7fDWtTPAPT2TwwUf/CTztYqBl6uTAzD72qeH4sjYN
t+hjAnzMVUfBv+qa1zL4QMEgH3PccfIxKET++M5sPnx5J5E7s624xT7j/9z4
W0yBV1m+LPzJYcHor9/OIC87bSULX5oQH/3RHOmUa1r0Rf6/N/PJuV7609rg
e5eD+L1jI8Gla9WzwB8yK49pNtdzoY7Fe5GVXPWtc7gPs/yfG957MPnpj+aD
o9bwf4/BocJ9+Cws5DpX1oO3WSgc/NYxDz5z1lr4jpYP498tNxtcLqIKuVF3
g+XDOQPfg9f++2CfTz/7Pzd95GT01MNKWPjOBeFX8HS8cqz899nsq9m4DznG
wQee8YH8Qv3Py+Aio8DZYpVXNSBAPgC/4jPwUTi82bIBfM+fw9CzPwjW8/Xf
HzMH+gmc7WlWi7mb/36aOcoP6LjXZ7DoCzMqT2oAfLy0aSzmHOnJuy/fD160
9Zr5UYf08Glf9YT3vuMp51GBND50NN3ID8p+D93Erff4WP7RmfUz4JZ0BO+o
219/zv2pdh3+UtQ7+IS2Xt7MGa6AV6xPRme3/hPu834P+MPR1+ovWjM/6uKA
z1D4JfPc0i3ET77IeXHvBXOrvf+fXt74TD2RbqI+/sz/aL/K/li5LTW9pg/J
cJS5jz3fMed+NeYUMw+jd6v9GH7CrCrwqxcfQof1z0PpWyvgg1ptH/3Ube2f
Tfz7sD3Wvr+b+bX3gfqX0sxNvtmp/fCuckuLMH8ZuIm5z9pb8BvfFmBOEb5G
vgQ3mf++yeOFd7mSfraozp2fc8uPZTk4WIOb+MnfChdevRie5JbrykHwn3d2
/xU5j/tT7YZ0B0Hg1Y5I8POvk5QbEsB8pJ9w0TPXmTftzyQf1Bmcg86r1GOR
aaUjmKQ5oP8ct3GTz9/C9zszHv/8u4nyq0+Wn95Y8XWvKx/qjXhcY5TnmwjP
bcRLcLCIkeAkp67Kh/MZ9VKj3+AVvLgMvrfiMb46M4aJd3dZuVf34aV4f5Je
ySdfrLvUda9/0PnrE051izrw5CD4M2Xj+fx9EnybwAHCpb2abyaCw/T4Vv7b
KbjiZXRt13qrP3JLd+AVz6GHfB3d+Orv8TB/T/u1eCZu9X2W/Km6KQfWpflC
HPjGvC9TczPt7XBzjPLZv5Bfk1t8g2hyZnN+zlzAnpub+egl/P1sP1LDl/fw
+fMLzLVvdhDvziMfyHPSjbYHf7brW+NTf4Y8iw1t8f3eqHyWf/6TT/5H9MX1
XLxfq47TZ2Vtyfto88pMHtcR9Pi7P6RuuaVcpN5H8LsLaJaa92Hw2MP4A0xt
kso3s8c91iE+P9uQeVCMg75pwgF0cP3qgxvY/67B1ffDr5js75uMXlG5ORt2
k/9VvZbq81jq0mq7wNm81aUvcygffKd4FDXwzTsQp5zN7R7qrWrUGyUd8v3b
pudbFd+wUyl5E9vAf6ZVRm9e2YE/Q+4tyjGppByoOO7boE3w0NZU0Pw9Vv5+
65ULVhZ85sOUnKB1rP+DpfA5CYmGJ/N4Fby45SXggxWWr1r7VeAMa4tTn6eJ
Vc7sSvDMyBLggVNjqeturlSeTnH5P6uvXCH+6uCi4rVGsx/+vgxd+anC8FJW
xojHspT9oVhh5SnEsP5rLMUn9kVB5il2rofRfy8CX9pbUDz2OProt4vJobhb
EH/sp3HyT1uiHHDlhtg+twY/WwLO7PoAnOGpk375lyXoUisUki7Axb63bwn7
THJB5lmXXfK/Xcw6t3NJ7H+/vJP5/uOF9F+h+dl/0um9rrGQ925SfuHPLvHb
/b/LxvVr5Yd/fkM8w4wL6KfG55OviIN+Yeh84QB5eI6XHeKfz2fu0yCPcgdS
eHcL0MmWzcvcf59w1Onz4VGnzysfaafmofPJ166X4oto0S+Mmo8Pc+187A9d
LPm1LkAfXT2f/l0X53Xt+eg9M+UF964jPGHPPHCJSOHPW134p30xH1wxR174
zN956LOiFvE+/pWf69zp1e9drDldAa6zmRtddhP/fTa8jrz4tjX04F9abaHm
OPk0N3SjO+6i59Ivr/T7Xt6X6IXKOcoPP9bWCxh/pgXyVc4rHwm3cqbmoz/9
PS/+FT9a9L+BC9BRfur/3PAbdC50WkDOWr986lMs6oEaC/Te5WWdrHbLZ3Wh
/BwKoF+zc0CMz9hC6dPzK//aLZ7VInCzFf6/N/w1Sz4Gi+Ehdysg/0PhdX8t
gj/8Qp/XdYO3FNJ8ZKf8Kq96pBtaDi+raBHxwD3of6+vkI+i8MlfPewnWVfA
c15fRH4aHs1DV8oPsyh8yKIp/t6rwI0HFcent5V4cVGrNJcUr/KBf/0Y/dAq
+N65iosH5WLuFrsaH29PcfCx7ponTl4jnLMk+/9+J/P3bWvAA4eVkN+Cm/u8
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
t/pEepOiO+BvR1aFh2DfB3t9pd0JHju2eirOaXhtO+V/Uk25kNLjZ9mJj+LB
6vLrVj5Ot93wq3vUTJ13mLn6HnwmX9WGX1RZPg8r92heVlt6f4f8T/ZyXuyq
o+uUT2yTA6zb6/Xkh+AQv/eg/Ngbwh8OSvEfOKR5U0PmyL86Ob8GHwb3G9uU
9zSbeMsT/2E/X9GMedDXTvGmjsi/vTnnYxOn8Kuj4MAnWsgP3AlfMZNwzrmt
lOOjuYzrP+XBtaEe+ETzrE6nqT9btwVvb+ti34g5Cx4+6hPmO+ct4Y0XWJ8D
P+XvK4qHOTCWevjIF8yXv42Xj4rDw5ygi3yH4plPfeWS3qSrcCcv9UyQRb3X
qLvwHK98FL2aH/WQ7t5Dn/W3VzztXuRWD/LwHCf4lN/UW7q2lDnFZeHb/eD3
zvPiu1Lgmni23+G3k+yDFzHipvxgvxcf2ytfoFs8x8RBmrP75KtzFx3Wt0Pk
b5OgPIUH8DM3/0ydnyGB/X/cI+YpN4ZR5w9OkA/zM/Hkf6X+aXpFefQvpS8Y
BT657grn4LU3nIOrR9OH9r9K33fsHXXm+PGpPE/Tb6UVn2oCvM2+V6m74tIr
P3qK/HgT6eNis5C73WwG8/e016jnVwcIN4hAr/1nonzJgtDV9p6d2n+Z9yBE
OtD5Wg9J8MnHZpfudbFyK8R7mZwL3XqB5ej+9t9Q/l0++aqtEh/jtvqOQl4z
v8mzgfmX+zY4ZCd/n2vyavx9ruGP3NbcsCS4X4Ed7Nvjb+scL+NlH9up+eZd
9dHl5QO5V/Om+/J5qML9jDmoHMOH8i2pDh717T/Mtas/hO/tqgVPz/mv8OqH
1MN2brvhAZ4U//aJ/LIao5MdflZ5js/AdSs1R8cdeAk/gQ3P5M/fCt/OSTGc
yz759V1pTb52Lkv+/y+0r36C7+Jjr/rcl/Dq93TwmnWX9Sr74X+v0Mm++Ezf
k6S6RT6Enb9SDs4d+fYno+vJ1h29808Pya8/+0Z+4D3gVS59Kn/vZHhW9foo
D+sleE5IWnTZF/vDE26WxiLfJb2PffAHcKfPM1rUDRnBkcJ/Fq840MInNoMP
/6mh4OfHgy3O24zw8RaOgL86JQf698+zyBd0NDhPQH54mLcCfOAxE1g/vxWB
z+kKIg+94FQvPJ5SFjq6bD7m49Ph3b0sb5F34P/c4BYR+E+mqWqZvvWTbOTC
fzaHPJ2EmhY+coHKzYn0kmdVG15rxgD4qycjWScHUvKPMqDrbztbevm64LQ/
ZuF+hs6V3tb/OX7/+FjWWgienFgPvmWeMB/8b//nhvdRj9/VNjt591ELwclz
+r/H9EPh5KTfnYvv7qXq5CvtCfHRd0WAO8VWAI+tH+xjjjiNPK+FpchXSvLf
T+MfPslr+tHFRS14Nv7rNLzn8V54IQXxMWjovz8mV2G0+Ip5LPJVA+C1RvwO
P/NKDnT3DwLAge+PYO7wYxj3Z3cAuHqDYV6Df9h58bauNj4zuUsPfkTXfCSz
Rf2UCR/R7N/L1zedRd2envyjsd/hV1z0LX1QRv96s/vMfH2ZC7hfwgf7X3ry
nib1wkfi+GPpztJyPW+7eZnX3Vd/nYb1ObsL+T7Nb1Pnl3oP7yX35/C3r19T
//tWeUafgjdOT6AOr5pMv3mqrXiqbvnIvZK+rDXr6lUc9XmDV8zZK7YE91sS
jQ/Y8mfSoTfB5yTsHDhb66fS+dZnLhb/n/Qmj5X7XNsLDnKM65/4SLz36rxf
S/6G/7DmofilVeA9vjzIHPyXh6oHKnrRQe+nnm/4gL7pm3Lgw+X+lM7rgXiP
pVhvdXYwd7t9h3l05aJefA02Sr9wR3regvItWS9/tlvqj/Jzbo5dLT3mbfyU
WubxUh+sFP/qJvrczTmYx0Uv0X6egpeGgYdHLJQ/z014tp+FSNcwT3yMW8px
zoYva9O5+MxEJwlvzMK+8c9M8I3ZN4S/ZURPMWe6fEeT0Dt0Scd8s8RkrrN/
En3N/ffyq5+gvOZr8DO/eiv/nLH4O829Sh83/hU8t96j5Gd1VbnwL/ClvP2b
/KCuyE/1ifDS4eB+Wa6AXz16JH3uL6zDrZfhUYzy11Eml+Yn1dU+1Tl3PPA7
fpDvrvx/4m/S/y4aJF+gePJWRiZ5wLX7U4dU9HCezryi6+njkn8oeop7CdLd
9+Y9neyRXsOH3upaT80RxJP51itfxK/pE3e64beUcsG/+qKrfC/d4JPFHeC3
czqTr53Gg04wRyw4QJkvU3kjJm8oGrwi+DPxEIQPjL/I97/siI+Ww+Lv11wA
9xjdQX4Cbvl3nUXHnaYdvhkdXcpnPC2+6Ecu89//Z8FbLnhKOtOPeL7fuMTT
OIkuzNtKuUsW/Lpux8HZ7rYUzmZRf549Bo9iWAvq3kvKpQr+F97aoWapvBSD
+/wNjv2wMfORypZ8FQ6D05ZvnHr9Boc4RN96tAG8WVvXZnLY9gmHrIc/wHfC
hU7sRY+Wvy59hO3HZe9LSXvhv62ry1w4q5WKr5r5e2352smHcMRufM8e10jV
TRud+C50rEOqp+o37T6txg7xKqsyNxksXl+27fBP2lVWX5+Sq7VFfvsVuc6K
DurPmZvR33WuwPzd7k8N/rVJvrLlmftcc8iPbqN0eeXAjSfKt2HbRvlkllNO
qwV/Y9FG5R2UhW9cKMU3b70HnWgZfEgOpayf9eAnf5RmjtPHkq52LTyuQ6WV
X+aG32itxdfLxmMNX8VCh753Dby7JyVVDytvev5q8UKLwyfp7ULvcHqlcJhi
8ANPSKfcbBX9ps0rM3lh8rvwrAQnKVGc98LrFD9whcfs3zcK0y9HOekrk5bx
Pp4uzPyxkws+RpXl+NTZ+JXRp7nxwy++ApwwpKjmmBa89NnLmY+MKSyfE0s5
QcvAV6sWhldj56wZnotwsCkFOb+muTS/W6ZcmEKp/hVm7rGMPnFIQXgan1g6
d5aSI3+0kHgvlvCNZfiWDCkE/m+vfzMPWoqet0kh6vZyFvhhe/GBJxVk356k
HLrdS8WnKqj9Wfeh93LhyYXg4fzglb/fCvDGw0XkC+dl3nFrhXi5helrbkpP
vXu59ufC9Fk/+D83Otjl8pEopJypeNZbkniMc4oK34hnPtgjJRe7KPv8HB99
ytaV4t8WA3dd6mNdfbsK3G9CMc7rrT7wwwqr8B926nMbdzV4x0p8O88XkQ9S
POdF2pXojh8Vle41Xv54q5izzCsmvmu88qlXcZ9LF6evP+uVv81q5ZoVY050
zst+1WI1vNCGJcBhJsfLd26t+N4l2bdLJDB3K7eedXi0tHjgPnwJ3qznfR9W
SnOoBOolzwbOzfNl+F2NE8BF220CV5lUln2+Qzx1VLuN8LrblIU/+b1X+oiN
+J98VlZ+vPKr6bxJ+GE57k+Sh+/ZsVn+ruXl4+oRD3YzfPJcFagPiwsHXrVZ
/pnlVXd5xPfego/fF5VSv9+uR37eJn16Zc1JffKL3okfaaHq8uvzyr9op3TE
1eTr7sUnxNYdmPO+OvhzYY/mU7vwwe5bAxzpjlu+07u5P0G1wHU/0Vwy7E/e
iwY1uc6SKfzhPTzHtHXYD2vLx6bRPvHq64qvLp11oQPgmVUboN+09fIGTzug
+Vd9zpH7Kf6fB+BvP60vH8sUv9xDzKF+apiKQ5p9UvPK9E34nm0O+oIZf8un
pQnznXPKW599hNzD083BXSNT/A2OUYesaMn12/Mv4x9yXHOK/0lv4gLvWnOS
Oci21tSHH6fou09pfv0xuPEqt+rwc/Dz57djH7hg4QfY5Dw4bZcOml9Yyk2I
Ym4V/Cl81Mse/EY6xHCfHZ8z18vsE8/NKR/LLszpfogXv8tFHdWqm+pDr/Tm
bvDw6t2VA+WFV5bXXzca3lAP6b/kk7kiHp721Z6pf2/wuwT5I/WRP3C8ckKv
ar31g+9XVXnoeROZI+/7jn4twUu/MDwJH4NeA1WH+1ifM24Jd/1B55pygp7f
Ud7fYPBJO/fc+J4/wG/h2c86fy8zB7/4WPyB4cptuSL/4Wfkb3p/0/2/wv45
9iXnzr8jVZ8nymc1WTlrY5jXj0sEv+r3Hj7/z+Plf3WN/TlbOuFpk5mbd0oE
J2+Rgb774BT6oPNXOacyZAKX2zeN8yvfNfWVAcpDnwVO+I36IE+QcJg58hFN
1BwnmP7a5qvYy69UknDFcHS7vyzS77qp/jQ3vJ3iy5lzxd2Cv/E8n9d875HV
8pMXD6dVQXTHt+XbafuzmX2mEHjFpA3Kab0tH4bi5BeX3yq/lNvCjUvR567c
ST3z8136sroV4M/M2iN8/gG469PK8G2WHWQ/zPJQeWrV4amuOoze8J9HmnfU
Ul72UfaBIOUWVahLX7zkuPiTj5QnWN9L3t0p+X4/kX91E3ztRp5jn5z5jDly
1xb4r3ou0QdVeaFzqrX02g5wyIwv8bOa8bEX/3MPvOLcr4S7dpBOPMFl6sTn
r/CJ7dQJPufYa9TJmZPZN1Z2Jp966S3O/WwpfLNuylu/r/v5lrlJmR5ecJDH
8vF7I75HLz4v+5z9Ye9b4cn9xB9+zdzwvzQ+dKMD8PHrltZirpDOZ9bJvMH4
MHyQCf31uQzw8Wr+Au50NQgdepeMPur6X4Ubh1n4fmf24T8+0ksfkRsd9DLp
oIuPg4/3ywcW87gA9OMVJqJ7nVfUYl/MBk5Ydjq83M1lLOow/+emX54JL7FU
JfKVyvo/N33ebPF1q4KbLfV/bnCmSHiPMbXQWd8JRIduzUXv372uxXkXwPU3
nAs+9m99C11RBnJ/PpkD3zKpHj6oNfzfY+qdBV5z7hRuZDGHDEVHX2wpPpCd
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
SdUJbeg7vtH+0Pw0+NXctvzeyh50N6fOePCpb5fqC2HXya6z/4+psw6v4urW
OB6cAC3QAoVSKO5OcAvu7u5S3IrrhxQpUChOS1uKFnd3dzjk5MTdSQghQLgz
+/fy5P51n87NdzhnZs/ea73rFeUndpCvl5P5TusHnAvpuuDjUdVb+YOPuW/1
u8s3z/p78549xa+pSE/45H28dF4/k99vT81rvPHhdL2Uj31fPqedSz5FXszl
3Qfg79HRxXvXzCm9/CDlLnmjswt0yZ9hCPvPChd9TR0/eKdFhotP62Lu9leA
fJBGim/g4j2NC+Qc/2M0+rK3Ts3Zg/HprT5G81Zv8UaC8dt8O05+IN7iM1v1
sNFPTFCOno/03dE616y62r4vvcTP3BPLnO7IVOl2/an/v06Qv9NM5vhFA4RD
JmluMod6e1Ig9c+MD+yHhRbCe7kZIB/vT+KdLsJfsUuQfBXS0v8uXgaONCxY
ORcZwYUurKBfyBssHl0mdH9ZfgGPqh7IOolwg7d57xfNQQLgIYdkcZKDsFa8
0yB8vZbkVC7MBvrNAsHgft/mht9VeRPvY0gwuqGzX5ErlH2L9Cxh1LdNC4Cn
NdmF7uCPCOXaFwbH8N9DvX0pkn0+vqjT8DZO7pX/cwS4n3cx5cjvY//vKX5O
1uLSXx9AF3Awkvp5d2nlpB8Bx/s7ivu8rTz+fpNP8bumR8NvPFkZvOjHs+g7
XsaAZ3asJv3+BXgRpeN4j+rWwncu5xX5HcUrn6KudMS35AsdL/+r+uhAh91B
x101nvrzeUN8Prfdow9N/1b6rGbqfx/Da/02Ed5RZAtykBc/l6/UO/GQ2wnn
dMBXyZIsv9+O8Nyq+ipvK5n56U9d5RcXqDnUB/jAX/cED58WqryMj9Qt5fo6
zf9+YCR84EYpygEZAO/3Whz7z6QU5TYOIU/k7dvUnGszBxlBblHKB+rAjWld
5LGMI49pfloH+XXp5Iv4E3h12kzwJ3NmdJk6u+BUcOk52ZQb7uai3pvphAea
x8E+bl03vJbZ5LPP+xoeY84sLub681lvNQs6wJOzkfO+aKnwje/BRftld5n6
qN1y9LDFfnSYfnduTvTp+1c7maeVc5g+P4c7vpSX17FOKlR1MP/OJb38BuWD
1wTXtfE9u79Y8hs4p4+HA76Z9e+aefEmJ/1EPXLMh2Yj58hh/b3dP7Vu6IDv
aN0fMyfawPv7vD758vmywlPtt5l8+SsN4ce+yQlufGIbfMsPDcmL757bha5g
m+6Ddd3U7Xn5+27bpReuT076lK/w87zwu9P83++s72/q1zwu6ufflKNUDVx6
a25w7Bq/ks91saLD9Fm/W/fBnEOr0QsXKeMw+2hUTvBkvxXy7/0RnNbmx5r8
8CXoprd+x/0vnx0/gTQLnfibFiRfab913fBY5rMPdCngMOfuP9bn2PvL6tn4
za7Py7pabN03o5OcRS5V81zyZbXWj8EvrHVo9uNsPJfFmcXnnCSep7VuzTlv
XTe6ofHyVbbWuXkPMsLvTTea53slmbn5oQwufLmGOZk3vFN+qPVemPnNINZz
mjfkUFS1rhsdVD8neQrR1HvJafR9erM+3cKZq5ZOoR882JW5w+wA5uBpPzGH
OtEJ34zWPtQzoz8yl5zXnvflpZdy394LP2wtn9IX4AxN3tMf5WiuvLan4tW8
Ay+615j8uPsPlNP0lrqlTH3y5g7fFk6YAB7YxkO+GdfF/4+nrg6vqf32qnSa
ceIvVSXv/sN5nRex8D3aVmBOMfoUPJD4aHQo5cqC9x49Cl7qGSW/zR/hOVc/
DN/mxyjVq8WlRzgA3lszCnzmbFHw8Lr70HPFhoMb/FWI86ui/KizhYtXWQDe
e6ndylsJU35cPvKqOu2Ad9orTDyEPPBya2+Vv0EozzGnu/xjN4mfECr/1WxO
5Tyzn+cKhneUJjPvS901+JcWDqHvqOSGD2qV1ezzl5XHVMKqN+zndHoF/VHG
IPBG77Twqxv9j/VQJpDzqGEa8ParS8QLDRLvKAUe4y+LxHcKoM6s/wHeTtV5
8LJ+9ifHZPs7dIUrZnP/m/vpHH8r/eZM6tXDfvIxeCPe1wzVjb7Mx2vGKu/b
quvsPvJ/X3yEIvGlLDuRvtvu1wxeF6G6bjw6jmM+yocKlb/ouFQejuGdB8If
WzqSPj2D+rs8/szTt46Qb6f4A1/7wVsLGMZ6sP3hDe7hEs42BH7OAuEYb73g
0c0agC47+xf85xW4wU/9xJNxUv/4v0Tn6+iT6uNk6u1n1NX9elK32HpA874+
gc/WqBvvxaTX5A0de6jv30X6NS/1BQ/BUf/oTP1cwKm69IH8wTrrvXbCDxl3
n7xdz47g+ZOFq6y+Lf/5tvDS33zxDbtJHmihVpqPi79x+Trff3vLVD9Dk+Nw
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
eLOB/eV/6Md8vIw3eN3wQeiIfYUTHvEBb1w9RDxMX+0bvuLZDmPOcl86hZZ+
yuUcSp77Bx90H3UCmON8P5L7NsuHXKFXgdyHeaOEy32p60J4v0qPE06i6xvD
2Gemj0/FgU0fFI5fiv9P4iv6g2f6xYDTTppC/VY5UP48b+BXP5ouf3V/1eHx
8HjnzWC/cgTINykRf6qRs6kz/wtEd/DuvZd5j4fMU78QpHnBx9R623zvIPYr
98/4925cxDl1KVi5tGnxi+uxVHPVEOXdZ8Ava8DyVD2a+R2Znbx3q9F91Atl
/9kr3sXZNej48oexDvdkd8IXWa/3MYx64Fku8NVPG+U7ESY/kNzyPdsMLvdd
BHWyracz7982eDWfI5nTzfyWnIXHu+S3GSU+3nfqc/+U7iZavI6i4tf9jT9G
z+jUXF3jT7CXc/NKDP7z7X90gvMfZJ/cEw2+172U+u7D9Mt2frrpS0uTA5Lh
KPtz02j5P5Tj3+1zHB7IhVjxlCqRczTvDPodZ6z80qs5mWtc4D4X/nK9BnkQ
Va+g3x8eR/3f1kN8yOuanybgj3qtgfhjd3TuvAX/z94EH7nx95Xj/E65cs3p
N3M8oa7olQge+2cL/N/+fvqKvLREdIVBrcCFAl/gB/LzO+qBr9rLL/Q11+u+
57x+0gmdez0f5T4ks55PdsP31c9fc8MPwsN7Kr8jlPfxWrJ4EX2EJ4eDu14U
n7P4AN2fWOVQfATPHDmYdZgpXjqjj/INGwL+Y/t5Gt3SJ3wASo3EP/ZWMvO+
/Z/xt6kyDj5S8XQO6t+0LnI9J7Fur2ZCt14uvcvsS2FTuZ9js5OTPjQjuJ/v
LO7bn7kd6Aes62YOPFs61q/RHb+1rhsex3xyWz4WcODLmBm+XN4lTvnJ4yd5
OYuL/JXl8MQWF1deUjb4n31/cRr8dHYZcMUiOYVb/qoclkrgmbdzkq80YyN+
gGdrONhPc0nv/Ds+ojU80KefyIEf5qzfeV6J9eXzaf27dr0weAu+BN0b8jmv
re9vckF+Bw+Z2Bi8bpp13wwvcxO+oI0aOfCTyQy/dOBW8QCtvzd8shzgchl3
6n1pgj69UB4Xc4Vd4EtnmpBr/3NeF3PtXfhGzrU+3/C286D3T7sNHfT+ug78
8XPjP1Dqd/D24TUdzM1zw78ts1G4fRU+v24u/EgD1vF9Kpd3UA/ngvfrXC2/
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
wrd9wQ/t72nqohfyy+2ZiofbfWfn5+hkn/dIxQdM//dC/J8e1PPzpUdOekoO
+/Zu6BR+jxB/6Zl4113hM9g4pMnlE773T1fxfCLlw/8M3e533cSfiRCP/Rn7
wNhuqbir4Wk+w2eyeVf8xPaJN9j7GXjgnW7yZY0WD/YlfoYzepLHcTUKHuac
F8KjetJ/tZVv5HcvlKPUnfVpv3fmfHuhuUAP1klIjOZur8D/f+uFL8S4WM0B
X4Gf1+jN/G5oLO9LknXd4Nm95JsRB65e4DV8rQZ96NcOxJIXtuQ1+GHm3vLT
EB6430Fe1eze4p+/QWd6y8uL+9KH9T9V10d44W/cqq/4fm/Ar4o54YEv6Ms+
ufsNvMr+TnwXS/bjvLj5Brxlhzf4Xt5+9Okl49mXtlrXzXy7H/VAunjlRbpY
5xv6i9caz1ypnA9+DkkD5Bv/JhU/tPkVdQcoJ1E5GpP98GPJNhidfqa38G+L
B/B+LRmiXOYE5s45Api79RjKvj3jDfy34f7gvVsGwz8Pk496uD98yEJD6dN/
iOd59Qgkt+XfoeBIc774AgWIJzyM/arqG/moBOJ/u2oYeqUKb+VbEsI5eGwU
9We5BPnbhIB//j6K37spjvP3RBDzuCYj4cGOiFUudrB8Y0aoLo1l/rJR+7md
M2i/v7/EcB6ttz7frI/R4idHkyfSPVRzpTHyu4gCl6sYBj/z+zHs/62iqTOb
huPfsm2c8MxY8Xuj8PWdMwHfP5tHZ3hF0fhyLJgE37XHF1wuhrnY/UnUb/1i
5KsfC/45e4rOhRj0BeFvvMB9pjGXOR4n38K3+A/4zNTcLUY+qG+1nmfAE9gY
y/pJkL9l9tnKIY0FF/ojSf6Zs8krPx2rPO5k8bTnsU+mxKje+IDfxeF53LdW
scwZD37En3nVAnCbi19w8s/sw68XaZ3EKScrLTrc2sukV4oVPpke3OC/ZfJD
jgWXLphePvnLpbeKlT95Rvnbr4SXaOcCmP06MzhMszX4qzyOky99VvqjzGvZ
n+3vY/DYbPAWhq2jDl8ci9/UruzwG/P/Kr5frHiVOdGXld2g+WAMepl+7vRB
HTZy/xPjqG9D8sIbab6FfXvFG9Z5Yj54F0+3ad6aIN3NN9T/RXfJTzIe3LVs
IfHiduP75EhgLpDxO35X6J/wFsYmwhvpXAzd2bt/pO9LZC4QW5zvv2K/5lMJ
4Hu/loCnVGe/+rW3nL/7S1LP2zp047uYhM7aryx1e+GjqX2NmXOVJy9p+gn5
Br9jP89UCR7X45Py+RH+WaOK/O7OCg9/T/28rwa8izYX5ZuRjK4nqLaTv7sq
X5oP4i3UxffsznX83P77qPeiIXrJOXfY/+98kk9IU3IoPB6Qp/NPCvtqU0/w
w9DH4gspd+N+S3gpH5/KN+MzPk7p2oBH5X+p/SFFvk9tlUPxSv4JnzVn6Sgd
oks+dZ/13K1+2dSNvprXpAG/Otedz/8tkPnR1XTiJfYRvyUM/58r6cEZrAOM
uiuKOV2RdPT79wegz/0pWv4S1nWT7zRI+Hwc/rFrM7jA50bga/fsreaJGcjv
/l68zfLv6ctuWv+uuQ9jlAOSTL3aNJOLudVPTvS+acklH+nmwpdxsnKOMpLv
M9ONHJk34psNyeLgvLau2+990Ax4ttmyg0+WcwOv+HqWdIg50V/vzuzCl3Cu
clXyku+zJwu52IcWgqs/KMDntLGuG77UEuVhFQRX/ONLDtEy8qOjioB/Nsrm
MvthzZV8n4hi5LMfyA6OunY1OM/pUg54XrnIv45aj6/g5/Loi6NzSfe9yWnq
lRdVhJu5k58eu0X3pya6ae/cLvr97fgqJHvAt1yUF5xn7W7eu6SG8Dx758XH
ctaf9O8ZmzvwR88LP7bq35pHtJROPw+58IP+4fneb4uP5b1c4Dzj/4H/2acd
/MaBOeRL8Df86sj2DvoG67kb//g/lAfdRvlEGcDlgnfCmx3WygG/2rr/xn/6
T/KwDrTGx/I/6/PNfvYX/fvANuLTCv/0/guebaVW4KV3rPtmfO73CB9rQW77
iC/8zz/RjU5q6oDvlIfvX3i3+PwN8Xdd4w4OvH47+VllPfR73XnuJ7fIJ1Y5
8pOt72n4nRvFy6rMOkyX04Wv36/gq80rOPDLlt/pV+vY37KXlT9DDvT+y37B
f6B6SXTxV7LDd824ivci8AcH8yJrfRo8b5nys6z1aXxXsgqHX4wPw6qC8jew
1q2pjxaAu87IrzysLKzPtnPBoxbkdtAHCOePmw3+WcCd77M7K3is7Ytr/Dys
99HgWJnhCXecqnx2Nz1HN/xj/50E7j01vcPUG5vd2K/mWvuD8bH/DC43KRN+
qiXH6f39qNwH6+8ND2GM9OPJ9FO5rOtmPx7Fc+n8TvpQ8bfrDXXCA4pXLp61
Dg2fY6B8QqLlR23tYwb36wc//3mEdKnpwWMz96XeyBQmnzdr/7T7rSy9pGsI
Rg9l5z0ZHkoP+VIGKg8xHXzsv7twjj/3gVeQ8Jm+qax8Swq8lr93iny32oIf
9n3JOf618uAatpJv5FP5jXygj97aDPz80kN4p5HJqnOakNfW6x7n9ZBP4GYj
GvO8lt1VjsYH1RsNyRP89hbnxcVk+bJ6iLd/Tf5U75WzYJ3LBie4BC9unfX3
dl3esAY85x0XmBv2TaYf/6ea5lzn1Ocm47M0p4reizPSI/wfU2cdZlXVtvEp
pruLbpAuQZBQaQFJeUFAQlK6Q7q7u3PobhEFEwULnANDCYIgOd3z7b1+N/D9
9V7XfsfDOXuvvdbz3M8dGeCZnStq/ngcfLJ/Gv1yy7cSWDeHqUt3pyk3sCzv
xeJD8fLBVL5qKXiPP+1/wzs1OEJx5l97d4PLhSUzD/2usPQgO+FXTJNu5VpB
5mjvbRf+mSj/yVjO6xpbqB96JKKjSYkGV1yyMZ7nlwiv4GqE6qV14g+8EN8y
DJwza5XqqGf0O9cCORdGLwdns/VBxk/cH/2CyxLxcJ6xTpx8qUsPLpZuS77u
b3trjrOQfjn1KX1HU0/mfQPnw7eJfyr/PQ/w/JpzlfP+BNz7qitz8MuzlLf4
VL6RLsrFm4nOupU+50weeNqgadLdPEPP5bCuG/7RVPXLT9El/ZUN/vloEvyo
6/+Jv5FJLsMT9S+2/tfsC1a/Y3D/cfSJhx/h/1ApBd+zGmPAkUo+hg+5LAm9
3vZR8Hb6PBHPKvkGdf5odEOrn9EHdbA+x+ROjZZ+/5lyipPFAxkp/PO5+ACJ
8mMcCV9l6QtwmA2J9N3ZI5WnIP5DkUT8tQqMkg5OOMnJl/hn/jMCPP/iS/r9
D1/Iv254vJnzvJ8If6zJC3DIEcPlR5EIT2DyU/EJh0r3+gK/0Nr/SXc8UPyB
F/J5s/piex0XFQ8230v4LY0fwRfqM4D+pV8i+8AW+bieGyAeYCJ9R6t/6aPr
9Ie3sP0lc5mjVv9u9sW+9E3XXqLXvvgAXujgvvK7S+T9vSv/gcp94ZVVFb4U
f49+v/Vnmou9YH9r/Df48OnPqEvvW8/LrNM78Ots/pXpZ16w/+TeAf952BN8
0n6OBm+6TX794e6st9XPwQPjbym3twfnSN8X4hHdxk9yeQ/4ug31HN++Df62
rYd04i+0z9+CZ1jgU3wb6r+QrvAmOeAPutGXXVFOa5lbwjk/1ZxIfmL9b4LD
fPip9LnP5Td7A96jn/JEZj4X3/I6/27uJ+g9pzwnL/jcDXjCP3yifJln5GXE
Cpeb1fkN396eA6Rf53307ax9Q7y4qTfgUb/8RPmwuj/Vb6D3P9k5XnMI5U9d
573z6azcBM1lrl3n+S7pxL494jl+wrVvgIN99gl5zZ8KP3yQINysq/wxXpAf
fcK6bs6vrvKpe855t8f6HNP/d1Y/9Rw8/OIN+Ie3rc83c9NEfF08bqPfH9hN
eI51Lhi/htvw4Yd8Cn9stt67zbfwTe3fDdzjT+kWj96GtzlOz71wInOEp7eY
4wR1A2eYlyj/gVvwXRd041x7lqS8uTvo08frcyanyP/wLv6if/ZQ/mAKz2v0
3/DxpvdQbmCqeHf34Ld/2xO8KDdFeTH3eX/z92R/cE8Dh992Hz5hr17i96bC
G7fz7OzzLaUXdciAVOXbyncxsjfzo1Up8jl8wO9d/Bn+G4XSwBNsHM/mXZ/q
g49B2VTh8A+Vf91HdV0a73upR+jZPfrje3kpGbxu6kPlNPUR79e6bnyl/32j
szZ+FSnw6ks8Bmf+pL9yVVLl+/GYXLCHA9gf2qfyPj7+j+s7P6d++zgNv4uh
T+CXJgySX3GqfFOfiP88iLnYxiT5xj8W33UgePLfifK9+Y99cuZA+eUm4bew
5gm4dNIg5Xonyd/jKfOIP4bEm3PAxtvN73nGPjB/KPnX9v5j76N/WtdN/TdE
Pr0vwMM3Ppe/yjDlk77SBSeC07qOhJ8cmwi+1yVJ+U2jte8lKo87Rb6sY+TT
mwhOlZQKr7jNOL7/3kRwtux08fzHKyclET+iFRn4MHf7gtyWaonK88rC36Db
ROV/JSn3LVv7+RRwmMRE/DFa5TL3GTFVc5xE9LNRecyzkqahU6uRyLns4gzf
5uZ0cJvBifhibXZGzzh+pnwsk4TfulGX/jFHfkpJnMtx7uAhoVZ9ZXjQSZrv
eIEX3Vygcy0ZnDPUWzrKRdSTW7VOdvko9/NV7k+KdMr+0hktFz85CZ5t/oAE
csKXs4/9kgR++EGg8MmV6MXyEqmvHgWhO7u4Ev+o5spFvRxMXfrO6jc5reZ8
DVNewBrqT6cU8RIjlTOyied1LIX9Kn8sut3vt/D33VLZPxcXUP+4Hd+G7BSu
DykED2TFDvh7B9OVj1ZU+r7d6M76ZfD5OSXoK932qx7OFO+6DDoyt8PS/Ym/
MaIsPK6kQ+jl/8qQP3A5+bwdAwc+lqW5c2XxtU7Fm7rhXDZ83SjpzX8+C5/W
5rGYuW118QfOiX+eyfz98xrwSaqcZ142PZN5fWwtdHaTv6FfmJSNvsntXfT7
Nb+Xf0KudCj1lRf8E7ju+lx8PwLfZ/0suSyf9lzpwRuha976m3L08qR3ayrc
8k9yBHzy5N/enHXe+ZryKJ2EB7bERzT0uvJPndCrNm8tXO6mdIVOwvfaqh+/
iy9uHSfyXJI6KP/iHvOpH53F1+pEP7L/oXJ1XYVXdIUfde0/+Zm4kAc9o5v8
JJ/Bb8mxrps5eQ/5E74Q78L6HOOr1IucrOLJqt/ykRMU1V862XTpF6zrBrcb
kGCe/5ws6sCO4nMOGAQvtFQuPNuWHvDiooYl4AvtJt6mB/rTuyOk+3Z34PPp
gQ595Gj9Xm8Hv+8VfjKOfvOCn4O+wpPcn18m4JvXK8jBPNj7FvOEqfLFDXeQ
j+ADrjh4Jjy6c7EOeK0+4Jy7pVsfXNCB/4wP/Ng5c8nliSriMPzVTB9wsy8X
gFseL+4Aj/Yj/yhjMe+vZ1l09Nn+5J6XWZEAr6SCcskDbsFjXsW+5FEVPmF6
IM9r0nr8Hn9/W7rpIPiKwZuY18yoA/52NIQ895XbwIW2NnCYeUK5EHLPt2+H
H+jdiH93YvAt9Ki75JvXFP31A+vzjU9/XAL61xbgvTbuZ+r93QnK14Jn+6H1
e83caBc8tOofwQNMcr8FnrsN/LBZC/iTa9zg0V2VXn5nc/xXbfzT4Fw70MN+
aP294fP7g58Xj6O/btEKPG1IoHihccrfsf7e8C6C8En4eSe5YKubgcf2DtL3
2Q6Okf8V3zUIfuN/W1jnNi/U9E1B4MBbNjN3a1CX3KIuQeivS29IgO/wDvlQ
s/zJz5q4GtwypSr57LZ/qfHVXgne7l8Ff9qMAH7Xt8uVk1UR34NKAcLxlsif
5C3W22k/cLa+C8VzK+XgPfa9ZfrEntb6NLyxYvjK/s+X/Pcps8HJTxdymPrh
b39ytcbPRL9wJb+DPB7r743f5VT4e7Mi9H18ed8HTmJfrRfqwAfLum7PPctP
BEc9FQQ/+Ttv1lu+seBjn/s68BPy1n44WjlWXpp3WNeND9II6YXzOUydZb+/
xj9xOOfRUld4vL28mcskD07Ab8eJ+2/ni5n6fBA+rrNzlLshXPfzfvi63M5Q
PeAOT7jPZ7zXNVPkO+2OL0HFHtL7v4SXsjIf97PBp+yfB58x57on34zwLsod
e4JO8y03eLDvdIZ3ev9f+Ze64UswtqP8cv9hfr3YmdyxNW2ZDw65LR6add3o
51szF5h/UzngTvipFmgpHxUHOFJiLvhnbDPpmq/BC+2WQ99XozF49Zrf+Xs7
T8r+uYMbym/hN/mT5yrf5318V4pelq+1cFen+visLvpJfqHZ0tO9C2/8l++o
q8dlMzecXwv8bfBFeL+zssCjgt6Wb/N5eBdTs8gB2VFNuXXnuJ++WeJnWnWF
3YYfPANPuHGm6sxK7Ku9ToEjdclkrtq+IvPZCSekV8pQ/16O97fUUfiZMen4
TyaWBp+vfhAfhsqp8BK9SqDjKLwPvOiXZOUXF8Wnt/5u6tjOKdQ5roW1f+5C
F7/mVZ9VMAFez3bqqxop+CrszK/9cCu4ceX/p+sx/ehGcBsb7zJ1YbjmreuU
c/1cvpohus+r6GebvZSfQBDvnf8q5QW8kI96AL7oe5ZT99Z9IR88X9WfS9Hd
2HwA4/PoC799z2LpVp7Lf94T/9u0BXrvnoPv3fKA1/3WfPrKlc/Rm+e4ca4t
mUN/Z+MtBr93FQ9hFny5ROnRVjizD295pdN/hk+j7U9leLDTqP8rWdeN73EO
OcufTZUP2BPu264s+f/L7/Qn+cv5Z8BfXfkFz32o8J93s+SXNUm83ET8l/Zn
CU+Y9AY3M/heBr4B303guUcnkQf0X7r4VBPFD0nGt6p1hvh4E+VbmIJeeF46
PNWAifCddiTjM7w+jb8vPQFeU80U9EcHUsH3MsfLrzgFv4UjqcpdHQde/VOK
fOeSpUsdA664Olm5MInkbS0bKb/HZHTWPz6Hb1lshH5vMry4v5+DI5UbLv5t
Mu/7vqf09TlDlWedDH5V/Sk8tH5DqHsnJMtv8Inw6iHiJaaIj/GU51V5CDiY
jWOY/fQ/eG7NBtMP3nupPOV/5dc6APxqSxI4g41vGB7v5/JfSlJu70Pp7gfg
09sshbnDN//C05syEF7f5ST5PT6UL9wA6YiT4ds7HrDeGg4A326TxHMZ9ED8
0v70Qa2SwRMKWteNjqS/zoVE8f3u3wCX78O5cChJz8u6bvJY+8hXIQmeT//7
+C727INv4Vjp+JbdFQ/qM/CKcy/xeXa+C057uafu50t4egfuSGfaU/7SyrMr
eIff2/cVbvZSOR13uJ+zrOtGXyce0aA75CP/2l26PM2Jqt/FR3FLT3D49UnM
pyL+Zl6wr6fyhpLw5ci8iz9nVk98lTskKmfcum58m3sqh+slOHb8HXDU9B7q
B5PI8fnvb/DbXb3A2eznZc6le+DSYb3RP85OEv5/j5yRw72ki0wGzylwH3xp
aW/w1bvye7n0D+/j7D7w4W2+n+FZ3ofvHdVH+enJ4FS17oMLFe6NXvKC+v2X
/6DPTe4DfmjjiuSS3SBHo69y4lLhGRZ9AD8tyfp7w89Kk4/fQ/lv9MVHcXK6
8u8e4nOYv79yedKVM/6v/Bn6gwN/lsH9HP2I+9B6gPbhtDdzEJM32l+8lzT4
fnf+5f2t2h++tH86+oVJj8mvHz5APGTr842f6X/gVPUGgmMvT1Ne83/yWX3l
55xOPdDwCTlukYPw22mSxn444Qm87t0D8fHwSEcPnvGE97f7YPE2hbteeCJe
5SBwldrp8HgXPlM+3RD5CqazD3R/gY/BvaHgdfnT5ef8nFyn+sPE00vHj2XR
C/DP3uI9rsoQL/0l66TJSHJ5fk1XzvhLcrTnjgR/O52G33LBRPJ6Go2Cn98p
VX4OieD8O0ZyXm9MxSfwH83Lbo3i81+ksC+dSmI//3M0883jwrE3Jcu3ZAzz
5VpJ4MlvJ+M7usX6e5OLkcw+8JXmhqPGyY8uRf7t6fAqB0yQL3QKdcWEDHDj
LydSd11NQXdzIYt/d9Rk4cAprM8F2fip9pkCr/hhss7lXPlhTlUuagrzoDZ5
+BjXnS4dcSrr6qUzfvXNZr6Zj5scBVflDszR/DEFXc9TV3Ce9XPk65sMTlvf
Df3v4bncn7Ep1A+eHuhxqs/HF7FSKudauCf15/SFykNJpb79yCfB4IZvLaFf
2Joi3q8PuMHIpfJfSoZn+MSXett1Gefm7ynyM/en/vx6hXJClaNdK1A4wyrp
OFLQ478fBD7Tb434gam8p+dDqLsOr2X/uZcKzvljmPge68GpzqUyFysSSW5R
7EbexwOpyhOMos7ftwle4shU9s9sq141OPVm7v9/afixfJmffnPQDr5/3Qz5
XxUGBz4aF4++Vrk5gUX5vZP3sJ5tnNPgn8XhFy3cS19WI0v+BqXAnf49qHl0
NnPqiLfQ61U+Kh+JHJ2DFanDd5xkDnIqB17xuMr45kWclq4tV+dsVfSSH3/J
/u+cx30uViPB4AuNztOnNM+Fz5BSg5yXgd8otyhHfrC1lFd+gfXWOofz3eaT
GL7Ed/h7X8nB16VyXfFXf6BfGJUH/39eA/qmj39RbruT+tCG+ExW/VX5EU7i
BzZWftOf5ITWdBa+10z48zXqRm8X8JlqLZRLe116IhfyPjZ8JFwuAd+tka7w
GP9rA1+33h3VLdZ1w6/oIJ3aPXg+f7rhvxfTif53yr+8v/PclPvThX4n6bHm
vNZ1k+/UFdxj0FP5GLspP6U7/+6m56z/GOu6mav04PMbJMp/3hV+XfBn6KMb
JItfIV35zr7yB0unHu7oAY40YCB4VLkc+S1Y101fPJj+7oSTA/8hT+nEh4MD
fOvqII/Sum74viPgtVbzBJ9Z4wXud3wM85QcH3wsi3mD+50fz9xhWiD51H95
kePTbiLv49lgB7m8XvBan04SPhAGnvO+zy3+nensD42jdd33FjnTs+nfDxaE
P3nfD5yh2ALhGMWU6+1/C73MQvlalCSXp4A//oSRS8BhmpdxwKO1rhtexDLe
l1Xlxd8LAK84t4rndaeyA/5QIOs2dS045O0a3J/Tr3ieG8kbKlrbwVwhmO95
cTN4aaN66L5nhsCP7bWd9+vU++iO/wgBp/1kJ3ME56bgV61DyBP/Jo78tbof
govWFY/00J4E+Ts54AUFcd9K79N8pA181Bzr9xr/gD3ymWyLLnuuB/lB3XaQ
IxZmfY7hgbjfgiewDZz5YCuHeQ9P+eDfODWO+c7I1uB1U6z7ZuaKe6Qrt64b
fUggeHvzPeJ1tyKfvah1f2wc4Hyc+MktHGYf2m99f6MH3gkv9L0m4MahIfi1
vtgOHy+soQOfqWDNF7bxHhVp4DD95XX5hV7fjE/I+brwWgcHwfcL2YCfQ/1a
wvOt63b/33wNvpSZ1eGRTg7CT6DoavGNq8L79QzW/rCSedPeSg6z/3UIAK92
Wcr5Vfkt4brW/Tf//0LwvbqlHPhx+cO/rTtf5761no0PtvixV+bC/29WRPzP
AHDd2bPYP/+MRXc/KkD3c7r8XqLwTzjmj3/ChamqB8Id9GXWe2Tq7P+Hi5o+
xw+e6pPx5NS/7S8835f34tYY4RvewrGt64b3Mho8sJInfOx71nWT7ziCc2dm
PuYjx631Y/97NYfx94ec0fXP9AZXn/M5Po2XcuJf+wMY3nE/5e5lqE72FN+4
NzqUIanx+Mla69n0W73Qg9RIQmcda103/KXu8PEiXypfJp/2mW7yW35Kbqav
u3x0O8uP5THnzmNrf7bX06SO2jfuU28EWPu5fX6caU99cuxv6Sut88i8923B
A3+9LVzFGd57sVboFGIT6BNb5Cn/t7l8SP5inhVqnY9237m/aYLZb3peZf+P
cuL7N2nCfuX0h/I4rOsG32oIXzHyV+a/E/LgA4S9D66462fOtSd55Fz0qkcd
uPcncAZ7nmhyWupoPvI9/Nj3pJsIe4f8oy8uks+blCPdRC1y8WJUV3TJpY9O
qyE++Xnlh+aiU8utrvVwTjkvOdR1W6rwfBefkW9eFv3sngriox4XXzcDvtbo
sqorjoBTDVef5Sgt/f5B8rzeTkdX61SSc3/tfnDLaeKdfmrVb0aXsgccwO6n
jN6wqPjbcfJhSFXeViHlJO7QOkl542tqzt2t8LIOJsnnJ1p5TxvhIZxMQfd0
NVL+5Bvp65uk4I/0dgT1z8z14l2nKFc3lO8zZC24yvVk+I0jQvCLaLyauao9
97fx25IBfE+/FeiDniZKZ+0vvcAycMUlSfgCtfBljjl1Cfjqt4n4mjby5j6H
LqReapsoXy8PeM6J8+H1eSWSV/XIXT4n8+jXFr+Eb1nRTbmNc3l/176gD5rs
wvnYcRZ8mOXS69Vz4nuOn8F8eXkivOVNzvCfr89gvuySzHNfLd+tt2dIX5aI
3nlgrnTiU8ElOqQorzZHfeU0fC0qpoILhVt/b/DtacqpTEWP2TRHeuFp5ETM
VX5ZUDY4mOcU+vRJqdLtZik3ajL85G1pyoPLRgcaP1n1bYb4P5k38LmcpJwR
rds7Vj9r6qIJ4KVl0qUvS4N31Hu8+Lpp/N5nKcq9Hcv36ZYmvFp82l5jlDuT
Rs7F0yRydX8dzfvlmk4eytAk+uWbo97gMybnw7pun59PRoG//Z0OXloiSfr9
UcJRU4Ubv0Bve2w4uNx7aeAD+Z7jJ1B6BH1N9zTl/jzDt9D2QzC6yjT50z57
w5s1/X6a+spn6OI9xIM6l8bz/f7pDXREw9h/tqfL/+0ZfoNrh+n9FV50/gnP
8d8h4D82H8aej2x6DA7WdiBzHLsPNX3FY3jRRQfBT7DxHzOnfawc5EHia6Xg
F9Hr3xv0oZ9T/39irVuj53iIb2Hl/ujEHyWTV3LzgfCo/uBmzuK9P/jnBr4y
feEL2X5rhr9uXTd64r7wNv1SWLdzHsoHuB88kFLp4OdNHinP5XPhzOn0xXUe
48ta+XN4dCPT0BfUeoR+9u8B0imnkqfws3Xd4FYD6EMnp8JjtPNQzPs4AD+u
vuno6wP/gyc2aWC85p/McdyekCPfZDD8jahXuQxP4BmuHijfy3Th/I/xrb02
UDzMDHLlLj8hv+zBIHxRZmVo7vCf/n6Q9PUZ6AvefaLnMgg88HImeOmcp+Qs
ZwyWTjAb/t6Y56znsKH4mfyVxb5q+3WY/Kgh+J84Z/Mc1z/Hx+PuEK3PbL7n
wOf4ZjQdhv5ifRbve6Hn4NteQ9k3Lmbx/as8V67QUOViZ4r39Qy/jkLW59v9
V8Es+Zc+V17SUHhBBbI4N1e9YK6UNhScISqL5/LihXwyh7/5PuacToRHOn24
dJfK262UBI/XxgmNrioLH8g5SeDYV0fwHMdkcU6lJMFXPDOKfelOhnh6SejW
K4wkN61PJrhHVhJ8+G6jwN++zwZ/u5yGj+jUscpBtq7b50lMmnLSxykvLJOc
srWp5NrcGqOclCzx/VLJ62kxnrnJ29ng2PfSxTudID/VLOFI6fgtfPkFvMrx
GfDSN6TjIz1lAuunfIZ8TtKlu/+CuUbZDOVKZ+CnsWci+16RDPyI+suve8hk
3ve72mfuZEpfP5H9eau1/u069Hk2/OSYqcoByQBHKuwE7jRruvaHTPCxreJD
rpvF+RuTyTrZ70qftXw2dcLnmfDTFrmhMw2dy3zncYb8f9ypQ37T9TmZ8s3w
oI56OV/88yzNTbzom+YtVL2RTb5kgI/ybZeCByZm4EcabF03PLYlzKcWySeq
qi842F9LyVn+X7r4rn7gTm8vY76fpfe9SgB1kedKcJJyWayrG8Hyb1wjf6dM
ncuh8G3eWSf9ezo82CMh9Omb14DjuWTCry4WJv+xDfAN7BwZg49FSCe+EZ3L
75nSKUcqX2MLdU61DOmYosBt/tqsc1P7j3cs9X+xbbyPOZnKdS2gXJgd1LHb
sqR3KCTe4C7hipn41dQvgn9Xwi506H7Z1LcTi4HjjdoHLpeZrTqtlHgLB+Fp
N8sBbyxbRn5Qh+l3yubIr/4t+tCAo/ANYp3AW36oIL3bSZ0jTvCI/q5Mndnj
DP3XE/Uva6rh99j4K/qalk749S2vAW78+Cue13Zn8K6HNcFbdl4A33vpTN83
vLb4h99SN4Y58znHapMPfuh75uCn824qfxpezbQfyJOq4iQ9bD3hkJeo/8c4
w9dq/4Fw9SvKI3BV/9sYfov3n298L03OY1M+x+MqdWmQKzrQYc3Bu1o54FE3
cAWHWdWSvIn1N+QDbPWt9nm2o4180u6wT+7KB44X1AE96S9/a04t3eWWjujQ
pz9QPpoHOuhKn5CH+/SRcsyt/trk63yagN/Ic94X23/S5JH3lJ5dvKNRnvC+
ZvfSekhiHhfsQe5J497g8POTOWf3KZc8tm+C9kXOr4Ye8PoG9gf/uZcBj/eq
B7y1258ngKvm4APQ2BNddv0heo5ODvj7nuhPL4nPWdMNPPBd71vwvEYpf8eD
/J38PreY147lPn/pKx6gL3zCMcqnTg0kn2iGn/KgJyt3I1w6d1/4nHOmyh81
Atzyog+4yoBp6C43RDnYt3ylc58l3l0B8cr85DM5T362RcFz7Hxtu773WEQ+
SIUS4JBjA27hA7xEusuyDnRm/vg0PloGv25sOXLY+yufKG8FuN/VSvBLrwTC
sy2wFv7zjWrSfQeijx66nhyiH2viu/hbEPh55Gb4PIHvgv+4huhztuF30fg9
B75RIcoB3ym+cUNwzsQQcu094vC5bdjcwXkRgo9rzm50uy9bgKM2CgHP9xHO
+Ucb/Af6BcFPG7tfc4d26KP/EO+x617xq9ujrx/sCf55fhd5N8uszzH4tQf8
1d93Ku/Gum5y/fzkd7oPXKtke/DSPwLhB67ZL75xe/C6BkHg3uWs63ad5NoW
XuhvwbfQEe7lObb8iHz5csHMEcbtlr9Kc+UWhYDzeMXhd1GqiXDgUPlS7kKH
O68h6+dMCPjV4m3MdxY0QHfvHcx6rrmZXJvTdfj7mBB8RKdvUG7XOw5wnmDW
ScF18jOsQW6RV4jyvFbL96Mavgp+QfDAy64EZ15eUZ8vPf7KpeJpv+VgHw9g
/bdcLN5XaQf9XzB5QDMWKm+6OPlWwUHwNnvNwxf6SCF8axMC5ZM5G99a+z0y
uZL+mrPM4L71sd4745PjL53+VHxT61vvr5kT+5Nj1XCy9vNg8X79we2//UJ8
3QAHOaIBvI8lv0BvXsLfQd8TwP5QYRw+2JE++AkM9sP/duoozYPcWbfevuDS
bYZyH565CGf2BSe8P5j3ure1vxldo3xoL36eIL9m+P+XvNiHm/SXv0EG9fBA
67rRCfcBNwtIgwdVyQteul9v5i+7kjmvE8Rz3t1DfsIv1L94gDNv6sr6/O0x
8/pr+djPsztpPf/L3K29G76yBzvyvKr8ozxBN3js/dpzvqxT/t3Prtof2pIH
N/22eIOu7M/tP+L5tkjQ+eLG+qzbKgGe73XhnK7S+38I32/UX/Awd1nnr923
D29K/dP5D3zRj7iCkxdtBB518DeuV3GB/1/4ffl+/0L+6Trr3Dd5GfV5XgMv
iScjP1Vbj2/40j/QX3g7c55uqaP51HfwG9s7g2OXq6P1+S05ROnW5xgcuSb7
W5VvhKflKie0GnP/JWfxm7qajQ/ed5X5vStPg8+Uz5aeqBL3rfxJ5QVkwbNN
K4fPxh/HlOuRKR5RWfkAHJLeJ+um/H+VG3UQHlT5TM15SyZwzuyFT3IyQ758
xRNM/Xt4N33i1DTNqQtzLvTZoRzeDHJ+KxeSLmkHc+QT6fB5XApoHrqN+fvA
dPGOYuSDukX5y2nUq4uiVbdvimeuk6Yc0nDw+eXr6Yvrpmo+Hqb1sFb4eRq4
kGcI33PWavGEU24y7wrkPp9Y/gZ3Ne+nfwLzmWXinaYKZw6Q7mmZfGuFk/ha
fYqts0tfKt8w6/PN3/ng/397serhFPkiejE/2riQuvFlinxWPTnf1ywgb2tr
Kjqj6h76XfOpbzNTxKPIB5/WZ65wjzR4sLmu8u2ZC8+qYTp65CJuqp/n4Bt8
PEP8JVfqzH1z8f0Yn66+xkX70mzuz/8ypD91xlchcZb0qvKX8HTl3Gw6W3yn
bPixK5XfWnIW/WOhbPKb/nFivjZ0erz4snyfmrnwxDynKRc4Cz/Yn3PkpzcF
37YHWfAcOlj9svGfncJ72i8bXPFqNnywo5NZP/Ok57qYBU/y+iT5c77CH6zr
Zh+aJP1glvxdM9BpXv9CeWqZ4PAz08HTfh+PX4eNJxheRBp+jCMnyLcqS7zx
VOEt4+Fv2D4hxlcsBR1xwjjhe5nwc3xTpBMfo1w58dLfSRGuO5b9JzUL3KlF
KvjqoHHMOyZkiXeXDP5waAy4x0Y9330vb6DnGKG+IBN/zj9egn9eGPnG/9no
CxJvmPpy4Uj4h5fTwalsvMve93YNRzfnJP+xEsJ7Fw4VPzwdH+Odz8DrwofB
N26YBr70+Cl81EZDpJdMuymfVPHNhsgPJE3307pu/PEHS8edeVM6e+UBWZ9v
+HP6/mdegCfPHP7meZk5/0t0uyEjwItWCTfo8RK8q91w8bozwTEOvwBHWjmc
ueS6bPr6fkngpWd1fwbmghs3ScZX9rPRnAs2L8joGZS/7D1KfJVs3muvJPh+
d1/x97K1vyWLXzeS8zc0B759wyR4jENHMSdany1dZxJ68+0jNd/J4T57JzMv
KD5K9z9P/26a8rbGSJedx/72JBWd+G9jyLMu5oRuJTBd/rRjNYdyRnczIF08
z/HoQ3fnyR81DV7oJ2Px2euVh47D9ks0PPCx4AnHlVvRPBWcOX60/Hhz5Qee
qtyiMcoZzGOOeTUdvugv48DxaufJR8K6bv798dQ/n+ahC/gy8wa57uP5Xdus
32X87rJYz30m4u9h5/Aa/qN13ayXL9gnE3LJJeyahY9HzYn6PtZ18DDyuT6e
yFyj+Kt8Deu6OVcmKZ/CCV/9j/Pw95g1RbnSTtKL5QkvnaY8kTx0vl/nkV9T
d6py0PLAiyKt63Z9U3s6/nv2/Tf/nRN1oP8M4S25+hwncIBvZ4C/rcnGl2CY
k/rK6fixnMqWr0Ue+9W6GeCZhfX3bZzxn1kzk7nV4WzmhnEu1BVxs5VfmXlT
Pk/gkMtm4edwLou5eYwb9Xzhucyz5mbja/GeB/y6ofPlW5tDnfCrJzhbh0Xg
1UW0z/f0Qnd8f6H8TrPBFdt5J4BzLJafVY7mbtY5bv/33Zfy3rXK0dzKDzyn
4nLlWedorhoI/2TzCnjgX+exD5QJll/9Gub+R/Ooo2aEKjd57Rv+nsHFQ7nP
x9a9wVGNX2KY+CfreB8jctk3BkfA25y6Eb1/CeWzjI+hr2+yVXmpecq5jgV3
3bAN/HB0tvDeWPCQ8K1vcHjju2Ndt+do72zHv2hmDnzUxgV1fSfn5o1c6fQL
o3ttu1u5kzmqTwpTV5ffzfcZkSPebBHVY3vwBWqUq/zxEvhu3dxHXdHFiVyV
pqXR7X56SHxO67qZH5dlXTU5zJzrkhM6ym/e0no+Jl2JMznFNyrw914nqZPn
KGfhWCX0pCtOqw6X3m1DFXwI558R79TqIwxuVY0+eum5NzxGo+utgb/luPP6
/m70lTNr83t/+FbnrNWnGN3eu+JJfsdzOemKXrJzXdZV4R/le+8G/rmsATru
sJ9ZJ4mu4EKl35P/6mWeS5ar8MCGyo39lf12uxvfv3Nj+D/f/KF5kHXd1PHN
8PMvc436p6T7LXxAWijf4Tr6kQX55JfYCh1o8g31C+7kDq9uAz4z9I70ZR5c
z2ivPuie/F484B926yg85IH8/z3ITxnVWfyQfzW/8EaHW60b+0zmE+233tJZ
99Bzfw4/JN0LXp/bZwnwv5KpY22dpvGt6cN66Jsi3wMv8e76Mdd4ks654+YL
Pjl5IP1vm2ztA77gkz5DuA9tX+Wk++BrN30o9XAZZwf5StZ10+8Oh3d6xNWB
rtBHuOhI9p8G7g7m6sox9xwDjyvey4FPk5/0nhPIDT/q5zDzvtUB5IxfmUR/
kRfC91keCK8vYRq5RT9FgO9dsK6b5z9T+E+scsMDuJ8HZ3NeXM6Pj2hcAHhU
pbnkHA0t5GB/C+D35lsAD2pdUfC3q/68j38vhHfkUxK8KMWPPv29JTz3H0o5
TH1n4zlm/11Gf/H7Ww763UBwxd6r0F+7VXKY/65xIL6aIWu0r1aFN2jzOU3O
+wb2q041yZHZHiT/xk3Mj2bVkf9nEH6DfbbCJ/+7Hvp09xDwq892CD/8AF3/
KflY1tklnKqxA39K6+/NXGk3/KiGLcCHT1jXbVzyz33wAH1a8/fDQnl/mxxk
/6/WwQEeFCTc4xD4W0oHdMc/BJBTX/8AvJ3hHR34vXrK/3A3PPPP2pHn/skr
/tsucPXFbYU7+YpXtl9zpQ7yLw0EV693AD+H/R3geW4Ngv+28wA+q452+A98
EozefMc+5k0rW4NnfhUM32/xXviuG1ugc29i3QfjQ71buJBy5+uEaL3t4ncl
N3QY3LpTqHxudyaAv3wAP9n2TTW46Vb0sM718DE4aV03PnWb0JX/W5t1a+vr
DY9/Pev8LWs9mLopGD+Nu2vED6/uMH345iD2yXWrxb+tTF7Yh9Z1k4+wQjzD
CvA/XwbiSzBjGedU/bfAAx9bn2/8spbwOcNKvdH72315iYXKXbLeF4PjBeHb
sHuudCWF4F0XtD7f7KezweUOWO+p8fEPYH+w8+gN3hXpAN8LEK47NQGeT5h8
Qa3rxtd4MvuMi7U/GJ5igM6vidLPBjrIZwvQeTFBPgPWPmP0rH7ge4vHiNdq
7UtGT21dt8+3X0Ywl+nnLt64H/XJ2eH4QvRzAyf38+d7Vh+qfcnaJw2fRPOa
1YPAYx/kcI6v9RFvcwC+JcOy5KvsDR8+qF+CeEXMYUd4y5f4M3IJY5PZ589a
74vJxeohXfNzzYs95KfaTX6YT5W36wHuWr4LPj8VHtOn/+Iuf5X/JeBb9lB+
6db5aHz0PuY5/ndP+bbumiO0l97/rniS7sxlfm/Hdbc76BD/cmff29lavNCb
zB+fu4E3Pm3B/j88nv7UQ98nuDl+OHuvyefKlblnicbUsS+UG7jFum5wvQ/k
N34FXtMAF+qNP99jXrP4Z/EQXJiLNW0APtbkEvXML67yDdD1uJ/g7fzswj68
ro74jd/xu9Jy8bH3r8n5XuE8edy2f47xXazO+vH+Sn77ufBJPq0GTphyFt3T
5hzlY1YWb/O0cidV356vgH9Cq+PiX2WDT/5eTrqYo9zPllngpV+UZd/zP6R8
k2z0XyFl4J0WOSjdaya8zccllNO0lzrqZhaf37o4+HDaHvFhMtHB3SmC702v
OPnPv+LnFKKev7BTfMhM+Hv7CuIvOmU7/IH1GfCRysWCoxbZir/BrjTpSaPk
T7VRdV2GcOBI+ehuxEduRzo6u67h8MZXr2VuOyMdv6ZZofLZXoP+enOG+qkw
8fPXgvOcz4RXlj+UuihkLbq8iEz5bQaDS4eslr9BJnjFjEDeF7eV8K6vZEhP
GsD195crlzkLP8Bt/vCZmy+H5zlK/IfJvtpnluh9tK7b50MHb+rzNovhV2dk
yWfAW77Zi8ljismBn1PWm/c6YAk+Vy8y6Xd+8KBunLqA/rpBNjlW86XLu7aA
/vfTHHzDkpXfOnoBuqpBefI98BDfWLjuvVzlm7jzOSvmKtfJ+nszT3ajjzgz
R/6i+hzbx8Dw32aLD5anvAAX6vbHs8R/zmO9dXOlPhk4Sz4GVl9jdMYu4P8l
ZjF//8EJPVQV9ePJMzUvcLr1Gr81fcZM1s+DPOUROMEHeDodfHteHvylK7ng
bCWn0+/3zQMHaJILH6/INHgXq3O1nrNvmLoxYYrwgRx45n9loTcvNhn9o70P
mP4hC1/Q4MnwearmggO8yIKPt3kSOFtkLnk0pTLJ/dkwUXrwbOVhpeMLenE8
fe7DHPDPI+nyiZ0gXD0HvLdROnlPzhPkty9e2Xup8OUujcMX4rdMcIZqKeRP
XR3DnO5QFv37i2R4en+NgUdkvxdmP7SuG57BKPnDZMHnqZuMv+ut0ei7Q7Lk
g5GMH+b+UdJpZsunIhmfhM/HgHvvzRHukYqvwjblmBzS/WyTBh57fBx967k8
dILRGeiFm42HX9rHWf1FBj4GFb/gc35zor4alImOO/gL5obhLuibgrK4/19M
hPc7TrmH1bLRTbtMFM/ThbzFfVngq6Mmouv/wAW90nvW35t8yYm8Rxecmf8W
z1KOz0ThNk7UpTOs72PW7wSuD3ZmDlhfuuATX/Bchrjces0DN339RO2rrtLf
5eAP+dWkN323wclywbcrTAYH7pyPerJ+nnxfp+K/WsiVvsM3V7zfyay3Rq7k
wx7Mwa/10GTxZp2lf8yBH95qEr46m6zvia4GfLXxZOlKlEPxVR66+D+nsH4i
XalbFljX7fX1bKr0y67MMbs7J6hOxN+4mCv1RiNn+H4fTYdvecSZvM4uzvJ7
n4Y+equzdGTO8GcuTdc80fqe8J7EX5rBPjPL5c0+Y3D9mZrXuFIHrsgnnsls
9vm/3Kgn/Tyk45tL3fK3/I5iPKWnmwcuMdAVn/xu7py/NebJt8SVvvt363OM
j9t86VZc6B+H6fPrLaBO8HKWTsoD3sX++eAb6c7KHfCkTzm6kLrlprXezLnr
ybwvbyG4ZbM8eJ7nPam7AheBE35qvXdGZ+PFuXNlofiWr/ZJH/CNsUvAmTsr
lyRWPpMLlynnyEnrx1/3bYX83nPxqbb1IGY+sJzn65YHn/ZMADxSmz9p+us8
8Nj0IPz/56xi/XvmwTPvF8xzD1kDv93WHxl8wTr3ja5xLfO7Wc7wiD6OAG/M
3agcIus+m1zeaHSjv2yG57DHSTkdUeKDbRHPMA+9xshozjXvLeTu1XOSb14s
89Cz26gfBlnXjY9mAXikK3ewDgfmKZ+uEPyNt3exn9h6JcMHLiQftp3w2GfL
z6pzYa23OPlJ5lH/vF9M62cvOJuNK5rnKJ14ywNv8F5TD5bQ/PQAc3NXJ63b
UuCKfofQQ7k5oxdeUpa5drsj4PC1XOBdVCwvfdZx6udRrugZe1Sin/rppOa8
rswvPqhMHdj/jHISXek3H1SV39eX+Fd8b71HZh5WA57A7fPiE7qpTqgJ/yr9
a/DPVDf6viDpxc5dIFeunZvwzDrqK7/j78Pd0XtWrA9/79RP9BfN85HTHd+A
OrP/JeUIuLPflvxAOMYVzems/svUGY2U3/QqJ8id35uvMTj2yD/Yzz9yV3/U
VPP6q/J9cgd/yGjOv9ssnlyqYdLJnmzJc3x+XX2WBzrNuNbiM9yivk3zUH5N
O+YUznd1LnuiX74lHfra+/K38eJc+LQT+HzcQ/mu+MB7ud1FuRtP8K/+0Uvr
vBu6xd5P5I/hA07r2VM6yhfyffIRbvOZ8l4T4Qs9kx7zpz7skxPTxB+Qjvvz
/vBtFqTDRz3gDW/qwQDNNbK0v1mfb9b/YOXs5KrO8SO35c9hyqFwfaOTNf4S
I8UTzgc/sLJ13eCao5Ub5Qlv80t/8fHGK6dDPKuD1ucbf5Tx4BgT/MAb7Rxz
e5/tOol+/50gcr2XBMKjOz01Ad5hBHrhVoHgHidmCDeLEu4RyPr8dZb4PPnB
Id8N5P7/NFfPtxD4YXHpiN9bgP/q0aLCXQNVFy0S/7yEg5y2AOGNS+gjLpRG
393eH71/82XyxS3r4BzwR4d7ZDn1f6fyDvriAN7TkqvFz6nkYG4TSJ1g8zzt
faxTdQf+dsH8faNN6mdr4w9ZIAT96bMt0i3W4z6Ms/7e6C+3ix/bwMHzCCU/
vfUu+u5qjcV7tK6bOeUe9YPNHfDLQsU326frHzlMPbowlDmmz0HlyrV14P8U
dgt9+WH289j/Oeg/glhXoYfhRyV2fONjaf/+2QdZn5P/x/ds56l8qz3gVMvb
w3ddnE855nHSXbbDZ3KxD3hv4/2c7886wAduGCA/zwP0j0c+Fj8wGNzp/CF8
KbtZ142+JRR8u8gh5c60xydzcCj729sH2AfOWPfB5L+Fsg9M3itd/IcOU//Y
OKHRjcRxn5c3hi+aEgqenLRLeW2N8LFcE8K56bdDOXQNwOv6hMCTtPOVDD5d
l/W2IkR565vE87HWg5kHiI9q+4saf2DhogVD0V/7rydH6YG1rkw9Hcw54r6a
c2dOZQfzc+u6wXVW4m/zZQUHc2XlXg1bBg6wtCy8yvHBPN/hi8GXgqz3xfj6
WH9v+KwLuf/DioFnTraum/5qAX10pSL4wfoFw+csPoc6ZEt+fDCmBIG3h87C
56FuNLzrsCDw4b7TpCsJ5/tPDGRd/TiFfO02IQ74h0Gcy79b+4zx7QqST2+g
ctwmJODf6S//0kDw2MZj5TfuA76d37pufPBHcz93eApnDsRPtdhIvudEdwd6
hAB8D/43XH4vrvhXHPdn/7kwBNzguBPPfZav+AMD8esYny3emp98RPvz9+EZ
8a/nU0Yn1Uf66GT5YvlIn94Lfcr9RPH3vOkXvunB/D3xOf37KS/pF7oKd3oi
/yLrfTT+hJ8kwAN+xFx1hBfn47ud0NFXfKh+3JP7Wa8j96fEfc79jV7MDTt2
gE/+2d/o9Vp7glu2bgsuNO8WvNBZXnp/5Rvjf5M6p6SH+qYPwYuaxnOOj8qn
fb6Jci3/lN+dK3PnnxoJ//+V/q62m+Yg0olsvwLP0PaNMbzVD5QbdVl6ZOvz
zfprQA7dxEvU//WdqaOG1FH+47f4WEa7cI5UqC2f0ovizziznz+shU/R5m/o
a0454aM7ugb73jHhpb/lwZPJVx08f95ZfEc7OeNDMqWqeMhnwI1nOjFv+lF1
o88peFO3c9H5PimvPLVj8MHOykdozVvUIfUOg3t/kId/2ndlwNX/OkTdficH
vlm5UsKH99Nnlc6B7xdVHBx40F7NwbPB9+7Kl+nT3firf5KNr9pUqz43usg4
eGU+2fiVjSwk/u1O+cuJ7zSngPx+t3Ofx2aD+12SDmvalnjlx4M/p8ckwNPf
Kr5TLvhhSKzw6i36/uovxkRTN17ZHK/6SH50Uehobm6EtxPwCqcKF+93PX1T
qVx0cxXC5aOyTustF7+4CqHMy/KtRWe9NUe54cGsk9HyWb2WI7/KAPJeHVZ/
Z55HLv6flQPl170SX8rKTtTbOwP0Xq/kveggvOiYLz4e/y1Vblcu/LqHPvJD
WMrvdeTCC73vg/7izyX4RIU56fzyVu7nEnxN/3RCZ1HLh/1n8SJ4OC2dwZGe
ezEfD1mk/GgXzqlH3vI/WaT8FBf8cJ5a/bXdr78rHWKiC7+rkRd4+/QF8Nw+
c1W96onf9akFb/gSpj5XP35A12PyMTfv7MW5E7SQ932QG78rxJP515758Jdu
uaD/SnJj3d6di66zhwvzyoJu8BO2z5EPngs6rOcuzNMrz5Hvqwt9dLwL+8mX
s5jjfOXCftXUhb7g+1nwEKJcmJ+2chGfeaZydl7xTFykX5tFP/jhK/zNGdx+
2HTlUrmilxnqrL5yhnTfLvjM3HQSv3c669D11ffPvQEveJr0jHnw2/PlkNsV
PkV+VnnKochG719tMvOUNcKB/bLkAzCR9/R/efiFBmTh25BkXbfh/RN55NeM
zMLnc8rEeP1+5oyxOeRNB06RrsEFHGx/rvKnpsDjvSHdQV6e/BCmoZse4666
2oX9qvQM3TcP5Xu6sG+8PxO9vJ2vaupaV/G6Z0oX6YFO8ANX/v7iTM1x3NGP
vOdK3VVtBn6bVT3B30q64cflNkv+JO7o72a5Sm84k37NzmE0uL4r67/LTPbz
ne7M3RJcNcecyfz0jPubvze5pTOYk4Z5kIO5y439av1M5bB4KE/TTb52s6TH
lB6wTz5wgC6zwOeHeILDFMxHvu23s8Vb9lT9k49+ZMFs+D/dde6fz0efWGgO
+MBeD+qoUu6qY2erP3WnTr7kprzR2fBal3lwfpX2oD/6cQ76gsse9CmNPeAH
RsxT7pX0lYfcOTfD5jCftfkShkfpwXzEzrk2eKo7/UvZV3rneXp/dZ/PeuKr
9sl8zjsnd+b4/bzgw5ydD35bzwO81NVH/m8LlavlgZ/Sal98564sgqf9lYdy
VH2Vg7xYvihezGVqBPBe91vKHGqzJ/tSG3/013HLwCH7e1I/7wmAb3Z8uXyS
PcHJvwsg39lppeoH6/sb/4tA6b9W8PdD3akfugcw1/ZZKV/xV/ctELzlo1XU
Cdmv+GmB7GM5K6nT/nWFfxIdjB/+6lWsn9/y0T82DQUf8F6Hvr6Z5uAzw6nD
+66Hn/Z9Puq9eeG8F703CFd34/4/Dmd//s/6e3MuuYKnDQ6Xjn4D81Y7l8R+
r2Mi2fd2b+TcsXFpw0OOkv/bZs5Tdzee15gY+u6sLcytSucD9y6Snz63+w70
TZXzgdO+KKh8553MGVvlk59hIeUUx6ludGOe3rMIvIimu5U/rrzUXkXgVe7f
w3tk64vN8yxGvd13L+fjpVdzgRLiTx6A/1zYjffr31Ly7TyofD03dHn/lBb+
cxifjR/kZ5hYRvmVR/g+GW7g0p2tOtCco8fkM5NPOuvyygU4Ab/iHzf4MGcr
aL58Un6z+dhvu1RWfXia+UW8O3wn52rK5fxSfpIe+Mt1qCG/xK/AUbfpffes
qdzPbzTP9YCH+f07Wj8X5fPpyfev/S44+Yzv5TfuQf+yqC64Zcb3b3TKpu6v
x35150f8XZM8qBOyGwg/uUQdm279vfEjbsj9eedXeOnZnuRB/NtY+9LvrKsS
3vyuiGb0OzOuKg/CG33llQ85F+7/Jd6ptQ/Y+EWLV32Ng1ykLl70iVNbCRe9
oT7CC7xlZGvNl2/xXlT1xp9zdTv5Xt5FH3TNG71nh4/V199XDoUPfcrCTuB1
7R7Gv/aFs+93xU9UTz5mf6vmq7leN/RNtZ6C/zfzF/+zJ/XMw5fwmR/48e+O
+ox6MjQJ3Vycv/h1fehzE1Lwu+jkT3/Uu798C9NZt338lfcxEB1f/RzwfFu/
afxeB2v/zGUOssAPfLLdEOYOc5ykp/anbkwervupfjw1gPnj9FE6fz3gJe4K
hP/zYiw4YbKXw7w/Q4PkwzkBPt5LP/CKLUHwmc9OAh+eHehgXhBIH9pvEr6X
e4PQofd8lcszTTkRYeRBFwl5kzdk/KRiHPhVB8tPb4749vnRX/cOVp8+j7p3
UOE338f4AC/Qe12Evy8ZzD78/SLmNZ1L8PlNg/FPOL4U/8NTpcEldgXR759b
Di49oZzwjaBb6lt4Tw9XcKDvkw795Gre93GVHfSfQfgxdl+H3m1uNQd5CSHs
z/M28v4+qIWOuHMIuMGYLfCjqr6r/J0QPuebbfCdvmgAPhkQSp1s5/gYffsH
DvhUYTovdmu/auqAhxLBuZ+9X34pLR3oMMP0fQ6If9UGnfKtMPh7rQ/DXy3W
AfxtfJh00Ed430t0Qr+cF0SdcO8weNSR/4GrewQKHz7E+VKkM3nr/3oKB9un
3LSP8Qco68X7OHif8JPO3J9sX80vDokHZV233/uFgfhdbDjM/v+1dd2c86HK
7TqqvtW6bnJ9wuHVZx2B7/rd/8BdfwuHN+44TN+6vT268vkR0uEegq9evA28
yvnh5LP/uV++iy2Em0WAqzzbq/XW3MH7Hcp58W4cuOvwhg76zFB4uRO2gQd2
f4/crkDr840+Yxv4gGcDcPuO4crV2sL3d6/rQFcdgc+J5xbw3k21WT+Twtif
R61X//u28MZQzrXsNcq3quoQ7/KND63x1a0IzvlzKHOo1cvR79cq64BvH05f
cGEZ9e3WMtKPR+i9WMYc5MtSzE3qhMNjjFhEfk1kcfKwqoSSC7Z6HjhPyULg
1TaOaurs2eyHn8Y6mIeG4GNwaya82R+iHPgIhDEX+3imcJgo+Of3Q+CLVpim
+WYY+fJjQsDbz0+Er9sv2EEOZDA42MYJCZrfCC8NJe+s33j8XSf5ydcihOuP
x3IeHfB2cJ+CmeN0GCVdj8ebfC6jmxkOblzFjes2L9fwOofAq+xp7efGvzCA
PjF7ID4h+bPRaU6x/t74FX4uX9As5U0EyvdjAPVAxwzqriLi3/bpTT3vlApP
rLsfeHiNnvIVf6l+ypc5QrduykN/iv53sa/8gbtyLgQ9oT/N8tO8o4v0I4+Z
Sw7yob6d8z98Y+b9gx62hB/7/OUO8KLv3qfvcPKhT2/ZlvOr/R3lMVn7huGx
tUQPFXdD+Q6e+DnXailepQM/tBpevBezPlSekQPc4KkXPO1vmoNnnv4L3MzN
izmyVxNyjsLln/PcHb50iYaay18B3yho1VHGN+p9cuF9Lysfx135fQ3oy767
BK770Kobzf2QXubuD/Ac7itva1Zd/A1efi+fc3fOx8A64l1/C94y3J358i/v
iOdwgT6umzt1Tsua8kP4WrnnbnxOxerKQftSeVL54M0mV1Fu6VnlQ7lp3lGJ
fv/YKd1PV3CVCeXpj+qckM+Vs/LyytHPzj5KPfOvdd3kO5Th3Dl0hPzK4i7U
bxml4U/2PEzfetRFPiEl5ZN/AL7xIhfN8Utw/g7dx5y3jht97qXi4gHuU36Z
G7yXzOLU/yP2qR+RX/o7RelfCu5VXpj+/nRh/btx4DDV1TfZfAzj57FTfm5u
uv8F5Q+zgzo/wxX9RYn89AU/bsPvboMrPs9PYlg/q7aI/+bK/jAqUnrDzcpP
UT/1fhTnpssW+ou33eXzE8X6bL9FvCYX+tOxYfiRjl2PP+E/LtJxhIDX/b6O
/PTjbuiA/gsFv52/Xvprd+Ymf4dSl/Zfzz5TxFM5g+HMSf9ex7zmc3fpdIKF
h7zi23hQt68IoQ7Pvyb+9fluflcI+0+htbrPXvyufiHMVcevUd69l/zng8Fd
f1sNbvmFl9ZnsPy4VvG7RnopbzEIP+01q3gvJnlxf04HoR/psUo6TS/wJY8A
1fMr4ane9qSuuOUnnwrxeFd6yvfDT7rO5fRlFT01T/Gj/klaiv9VAS/W/0hf
zqnGy+hTwr3kD+OrfI2l0qd7io/kIz72Yvj/66z7afACb3Cq7QvV/+rvV3np
/iwUnulBXfezF3MHp4XykfNgrvqFB8+rm3jCRdzpO067w79dME94tTs49mx3
cLMN89Cbj3bHt6eXO/2+9zzpLt3ZD+PyqY6aC654zZ37+YW7dKlzeY65nqof
3OWXMh99cbSX/LI82McWzgdXmet9S/eVuU+zheRxbPABL/X3oW6JWESfGOpH
v1DRJ0HzW32+H/y3Zr7iDS5BfxfvB85WyQ+91Q9LuD/f+Mq3zVe5xovjX/Mi
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
yk84zCJ9FHOT4ws1F47Ap/FJRf1di/HRTY+ywPetKH+SJdK9xgqXsGGu2meF
6pNK0gXbCpdeTV88IlX+kzbKuVsjXk06PgOXKzJPPLIGnORIZXKoa1YEZ7u4
Vvn1VZUzpc8DN3DeXqsOv86qIj4MRTeBk+yqjU52ZEXloW9l/XxbH59SS0Xx
w7crv7WxcJKK4qXs4F7b2xSd+FPh+Z130vcZfEuz77Ki7266C3zvrfiWc62o
A+N2q99sBw9tf1nlW+3FD7ZgB3DRoFLydd+lvJX24tMWYi7z8xb5cGZpnRdS
fbtF+Exr8H9P+SKO2iUefjvxCb/MtfeJH97RAl5oJZ+lveTaXG4HjjetvHxT
9+CXsqENP5+3Avtr8W7hkDl/r3EPRVVEX1N0l/KPmoG7Rliji5+8U7lmjeH7
nbChfuu9A32BUyN092Vt4IkN2cY+zapnod60gVd8exPPv3RteN3Wtpw/jTYp
T6cmz2GlLXPn+A3oFH6sZjHPl1x28kNYz7ndJVP+FbbwZMau4TmnyA92og06
spmrxHtMkc+qnfzhV4iXlaz1bMPvr7FUuEcsOVZXbMTf+Ilz4G6Ucrhs0aHM
WCwcI5L31c4WnPDtAvk3huEL4WkNHt5xvnDOIAt6DRvm11PmcT6fChAf1RZc
pdg86fj8LeY9kcuWuv3dbP29PvDJM22U7zkLnna0p3BCO57/vpnaX/IBdreX
P9JM6uci7vh1tHSQ78F08SRdLcwx7ORLNpXvb/BLzXmWLf2XgZcadccfdvjl
3raRv/p49ePW4PwN7egjBoylj55bwWLWScVtmUfkGo0/xtYy+AAY94WJR42k
37xa+itOa+qEh+NLcLsEvPd5NtQ5sUPw2/fIuY9MX8Qvdekg+QUVYf3vspVe
b4Dur8Lcm91t8J140F+5OQW4j/LbiOfc56b8CllXNyviO9Gpl/ypcu5rkz9h
Ix/1HtzvbfPwe9qo3/zclXnlx0/yR9J5mNlZuqd/yWm6ormndQf6o03/4AtU
oJzmYm3xp9rxRvVPefXFbeEPVHjDXHttBfn8tJFP+yv5dpZjrrGtFf1C47/h
s90ohx6wewvWlfVT8MkfrVg/q5pRJwx7pH7QSj4JTai3feWPuq489diaJsKx
H4LjFagI/nynMfvo7Z/0xXkrwtsp3lj6uAfisZQTL7cevJ05v4MzhFvhd3q3
tp7Dbfl3WXEedqqpXL/bzOunltW+qEZf/+AG/gYTy3KffshUPuN1+tDiZejL
7DLkM3mVOvZuGfxPulRm/Ve6Cn91VFnpcPX5H7/As2pgRV+zJE040mV4CFXL
sg57pNAHlb0Ab2RxWfENkoWPned7ZgjneZOkeu+s8gWswPH+SdTPnxW/14r9
WD1R/oenwetWiU91NU680JPSG4p/bhUvn/yT9HFTyonHFSs943Fw5n/K4qtf
Opq5zPMjzP0Ty/Gch0TynNse/focTBwvnLlb/cPUzzWtNI8IU47bIengrKRT
DtN+OUBdfaq88sXCee/vDoFvr6wgfUcE/XjwYXz+B36Zp4ey3wccQJe3WDw3
rxD1j3vlB1Veupgg+J+Gz5jZp5YT/h+kOfge8WYrwIcMCgLvOrsHPMq6In1Z
6yD5P++R/0ZFcJK24gV9v5t9erYi+cg9gjiHF++m32wsXKhcIPvOYTf68Vlf
5tH+6t93KC+4Arirp490E9ul862g/GUf+tnI7ei/RlXU/MJHvJrt8CoPVZRf
mS/z8UnbNL+wVr3hIzx2G32oce+b/a0vvgEbtqkftIHHO8JHfvJbeZ5lrXlu
tbzBUXtvYr/72IBLTFSu2cLN+AQe+HLO+0jXvxke8glr+KWuXtSHzzehmztQ
Xv27O/XetvXCVcprXbkJr14n/mRF9Vme8MTCN9KvLa2o/B131s+8DfBMjHPb
nOO48zwbrpePdEX5t7sp13I9OsEsG+mbPJQHtxFd7f/s5JvnJV964efL7dQX
eMOveLkJP5BWDspj9WGut2iL5lAO+DMf8OX8TNwqvxEn8N4gf+aM/27D/2Ss
A7j0HPHA321Bt1jBiXtwmT/1vPd2+Sc7ofNtEgAvpd524b1O4E57/PXetwuf
d5Rvpx+8Godt4Lc+jqy3eX7q37ehp1jrIB6gv3Sv2+D9TnSEp+3sD7/C+H/N
fDwndGFJAczN929nLvbZiTnUaH3Ptzvl8+xEvXQwQDp96YI3OHL+tAjQPbKT
8+2ag+bpAapPdqBzX+AIDjkjgP7LyEkx9cj6PQ5Buqd2iTfrwPz0cQB8jEs7
lc/uAJ7QKAhcd9lOzU0cOVeDg5UjuVvzCAfq5KHB9Hfuu+GN73DgvdgEk+vd
ebdySRw1JwqhLj2xWzlxDuAtJUPQ45zeLT9eR+W9hgkn3Mu+PunIOVk4TP5X
e+HHtnOizz0VznMouJ96xlhvRpvQKly4zQHe42NHcJWWEcwjph6U7ttBeS4R
zIk2HcJneK8D8+tfIuX3e1h6HCfxyqLE2zkqvqKj8rxi6DfDjwnPceJcehIL
ztPsBOfkcnv5RMXKp/GY5sv28CfrxVKPTci570w/Qgf6uLoJPLfHJ8k/autE
/bYmSf5mZ9l3PzhSP3xO0v97Fhy4rwN9R/ck+Iclz+KfOcmBc8mqEnyVj2f5
nscdpPuuhO5s0Hmdzw7gEvVTlQ91Afz/oSM8qHVp3Js/XKa+cnJizu5URXXp
L5xX3R2Fk2eIt39NenB75lmGHsecl1xl7mnvIJ5VJnjmGgu4+nM7cJ7XVZlr
V78h/M1O/jnVwJN/uCndhC3345IazP3dfwXf+9ZeOWi11C/8pnvQnnv8WR3h
Y3c4hz/awyuIrgd+OO3eNepRe+GQ9TXfvwc+PMqOPq5WA/JlPO/LP9ZWOH9D
4cD3xc+0hz//obHmuQ/RU5R2kD6lGbk/hR6zT41zzOxXW6AHSfwb/v9iB/ZF
UivmMuOf4ddUzkl1ZhvlWL3knn1sz3uPacN8eeML6qWNDvKNact89o9XzOm8
HeGDte/AubH7LT6opezQ+29pTx/391tw9aK28GDzdOS8ffKWedDftvy9uzrB
f0v8QL0Rasf3d+oq/sxH/Gy32XM/vujO3Gdxbgv/v718xXsJV8xrIR/DXny8
3uh5R30Dz+0PR+q3c9noN2cUko+fE/hq4CCtt6LotZMchPsNgh+bv6h8Au2F
ow6kr7lZDJznvb3qhKGshx9KoGv2dKSu3jpcPPwy6DGPOYBDThwpvU8Z9K1d
HOnT146WT0s5i4mz3HWSX8cE5vtnrOHn1Nf+ej9B/mN24HvVdP9aJgnnzPnc
qGfS7eVLP1l6Xgd4qtPsVW9MpS7t6wQ/ylj/5j0+Db99D1f5BDpINzST/nGG
OzhPeUf147PBu+Z6g68a39N833N5PjZ+PJ+V9sw3B8yFp3fLX75/duIvzQO3
9A20kGdhD3+494/0d1Zhws3slVe4CF3M6ggLvnG2zB0OL2JOlDuK57nYWj5p
P0mnk/O5cR61sJE//888h9mx8rEUrrttud77lzxuW86931dRr75PxU/V1o57
2Xudzo3K5NSst4N/3mQ9fKcHmeiXP9rAC5q5gXu8VDVwzhf6niM3cB91rgEP
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
ST42B5UzkgXu19sJPOf+Xuq3ji3ACQc6CycUz/ZBM3KFDjsrP303OQuBTfh7
f3eGj7FnF3OT+w3hxxbI2UfG/d94p+73BsoBd+Xev7Qd/PlWXXTumzVHW7sV
fVaJ2sybCrlyDhfZrLlzNfT7K13gmcdukM43A77fJ2f8rNauYx/9ko4PQB9X
1TlrlfeXRk7WAVfW2+I16Kb/l2Ix674mrsoPXan7Lonn/Ksb7+XpSuG3ieTK
LXNXftkK+osX8dxTEW7gEguWKpc2Rv7MHugU8i6RX1a0hXmCm3h9i/Wcw1mf
i93gEbVdwP9bMoTcKFc3eJL5ftR5mHOumnW3m3RP8zTvCOB+aS8+wJi58PfO
+EqP4CE+8P/EC/LWfef+FS81/hnnAd6404399WiGfGtd4ZNPdeM+nTAd/O2e
Mznya93oZx2naq7hBK/SeO9GfVpyiviuDhbze/l4MOfqPEk5FHbcUx1Vdw2c
JB9XW/KkznjIJ2285krW8DlD3ZV/Okb5OOUt8MB0P/qNlm9VOdZzkjtzUueR
0nuW4ZyJcwefHzdcvril5TvqxucnhnG/JJfE5/aEG7jciSHieRbXPnVXPTxY
fLNi3LPLcn7e9JUcoLq0sHDynHVu4vr9lFP8rc5PF+WA9BGv5hvukbrOypXo
pVybnHrMxPlcmZ869WI9/JxX560bOVOZvZXLmVfzCw+9r17U25fyKD/Rgzqw
fE/l4ea24I/pzvwl4f/xWs1/uyovvrPmBe/BFW+7qU7rKH+z9/IpcoUHVaK9
7q+34Kh79TzbtwO/2vBG/oRu4L1l2grPf0UfusIFnGRGK/Z1vxf4I9V2hX9l
+MCbdetz9HqHVT+Mbkk/+M8z9JtV3HRfNGcO/urJtf/qCvPebkYdOOwJvmSN
3TlnjjfjPt34WPpKredJTTVXeiy+rrt8SBpLz/sXvME/3eDzb2vI3PDGg2v/
rSuzrlUfFHQfnWYXV/rfc3WZT3nek6+aq/RQdelDO96Vzt2Vecr8WuDzC+6A
kxvntpkrWlP6l9vysRd++Ly6cltuib/qAp6wvjp+FFa/godccFc+YE3lLt2G
92LU26b+XPkCu26D91bzwIe5eA3mERm34HVcdFefXp33eO0GPKjeHvB/VlUV
DnbjK//N9DPLlM7dwu+fIhzvdob8Oizi13nK1zcT/s8SC3lbtbzkP5MpPy4L
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
M2T9jm9qy1D0FwfrcF+X+R2dXa1Q8ZTqigdyFz+EKmHScdcRDnxXfXoI98uV
WvKduC0eeCi6Ktuc72/+fb9Jhx6i319Luca34W/nDWGuZ12TutfjtvhjQeIB
Vleu0K/0+zMD5Ytbjf1iexPfyH0B4glUFX5145r5nscJv5qQyX3x73X85ey/
4IqZ1OFdLOyXlED5R2Wq/7qOLvhUMDhM3urwmdvchGf7KkT4eXXds7/K7zRE
v6cGeMvtm/Bafw1V/1WDuUnpW+imncPB2w/Vkv/DbZ5zvzDwxg018THeeAs9
r02Y9m9NcOnav4IDlAsTrlWT3z/zV/T1HUPlt19D/sY3hSeH0S+8qSGfyV/5
PvnCwPk716S+ynuLPCzvMOqrUjXFX7olfDuUv9fA34zztf+v+Db8FEY986gm
z8HuNnjvhVDNi2vic/LbLXwFB4Qqv74GPNtqt/EVuR8iP9Ka1Nt5b4PrbgrV
3LYWdd3I31i3E0LgqX5XC9/4CreV6xdKnX+mJnXmmdvw3PqFgmsdq83z3/Qb
uGivUOqNsNqqu+7At/wjBP3Oxto8nxG/ya8vjHO+Qx3u2Tx3mX9Fh8HPXF9X
OpG7+G+sD4MXlFWX+cjru5zn7UKEM9fh3A64o3yiMPpNY1+bePvv8HKNc8DE
/esLJ7yHn+egMOrkUfU5r57cY306hEqHUh8fnnb3wEt9I8APv20EDjD5T+6d
2ZH4uN5rgp403yN8bE5HwoePbKa68TG5kPkjmYP0bkZ9lZ3zuXGf14qUf2wz
6ZWe6D6KFL+3BXOHB0/5nglR1A8bWzJ3uPkMX80/w/n5iJbKT5T/+a5w7sc+
LeXv/Qwdx+ow4eStpFN+Jjw8DNzpfCuttxfwLRtoH13MYj674AX4fPEw4TZZ
qrdfSmcRJp5bG+V0v9L3D6OvT2jLvKPRG/kPh8u3uT198bO3zG1XhYlX2V6+
Pe/Etw/VedXxpllX3nnHudcsVPOOTvC75nyQD3wIfJKgLvKj+5f7okao7pcu
9DV1PoFzHgthvubTjfso5DO8/SYhzMuGd1fuUm76hXnByj3sobz13PAiFgTL
x6OneDJ58A+8FIQur2Av8JaUvHy+KRB+9cae5I+fzwv/56Y/uM2iXsr3yQtf
JdSf/uVyL+mn8oEjFQvQz/elvw74Fn3ov/6qW/pp3RaEp5cvQD7n2ey7OoXg
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
/LyJm0WgX3MNZY5s+Uk6oChw/l2hrIdz8otrG8t6OBaqvns5f9fbOPqRmdIj
FF5JnX8pUXyzcObFn1ZLf1eJOn9/OD4SK9eh5xqu/OW3oZoXrOP3zEjjfbmF
8nsGr5fvTWUL6y5Uc6KN8OL+rILecGKweIYb8J/snqHnGcR8Oe8m6o1WmdLZ
BSoPfRNzz2PV4CMFBoJPGrkqRp9SqKZysvyV87tF+HBNcKpG/vKB3K58qDrM
HRr6i8+5Q/VPfQs5c77cj3d2gnOGNhCf1of7Zd8u5b02Qj9r+AmYz2Ov+PlN
6O/CfaX3348+5XJz+IqlfZU/eIhzNT2L/O7ZXvKRPiTeZhs+t/KCZ+t+VP5O
7Sz/+VqbesDjwr07sa4CvfR9Tgj368zPG/plk1d3jHmKbRfeV6bytgKPo8/t
mvO5MX8zdPrGPeN4gvohV3d8AKydNQ89Ce9oXA/ui3HKd846pXOpN/2XjZPe
1xnVIf3QNRv5PiYOfUa+tQPEa7KjzrE9wzm2ZiDzpoa29FMvT9MnLhli4b6X
Dt3vlHQig9Hjdy7DfHnOUXQK+QYx12hVVPnsB4Tr9gMPjCyOfvD1YfTjuQbR
v3ex0jxCPMxTQ5WHbsP7rXcOX/H5I8AJH9uDL025AN4+eoRyyZ3Ak2dckJ/2
8K/5KSZ/6rz0WUPAYY65oCN7fE66+4GcJ+Ncwbu6nBOPUbjuYvEzT57Ve+lv
we/vi2/eac2JevN5XuU/njtBHRLbU/e+p/zYT9JnPcp5v6Z/rjfnWNOT8kPr
Tp57lnwqJh6X/rELc43cPrfk1w9PqUwXzpPZ3srRO8p9MbOjcBUf6a0Og3e1
a8c+qu8lvfB+4WmtOE+KSDdqJV70ohbgZiV85LO0j3qyeXPwEFtfdFs/7IFf
d60p+6uedKZ9dpNjUruxzlt//q7Vu/m7PBvLRyUAfpr1bnCnsw2VUy8947Zd
/L/xDaXnDYTPM3OH9JX10FkYeKPxnk5sk968rgX+fpD4JFvol8vX+vr7zXNu
EzylTOn62wdJf7RR+T5VxQMPlr/EeuHYmeQQHQkWv3c959jjKsqLDwevTl7P
c/asAo/aK5w6duFa3adp8NsbCG/Zv4q84A+V5Msaqn52hebmSfBvr4dR761Y
Th1YN5HvMyqcOdSJZZw/f8ez/tt+wa+WygcpTnPncOV3L1EfFKN5TYT8On5S
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
VFXeonJMhhZhfwVlgjO/6Kf9WwR8LCNTc4ps6eyKggNsrUpdZD8A3k7l76Sb
y5A/TDbr6kpRzoe8mV/fu3kuFIMfaJ9Jn15uoM7h78Ah/8hg3pE4UH5fxdW/
ZGidD/r6ubmvMpULNlh+HSWFn1TT+hmKP9i40jq3q3G/jxjG97lfRj7/VaWr
HQav8moZ+YFXFT9KP59Slt/zJAN+Ttth4oWWka6tCnh7p2H0QT3Kaq5URbrm
YfBbSpWFt1O0Cvfs8mGc25Ot0BkNqALOs2KE5obl1F9Xpn6zGkE/slA+Qr3T
8R/rM0L6gvLUmW/T6NPHjFDfWkG6p8ryHxsNvj3dWvkplZWHO4a59jsbrZN0
5o+nx8h3XX6Mn1Op24+NBq9ztKV/+SGVvvv8WPr9JnbUP86p3Pv7xmlO58C9
UCQFvY9lPHjUHXvmBfNSlQszUXk3Tswjxqeil9wxGTy8sgvnZMtU+tlWU5VD
50b/6Jgqnuc0zo0GbprfpcIffjeNe9/BQz5yqfRruWZynsR54r/U/QuePwP+
fCsv8UWTtd9n4N8V6cm9nJQov6bp4n96sk7SkpT78z242Rpv+VAl6X6ZRR3b
1Zd+xyVJOt//sd7q+SnfOZG6rsf/lLMToPeeAM5v5OMY5/HVQOpD4+fNPMh5
yo9WTndSgvLm5nP+/xoMr7J0gnK75tMH9Qpl3a6Jl05kgfq+cNZhnQTllS8S
Xyiauis6Qd//Z+qcrBjxQ+LlY/az5l+x5JOmJkgPtQz+8LR4+v3nwsO3L5cv
R5LFXKcNvtTP6psqJQtniBf/YaX01Cn4cbWJF196DfPW2anwW95LJ3J/DfPZ
o+ngOV5xPOeLa7nH96Sjqx0fi5+D0Q+a/McM6tizsazbGxvQCRaoCj8nV5z0
mJvEL6pOvsyLGPFON8tvvzr9eJtY5rZ/bxEvtxb1ZK8YztUb2zS3ra0cHOl6
3uzQXLW+/Cii6Y+MftzkddbHB8AnWrzlXfJfbUg+Ralo+SB90Xc3Yo62KhIe
8vbd8JybNFZOUzj3UZs93C8LG8sfI5x1VWAfuqouzeB7dI9kHRY5JDykFbjr
m1Dxe/cr11W55B+CwUPyHVA90JJ+/1SI8pcP4V/xTxvqQOPnzRy3I8pfbkf/
MjZY+VZHpTvrAD9/ZYDwz6PMuwt3ABcNly/W56Ost46dlN/tLx71CXKyMrpa
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
fdNLOSQF8JtHK+hrPu+uPJZC6oquC9iPrT0179KKf3Dtws55i0b/Z9XcyUrW
SbqbeHkr/cj3lZr/21v8RZHmF1RJ39IXf8eWInDmX6s1b85dvrwi5XrVwIcO
9QCfrLMq/6pG/LU7/ex1K+fbnhrqwBEe+KmfKyTXZWGNfAceqg/zlTderf7I
g7p94d3zvBb+YqyH9KUF6Df866gD3/JEJ3OgQLn99fDdVV7ghDkF5PDY6+lb
X/KWjylPOX51mlvthT+0V45y2mvR1Xws38pXueAqbzR8pDkKrP/PctHzlDnB
zbr7kUM1IRdcZWmjdJt+7PeUHHDLGU7O7d+byLfckU2/dqtR+KoJnmh9tvwC
yqX/0Uyf2JbF5wdb8Kt2C9Ach2zqoljlMo0K4vx8PEfn6lLNDQ8R351Nvk3I
MvHRoeij/jEI/OrJ5fBWHqHi67Ok31guX1i4cquylH++ivXjjGC//2ug+ogV
yrOKoH6bmYkuq3wl9VVWhHLgM5Rvs5K+yR5J/T8lg/W8YzU+8YFR8vtnoA/Z
uIb5CMP6o/MckgHvGb2O9WkeID4iXXOE18EXL44VTptO3fXzep1LccKp0qTb
2QDecipe91EaOpO/tvL8/5UgnjGN8/Nmq+YXJMlnl6Zc1jbO+fXJypGzaB2+
Co70nYVzIOxO/Wzwmlvxp49Nw48/I5X9+Mdt5Iv+MaOzHjZyvnfAy0wYJJ5U
9fOx17mXP85mzo5buuZTvym/Z4547TTh6juFy+UJl0uVf3kX58/SfHi9Igvv
PWwXOOH1AvDYsynwU665OcZzKaTf6ZkC7vHv3fCMJUXKP0xGn39gL7nxi2zw
g9OT4bu/2oduf3Ox+ohE+Hrnftbn8WL4OO9kzdE7KL9MGf6d/ybJd3ZYvoPB
qreTqIv6HFWO2dOam5OAzv/0UXCP0KH43SbFS4dwlP7XNTfcyPuIo28NPcZ9
Oudprf9Y1kPkcc07eIZ9NyRW/oUTvPe6Z6Uzj+FeXt0unclI8Wux6DlPn+b7
Dx6t81D+RI/Tms/4vOYC90fflX4GvZxtjHxJ/aUzPKu5CS/IrxGtc/ic5v68
AK9xKxI+aFSHcJ6J3HfzwtFXu+b7GHlnEzWPPlzzCs8Lf5vUmXdq+MgvgLeP
nIxO6VQw/Nf2u3mSU6UnCdY9dUX67enSuQWBG1deVv7eDM7PS4HSrV0VTj6z
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
/1upW7Y1q54JEB9UCD45tVm+MDPn3uZ87vfQZnjhQ2bqvQsF6jcXaT8GaY5k
AfV51iLleARR93bk8xyci8lr8gwGN87Ol49gMfj2/BD4TRfvZuSQLxEvHEJf
7+LdXOtw8xLpVULhU1Kl5x+zDJx2TRg+oCM54PlnlokHDCcns0eOzpkV9He7
I6h/fs6WD3QlePWpKOrYsdnSFa/Gn/tcNPhk3xzwlrlr4FW3DiDHyT1H/e86
dFDvxFDPp2YrJ20turtXYrmvzw1Szsk65SjGMt/Zlddh4Lfrqf+tccpZGsi9
/NF6zs+RcaoP79R1hi5pg3Lz4pXXl6n/a6PmNCXIt5iBLsXSKv1hMjjGhHT6
u99aNTcnifzDWen0s7s38b7us6DL/VM6eEKXzfLLpMqPkA5PGr5Z93Wa5hOl
w6e7csCM3Kd05cCnqr/bqvmPmdxHmanwp5teQ5c7YyB9ep80cOCGHaozs5WX
mKG8yjc1Dz2vMw/Hdb7/spPzdkUBeNf5NOqr595C/3OwQD6LVPDnb96SLs6q
vErpabvsYZ/GF+GHvTdV85j2gD9/ZkNP2z8VfOnrfeTljihmPY9XH2HeLxyg
pNNH5jpH39uvPqIEvCIlGV1NxAHNnyoVDpwkHfsh4cBl+BqSk8HlZh0mr7Vg
CLjZkETWSeoR8iL+OwSc5EICubjPHyUP9tthwp3iuY+CjivPdjg+rMHKAZh0
HPwq+Vnq54fk0085rtynZ9CxTI6Rv/64dJsj6EPvi1Ef2o5/4duRzBeuidGc
+lOsh+Dnue9c/nqjTz1DvfryWM2J6K9zW7ho/Lj30UtFy8d0Vs9hPOfDr1E8
B69z2kcTpZuKVC5lh9bnRPEdEfJrdEivPom+1RJGns+PHdKPTeL5uIUpj/oC
68TtJfwpL4WAJ7ddVJ8yFTznRKDqkIush79PA29JD0QnefEyv/+DGfy//zIr
N/KS8oteUT6DWTzjFdabK/fSWC8m9P/7rkhXPId1st6P73/jKnkC0XNZDwEm
fFhBN+AR3hDO+Zgf/PIs+bjTF2qOsxf9fsn1j8j7X0gfPaAfuu6Q69ovC9VH
92V9fnxVvt0q3bN9+HzNNXwNwTXgYGt70Rc/cZX6ZE+t/LN/kE7pknSh1dS3
6U+qHjivucxVyuntgp6k+JT0yRXcm3se4f8d38H3+amK97XnKd3XV+gj6uvk
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
Pg1e+3szONjODvCHqinomn4XpFzNDnLXX56inLEg+uJBHcJXJ3XmhRrzDc4q
N+9F/t8ZmoPW4xz10qKJuqeUG3z6DHoD3wmapxOme+e0+IXxmucVzv3l8ssb
uNU45vRtCxfPclL5YGM0r0o8S0a7/GJjNO8ginr+4gnhqKPla4sGb3n8uHQR
o6TviiKXyesY+3f8CNb/7ihyG+47onkoz/B3K6KFMx+WD24Y/Mvn0pHWHtIc
5GHSK8bIF3BIeoOh/N25MfJp7pffZzD93ag4cn7uPSh+fLD8epprE7afczWm
HB9Kt3j6lHl7Na+tRDrnBHyCLXs4D+Mc6GRWJ6pO3oNf0r+Y77k8WfnMe/A/
Vhfj5xqYjE+t9274wfk21Q+J0pW9ib5iX6H8Mom6T1+H1/ssH33a8BTq5ylv
SFdmpd/0TBbO/LryY/NZVweU83NtO3zfX/I4ZxKSlT+zXTrbXPb1TIt8oK+p
XsoVb5ukPNIt9F+ZmcqhSpaPdbP0MJnkXXRNAR9z4Z/G+s1QroJF/MWrwkUz
dP6nSOfThl+7Pk04f5ru0zbyBkPSwe2HpTNv6+02+utf0+ChFmewX+5vk842
XTmWGdynh1ulx7AotzxDuY4bWP8TLcJnMvXeN9BHp6YIdxoo3mGd9LSqn8OE
rzatRd/yRIJyLAcqr2at5u4lgLONHkReX8Q65X7HC8/PAj9MW0PfURSPLihu
EPzRsNWqKwaoH8zq7Dtc9cDNO58bOZRZ1Nuxq9Bb7uyvuTk5nf2LgRv0J2dg
ezY4Q+wKvs9PUfLDZsPjPLIMf7d/JH93UTbr2TX30+jHIlnn53J03y1T3x0p
nj2HfvabJcppDH8f/CyPvnLKEvmJIuTLyNUcxsXo/V4Mw195Sn3Njhb0Tk+H
ghv8Po86//0W8dfB4NLb8lkPPsoHeDwUH9OAfPRCcxeRP/ZQiOa9FohPbIa/
u3Xn9xj1u/IG9zVprmWA5gQVKLe2CTxzY6D6hXzN125Cfz41AJ/aDwXiyxrB
kboHoq9zFmhdOaV7NAv3K9LcnCbNEw/Eh/6ulfpkUBP7OjhQOSFW+JTlTuqu
7ACef5B8r/c10dd/HECez0S78jkb1b8Hsr/mFqtOayJf+pVA+IsnSshx+lMT
/cuzQeClr9k7cZK7+iWjjiqmrujbqFzfAOke7ZobKNz4IbN0ZQ7lTjh5/hsD
xP860BN2baTOvMfMve/SARr6bSfv96q/fH8O5Rg4lc/jr7m6pcIhnZpja6af
9ZFusJdTOkZ/6VpLyRfa5GSe5oNmzRst0Txl6ZDfNSlfq4y6q72R799u5hwb
Vkof1+okR+uyiRyG4jL0z0Odyn/zhxcIL5cOthG/5Bh/6S7KVFc4xZ+aVAeW
ch+92CBdli9+k/V6X9714l980X92KeM8/EXP7XGTfILl0jk4NV/Mn76guYzn
8x/NofMwcf53K5cOvJF9ne8Pr32zTPmEjcKj/OWPK1Uf1MA5v93E/XVvCf3L
D/XiL/w0r6e4c46JsT59NV/bAR7+VAO67mA/+JGxJZ1zSQwdlYnz6sdi/B1V
9eprpCePclBvT67X/A6T9rWDOTIm4e1Pm8CRejrwsRbXi8c3KZfJgS9jVwO8
UrFJ+joH57l3g/hZk96jnXOguIE8/Dw/+MS+0qMmOMElHjCDo/Z2KMemUXll
/sKTHcIxxLP8jxneeU4xOMPbjZ3r3/ClFqMbd70XQ3dkRu8026Y8Hye+oYf9
wZE22ZXv3YQu4ohZeWLSgd/TDJ9+y6x+3EZex+eNwjPN0nPa8IXZmjWPKUA6
Xjs6hEdauH9/CFI+iY18iektnD8fBskvY9PcuhbVV8Garyrc8m8t1DMVwfJ5
2YTnC7ecHkr/ftIqPdsizY8LQQc70aqchBZw712h8OYmKznSDy7mHMsPhUf7
axG/v8dS6cDDO3FUQ0+3HHy7NFLnZxF8686l1KvTIrUfrfC5c5cJT47k/qot
lI94GTzInyOpH74WHzd5hXzr0ZrHZJU+cKVycQegqyy1gof3Xi0ePwYf6IZC
5YuuEm4TK91LvnSPq8ipmxcjPCQPXaL7Kt57RSz6xvhc+X1WaT5mrHTdudIP
r6aenB7Hzw/OEe+/lv63PF7zdnOUo7VWeukk1XtZ4jHXkQvxYYLwomzVt+vl
p07iftyXBX86daPylJLR8dZk6TlvpM4falFu3iDppVupczpSwFddcwCNfPyN
wu0t0oFk4EM/06rcXQs4w8YM5cpu0hyNNHBdz3Tq7fJN9F9rUuHFdqfhi7yv
TXxihu6pdOr/K5vZF48PREe3IE1zDTbLdzMIPOSRNHKxXPoEI5dlkPw7qeDn
17bQJy7I6pwnZeQBbkPn/3i25g6kCPfYRv0QkCdfTzJ1V8N25fzk0V+sSFae
4Q7l2ebzfXIt+K2idtLvz7GCF3mmau7wW3z/g3Z86zdSOP+bdilXzS4fepJ4
jbfks7PLX5lEPlLrbnC5HprnOzsRXcf23Z0+QcPHmii8ZS+ff1nC+f/POHTp
8XtUL5Wizz8fBz7Zbx96iQ1l0uHEUyd/sF/5HkOU4xdPX7b7EDjPD0N1LySQ
Hxt4RP7c4ZqnE48ve9Qx+L72Z9TXJ3BfbDouP9Qo6QPjqMe826VDGKX3Ekce
3Yh24Xujwffi7s69bed7to1GL307Gtx+5AnhJM+znk0R3MvLj8Fj+o/i/9oR
Dn7ie4Jz7MDz1ANhEapLT3J/BY8T7h2m+SbtnP+m8ejeu4QJvz2l+TUvaI5D
KHVa/WnN7ZqEX2BPCHh7y1n6yozJ+Iu3yIc+86zmik7h/5odQL7cc2fhQfZP
Vg6Ymb6g9KxyUV5iv4f4oweY2KFcvqn4QR7w47xyniNfaMEMcMjXvDnPF0iX
2H0G+MArXtTVXh2a6/0yfd9pT80zPU9u7YlXqFuO9kOfufy85pPOQo/U04P9
+8kF6X9mKyetr3R0F+XPnYtO0t6Xcy/sMrjoqQrNZe6tnMyL4Gnt85Xb0FNz
Ui4qV2S+csm607cWXGA/llVyv594Urh0B+f5rwvkS3pMuVtnwU96Virvuiv1
j8unbPg/F4L///Cgzo2T8oMvVE77PcyVGHhU81/u/F//B4UBLgs=
    "], {{0, 224}, {224, 
    0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{224, 224},
  PlotRange->{{0, 224}, {0, 224}}]], "Output",
 CellChangeTimes->{
  3.708044318677923*^9, {3.70804436715907*^9, 3.708044387966243*^9}, 
   3.708100086863428*^9, 3.708100116901751*^9, 3.7081084747577333`*^9, 
   3.7081110731505327`*^9, 
   3.708115375098049*^9},ExpressionUUID->"6c757653-476f-4c25-97d4-\
1429a3e569f2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Chopped last 4 layers", "Subsection",
 CellChangeTimes->{{3.708041699617572*^9, 
  3.7080417102288713`*^9}},ExpressionUUID->"30709984-d244-4985-b80f-\
3741c6cd1c87"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetReplacePart", "[", 
  RowBox[{
   RowBox[{"Take", "[", 
    RowBox[{"net", ",", "\"\<5c\>\""}], "]"}], ",", 
   RowBox[{"\"\<Input\>\"", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "256", ",", "256"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.708016799196361*^9, 3.708016801857304*^9}, {
  3.708016910451804*^9, 
  3.708016944901021*^9}},ExpressionUUID->"4cfb2756-e616-424b-8f0c-\
5c190726dc04"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "conv1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{64, 3, 7, 7}], "Biases" -> 
               None], "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
               "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
               "$OutputSize" -> {128, 128}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]]],
            "bn_conv1" -> 
           Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
               NeuralNetworks`Private`DummyRawArray[{64}], "MovingVariance" -> 
               NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
               NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 128, 128}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]]],
            "conv1_relu" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 128, 128}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 128, 128}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]]],
            "pool1_pad" -> 
           Association[
            "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
               "Fixed", "Rank" -> 3, "$InputSize" -> {64, 128, 128}, 
               "$OutputSize" -> {64, 129, 129}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 128, 128}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 129, 129}, NeuralNetworks`RealT]]],
            "pool1" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 64, "$InputSize" -> {129, 129}, 
               "$OutputSize" -> {64, 64}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 129, 129}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 64, 64}, NeuralNetworks`RealT]]], 
           "2a" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 64, 64}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res2a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res2a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_relu", "Outputs", "Output"]}], "2b" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 64, 64}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res2b_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res2b", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2b_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_relu", "Outputs", "Output"]}], "2c" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 64, 64}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res2c_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res2c", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2c_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_relu", "Outputs", "Output"]}], "3a" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_relu", "Outputs", "Output"]}], "3b1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3b1_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3b1", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3b1_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3b1", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_relu", "Outputs", "Output"]}], "3b2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3b2_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3b2", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3b2_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3b2", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_relu", "Outputs", "Output"]}], "3b3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3b3_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3b3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3b3_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3b3", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_relu", "Outputs", "Output"]}], "4a" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_relu", "Outputs", "Output"]}], "4b1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b1_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b1", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b1_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b1", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_relu", "Outputs", "Output"]}], "4b2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b2_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b2", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b2_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b2", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_relu", "Outputs", "Output"]}], "4b3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b3_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b3_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b3", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_relu", "Outputs", "Output"]}], "4b4" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b4_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b4", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b4_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b4", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_relu", "Outputs", "Output"]}], "4b5" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b5_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b5", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b5_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b5", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_relu", "Outputs", "Output"]}], "4b6" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b6_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b6", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b6_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b6", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_relu", "Outputs", "Output"]}], "4b7" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b7_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b7", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b7_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b7", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_relu", "Outputs", "Output"]}], "4b8" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b8_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b8", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b8_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b8", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_relu", "Outputs", "Output"]}], "4b9" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b9_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b9", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b9_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b9", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_relu", "Outputs", "Output"]}], "4b10" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b10_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b10", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b10_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_relu", "Outputs", "Output"]}], "4b11" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b11_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b11", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b11_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_relu", "Outputs", "Output"]}], "4b12" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b12_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b12", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b12_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_relu", "Outputs", "Output"]}], "4b13" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b13_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b13", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b13_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_relu", "Outputs", "Output"]}], "4b14" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b14_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b14", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b14_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_relu", "Outputs", "Output"]}], "4b15" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b15_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b15", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b15_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_relu", "Outputs", "Output"]}], "4b16" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b16_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b16", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b16_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_relu", "Outputs", "Output"]}], "4b17" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b17_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b17", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b17_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_relu", "Outputs", "Output"]}], "4b18" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b18_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b18", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b18_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_relu", "Outputs", "Output"]}], "4b19" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b19_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b19", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b19_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_relu", "Outputs", "Output"]}], "4b20" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b20_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b20", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b20_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_relu", "Outputs", "Output"]}], "4b21" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b21_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b21", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b21_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_relu", "Outputs", "Output"]}], "4b22" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b22_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b22", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b22_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_relu", "Outputs", "Output"]}], "5a" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2048, 8, 8}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res5a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {8, 8}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 2048, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {8, 8}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 2048, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {2048, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn5a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn5a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn5a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res5a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn5a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn5a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res5a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5a_relu", "Outputs", "Output"]}], "5b" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2048, 8, 8}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res5b_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 2048, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 2048, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5b_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5b_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5b_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5b_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5b_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5b_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5b_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 2048, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5b" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {2048, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn5b_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn5b_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5b_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn5b_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5b_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res5b", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn5b_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res5b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5b_relu", "Outputs", "Output"]}], "5c" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2048, 8, 8}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2048, 8, 8}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res5c_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 2048, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 2048, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5c_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5c_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5c_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5c_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5c_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5c_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 2048, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "bn5c_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{2048}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{2048}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 2048, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5c" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]], "res5c_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {2048, 8, 8}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn5c_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn5c_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5c_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn5c_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn5c_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res5c", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn5c_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res5c", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res5c_relu", "Outputs", "Output"]}]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "conv1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "bn_conv1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv1_relu", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "bn_conv1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool1_pad", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv1_relu", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool1_pad", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "2b", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "2c", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2b", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2c", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3b1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3b3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3b2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3b3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b22", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5b", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "5c", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "5b", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "5c", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{2048, 8, 8}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"bn_conv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "bn_conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "bn_conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "bn_conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv1_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv1_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool1_pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"129\"", 
                    "\"129\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool1_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"64\"", 
                    "\"64\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"64\"", 
                    "\"64\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"64\"", 
                    "\"64\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"8\"", "\"8\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"8\"", "\"8\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"5c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "5c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"8\"", "\"8\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "5c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"8\"", "\"8\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{417., {354.771240234375, 361.228759765625}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.7080168025599403`*^9, {3.708016912542612*^9, 3.70801694701764*^9}, 
   3.7081001257034273`*^9},ExpressionUUID->"0bc35c2c-45b6-4e77-b1da-\
891282841975"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Design Pyramid Pooling Network", "Subsection",
 CellChangeTimes->{{3.708041720508935*^9, 
  3.708041726750114*^9}},ExpressionUUID->"c37ddd89-7e1f-42fb-9fdb-\
52d5ec1806cd"],

Cell["A convolution, batch-normalization, ReLU block:", "Text",
 CellChangeTimes->{{3.707965437449068*^9, 3.707965452471162*^9}, {
  3.707965658012529*^9, 
  3.70796566223503*^9}},ExpressionUUID->"2f405f71-a2da-4f97-bd30-\
69d9c9e8fac1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"block", " ", ":=", " ", 
   RowBox[{"NetChain", "[", "\n", "\t", 
    RowBox[{"{", "\n", "\t\t", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"512", ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", " ", "1"}], "}"}]}], "]"}], ",", "\n", "\t\t", 
      RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", "\n", "\t\t", 
      RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], "\n", "\t", "}"}], 
    "\n", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.707965424298213*^9, 3.707965432086219*^9}, {
   3.70796546249257*^9, 3.707965486179758*^9}, {3.7079655498140078`*^9, 
   3.70796561655554*^9}, 3.707965670689061*^9, {3.707965716921606*^9, 
   3.7079657248032627`*^9}, {3.7080152919334393`*^9, 
   3.70801530870944*^9}},ExpressionUUID->"108e8836-6bdf-447a-ae98-\
112e2e5cfe2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["pyramid", "Code"], 
   StyleBox[" ", "Code"], 
   StyleBox["=", "Code"], 
   StyleBox[" ", "Code"], 
   RowBox[{
    StyleBox["NetGraph", "Code"], 
    StyleBox["[", "Code"], 
    StyleBox["\n", "Code"], 
    StyleBox["\t", "Code"], 
    RowBox[{
     RowBox[{
      StyleBox["<|", "Code"], 
      StyleBox["\n", "Code"], 
      StyleBox["\t\t", "Code"], 
      RowBox[{
       RowBox[{
        StyleBox["\"\<conv5_3_pool1\>\"", "Code"], 
        StyleBox[" ", "Code"], 
        StyleBox["\[Rule]", "Code"], " ", 
        RowBox[{
         StyleBox["PoolingLayer", "Code"], 
         StyleBox["[", "Code"], 
         RowBox[{
          StyleBox[
           RowBox[{"{", 
            RowBox[{"16", ",", " ", "16"}], "}"}], "Code"], 
          StyleBox[",", "Code"], 
          StyleBox[" ", "Code"], 
          RowBox[{
           StyleBox["\"\<Stride\>\"", "Code"], 
           StyleBox[" ", "Code"], 
           StyleBox["\[Rule]", "Code"], " ", "16"}], 
          StyleBox[",", "Code"], 
          StyleBox[" ", "Code"], 
          StyleBox[
           RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "Mean"}], 
           "Code"]}], 
         StyleBox["]", "Code"]}]}], 
       StyleBox[",", "Code"], 
       StyleBox["\n", "Code"], 
       StyleBox["\t\t", "Code"], 
       RowBox[{
        StyleBox["\"\<conv5_3_pool2\>\"", "Code"], 
        StyleBox[" ", "Code"], 
        StyleBox["\[Rule]", "Code"], " ", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"8", ",", " ", "8"}], "}"}], ",", " ", 
          RowBox[{
           StyleBox["\"\<Stride\>\"", "Code"], 
           StyleBox[" ", "Code"], 
           StyleBox["\[Rule]", "Code"], " ", "8"}], ",", " ", 
          RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "Mean"}]}], 
         "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool3\>\"", " ", "\[Rule]", " ", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", " ", "4"}], "}"}], ",", " ", 
          RowBox[{
           StyleBox["\"\<Stride\>\"", "Code"], 
           StyleBox[" ", "Code"], 
           StyleBox["\[Rule]", "Code"], " ", "4"}], ",", " ", 
          RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "Mean"}]}], 
         "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool6\>\"", " ", "\[Rule]", " ", 
        RowBox[{"PoolingLayer", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", " ", "2"}], "}"}], ",", " ", 
          RowBox[{
           StyleBox["\"\<Stride\>\"", "Code"], 
           StyleBox[" ", "Code"], 
           StyleBox["\[Rule]", "Code"], " ", "2"}], ",", " ", 
          RowBox[{"\"\<Function\>\"", " ", "\[Rule]", " ", "Mean"}]}], 
         "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool1_block\>\"", " ", "\[Rule]", " ", "block"}], 
       ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool2_block\>\"", " ", "\[Rule]", " ", "block"}], 
       ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool3_block\>\"", " ", "\[Rule]", " ", "block"}], 
       ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool6_block\>\"", " ", "\[Rule]", " ", "block"}], 
       ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool1_interp\>\"", " ", "\[Rule]", " ", 
        RowBox[{"ResizeLayer", "[", 
         RowBox[{"{", 
          RowBox[{"16", ",", " ", "16"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool2_interp\>\"", " ", "\[Rule]", " ", 
        RowBox[{"ResizeLayer", "[", 
         RowBox[{"{", 
          RowBox[{"16", ",", " ", "16"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool3_interp\>\"", " ", "\[Rule]", " ", 
        RowBox[{"ResizeLayer", "[", 
         RowBox[{"{", 
          RowBox[{"16", ",", " ", "16"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_pool6_interp\>\"", " ", "\[Rule]", " ", 
        RowBox[{"ResizeLayer", "[", 
         RowBox[{"{", 
          RowBox[{"16", ",", " ", "16"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"\"\<conv5_3_concat\>\"", " ", "\[Rule]", " ", 
        RowBox[{"CatenateLayer", "[", "]"}]}]}], "\n", "\t", "|>"}], ",", 
     "\n", "\t", "\n", "\t", 
     RowBox[{
      StyleBox["{", "Code"], "\n", "\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", " ", 
        RowBox[{"\"\<conv5_3_pool1\>\"", " ", "\[Rule]", " ", "\n", "\t\t", 
         RowBox[{"\"\<conv5_3_pool1_block\>\"", " ", "\[Rule]", " ", 
          RowBox[{
          "\"\<conv5_3_pool1_interp\>\"", " ", "\[Rule]", " ", "\n", "\t\t", 
           "\"\<conv5_3_concat\>\""}]}]}]}], ",", "\n", "\t\t", "\n", "\t\t", 
       
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", " ", 
        RowBox[{"\"\<conv5_3_pool2\>\"", " ", "\[Rule]", " ", "\n", "\t\t", 
         RowBox[{"\"\<conv5_3_pool2_block\>\"", " ", "\[Rule]", " ", 
          RowBox[{
          "\"\<conv5_3_pool2_interp\>\"", " ", "\[Rule]", " ", "\n", "\t\t", 
           "\"\<conv5_3_concat\>\""}]}]}]}], ",", "\n", "\t\t", "\n", "\t\t", 
       
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", " ", 
        RowBox[{"\"\<conv5_3_pool3\>\"", " ", "\[Rule]", " ", "\n", "\t\t", 
         RowBox[{"\"\<conv5_3_pool3_block\>\"", " ", "\[Rule]", " ", 
          RowBox[{
          "\"\<conv5_3_pool3_interp\>\"", " ", "\[Rule]", "\n", "\t\t", 
           "\"\<conv5_3_concat\>\""}]}]}]}], ",", "\n", "\t\t", "\n", "\t\t", 
       
       RowBox[{
        RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], " ", "\[Rule]", " ", 
        RowBox[{"\"\<conv5_3_pool6\>\"", " ", "\[Rule]", "\n", "\t\t", 
         RowBox[{"\"\<conv5_3_pool6_block\>\"", " ", "\[Rule]", " ", 
          RowBox[{
          "\"\<conv5_3_pool6_interp\>\"", " ", "\[Rule]", "\n", "\t\t", 
           "\"\<conv5_3_concat\>\""}]}]}]}]}], "\n", "\t", "}"}]}], "\n", 
    "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.7079610299895*^9, 3.7079610487514*^9}, {
   3.707963069427747*^9, 3.7079630934373217`*^9}, {3.7079632004385233`*^9, 
   3.7079632329432983`*^9}, {3.707964492802306*^9, 3.707964536173667*^9}, {
   3.707964577421165*^9, 3.7079647830593243`*^9}, {3.707965154313819*^9, 
   3.707965194536971*^9}, {3.707965243114422*^9, 3.7079653211792088`*^9}, {
   3.707965732359983*^9, 3.707965811403553*^9}, {3.707965924497776*^9, 
   3.707966037145668*^9}, {3.707966268378943*^9, 3.7079662755894737`*^9}, {
   3.707966394745315*^9, 3.707966405851568*^9}, 3.708009951451329*^9, {
   3.70801004308524*^9, 3.708010186080605*^9}, {3.708010235334271*^9, 
   3.708010346562214*^9}, {3.708010792863616*^9, 3.708010795085544*^9}, {
   3.708010992518649*^9, 3.7080111066787148`*^9}, {3.7080134652615623`*^9, 
   3.708013508379376*^9}, {3.708013553919935*^9, 3.708013578338852*^9}, {
   3.708014289041622*^9, 3.708014478295785*^9}, {3.708014520090521*^9, 
   3.708014586008175*^9}, 3.708014657781521*^9, {3.7080174764264307`*^9, 
   3.708017481967595*^9}, {3.708017512718176*^9, 3.708017515469262*^9}, {
   3.708017549978364*^9, 3.7080176539884377`*^9}, {3.708043559358713*^9, 
   3.708043589985029*^9}},ExpressionUUID->"1405a7e9-b677-41eb-ba85-\
7ffa802c0b11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"endPart", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"<|", "\n", "\t\t", 
     RowBox[{
      RowBox[{"\"\<conv5_4\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"512", ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "3"}], "}"}], ",", " ", 
         RowBox[{"\"\<Stride\>\"", " ", "\[Rule]", " ", "1"}], ",", "\n", 
         "\t\t", 
         RowBox[{"\"\<PaddingSize\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}],
       ",", "\n", "\t\t", "\n", "\t\t", 
      RowBox[{"\"\<conv5_4_bn\>\"", " ", "\[Rule]", " ", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", "\n", "\t\t", 
      RowBox[{"\"\<conv5_4_relu\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], ",", "\n", "\t\t", 
      "\n", "\t\t", 
      RowBox[{"\"\<deconv\>\"", " ", "\[Rule]", " ", 
       RowBox[{"DeconvolutionLayer", "[", 
        RowBox[{"512", ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "3"}], "}"}], ",", " ", 
         RowBox[{"\"\<Stride\>\"", " ", "\[Rule]", " ", "2"}], ",", " ", 
         RowBox[{"\"\<PaddingSize\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}],
       ",", "\n", "\t\t", 
      RowBox[{"\"\<deconv_pad\>\"", " ", "\[Rule]", " ", 
       RowBox[{"PaddingLayer", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "]"}]}], ",", "\n", 
      "\t\t", 
      RowBox[{"\"\<deconv_bn\>\"", " ", "\[Rule]", " ", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}]}], ",", "\n", "\t\t", 
      RowBox[{"\"\<deconv_relu\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}]}], ",", "\n", "\t\t", 
      "\n", "\t\t", 
      RowBox[{"\"\<conv5_4_dropout\>\"", " ", "\[Rule]", " ", 
       RowBox[{"DropoutLayer", "[", "0.1", "]"}]}], ",", "\n", "\t\t", 
      RowBox[{"\"\<conv6\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"512", ",", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", " ", "1"}], "}"}], ",", " ", 
         RowBox[{"\"\<Stride\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}], ",",
       "\n", "\t\t", 
      RowBox[{"\"\<conv6_interp\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ResizeLayer", "[", 
        RowBox[{"{", 
         RowBox[{"256", ",", " ", "256"}], "}"}], "]"}]}], ",", "\n", "\t\t", 
      "\n", "\t\t", 
      RowBox[{"\"\<last_conv\>\"", " ", "\[Rule]", " ", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"34", ",", " ", 
         RowBox[{"{", 
          RowBox[{"3", ",", " ", "3"}], "}"}], ",", " ", 
         RowBox[{"\"\<PaddingSize\>\"", " ", "\[Rule]", " ", "1"}]}], "]"}]}],
       ",", "\n", "\t\t", 
      RowBox[{"\"\<transpose\>\"", " ", "\[Rule]", " ", 
       RowBox[{"TransposeLayer", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", " ", "\[Rule]", " ", "3"}], ",", " ", 
          RowBox[{"1", " ", "\[Rule]", " ", "2"}]}], "}"}], "]"}]}], ",", 
      "\n", "\t\t", 
      RowBox[{"\"\<softmax\>\"", " ", "\[Rule]", " ", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}]}], "\n", "\t", "|>"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"2048", ",", "16", ",", "16"}], "}"}]}]}], "\n", 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.707966289542037*^9, 3.707966297449491*^9}, {
   3.707966346502346*^9, 3.707966461148237*^9}, {3.707966514639267*^9, 
   3.70796659764336*^9}, {3.707966642051943*^9, 3.707966814270514*^9}, {
   3.708011120102254*^9, 3.708011124075671*^9}, {3.708014604323316*^9, 
   3.708014627358693*^9}, {3.708015919981862*^9, 3.708015924418264*^9}, {
   3.708016011560576*^9, 3.708016025484692*^9}, {3.708016076811386*^9, 
   3.7080160769881773`*^9}, {3.708017685699759*^9, 3.708017767864398*^9}, {
   3.7080178238693533`*^9, 3.708017849682198*^9}, {3.70801789976519*^9, 
   3.708017902121193*^9}, {3.708017934624538*^9, 3.708018129150448*^9}, 
   3.708041745107964*^9, {3.708043160462914*^9, 3.708043200555071*^9}, {
   3.708043248302623*^9, 3.708043410019236*^9}, {3.708043771776904*^9, 
   3.708043778533454*^9}, {3.708043866566722*^9, 3.708043947539256*^9}, {
   3.708043992923987*^9, 3.708044007066822*^9}, {3.7080999907453833`*^9, 
   3.708100027489994*^9}, {3.708108458938896*^9, 3.708108465529735*^9}, {
   3.708111082075356*^9, 
   3.708111082164526*^9}},ExpressionUUID->"41bca851-e647-4795-b96c-\
ab4357cc7fca"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "conv5_4" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 2048, 3, 3}, 
                 NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               2048, "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
               "$OutputSize" -> {16, 16}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2048, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 16, 16}, NeuralNetworks`RealT]]], 
           "conv5_4_bn" -> 
           Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 16, 16}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 16, 16}, NeuralNetworks`RealT]]], 
           "conv5_4_relu" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 16, 16}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 16, 16}, NeuralNetworks`RealT]]], 
           "deconv" -> 
           Association[
            "Type" -> "Deconvolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 512, 3, 3}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
               "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {16, 16}, 
               "$OutputSize" -> {31, 31}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 31, 31}, NeuralNetworks`RealT]]], 
           "deconv_pad" -> 
           Association[
            "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 0., 
               "Rank" -> 3, "$InputSize" -> {512, 31, 31}, 
               "$OutputSize" -> {512, 32, 32}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 31, 31}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]]], 
           "deconv_bn" -> 
           Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "Beta" -> NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingVariance" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
               "MovingMean" -> 
               NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
             "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]]], 
           "deconv_relu" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]]], 
           "conv5_4_dropout" -> 
           Association[
            "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
             Association["DropoutProbability" -> 0.1], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]]], 
           "conv6" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{512, 512, 1, 1}, NeuralNetworks`RealT],
                "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {32, 32}, 
               "$OutputSize" -> {32, 32}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]]], 
           "conv6_interp" -> 
           Association[
            "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{256, 256}], 
               "Dimensionality" -> 2, "Channels" -> 512, 
               "$InputSize" -> {32, 32}, "$OutputSize" -> {256, 256}], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 256, 256}, 
                 NeuralNetworks`RealT]]], "last_conv" -> 
           Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`TensorT[{34, 512, 3, 3}, NeuralNetworks`RealT], 
               "Biases" -> NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[{34}, NeuralNetworks`RealT]]], 
             "Parameters" -> 
             Association[
              "OutputChannels" -> 34, "KernelSize" -> {3, 3}, 
               "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               512, "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
               "$OutputSize" -> {256, 256}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{34, 256, 256}, NeuralNetworks`RealT]]],
            "transpose" -> 
           Association[
            "Type" -> "Transpose", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> 
               NeuralNetworks`ValidatedParameter[{1 -> 3, 1 -> 2}], 
               "$InputDimensions" -> {34, 256, 256}, "$Type" -> 
               NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
               "$OutputDimensions" -> {256, 256, 34}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{34, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 256, 34}, NeuralNetworks`RealT]]],
            "softmax" -> 
           Association[
            "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
             Association[], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 256, 34}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 256, 34}, 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "conv5_4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "conv5_4_bn", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv5_4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv5_4_relu", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv5_4_bn", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "deconv", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "conv5_4_relu", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "deconv_pad", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "deconv", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "deconv_bn", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "deconv_pad", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "deconv_relu", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "deconv_bn", "Outputs", "Output"], 
           NeuralNetworks`NetPath[
            "Nodes", "conv5_4_dropout", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "deconv_relu", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "conv5_4_dropout", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv6_interp", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "last_conv", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath[
            "Nodes", "conv6_interp", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "transpose", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "last_conv", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "softmax", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "transpose", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "softmax", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{2048, 16, 16}, 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{256, 256, 34}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_4_bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4_bn"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4_bn"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_4_bn"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_4_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_4_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"deconv\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DeconvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"31\"", 
                    "\"31\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "deconv"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"deconv_pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "deconv_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"deconv_bn\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv_bn"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv_bn"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "deconv_bn"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"deconv_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "deconv_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "deconv_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv5_4_dropout\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4_dropout"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv5_4_dropout"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv5_4_dropout"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv6_interp\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv6_interp"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv6_interp"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv6_interp"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"last_conv\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "last_conv"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "last_conv"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"34\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "last_conv"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"transpose\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "transpose"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["TransposeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "transpose"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "transpose"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"softmax\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "softmax"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{467., {138.271240234375, 144.728759765625}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.708111093697722*^9, 3.70811112705667*^9, 
  3.7081153853360662`*^9},ExpressionUUID->"28a77a9b-add4-4322-9503-\
3b24c28a7862"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Stitch it together", "Subsection",
 CellChangeTimes->{{3.70804175376712*^9, 
  3.708041757566661*^9}},ExpressionUUID->"42bce8e3-d60f-4384-90e2-\
5841b34766ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"chopped", "=", 
  RowBox[{"NetReplacePart", "[", 
   RowBox[{
    RowBox[{"Take", "[", 
     RowBox[{"net", ",", "\"\<4b22\>\""}], "]"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "256", ",", "256"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.708016119800941*^9, 3.708016164931732*^9}, {
  3.7080162625044003`*^9, 3.708016280706938*^9}, {3.708016314227191*^9, 
  3.708016390367432*^9}, {3.7080431063436747`*^9, 3.708043108474887*^9}, {
  3.708043460429151*^9, 
  3.7080434617428226`*^9}},ExpressionUUID->"4832c936-b3ba-43b5-a7ac-\
dba23bb00091"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "conv1" -> Association[
            "Type" -> "Convolution", "Arrays" -> 
             Association[
              "Weights" -> 
               NeuralNetworks`Private`DummyRawArray[{64, 3, 7, 7}], "Biases" -> 
               None], "Parameters" -> 
             Association[
              "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
               "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
               "Dilation" -> {1, 1}, "Dimensionality" -> 2, "InputChannels" -> 
               3, "$GroupNumber" -> 1, "$InputSize" -> {256, 256}, 
               "$OutputSize" -> {128, 128}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]]],
            "bn_conv1" -> 
           Association[
            "Type" -> "BatchNormalization", "Arrays" -> 
             Association[
              "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], "Beta" -> 
               NeuralNetworks`Private`DummyRawArray[{64}], "MovingVariance" -> 
               NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
               NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
             Association[
              "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
               "$Shape" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]], 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 128, 128}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]]],
            "conv1_relu" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
               "$Dimensions" -> {64, 128, 128}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 128, 128}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 128, 128}, NeuralNetworks`RealT]]],
            "pool1_pad" -> 
           Association[
            "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
               "Fixed", "Rank" -> 3, "$InputSize" -> {64, 128, 128}, 
               "$OutputSize" -> {64, 129, 129}], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 128, 128}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 129, 129}, NeuralNetworks`RealT]]],
            "pool1" -> 
           Association[
            "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
               "PaddingSize" -> {0, 0}, "Function" -> Max, "Dimensionality" -> 
               2, "Channels" -> 64, "$InputSize" -> {129, 129}, 
               "$OutputSize" -> {64, 64}, "$MXPoolingConvention" -> "valid", 
               "$MXGlobalPool" -> False], "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 129, 129}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{64, 64, 64}, NeuralNetworks`RealT]]], 
           "2a" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{64, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 64, 64}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res2a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res2a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2a_relu", "Outputs", "Output"]}], "2b" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 64, 64}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res2b_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2b_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res2b", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2b_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2b_relu", "Outputs", "Output"]}], "2c" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 64, 64}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res2c_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 64, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn2c_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res2c", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn2c_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res2c_relu", "Outputs", "Output"]}], "3a" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{256, 64, 64}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3a_relu", "Outputs", "Output"]}], "3b1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3b1_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3b1", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3b1_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3b1", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b1_relu", "Outputs", "Output"]}], "3b2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3b2_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3b2", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3b2_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3b2", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b2_relu", "Outputs", "Output"]}], "3b3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{512, 32, 32}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res3b3_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{128}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 128, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn3b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res3b3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn3b3_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res3b3", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res3b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res3b3_relu", "Outputs", "Output"]}], "4a" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{512, 32, 32}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4a_branch1" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 512, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4a_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4a", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4a_branch1", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4a_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4a_relu", "Outputs", "Output"]}], "4b1" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b1_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b1_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b1", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b1_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b1", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b1_relu", "Outputs", "Output"]}], "4b2" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b2_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b2_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b2", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b2_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b2", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b2_relu", "Outputs", "Output"]}], "4b3" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b3_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b3_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b3", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b3_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b3", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b3_relu", "Outputs", "Output"]}], "4b4" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b4_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b4_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b4", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b4_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b4", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b4_relu", "Outputs", "Output"]}], "4b5" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b5_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b5_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b5", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b5_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b5", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b5_relu", "Outputs", "Output"]}], "4b6" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b6_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b6_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b6", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b6_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b6", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b6_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b6_relu", "Outputs", "Output"]}], "4b7" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b7_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b7_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b7", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b7_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b7", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b7_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b7_relu", "Outputs", "Output"]}], "4b8" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b8_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b8_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b8", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b8_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b8", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b8_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b8_relu", "Outputs", "Output"]}], "4b9" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b9_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b9_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b9", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b9_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "res4b9", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "res4b9_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b9_relu", "Outputs", "Output"]}], "4b10" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b10_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b10_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b10", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b10_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b10_relu", "Outputs", "Output"]}], "4b11" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b11_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b11_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b11", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b11_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b11_relu", "Outputs", "Output"]}], "4b12" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b12_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b12_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b12", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b12_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b12_relu", "Outputs", "Output"]}], "4b13" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b13_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b13_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b13", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b13_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b13_relu", "Outputs", "Output"]}], "4b14" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b14_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b14_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b14", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b14_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b14_relu", "Outputs", "Output"]}], "4b15" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b15_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b15_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b15", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b15_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b15_relu", "Outputs", "Output"]}], "4b16" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b16_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b16_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b16", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b16_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b16_relu", "Outputs", "Output"]}], "4b17" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b17_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b17_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b17", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b17_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b17_relu", "Outputs", "Output"]}], "4b18" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b18_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b18_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b18", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b18_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b18_relu", "Outputs", "Output"]}], "4b19" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b19_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b19_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b19", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b19_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b19_relu", "Outputs", "Output"]}], "4b20" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b20_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b20_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b20", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b20_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b20_relu", "Outputs", "Output"]}], "4b21" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b21_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b21_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b21", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b21_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b21_relu", "Outputs", "Output"]}], "4b22" -> 
           Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "res4b22_branch2a" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2a" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2a_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2b" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{256}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2c" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 256, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2c" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{1024}]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 1024, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22" -> 
               Association[
                "Type" -> "Total", "Arrays" -> Association[], "Parameters" -> 
                 Association["$InputCount" -> 2], "Inputs" -> 
                 Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2b_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "bn4b22_branch2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "res4b22", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath["Inputs", "Input"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "bn4b22_branch2c", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_branch2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "res4b22_relu", "Outputs", "Output"]}]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "conv1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "bn_conv1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "conv1_relu", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "bn_conv1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "pool1_pad", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "conv1_relu", "Outputs", "Output"],
            NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool1_pad", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "2b", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "2c", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2b", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2c", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3b1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3b3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3b2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "3b3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4a", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b3", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b4", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b6", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b5", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b7", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b6", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b8", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b7", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b9", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b8", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b10", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b9", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b11", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b10", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b12", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b11", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b13", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b12", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b14", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b13", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b15", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b14", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b16", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b15", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b17", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b16", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b18", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b17", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b19", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b18", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b20", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b19", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b21", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b20", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "4b22", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "4b21", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "4b22", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"bn_conv1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "bn_conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["BatchNormalizationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "bn_conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "bn_conv1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"conv1_relu\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "conv1_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"128\"", 
                    "\"128\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "conv1_relu"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool1_pad\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PaddingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"129\"", 
                    "\"129\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool1_pad"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"pool1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"64\"", "\"64\"", "\"64\""},
                     "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "pool1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"64\"", 
                    "\"64\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2b\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"64\"", 
                    "\"64\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2b"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2c\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"64\"", 
                    "\"64\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2c"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"512\"", "\"32\"", 
                    "\"32\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4a\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "12", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4a"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b4"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b5"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b6"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b7"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b8"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b9"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b10"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b11"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b12"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b13"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b14"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b15"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b16"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b17"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b18"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b19"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b20\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b20"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b21\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b21"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"4b22\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "10", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "4b22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "4b22"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{417., {327.771240234375, 334.228759765625}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.708016157809387*^9, 3.708016165761649*^9}, 
   3.708016282688037*^9, {3.708016321375265*^9, 3.7080163918912992`*^9}, 
   3.708018199763026*^9, 3.708043045186352*^9, 3.708043110496622*^9, 
   3.708043463277341*^9, {3.708100055527443*^9, 3.708100074032577*^9}, 
   3.7081001361700287`*^9, 3.70810848839419*^9, {3.7081111341664963`*^9, 
   3.708111148331307*^9}, 
   3.708115389028644*^9},ExpressionUUID->"60765ce2-af7a-4530-b957-\
07d0d4a60acc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"network", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"chopped", ",", "pyramid", ",", "endPart"}], "}"}], ",", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"3", ",", "256", ",", "256"}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.70801617111191*^9, 3.7080161883887033`*^9}, {
  3.708043092747114*^9, 3.7080430955097647`*^9}, {3.708043625012927*^9, 
  3.7080436261584463`*^9}, {3.708044222381473*^9, 3.7080442277009077`*^9}, {
  3.708044330364564*^9, 3.70804433715279*^9}, {3.708044395845357*^9, 
  3.708044416399282*^9}, {3.70804505802459*^9, 3.708045059477755*^9}, {
  3.708115313633313*^9, 3.708115317452203*^9}, {3.7081153603737793`*^9, 
  3.708115365185685*^9}},ExpressionUUID->"fc51ae55-903d-4a50-9191-\
ba445211334b"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 3, 7, 7}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {256, 256}, "$OutputSize" -> {128, 128}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "bn_conv1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "conv1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 128, 128}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "pool1_pad" -> 
               Association[
                "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                   "Fixed", "Rank" -> 3, "$InputSize" -> {64, 128, 128}, 
                   "$OutputSize" -> {64, 129, 129}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 64, 
                   "$InputSize" -> {129, 129}, "$OutputSize" -> {64, 64}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "2a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Outputs", "Output"]}], "2b" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2b_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Outputs", "Output"]}], "2c" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2c_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Outputs", "Output"]}], "3a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Outputs", "Output"]}], "3b1" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b1_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Outputs", "Output"]}], "3b2" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b2_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Outputs", "Output"]}], "3b3" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b3_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Outputs", "Output"]}], "4a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Outputs", "Output"]}], "4b1" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b1_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Outputs", "Output"]}], "4b2" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b2_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Outputs", "Output"]}], "4b3" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b3_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Outputs", "Output"]}], "4b4" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b4_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Outputs", "Output"]}], "4b5" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b5_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Outputs", "Output"]}], "4b6" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b6_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Outputs", "Output"]}], "4b7" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b7_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Outputs", "Output"]}], "4b8" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b8_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Outputs", "Output"]}], "4b9" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b9_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Outputs", "Output"]}], "4b10" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b10_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Outputs", "Output"]}], "4b11" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b11_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Outputs", "Output"]}], "4b12" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b12_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Outputs", "Output"]}], "4b13" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b13_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Outputs", "Output"]}], "4b14" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b14_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Outputs", "Output"]}], "4b15" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b15_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Outputs", "Output"]}], "4b16" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b16_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Outputs", "Output"]}], "4b17" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b17_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Outputs", "Output"]}], "4b18" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b18_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Outputs", "Output"]}], "4b19" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b19_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Outputs", "Output"]}], "4b20" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b20_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Outputs", "Output"]}], "4b21" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b21_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Outputs", "Output"]}], "4b22" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b22_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Outputs", "Output"]}]], "Edges" -> 
             {NeuralNetworks`NetPath["Nodes", "conv1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "bn_conv1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "conv1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn_conv1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "pool1_pad", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "pool1_pad", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b7", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b6", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b8", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b7", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b9", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b8", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b10", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b9", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b11", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b10", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b12", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b11", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b13", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b12", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b14", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b13", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b15", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b14", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b16", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b15", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b17", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b16", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b18", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b17", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b19", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b18", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b20", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b19", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b21", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b20", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b22", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b21", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4b22", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]]],
            "2" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2048, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "conv5_3_pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {16, 16}, "Stride" -> {16, 16}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {1, 1}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool1_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {1, 1}, "$OutputSize" -> {1, 1}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 1, 1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool1_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {1, 1}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 1, 1}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {8, 8}, "Stride" -> {8, 8}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {2, 2}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {2, 2}, "$OutputSize" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {2, 2}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 2, 2}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {4, 4}, "Stride" -> {4, 4}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {4, 4}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {4, 4}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 4, 4}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {8, 8}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{512, 1024, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_concat" -> 
               Association[
                "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> 1, "$InputShapes" -> {
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]}, "$InputCount" -> 4, 
                   "$OutputShape" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_concat", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool1_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool2_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool3_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool6_interp", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_concat", "Outputs", "Output"]}], "3" -> 
           Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv5_4" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{512, 2048, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 2048, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_4_bn" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                   NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                   "MovingMean" -> 
                   NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_4_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "deconv" -> 
               Association[
                "Type" -> "Deconvolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {31, 31}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 31, 31}, 
                    NeuralNetworks`RealT]]], "deconv_pad" -> 
               Association[
                "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                   0., "Rank" -> 3, "$InputSize" -> {512, 31, 31}, 
                   "$OutputSize" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 31, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "deconv_bn" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> 
                   NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                   "Beta" -> NeuralNetworks`TensorT[{512}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                   NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT], 
                   "MovingMean" -> 
                   NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]], 
                 "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "deconv_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv5_4_dropout" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association["DropoutProbability" -> 0.1], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv6" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{512, 512, 1, 1}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv6_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{256, 256}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {256, 256}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 256, 256}, 
                    NeuralNetworks`RealT]]], "last_conv" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`TensorT[{34, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{34}, NeuralNetworks`RealT]]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 34, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {256, 256}, "$OutputSize" -> {256, 256}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{34, 256, 256}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
               Association[
                "Type" -> "Transpose", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{1 -> 3, 1 -> 2}], 
                   "$InputDimensions" -> {34, 256, 256}, "$Type" -> 
                   NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                   "$OutputDimensions" -> {256, 256, 34}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{34, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]]], "softmax" -> 
               Association[
                "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                 Association[], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "conv5_4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_bn", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_bn", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "deconv", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_pad", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "deconv", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "deconv_bn", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_pad", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_bn", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_dropout", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_dropout", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv6_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "conv6", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "last_conv", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv6_interp", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "transpose", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "last_conv", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "softmax", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "transpose", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2048, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 256, 34}, 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{256, 256, 34}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "35", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 ItemBox[
                  StyleBox["\"(uninitialized)\"", 
                   RGBColor[0.66, 0, 0], Small, StripOnInput -> False], 
                  Alignment -> Center, StripOnInput -> False], 
                 "\[SpanFromLeft]", "\[SpanFromLeft]"}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{321., {48.271240234375, 54.728759765625}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.708043063268168*^9, 3.7080430804751797`*^9}, 
   3.7080431157251987`*^9, 3.708043467695746*^9, {3.708043602820766*^9, 
   3.708043627211776*^9}, 3.708044015146627*^9, 3.708044337939286*^9, 
   3.708044417689337*^9, 3.708045062288741*^9, 3.7081000920874987`*^9, 
   3.708100141034677*^9, 3.7081084915966263`*^9, {3.708111136443103*^9, 
   3.7081111528838577`*^9}, 
   3.708115392810083*^9},ExpressionUUID->"60ece274-13dd-4812-b6bf-\
de4e340d8d54"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<~/Desktop/Project/Final/data/train/network.wlnet\>\"", ",", 
   "network"}], "]"}]], "Input",
 CellChangeTimes->{{3.70804506397011*^9, 3.7080450929378138`*^9}, {
  3.708111167243904*^9, 3.708111168059659*^9}, {3.708115413653268*^9, 
  3.708115415959008*^9}},ExpressionUUID->"0fbf371b-1161-41a1-96fb-\
4ffd339f3ff1"],

Cell[BoxData["\<\"~/Desktop/Project/Final/data/train/network.wlnet\"\>"], \
"Output",
 CellChangeTimes->{
  3.708045095913698*^9, 3.708100148009602*^9, 3.708108496595311*^9, 
   3.708111170575663*^9, {3.708115402594446*^9, 
   3.708115418348003*^9}},ExpressionUUID->"5c904696-9bcd-4de7-8773-\
fcc136993596"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<~/Desktop/Project/Final/data/train/meanImage.jpg\>\"", ",", 
   "meanImg"}], "]"}]], "Input",
 CellChangeTimes->{{3.708115431316834*^9, 3.70811548399686*^9}, {
  3.708115726147643*^9, 
  3.708115726299972*^9}},ExpressionUUID->"cb8f9246-ff79-41d0-9abf-\
e1ec31fe84ab"],

Cell[BoxData["\<\"~/Desktop/Project/Final/data/train/meanImage.jpg\"\>"], \
"Output",
 CellChangeTimes->{
  3.708115726992379*^9},ExpressionUUID->"734f39b5-cec1-4cde-8327-\
a4f9aa13509d"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440, 851},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 160, 3, 54, "Subsection", "ExpressionUUID" -> \
"c400e553-5633-404a-9b84-3162e8504505"],
Cell[743, 27, 461, 10, 40, "Input", "ExpressionUUID" -> \
"1c7b7c9d-c9e4-40de-9b33-d0f68a16f6ef"],
Cell[CellGroupData[{
Cell[1229, 41, 392, 10, 40, "Input", "ExpressionUUID" -> \
"c0786c37-bcc4-4387-aef1-9bc384bac8fb"],
Cell[1624, 53, 804109, 13188, 299, "Output", "ExpressionUUID" -> \
"6c757653-476f-4c25-97d4-1429a3e569f2"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[805782, 13247, 171, 3, 54, "Subsection", "ExpressionUUID" -> \
"30709984-d244-4985-b80f-3741c6cd1c87"],
Cell[CellGroupData[{
Cell[805978, 13254, 440, 11, 40, "Input", "ExpressionUUID" -> \
"4cfb2756-e616-424b-8f0c-5c190726dc04"],
Cell[806421, 13267, 466230, 9408, 760, "Output", "ExpressionUUID" -> \
"0bc35c2c-45b6-4e77-b1da-891282841975"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1272700, 22681, 178, 3, 54, "Subsection", "ExpressionUUID" -> \
"c37ddd89-7e1f-42fb-9fdb-52d5ec1806cd"],
Cell[1272881, 22686, 237, 4, 38, "Text", "ExpressionUUID" -> \
"2f405f71-a2da-4f97-bd30-69d9c9e8fac1"],
Cell[1273121, 22692, 848, 18, 210, "Code", "ExpressionUUID" -> \
"108e8836-6bdf-447a-ae98-112e2e5cfe2d"],
Cell[1273972, 22712, 7281, 159, 882, "Code", "ExpressionUUID" -> \
"1405a7e9-b677-41eb-ba85-7ffa802c0b11"],
Cell[CellGroupData[{
Cell[1281278, 22875, 4626, 94, 570, "Code", "ExpressionUUID" -> \
"41bca851-e647-4795-b96c-ab4357cc7fca"],
Cell[1285907, 22971, 34590, 720, 327, "Output", "ExpressionUUID" -> \
"28a77a9b-add4-4322-9503-3b24c28a7862"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1320546, 23697, 165, 3, 54, "Subsection", "ExpressionUUID" -> \
"42bce8e3-d60f-4384-90e2-5841b34766ba"],
Cell[CellGroupData[{
Cell[1320736, 23704, 627, 14, 40, "Input", "ExpressionUUID" -> \
"4832c936-b3ba-43b5-a7ac-dba23bb00091"],
Cell[1321366, 23720, 424371, 8558, 706, "Output", "ExpressionUUID" -> \
"60765ce2-af7a-4530-b957-07d0d4a60acc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1745774, 32283, 819, 16, 40, "Input", "ExpressionUUID" -> \
"fc51ae55-903d-4a50-9191-ba445211334b"],
Cell[1746596, 32301, 444294, 8650, 147, "Output", "ExpressionUUID" -> \
"60ece274-13dd-4812-b6bf-de4e340d8d54"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2190927, 40956, 372, 8, 40, "Input", "ExpressionUUID" -> \
"0fbf371b-1161-41a1-96fb-4ffd339f3ff1"],
Cell[2191302, 40966, 307, 6, 40, "Output", "ExpressionUUID" -> \
"5c904696-9bcd-4de7-8773-fcc136993596"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2191646, 40977, 324, 8, 40, "Input", "ExpressionUUID" -> \
"cb8f9246-ff79-41d0-9abf-e1ec31fe84ab"],
Cell[2191973, 40987, 187, 4, 40, "Output", "ExpressionUUID" -> \
"734f39b5-cec1-4cde-8327-a4f9aa13509d"]
}, Open  ]]
}, Open  ]]
}
]
*)

