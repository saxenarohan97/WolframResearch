(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    757996,      14506]
NotebookOptionsPosition[    755916,      14448]
NotebookOutlinePosition[    756301,      14465]
CellTagsIndexPosition[    756258,      14462]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["General Stuff", "Subsubsection",
 CellChangeTimes->{{3.7082010777381763`*^9, 3.708201081133312*^9}, {
  3.708201518721533*^9, 
  3.708201520785274*^9}},ExpressionUUID->"c79058f7-9e10-4bb7-9769-\
4334281e5c5c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{
  "Import", "[", "\n", "\t", 
   "\"\</Users/RohanSaxena/Desktop/Project/Final/data/trained.wlnet\>\"", 
   "\n", "]"}]}]], "Code",
 CellChangeTimes->{{3.708197342553925*^9, 3.708197372215971*^9}, {
   3.70819803679249*^9, 3.708198048707568*^9}, {3.7082226318104467`*^9, 
   3.708222632365828*^9}, {3.708223974258525*^9, 3.708223997594883*^9}, {
   3.70823206775933*^9, 3.7082320744811287`*^9}, 
   3.7082551337964497`*^9},ExpressionUUID->"f76d9ee6-b57a-4d61-b142-\
636ca54b4637"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 3, 7, 7}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {256, 256}, "$OutputSize" -> {128, 128}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "bn_conv1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "conv1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 128, 128}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "pool1_pad" -> 
               Association[
                "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                   "Fixed", "Rank" -> 3, "$InputSize" -> {64, 128, 128}, 
                   "$OutputSize" -> {64, 129, 129}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 64, 
                   "$InputSize" -> {129, 129}, "$OutputSize" -> {64, 64}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "2a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Outputs", "Output"]}], "2b" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2b_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Outputs", "Output"]}], "2c" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2c_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Outputs", "Output"]}], "3a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Outputs", "Output"]}], "3b1" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b1_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Outputs", "Output"]}], "3b2" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b2_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Outputs", "Output"]}], "3b3" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b3_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Outputs", "Output"]}], "4a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Outputs", "Output"]}], "4b1" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b1_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Outputs", "Output"]}], "4b2" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b2_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Outputs", "Output"]}], "4b3" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b3_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Outputs", "Output"]}], "4b4" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b4_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Outputs", "Output"]}], "4b5" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b5_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Outputs", "Output"]}], "4b6" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b6_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Outputs", "Output"]}], "4b7" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b7_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Outputs", "Output"]}], "4b8" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b8_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Outputs", "Output"]}], "4b9" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b9_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Outputs", "Output"]}], "4b10" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b10_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Outputs", "Output"]}], "4b11" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b11_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Outputs", "Output"]}], "4b12" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b12_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Outputs", "Output"]}], "4b13" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b13_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Outputs", "Output"]}], "4b14" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b14_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Outputs", "Output"]}], "4b15" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b15_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Outputs", "Output"]}], "4b16" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b16_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Outputs", "Output"]}], "4b17" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b17_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Outputs", "Output"]}], "4b18" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b18_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Outputs", "Output"]}], "4b19" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b19_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Outputs", "Output"]}], "4b20" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b20_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Outputs", "Output"]}], "4b21" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b21_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Outputs", "Output"]}], "4b22" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b22_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Outputs", "Output"]}]], "Edges" -> 
             {NeuralNetworks`NetPath["Nodes", "conv1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "bn_conv1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "conv1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn_conv1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "pool1_pad", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "pool1_pad", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b7", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b6", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b8", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b7", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b9", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b8", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b10", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b9", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b11", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b10", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b12", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b11", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b13", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b12", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b14", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b13", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b15", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b14", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b16", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b15", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b17", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b16", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b18", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b17", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b19", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b18", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b20", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b19", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b21", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b20", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b22", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b21", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4b22", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]]],
            "2" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2048, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "conv5_3_pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {16, 16}, "Stride" -> {16, 16}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {1, 1}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool1_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {1, 1}, "$OutputSize" -> {1, 1}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 1, 1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool1_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {1, 1}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 1, 1}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {8, 8}, "Stride" -> {8, 8}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {2, 2}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {2, 2}, "$OutputSize" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {2, 2}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 2, 2}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {4, 4}, "Stride" -> {4, 4}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {4, 4}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {4, 4}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 4, 4}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {8, 8}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_concat" -> 
               Association[
                "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]}, "$InputCount" -> 4, 
                   "$OutputShape" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_concat", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool1_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool2_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool3_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool6_interp", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_concat", "Outputs", "Output"]}], "3" -> 
           Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv5_4" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 2048, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 2048, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_4_bn" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_4_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "deconv" -> 
               Association[
                "Type" -> "Deconvolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {31, 31}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 31, 31}, 
                    NeuralNetworks`RealT]]], "deconv_pad" -> 
               Association[
                "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                   0., "Rank" -> 3, "$InputSize" -> {512, 31, 31}, 
                   "$OutputSize" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 31, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "deconv_bn" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "deconv_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv5_4_dropout" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association["DropoutProbability" -> 0.1], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv6" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 1, 1}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv6_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{256, 256}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {256, 256}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 256, 256}, 
                    NeuralNetworks`RealT]]], "last_conv" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{34, 512, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{34}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 34, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {256, 256}, "$OutputSize" -> {256, 256}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{34, 256, 256}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
               Association[
                "Type" -> "Transpose", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{1 -> 3, 1 -> 2}], 
                   "$InputDimensions" -> {34, 256, 256}, "$Type" -> 
                   NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                   "$OutputDimensions" -> {256, 256, 34}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{34, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]]], "softmax" -> 
               Association[
                "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                 Association[], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "conv5_4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_bn", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_bn", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "deconv", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_pad", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "deconv", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "deconv_bn", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_pad", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_bn", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_dropout", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_dropout", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv6_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "conv6", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "last_conv", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv6_interp", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "transpose", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "last_conv", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "softmax", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "transpose", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2048, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 256, 34}, 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{256, 256, 34}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "35", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{321., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708198050604279*^9, 3.708198172912963*^9, 3.7081999815236998`*^9, 
   3.7082008439718533`*^9, {3.708222635382292*^9, 3.708222714029297*^9}, 
   3.70822401747178*^9, 3.70822703445569*^9, {3.7082320684912863`*^9, 
   3.7082320765896873`*^9}, 3.708253226103217*^9, 3.708253768132263*^9, {
   3.70825512305851*^9, 3.708255135744054*^9}, 
   3.7082581402534857`*^9},ExpressionUUID->"39a34bee-9e2d-492c-b337-\
d414c5c680ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pixelPredict", "[", 
    RowBox[{"net_", ",", " ", "inputImageData_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", "\n", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"First", " ", "@", " ", 
       RowBox[{"Ordering", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"-", "1"}]}], "]"}]}], " ", "&"}], ",", "\n", "\t", 
     RowBox[{"net", "[", "inputImageData", "]"}], ",", " ", 
     RowBox[{"{", "2", "}"}]}], "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"classNum", " ", "=", " ", "34"}], ";"}], "\n", 
 RowBox[{"colorRules", " ", "=", " ", 
  RowBox[{"Thread", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"Range", "[", "classNum", "]"}], " ", "\[Rule]", " ", 
    RowBox[{"Prepend", "[", 
     RowBox[{
      RowBox[{"RandomColor", "[", 
       RowBox[{"classNum", " ", "-", " ", "1"}], "]"}], ",", " ", "White"}], 
     "]"}]}], "\n", "]"}]}]}], "Code",
 CellChangeTimes->{{3.708201529476665*^9, 3.7082015914387903`*^9}, {
   3.7082245526759987`*^9, 3.7082245619106903`*^9}, {3.708227611335618*^9, 
   3.708227615459549*^9}, 
   3.708228634302512*^9},ExpressionUUID->"b18ec4fd-1fbf-4143-a624-\
0a4c3ad8687d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"2", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.12381510277527918`, 0.3684759429354678, 0.8965986114957674], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.08254340185018613, 0.24565062862364523`, 0.597732407663845],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.12381510277527918, 0.3684759429354678, \
0.8965986114957674]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.12381510277527918`, 0.3684759429354678, 0.8965986114957674]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.12381510277527918`, 0.3684759429354678, 0.8965986114957674],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"3", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.05206691363865823, 0.2859875160225849, 0.034207446895426985`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.03471127575910549, 0.1906583440150566, 0.022804964596951326`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.05206691363865823, 0.2859875160225849, \
0.034207446895426985]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.05206691363865823, 0.2859875160225849, 0.034207446895426985`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.05206691363865823, 0.2859875160225849, 0.034207446895426985`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"4", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.009435622028274748, 0.36196321862074776`, 0.7677950771162916], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.006290414685516499, 0.24130881241383184`, 0.5118633847441945],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.009435622028274748, 0.36196321862074776, \
0.7677950771162916]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.009435622028274748, 0.36196321862074776`, 0.7677950771162916]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.009435622028274748, 0.36196321862074776`, 0.7677950771162916],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"5", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.7364432344238603, 0.024503788151839068`, 0.26155338184890464`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.49096215628257356`, 0.016335858767892713`, 0.1743689212326031],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.7364432344238603, 0.024503788151839068, \
0.26155338184890464]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.7364432344238603, 0.024503788151839068`, 0.26155338184890464`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.7364432344238603, 0.024503788151839068`, 0.26155338184890464`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"6", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.17010790325972813`, 0.6346179889361181, 0.15295438336084421`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.11340526883981876`, 0.4230786592907454, 0.10196958890722949`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.17010790325972813, 0.6346179889361181, \
0.15295438336084421]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.17010790325972813`, 0.6346179889361181, 0.15295438336084421`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.17010790325972813`, 0.6346179889361181, 0.15295438336084421`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"7", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.4066798140013186, 0.6814611166596123, 0.1387182081090783], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.27111987600087906`, 0.4543074111064082, 0.09247880540605222],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.4066798140013186, 0.6814611166596123, 0.1387182081090783]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.4066798140013186, 0.6814611166596123, 0.1387182081090783]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.4066798140013186, 0.6814611166596123, 0.1387182081090783],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"8", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.5866386981503724, 0.39902118103930206`, 0.9706526987375579], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3910924654335816, 0.26601412069286806`, 0.647101799158372],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5866386981503724, 0.39902118103930206, \
0.9706526987375579]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.5866386981503724, 0.39902118103930206`, 0.9706526987375579]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5866386981503724, 0.39902118103930206`, 0.9706526987375579],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"9", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.4909730088456117, 0.2893558847695501, 0.9879249290230614], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3273153392304078, 0.19290392317970007`, 0.6586166193487076],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.4909730088456117, 0.2893558847695501, 0.9879249290230614]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.4909730088456117, 0.2893558847695501, 0.9879249290230614]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.4909730088456117, 0.2893558847695501, 0.9879249290230614],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"10", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.688407207599196, 0.5659355299275988, 0.48767937835255437`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.45893813839946407`, 0.3772903532850659, 0.3251195855683696],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.688407207599196, 0.5659355299275988, 0.48767937835255437]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.688407207599196, 0.5659355299275988, 0.48767937835255437`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.688407207599196, 0.5659355299275988, 0.48767937835255437`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"11", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.12586009310547586`, 0.24982315318867587`, 0.6029676985725207], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.0839067287369839, 0.1665487687924506, 0.40197846571501383`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.12586009310547586, 0.24982315318867587, \
0.6029676985725207]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.12586009310547586`, 0.24982315318867587`, 0.6029676985725207]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.12586009310547586`, 0.24982315318867587`, 0.6029676985725207],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"12", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.4728718710862414, 0.36735448071906296`, 0.5243095764009091], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3152479140574943, 0.24490298714604197`, 0.3495397176006061],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.4728718710862414, 0.36735448071906296, \
0.5243095764009091]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.4728718710862414, 0.36735448071906296`, 0.5243095764009091]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.4728718710862414, 0.36735448071906296`, 0.5243095764009091],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"13", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.2537718981106203, 0.7703818678877445, 0.2314880547019873], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.1691812654070802, 0.5135879119251631, 0.15432536980132489`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.2537718981106203, 0.7703818678877445, 0.2314880547019873]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.2537718981106203, 0.7703818678877445, 0.2314880547019873]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.2537718981106203, 0.7703818678877445, 0.2314880547019873],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"14", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.22449503902786283`, 0.11600464208710681`, 0.2556849077502765], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.14966335935190855`, 0.07733642805807121, 0.17045660516685102`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.22449503902786283, 0.11600464208710681, \
0.2556849077502765]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.22449503902786283`, 0.11600464208710681`, 0.2556849077502765]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.22449503902786283`, 0.11600464208710681`, 0.2556849077502765],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"15", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.8446339525195197, 0.13041022473499697`, 0.40413934896077053`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5630893016796799, 0.08694014982333131, 0.2694262326405137],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.8446339525195197, 0.13041022473499697, \
0.40413934896077053]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.8446339525195197, 0.13041022473499697`, 0.40413934896077053`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.8446339525195197, 0.13041022473499697`, 0.40413934896077053`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"16", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.004802598953727033, 0.4125856514932258, 0.24183903249660554`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.003201732635818022, 0.27505710099548386`, 0.1612260216644037],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.004802598953727033, 0.4125856514932258, \
0.24183903249660554]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.004802598953727033, 0.4125856514932258, 0.24183903249660554`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.004802598953727033, 0.4125856514932258, 0.24183903249660554`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"17", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.22353610544990943`, 0.9111335605668385, 0.323553440134708], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.14902407029993964`, 0.6074223737112256, 0.21570229342313868`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.22353610544990943, 0.9111335605668385, 0.323553440134708]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.22353610544990943`, 0.9111335605668385, 0.323553440134708]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.22353610544990943`, 0.9111335605668385, 0.323553440134708],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"18", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.3903825334216966, 0.5509678780453064, 0.14985184252717199`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.26025502228113107`, 0.36731191869687096`, 0.09990122835144799],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.3903825334216966, 0.5509678780453064, \
0.14985184252717199]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.3903825334216966, 0.5509678780453064, 0.14985184252717199`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.3903825334216966, 0.5509678780453064, 0.14985184252717199`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"19", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.5219001368190836, 0.28035352061391206`, 0.9935497282091903], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3479334245460558, 0.1869023470759414, 0.6623664854727935],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5219001368190836, 0.28035352061391206, \
0.9935497282091903]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.5219001368190836, 0.28035352061391206`, 0.9935497282091903]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5219001368190836, 0.28035352061391206`, 0.9935497282091903],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"20", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.11295588892823805`, 0.6255266756695932, 0.706145246767373], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.0753039259521587, 0.4170177837797288, 0.47076349784491534`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.11295588892823805, 0.6255266756695932, 0.706145246767373]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.11295588892823805`, 0.6255266756695932, 0.706145246767373]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.11295588892823805`, 0.6255266756695932, 0.706145246767373],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"21", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.941355466550212, 0.7868690650503893, 0.28110760356695175`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6275703110334747, 0.5245793767002596, 0.1874050690446345],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.941355466550212, 0.7868690650503893, 0.28110760356695175]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.941355466550212, 0.7868690650503893, 0.28110760356695175`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.941355466550212, 0.7868690650503893, 0.28110760356695175`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"22", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.7667122646442135, 0.36829575956487925`, 0.9901668748943238], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.511141509762809, 0.2455305063765862, 0.6601112499295492],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.7667122646442135, 0.36829575956487925, \
0.9901668748943238]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.7667122646442135, 0.36829575956487925`, 0.9901668748943238]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.7667122646442135, 0.36829575956487925`, 0.9901668748943238],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"23", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.5648059958274207, 0.3340226201862373, 0.5629945113728403], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.37653733055161387`, 0.22268174679082486`, 0.37532967424856023`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5648059958274207, 0.3340226201862373, 0.5629945113728403]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.5648059958274207, 0.3340226201862373, 0.5629945113728403]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5648059958274207, 0.3340226201862373, 0.5629945113728403],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"24", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.8310979407812742, 0.4845471799454637, 0.9976008132551064], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5540652938541828, 0.3230314532969758, 0.6650672088367376],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.8310979407812742, 0.4845471799454637, 0.9976008132551064]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.8310979407812742, 0.4845471799454637, 0.9976008132551064]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.8310979407812742, 0.4845471799454637, 0.9976008132551064],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"25", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.5381117604897756, 0.9198375079445029, 0.828395148034399],
           RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3587411736598504, 0.6132250052963353, 0.5522634320229327],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5381117604897756, 0.9198375079445029, 0.828395148034399]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.5381117604897756, 0.9198375079445029, 0.828395148034399]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5381117604897756, 0.9198375079445029, 0.828395148034399],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"26", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.516377196164008, 0.015724335971683212`, 0.2954398908596514], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3442514641093387, 0.010482890647788809`, 0.1969599272397676],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.516377196164008, 0.015724335971683212, \
0.2954398908596514]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.516377196164008, 0.015724335971683212`, 0.2954398908596514]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.516377196164008, 0.015724335971683212`, 0.2954398908596514],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"27", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.3877989598318572, 0.8099973370302429, 0.5727733199308587], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.2585326398879048, 0.5399982246868287, 0.3818488799539058],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.3877989598318572, 0.8099973370302429, 0.5727733199308587]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.3877989598318572, 0.8099973370302429, 0.5727733199308587]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.3877989598318572, 0.8099973370302429, 0.5727733199308587],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"28", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.23791340120724436`, 0.1623545257447978, 0.9962916463649676], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.1586089341381629, 0.10823635049653188`, 0.6641944309099784],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.23791340120724436, 0.1623545257447978, \
0.9962916463649676]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.23791340120724436`, 0.1623545257447978, 0.9962916463649676]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.23791340120724436`, 0.1623545257447978, 0.9962916463649676],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"29", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.8666396454133551, 0.8389599305667441, 0.14700659311861752`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5777597636089035, 0.5593066203778294, 0.09800439541241168],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.8666396454133551, 0.8389599305667441, \
0.14700659311861752]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.8666396454133551, 0.8389599305667441, 0.14700659311861752`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.8666396454133551, 0.8389599305667441, 0.14700659311861752`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"30", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.22392879655781806`, 0.2617243310828272, 0.2577411313543534], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.1492858643718787, 0.1744828873885515, 0.17182742090290226`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.22392879655781806, 0.2617243310828272, \
0.2577411313543534]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.22392879655781806`, 0.2617243310828272, 0.2577411313543534]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.22392879655781806`, 0.2617243310828272, 0.2577411313543534],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"31", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.18569666343501323`, 0.15562255855865237`, 0.7898384073547065], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.12379777562334215`, 0.10374837237243492`, 0.526558938236471],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.18569666343501323, 0.15562255855865237, \
0.7898384073547065]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.18569666343501323`, 0.15562255855865237`, 0.7898384073547065]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.18569666343501323`, 0.15562255855865237`, 0.7898384073547065],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"32", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.07518477088466091, 0.6438181265814413, 0.24888176051995603`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.05012318058977394, 0.4292120843876276, 0.1659211736799707],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.07518477088466091, 0.6438181265814413, \
0.24888176051995603]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.07518477088466091, 0.6438181265814413, 0.24888176051995603`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.07518477088466091, 0.6438181265814413, 0.24888176051995603`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"33", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.44923160059199385`, 0.551485584542529, 0.6671813163810758], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.2994877337279959, 0.36765705636168605`, 0.44478754425405054`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.44923160059199385, 0.551485584542529, 0.6671813163810758]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.44923160059199385`, 0.551485584542529, 0.6671813163810758]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.44923160059199385`, 0.551485584542529, 0.6671813163810758],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"34", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.30451365343223546`, 0.21489659928002336`, 0.8142043483378043], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.203009102288157, 0.14326439952001557`, 0.5428028988918696],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.30451365343223546, 0.21489659928002336, \
0.8142043483378043]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.30451365343223546`, 0.21489659928002336`, 0.8142043483378043]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.30451365343223546`, 0.21489659928002336`, 0.8142043483378043],
     
     Editable->False,
     Selectable->False]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.70822863522469*^9, 3.708228674916429*^9}, 
   3.7082320779540873`*^9, {3.7082321690013742`*^9, 3.708232186421513*^9}, 
   3.708254319445023*^9, 3.708255143478303*^9, 
   3.708258141907877*^9},ExpressionUUID->"6ade4e7d-9025-4322-9e8d-\
c6349f325aed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import test images", "Subsubsection",
 CellChangeTimes->{{3.7082010854074717`*^9, 3.708201091673274*^9}, {
  3.7082561718485947`*^9, 
  3.708256172214273*^9}},ExpressionUUID->"14a4f601-b505-4fb5-8c53-\
7c6a2f959093"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testPics", " ", "=", " ", 
    RowBox[{
    "Import", "[", "\n", "\t", 
     "\"\</Users/RohanSaxena/Desktop/Project/Final/use later/test/testPics.mx\
\>\"", "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"testMasks", " ", "=", " ", 
   RowBox[{
   "Import", "[", "\n", "\t", 
    "\"\</Users/RohanSaxena/Desktop/Project/Final/use later/test/testMasks.mx\
\>\"", "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{
  3.708255481023561*^9, {3.708256598941762*^9, 
   3.708256623202361*^9}},ExpressionUUID->"aaa07dfa-c9b9-4e31-ab1f-\
b737d4107482"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"trialFiles", " ", "=", " ", 
    RowBox[{"FileNames", "[", 
     RowBox[{
     "\"\</Users/RohanSaxena/Desktop/Project/Final/\>\"", " ", "<>", "\n", 
      "\t\t\t\t ", "\"\<use later/test/pics/*.png\>\""}], "\n", "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"maskFiles", " ", "=", " ", 
    RowBox[{
    "FileNames", "[", "\n", "\t", 
     "\"\</Users/RohanSaxena/Desktop/Project/Final/use \
later/test/labels/*.png\>\"", "\n", "]"}]}], ";"}], "\n", "\t\t   "}], "\n", 
 RowBox[{
  RowBox[{"coarseMaskFiles", " ", "=", " ", 
   RowBox[{
   "FileNames", "[", "\n", "\t", 
    "\"\</Users/RohanSaxena/Desktop/Project/Final/use later/cropped coarse \
labels/*.png\>\"", "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{
  3.708224476116934*^9, 3.708224590100129*^9, {3.7082246390888968`*^9, 
   3.708224768409348*^9}, {3.7082248291617107`*^9, 3.708224862983431*^9}, {
   3.708224911244912*^9, 3.708224911969902*^9}, {3.70822520017807*^9, 
   3.708225348841978*^9}, {3.7082254806482553`*^9, 3.7082255373931217`*^9}, {
   3.7082255751554317`*^9, 3.708225593386054*^9}, {3.708225672670055*^9, 
   3.70822569919689*^9}, {3.7082267231865587`*^9, 3.7082267779200087`*^9}, {
   3.708226865773466*^9, 3.708226898829318*^9}, {3.708227437858699*^9, 
   3.7082274387738047`*^9}, {3.708227537088602*^9, 3.708227561905834*^9}, {
   3.708227741232486*^9, 3.708227817493675*^9}, {3.708255273952949*^9, 
   3.708255453267097*^9}},
 FontWeight->"Plain",ExpressionUUID->"4f0ba8e9-825b-4882-b2c1-bb29410bfd5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualise random image", "Subsubsection",
 CellChangeTimes->{{3.708256175001212*^9, 
  3.7082561814441347`*^9}},ExpressionUUID->"b81b0bf6-4aa1-48a7-bd12-\
274ba75a03da"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"i", " ", "=", " ", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", 
       RowBox[{"Length", " ", "@", " ", "testPics"}]}], "}"}], "]"}]}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{"input", " ", "=", " ", 
   RowBox[{"testPics", "[", 
    RowBox[{"[", "i", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pixelResult", " ", "=", " ", 
    RowBox[{"pixelPredict", "[", 
     RowBox[{"net", ",", " ", "input"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"ImageCollage", "[", "\n", "\t", 
  RowBox[{"{", "\n", "\t\t", 
   RowBox[{
    RowBox[{"ArrayPlot", "[", 
     RowBox[{"pixelResult", ",", " ", 
      RowBox[{"ColorRules", " ", "\[Rule]", " ", "colorRules"}]}], "]"}], ",",
     "\n", "\t\t", 
    RowBox[{"Import", " ", "@", " ", 
     RowBox[{"trialFiles", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], ",", "\n", "\t\t", 
    RowBox[{"ImageAdjust", " ", "@", " ", 
     RowBox[{"Import", " ", "@", " ", 
      RowBox[{"coarseMaskFiles", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}]}], ",", "\n", "\t\t", 
    RowBox[{"ImageAdjust", " ", "@", " ", 
     RowBox[{"Import", " ", "@", " ", 
      RowBox[{"maskFiles", "[", 
       RowBox[{"[", "i", "]"}], "]"}]}]}]}], "\n", "\t", "}"}], "\n", 
  "]"}]}], "Code",
 CellChangeTimes->{
  3.7082558538527946`*^9, {3.7082558910231943`*^9, 3.70825591525506*^9}, {
   3.708256011057865*^9, 3.70825602844033*^9}, {3.708256060894616*^9, 
   3.708256091821187*^9}},ExpressionUUID->"0bb3716f-ac36-44dd-86dd-\
846e5e2d11b6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvWeQnYdxJera937sj616JokwOeecMREzCDPAIEeSADNFiCIVbFOBlGVJ
ltdry4yiSGTMDAYzmHxzvpMjQFLS1r6qLb9kW7Jk6TlJsmRJpESxX5/u/u4M
ZRGkamtLi7f3R+O7OQ7uOd19+nTuo7937MP/7nd+53c++e/5n2OPPL3jqace
+ezx3+UzJz/xySce/8SZx3o/8akzj595qvnR/4Uv/B2+7b/j+F/55D333EP7
9u1LRjKS8T9R9Pb20v33309VVVUUvjFHgdU4+ZY5VuLkWZom92Kc3EtR8q7E
yLU8Ta6lCEeYpnDZQoTc80GaWgjRFB9dfPQsR8izGCbXHMdCWC6bmg3QxLSf
xmIBOjd1jb5w7lka9E7SYGiSrkXdHFN0LeKm4aiXhiMeGuHTIzEvjUQ1rvNt
rkddNBL30FjcS2PTARqbCSaO4/z4k3N8nAnQOC6bxmm9fGLOTxN8+UTcT5PT
Pj7N52dxP5/eNobnm6KRMAdOx/x83kPXQ/xaQi66FhqXGEQEEfy6A/y6/RN8
HKergTHq94/SQGCUj+MavjG66ufLvaPUZ3HJw+EepktTI3R+cogujg/ShYmr
dHGyn87z8fzkNY6rdGGKT48P0GU+f9k1ROc5Lrqua/D9L/tG6GqIP6+wW474
DAeD/Drxmvn1D0XxmidplD+nQXyOHEN83VCEb4fPmd/ncMRFA8EJfg/jNMTH
AXlPE/Lar3Jc8VznGKEBft1XvEN0xT3Ir2VYLrvMcY5fywUXv173NXqFX+9Z
vGZcz5dd5u/3wsQgXZni1+odkdd7yX+d+vjzGZTPZIwG+PPp943zdfxcfD2u
6+PjeX5/5/jzucBxkR/jEj/WJdcgvTrez5cP8OP20dmxAf7Mhun81JCcfnWs
n17lz++VsUH6Kh9fHu+jl0Y5hi/TSyN9fH6Azo5fpa+O9nNcoVdHLtPZ0cv0
yvgl+srIBXpp6BLHFXpxpJ9eGOPbD/fR7z/zNDW3b6OS0nzKzU6n1JS7KDN9
M+VmbaXCvFSqLs+h2spM2tZeRfc8dJQefOxuuvf+Q/TgmbvpzEfvp6OHO2lb
QzF1tFXQ4Xv30kefepye/P1H6GOfeZw++slH6L5HD9ORu3fRiWPttHN7KW2r
zaH22nza3VJOB3bWUXdrBbVV5lNTeR4V56VTSlYKtTSUU+/2aurtqqV9ndW0
b3sV7e2opL1tlbSPY3dTKXXWFUu01RTS9voSPl1EnbWF1FZdQJX56ZSZuonu
uPN/o7vuuoPu2nIHbebYtPUu2sKxeeudVF9fL78HOCYjGcn4nytqa2upoqKC
/KvTwgP8HF4EY79nmfGfOYF7hTnBEl/HR88ycwAO/yJ4AOM8H4H57sWY8AbX
PB8XcFmUj8wFGHenGH8nOYa9w/THL7/EGDHBuO8W/BqOKYYJ3scQLolh4wCj
MWD0lF7OGDYa89Go4L3ygAnmAOABk3ieWeYls/ya5sBNQspRZv2C/3qbEPOA
oPAW3F/5BuMl4+r1sEt4CDiJ4Czj49UQ432Y8TE4pjwAWOlj7PQjxhX/A8Cy
ccayCcG3fh9wbUz4AI59gqdjgouXGC8vAuMnBwXnL3kY5xnTLjBuXmTcA+Ze
cQ8J/iGuuBlDgb/uEcHhPn7sq8Bw4QIu4QFDeO3gMozzo/z5jYEvRR1e47XP
Fu9tSo7CFfi+cr/wJAc/Fr+3a/x+5Qh+4wNeK/cZAI7jvcp7GRGeAI4jwfg9
EMBtcdl1wXMc5XLcB1wvMiFcaoifS143XnMIl03Iabwf4VTME64wX+oTLsI8
gj+bPo/yiSv8+PK5TDEf4sDneIE/N3ArfI7nmBucc+ttroA/TCknwed8ieM8
84qLcmSuNXGFzk5cYn7Bx7Er9PL1y8IdXp1kzsDHM099nJram6m4tICys9Io
jfEzJ2ML5WVuoQLmATWV2VRVlk5VjN2H79lLJ0710o7d22jngU46/eAROryv
g7GdeUBrJT30yAn6+Cc/Qvc/fi89/ImH6GOffowe/vAJOnX/Pjp9707a3VlO
zXW51FxfwDhfQ4e6t1EP84AW5gHNlQVUmJ9BeYzh27dVCA/YzzzgQFcN7euo
Ei7Q28HcgPnIzkbmAPXFgv3tNQV8uoi2MwfAsaUqjyrz0ig7bTNt3gQOcCdt
BbfJ2Ew52SmUl5tGWTlp8luA3KCurk5+E3BMRjKS8f/vcP6vNzQ0CA8IMt6H
1mLk43AzD/CsgQ/w6eUweVaA/Xx+ia/nnN+3GiXfUpQ8qAlIXYBjEbeJCF9w
IRbAB6LMC4J8vZ8DOD5Onz97ni55x2lk2iO56nDUx/jEeCU1Ab5NnI8x4BXj
WJxxPzopPACnlRd4OfzMBfzMAwKC65Pziu2TjP+uOX1NLuYnU8xDpgT/9box
vg9qDMBKPNewcA7OmYFNQWAqcmuX5P1XkSNLMLY7+b5v3DBej31+xmbGySsB
zoeBncxzgJV9wgWcegCf9w4Ltl1knEIufVHy/GHBsYvgAJPDgl2oB1wAB/AM
MgYOCfZf8Wrg8S7j8Rl3pZaCYGwdQt6Pzw08QLiAS2JsmjmBfFYe5Tq4DbgO
4y9uOyS1gSm5fJgfB3UC8IlhftzrfBvUCgbD4GpTNMDX9/s0lwdeD/hd/Jnw
dQHjR4FxwfirYb5PaIxfFzjEmHCOIeN1+JzB/YajyvWG8blHwLf4tfB9h4J6
n/6QxgA4iPCQMYk+5hfAfHCjy8IT9DMB57ji4/P+UeNM162mgRqFE9eEH/S5
mKPgc3WjrjDAn/kgf+YDdJ4/93Mcr4xepjMff4watzVSUXGh8ID0VMbLjK2U
n7WFivPTqLoii8qK06i8PIe6j3bTwePd1NZaRy1tNdTT3Uhd7bW0raaYunc3
02OfeISe/PQTdO/Dx+j4Q8fo8U+doQ997BTd90gvnTq1m3Z1VAgPaGsopP07
6uhgTzPzgEpqqyqgpop8Ki3MpsKSHGptKuf8n3nA9loO8ADG/7ZqPtYwD6im
XdtKaUdTCXU1cjQU084mPs/cYBcfW5kHVAgP2ERbNt9Jm1M2UVpmCuUzvygq
yaLCwizKyk1P8AAc8bvw285PkpGMZPz3j43/14UHMOYHrR7g49Nexn70BNxL
jPsrEcF4L5/3LWt4mBN4F8EFlA+AK7iFB/D55bhcr9dxcG7unvPJb/8fnf2q
4B9q86OMxwjkropfU4LR151+APADPQE+Aq9GIugPMBeY9hkP0Lq/1AH4OSY5
pA6xGGMeEKWJ+TCNz4VpYk7rALg9nmuIX8c1jkHgKDAQR+MC1wITUidHDDi1
fuSowCL/uOE7To8meEAfeIBzGjwBea1HOYDmyZybor6OnJbx6QLqAhaXkMNy
XHaDAzAeua/Rec+QXI5aAfBMMBAcgJ8D2AiOgnrFkGA6Ph+tpcjnZEf5PKPa
GxiTOoHWPaQPEtPP8jq/55GI3hZcQbgY6gSC11PSW7gm3IhPS/2BTwdRP9Be
xDBfNmKfn9Z3GPcjWlcZlu/Ky3yPed40f59xPvL5YTniMp/UK1B7wX2Ej0S1
fjAofGJSn5ffq9Qq+DL0YVCTGZT6zCifH1feERmVuk1/ADUY/o5QW+DvAXWY
K1a36Geu0O9BfQXfBz5TfO7MDTzMEZh3oc/x4vB5euTRe6ixvpYKCvMpMzON
MhI8IIVKmAeUFWdQUf4WKixIo207Wqh7Tyu1NFdRZ1c9dbWVU0dTGTXXltDe
g130wEfvozOfPEOnHjlORx86QmeeepieeOp+euSJQ3TyXvAA3DaXOlrK6MCu
Bjpo9YCOauYBVYVUWVpAuQVZ1NJQwrl/pfQE9m+vTvCA3vYa2tNexTygXIOf
G9gPXrCLeQH6BS2VeVSel05ZzAM2b7mLtvD7Sc9K5feXSfnFWZTNfCCrIEN+
B34dD3Dyht/271UykpGM//b41f/Pv8oDAivTFFieIf/ytOgDvMsxwXOp9y+A
A4SEC3gYX32LfP2i8QDUAcAJGP+BvW47jfvL5YvTohdwz4ZphLH4S+e+QhfG
rtII+vkzHhqf5Zx1xs2nXXJeatlSJ3ALbwDOoR9w3allI7+dRnj59l7hAZPT
lvNLXSDMuX9YjhNz4AEhfo6g1A5GOYBN6EVc5efQXvuk9M2vod6OPjawJqC9
8kHrmUsfIIA+wITkxVeEBygXQK3gMnODSxxXrCcADnAFtXwO4I7Uq9EH4Pzz
IvJ94L5Lc1rBe8aiix7lARfRK/APSb8cPQTct889LDku+hDIx6/a60JtHXUN
4KjzOQFPFden9HMLuaTOgc9yjD+/UUQE4ZLT18Me0ROMRhizI/z5RP1SoxnG
5xT1CC8Yjkxqb4HP47vB9yB8IeZgvX4n1/HdRfFYHuYeytVG0H+Z9id428iM
npbrmA+MxP3KCeT+yvNGrAcELgGucd15jziNOgZeV1yfEzUd0ZkIT1EtB74r
7eVMaE0BvYuA8gZ8z/1Sd1B9B+oZ/cyvLjFfeHHwLJ0+dZAa6muooIh5QEaK
8IDcTPCArVSUk0pFuSlUXpxGxUXp1LJzG+3d20atzRXU1ck8oIVz+boiaqot
pgN376dHf+9BevAjp+nwPfvoyIMH6eSHj9Ddjx2jYw/soeMndtCu9jJqYR6w
nbH/4K5Gjibqbimn9up8qSkUMgdI5+fuaqmgA11VdGB7DUe11AAQezuYB7RV
0W7hAWV8LJUeAbhAD3OL7vZKaizPo7LcNMpJ30xbtmyirWlbKCs7lQoLteeQ
A46Q/295gPP7cPe9f0Cf+6KPnv7DcXr6cxPJSEYy3iv+aJJj6oPF534lfpPb
/ib33fAYn/nDSfoMHz/x1EX+/63Yj77ARh7gX51lLjAjfABaQT+0ghzQBCLP
90iuH+I8PyI9AS9zAR9wftl4wKKdZvwXHrGiOgP0CbQ/EKEx5hPPXXqVzl7r
F4yeYA4wCS3frF/qAFLDjlmfIGZcADlqCPXsKcYC1QmIZoDxYoy5wMQ0NH8+
1Qny44zPWa+AucHUTIh5QlAvn1UcQi0B9ehBYH9EH3MwpLkmsONacEwxX7QA
iv3oYUskeufoE4zJfVAbAP5fRg7qV34ATLmS6Osz3nOueYkxHfk9uMBl94Bq
AVAPmIQeYEhrBLid+6rUDi66r/NttUd+BTzAPSbaAzz3VXt9wLAh4zFSE4is
c4ERzquR34MHSL0DfRbGZ2D0KDSYMa/pB/ymj+TPJsaYHfHpef4eVKuJug0w
f8oe2yP5PviA3J95APL90RmvfB/Si+DLxhnjx+L4bvwS6MlAuzkq4Vetpug2
Q6LVcG6H72dMHgt/B1ovkj6OPed4zCuPBZ0ItKPK64yz4O8n7tSRwCHR7xiT
z0i4UAS388vfF3oeg0HUPFzGFSbpxYFzdPfJ/VRXU0X5BTnCAzLTNlMec4CC
7BThAQXZW6k4P4Vq63PpyH29dPBQJ7VAp8ccoKOxjPP4AtrWWE5HHjhCDz1x
L/OBXuo+1EUH795DvSd20v7ju+kgH48d76KdbWXUWpfL9y2ngzsb6AB4QHO5
aP3qqgopM30LZTNO72OOcGhHrfCAg511Wg/g09AH7G2rZi5QIbjf01xKe1rL
mCNUynVtzA0qirKYB6QmeEBK+lZ5zCK+HDWBnPxMyrgFD/jwx87ShaEf0bnB
7ycjGcl4r7j2A7o48A90ue+7HN+z46+PSwPfo4uD36NLg3a8eovb939Xbvfr
4n3vu/E57T7n+79NL776X96bB9xgHnBjmkJr0xRkHhBYQW+Ac3nUBUQzqLMC
0A/6BPtRF4iRnyPAWB9gLuA3HuBdntZ6gvUW0COYYg4wxcez/Wfp1b4++f2f
mvWZjg/Y4VMNIH7f5TfeK7/zw5bTggsA64bjfBq/9YYBuL1gCrBlNqCzAhyT
Tp3A6gajccUO4AN62cNh1ayhxi45IbT/wPzAqPTBoZND4HqpxUv+CN27at8l
lzQegBrAFb9xAS94AOeXoq8fFS0g+v0XJznXn7rKmM9YPzFAl1EXYJy/DG09
uMDEkGgFL7oHhSugp93HvKBf6gEj1msYkV4D8lvpDdhr13wdcw+qExiKqiZw
RHgAcn6dGxAsFQ7gk88beD8aD+hnE9XLMNcxFgvKUb4Hw/URy7+Bz2PyXSmP
AKaPMp8b5+9yIo7wJjBd9JmY5xCdaEA5GZ8enw/I3Aa0m1PMD4WvTauOE1xh
fE61H/Jc0z57rIDEuJ1XDuETHjmKHtOM1R+ceoO8L/x9TAo3GYvb+4mC4wSM
6/ilhqF800vPXzlHBw7t4f8b4AHZlIHc2eEBqAXkpVFB1hbKZy7Q1d1Exx/s
pa6d1dTCObhwgMp8qmJ8rWUM7zm8m+55+AjtP7KLdu/voIPHGftP7aF7Hz5E
px7aRydPdtGO1hLhAV2M3ft31gsP2M08oLW6kOo5j8/N2EqlxXl0qLuZDnQx
/jP2Qx+wHz0C6Q1UybwAtIJ7GPv3dGCOgC9rr2ZOUE51pdlUXpAu9QDMC2yB
RjBNuUVhUSYVSl+AeUBx5nvygI89/gUa6Xudrl1co+HLN5KRjGT8mrh+aY0u
Xv+/6CtT36OvTn6X43u/Jr5LL/P1r17/O8Hjc1c5Br7NefF35PJ/c3tcNvFd
uc17xXve91eeF891tu9b9Orlv6Evv3TzPXlA4MaMxkpc6gI+8IDVGcb/af6t
5nx+yXB9OawcQHgA5gamOeLaC1iNJ/oBog8wfYGLj5OYHeDTV65fphcvX5Hf
+ckZD//+Azc8gi0S8tvPv9/THtG/O3N92stWfJMcNO4zTNNZwIkFwxfGmtF4
UGYKEOOSWyr+6e+91RY4/7vqn+S8elLn/EQPOG6191GtBaAmYDXmqyHUC0aN
C4wpF/BrbVl0bD6bk4Ouz605/GX0BLzDdIHxXGr+mH8DH8DsIOM/dO/gAnJ+
4prMFJ53oVfNt3ENSP+63zOs2jaP9gZUi6/Pqa9tQnT+0PfhvQ1Fx2mIsQ+5
MWrqQzL/CB7gNS6AGoBxACdEb+ETPoB6/njMJ7OW4zg/rXm3cK05rbeM25wm
PncHtyfB6fh7m2IMnjLNhnwvcyHTaYb5uwkldJ2oB0G7iZ6Th7mAVzSeIblM
Zj1E0xHQWc/pgMyfTlq9Zwoxvx4THOOLERpfCMnjjswETTsSlAAXwfOuz40G
tKYwbX2QiFd4w3OXzlLvvj1UXVVOeflZlJ7KPIBzcuUBKVSUqzwAtYGq6gKq
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
N20c/iHN9zPmh/fOK7laanHW3W8XJNdKnU4vu3XJ3+/MN3eWj6t+rVe1c6ld
w3121vzUrJ1Sj5x5TKzOb/jjmIa9Tz1v6G0zQ3/cdyuYe7+C+Q9rmP9uHYu/
fIulX7/Fyq/fYFnxwBqWfvlGcv+axKrghFU5J6H3BSN8/xo+ue/7uAqvYAl6
6vF1ve+X5HX5HRbMu0d1+xdUu5+a/+YJYL4A9AgYeT2j+/W93K2Tf4+h+Smd
zZNHb/1366l3aG/AZgOtqq3Qr7oKzOnMnS/HBxQHtCgO6FVc4O8HsJdgHETT
ZiCuYD+n2Xk9MM+ybmdfQr0b50Y+aSg4vh57GIZTLPd3O8+nTrf72DXj10QY
0B7DKzePUE+JScMt1sfo0zmH9SMGHDawHU9iFmIXfn5yRVoEo1j041nnU/UG
jJMcXHgkE6dunsLpizUoKEpDqtTLyZLjk2MCUZSXgHKp+YuyIlGYEYnc1FDE
h0s+3fOF1NdfIDLwC0QFfonooC8EC0iEUC94ix1D6SXwpdTfoThwshR7q7J1
RzAtbqdGSuwOpBIHZEcjj3OB8/ttLiCYISkuRF57uzx/O8qr8nGnif2Aeom7
aHguwaPggPqnDXq8K/fZL2hovqseyaWFmcjKSkIm/QmLUhTLRIfsVE0BehSn
ZkRrL4B9APomFFVkoVBiEwdsxucUfhzQ9k/+Pr75i00c4McB2gOQuv8Vd/DH
utA+3mXzYP7dZ83G/asFqUOpGaM8OdbMk6YTuyy3Jf9P0o+GfrbUnFUd+lnV
jzMN2hlXl0+pjj316EYWp5U/N+iTmlxy1cjCqGnXbeyIm1Y/OXoDviE86mnC
zeZGyTUjihlG5fpReWxkeVpn9szvzP/0mPVILlUfe41l9bPX3PphEd4P8+pp
Sy8a9vK1n/9Onke88NZy78z6guZ85v4Zzv/XnQfOe8n/7xfVz94j9fys5G2f
vO4CewIf32L+F28lz78VDPBG8/8i41cWvL8kjy39kte8UYygR8UJbxQLsGfg
+Sgh59lH8H5Y1hmD9x3xAT10beZAPX1+Lg/9dN6a7r5f819/e+ruLRs2GFS/
YnL3R9SPiH30NtUu6EGn/Pva7MZ0llR/0WEF9n/IR2RN3T7TpzrO2oOZ6Xde
TubZpHlf9yGHde9QeY1e69GwT9Hps7lAp8f4fV3+o87uTVuJXEPyNTrd/U7n
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
h+Jn/pv/CHj0upo3lx6G4lN/2Jv5N63zH5qsXUgfJcl3+Kum9ZPWq+2HvaL/
7FtLWLqp/6P5+pq/L/P+v64ZeTsH8G/K5D98j9fW1j/4B38tBxi7mlR9VUN3
q7I+jhtG3u+jH2Gg9arHm3m7Sd3u6W6DQdeGPl07H+dWntdp2w/fI/vr43v6
dFrtViNvG7ta1H6V9ZA9TF3ot+hgIk+Y+zl+DfZxXLUgnXNiuKbFH0rOgsQv
FlJ2VAou1It+DNHvaxSDvB/EMJ8byXuUDz/N2w36XpmY8MIgRqVOAH380aoP
5Zyd47EbDe6jmnNgRPL/Sl5VH1irCeBVfYWlb4DEC05+yAFFN2+7yQeyrzBm
Fuo4fXykYgKUSa0gqROg5v4lN/BK1RB88cmbeYJPcSu5g9T+B2+TB96+wP23
L1XdoYdkCKkrNLcyhy988Fl842ffwDdlPv2Pvon3/vgD8sAH2jz9H2m9dD/4
Qy2OUkxY4X3J2f/FD39VB0gzLY5fu31Tj+hPZO3++6oG73v0uyUn48VnHmL/
rI6TBxs4fecIL7/4Bj717ls4Ol1DLhVBPOJCImLncfegluRxz1HPiiEevwCP
vx91qbPM7Vg5hBEem3wpjJGpAhqVOLbON/D5H34RX//xeyrv47uqTsJ3VG/i
H6j+0T9U8Q7f+6Nf9zj89h98gL13XiA4Mg5fipofccMf9cMX8ag1gEFfPwao
f1Y1/z+g4v9SEv9XjyE3nESJPnO2HEcow/M9W0aqEsPowghStTRipRjm9max
fraOlf15rOxOY3l7DHMbQ5hZrdHvT6jcAKfUAvSY0ZjMYZbPLW7N0Gfnaw8m
sXO9g3tPT9Wa+j6ZYGljAhUyYYLHQ96j5/UsfGyztMLj6IKJ/OwKO3kd+n/N
AY5uJMJWJEL9yFa0+YA58kY64SSD8/qXuQVDOywOE0bmqpiYrZBnvHBQ//1u
s8oDFAawU+clV6GtowXNHc3oov638f/X3Cm32+AY1GusMGiEpbcTev4vu/m6
QCqg6hLsXe6pOsXH1wcqZ+CWA/5mmdTIOf7L/w0/+bu/g//q3RH8/e8sqbkB
6a/7y6dtyscWX/v/777GH8b3ydyE+Pv/y0sd/tmTNvWdNGtVW+kp/Z+/P4O/
9/1d3P/zP8f9//nPcf3n/1TrvfCvoffzrf2/N8UB//SX2P37fz0HOOinO8Rn
t9xYv46mh4MaPWjR06/vgYP+iph9oPfmvvgb2uNOeY7vsff33Lzvxnh78Oa1
Du7Xyf3JPl38PJdND5fTCLu9FwN8nTCBWXjALDzQA6/fzPFxAI2yW8Uw1ouS
dyA9jznO0/8T7ZE4BdF5mc+flf4B9QjKGTfcDj3cAQNyWafS+nTGCm+gV+UL
JmMDiIZMyJArilmb4gbR/jGVE+DBODVf7is2KHm02EFZJ5DPq0axSm149OYl
nqpeAo+Uvj/79AM8//RDVUtY1RP+5AO8JBe8/KRmL9Q8gdZz6PHHH+DsjUuc
vnmFBx/j7adnmFmewb2HF/j0B1/CW9/+PH7nR1/GZ37wRXzm+1/A58R++FV8
/vfexZd+9CV86Ydfxmd/8BV8+afvkQW+q627/0Lsw1x9LYdfdF9YQOL75PYH
9Mff++m38P7Pv40X3/gs8pNjyJTiSJeCyA/HUZ0ZwfTaFEapP3HqfSrjUetA
pbwfJd6uZslQOS+NusbbQ3y8Tg2sFsKqLt/4VB5b1LXlxTxGRty4/NhDvPuT
D/DBz8gyf/BdVYPoB/yeMh/w/X9hfkOrN/g9fPGHX8P9t44wPJFBKh+AN+TC
oJdM4LfB4bXATj30RG3Uej8ZIIp0JYoU+SPM7yDr/6VGBv402XFtDIWRLGbX
J5BtZBHJh5CuRlCoxVGuxVAkL+bycl24kU67kUq71BqVh/o5aOvh749jeW8R
k4vDmFwawfDqBKb2l7B7/1D16ts9XiYHjKPaSCHP75BIe2EydaPf1KatBwx2
obenHc6wC8XiDQfwmgs4OhHw9sDnakeOvLS8O4n5lTp5ywazvg0mvkcYXNen
QzAXIitkYPc5VA0En9uIZNiGoMMAPTW9qek1NLfcRUt7E5pod9qacJfWSc23
DOjg8/Qh7reoOoUmfTv5vQVhqU90toZ9qR8g/QpUfMDfvP4Ct6aZ9GUW/1ny
57/6X/wMP/p3P4/v/Yfv3vjcBvz5WzfrBv9G4grtf2XfmsnnSUyf1PiTPor/
3u+f4YO/91X84N//Er7/H3yV9hW1lbn+nb9S+1fZX/7mj+e/zfYrDvh/mA+Q
XurSYzUg8/POXoRUT1Yj7/fB7zKpOUifx4KgbwA+WsBvRZDm9/ZzfKKfw9do
vdlNqjeb1EsL00cKuk2qfolf9WLr1fqx8TOiHKPSwX6V3+xymjjukAesBpgt
ZAHhAWMXjNyapK+7z4BMlj681PAra3GJ0gNQ9H2K/r70Dpr/VX5gGKXkIKz9
HTCZpT9Mv8rZSkSMsJENrE4drK5eaosRbj/HfX8vckk7fV0PGnmPWisQ7Vdx
gpIboBhAu6/qCo5lsXNvHY/fuo8nN/0EtNg/Tf8lBlDdFt3/1CO1RiD1hLT1
gmu1XvD44zQ+/vDta1w8O8HlkxNs7K+jMD6K+sIMirMTGFqexjg1eXJjEtPb
01jYX8Xi8TpWT+mH0p9bOd/GW9/4vOrXoK293/Tv/cVNf8Gfa3MEav1A9Q/6
rrJv/uQb+MK3v4TlzV1kChWEUiF4Yi763E4Eok76324EYm4E427EqI+1oo9c
5VJ5llUxiSFJkgky5AHqaD0fRIGaXB9KYmtnHHuHU9jZn8bMRBETc8N4+93f
wfs/+Ra+Q19f/H61TnETJyhxAd9T9Yp/eNN/QFuveO8nX8M7n3uKy6e72Dnb
wOzcCM9/HOG0HxFySII8mBtKoVBPIUbfP5xww8fvNKly/4qIlFKY35pGabyE
hc1p5Bt5eAI2Xucdan3K2a/T+vkMdMPdr5lHTO4L51r1aJAplnbmUR8roNxI
I1tNojwzjJXTDeyeb2DzcBEL5IAyGSAYJavwOu4xaHGCNqkrZO+Cnrruinq1
dQGyZipk1jjAo0eU16XkJggHzC3VVHyLMLJ8N2sf/XdDF/q9AwjFA7AMDqj4
P/kPSuyf/E/7OlvQ0XIHzc2v407zHbIAuaCtGXe57dbJWhu/A//TcYkhkP9T
T5uak4tkI6pe8Z6qKSy9i6Tv8C0H/E21D+vmSG/mvZu+zNJ7+R9+YxL/5LMJ
/PefS+Mvn3Uok/g7mYP/v+MBrb+R85VN9iPv++XNvj+0f/LZFP7xF7L4775Y
xP/4KQ9++7/9T1R8/+7Nd/vQftVvWuX8/3oN4NZ+c/YqHJANmJANmpEJchvS
tinqdCI0gEjEwbHWi3DSizj9pwTH4qRY1odoiuNw3INo1IFokH6236Tem+O+
8mELsrRMqJ+P8XZAjPvmZ+XCZhTiA8jEnfC6zGpewOEw8Xv1wcpxeIBjovBA
X5/EQHXCaO2iVlkwVLrpCSQ9gCSeX+oH1rVaAXJfTPx7z6AOfYZ2uMkdxZTM
abvh9RrQN9jNfXVgwKlXOeYWpwGJlAMVMoDkDag6AQUXtd9LDvCquQCJH5yp
+DHOz56mb3j2+BhP35Z8wYdqTkBqBT/jbek1KPZIegp9+r6KEXz+SbLAp55Q
/8kAH78kE1yTF65U7sCLT0qMwENcPj7H/r0djIyXEUkF4IsH4YuF4I2LRgfh
jgTgUcb70SAC1Ibi1DT233kLX/3RV1VMgeTof6B44IdKV7+r6vP/UPVv+Laq
5fMd1aPh3e99Aesna8jXhhFMhLScO2qFkzrpCdrgDdppNvgCUhNfNN+FMo9P
7YYDJO5dYwIvqjmJzZCaNkEsrw7j8HgO+0fz2D+Yxc7uDCYn8lg72cAXf/BV
tSagsckP1ZzA93/xPZUbIXkRUkdSvvsHP/smvv0H7+ObP3tPrYX84Ofv8/Xv
4WOfeISxiUnkR/JK/7O1DDLDBZTqCbKLF24eI38mgLmtSQxNVZCs57GwPYPS
ZJVaPYtcLQdPmNc6WdMzaIbH3gOPlbpv1Wk2oJmX5jTrkC1EsX64cFM/OIfR
6Rotjxr3PcXPWNmfw9LmGKYW6yiVozBS/1tbfgvdXc1qPsDW306W6IJO1wJv
wke/P8zry42U5A2qdQEbCkknhsbyWN6ZxMxCBWkea1e/nmxCDjF1QqfvgN7M
+x4bjP0GdPZ1Y0B8fJmvsHSiR9b7W++q+YA7tDZyQUt7C5rIAQaDxODoEOC1
L32RhQNM5ABZ7xMO2OA5Uf2FLve1uoK38wF/K0zjAa03s/jXh/87VK/mv/Oz
B/jFHz3Af/y9Hfzzx034X593qzn7D+P0RNelNs+/qOl/rT3vVLmLwg6/+OOH
av9/+rOHymS9Qj5X8vqOb/L6L/7in930hP61/aaP1a39y/YqHFCiJpdiNpRj
VhTjduQSDiRTmt7nqK21kRhGJ1OYmE5hciaDqdk0t2mMT6U5nsXomwWRKtJf
S5EJqNe5KP3whA01+trVxCDNztu8z8eqfKwic/K0XMqJVNSu8p9kjkHMTV0a
pC9j5ZjYb+5WsQNOdy/y1KDxSlDVARqlLg+X3ChlbBgRnR4KqXqBUhdA6geE
ySIWjqeDHDtlPqBe8MDFfegtHejl/kw2PYx2A+w+C0LUtXRqEGV+r9GcW3HA
ZMFNFtDiAiRuQPIGx+sxrB2t4MGbV3j2zkNVG1DqCAoHCA88eus+Lt+8r/IE
H0qcwKfv3/QdfKzNG3zsGi9lvUAY4OMPtF6EElfwsSd48PIR1tbnkMrGEMrE
EcolEKQPHOD9QCaKcJaWiSCYjsIbiyDeaGD1wRW+8sN3Vb0FmROQnr8f/Ezr
WfS9P/m+8q1VXR4ywns//gDv/+EHePOzT1EZTyFIfffImjuPtd3Tz+PQj0Gv
FS7/INw+sh/5QLSqGHfw2nCoc1ZNO5RJrYU6ebCaDSCbISvNlJT2Hx7P4uhk
HkfHC7y9gM3NcRQqeRw/v8BXfvQu3v/xN1VtqG//7Fv8Th9Q+79J+46qJSk9
Fr7/iw/43aVm8LfJAd/Bt/kaqSH8zm8/w8zyKgrDReq/1P/NITNSQn00g0iS
zJRNIFyKYHF3CvXxKlLDJSztzqI8VadPv4B8o4D0UBbjM0WE3X1wmLvU2pfD
0qX6DTpMHdzyWiFvOv12LGzNYm1/AROzVXJAFsPU/7HZAuqTRdRnyhil/tcn
06iMplGqxeGif97dfQc9+hYVRyscYB2gjpMDQuSAbF7ybPh/CpkUB0jP4gL/
XyMTOazsTmJ2sYoEWdtl0aveAjZ+D/HpO2Vd36hDZ08Hb5MtyLYBTx+cAz30
7dug62hGq6wHtDahtbNVzQfcaWmCobcDHl7fMi8ndYQcxi61LiBxOrFcFGvH
5ADpOXyh1RQ8uI0P+Fto/8ev8uq3b9YNhA2++F/+Mb72n/1YxejJ2r3E6Ymm
y1z97/7Xf8rn/wRf+Ed/+q+wv4Mv/8Of45P/+M9UX7+dv+Ln/zqf/9bH/9tm
r8IBhagVuQiNW6mvLvqfodbWqPGTc2lMi+5PJ+mXJTA6HueWNpVSj83OJzE9
l8IwH8tWQ4hQG0JkgXjIjDz3V4wO0MgaYjHZDvDzJHeK3JGktlBXCrQM/fZY
eAAeH30YN1nAaVYmtWILpRAatSiGa9KrIIViOYxs1oNAoE/VbB2v+TBSCaAh
8YSlAJLcn0N6wzt6lP8aiUsPWgOMNh3H1g7oDG3o6WuH02uG12dCMGBScVxD
aTvGyQDjUlNI1RVykQNc5A8/xibzOHiwh/vU+6cfe6Q4QMUGfPIh3vjEfVw/
PsbB6Q4Oz3dw/OwET8Tf/6SWG/D0ExoLiP4LC7z41W2tT/GTtx/j6GwfDfq5
oVSE2k8eyMURzgkTxLStMAJ5wJuMIpDPYPFoE5/77pfx9Z98U/XdUyzwU9of
3vQI/GMtrvA96W380/fx9ne/iPL8CGKJIH1+N/1/OxzUfBfZS7YOrw0uWjBk
5/lw87g51FyAzAPUMrIlz/Fx4YChvAelrA91qae0N0kOmMbBkXDAAo7PlrB/
OIud/QlMTpVQapTx/HNv8Hu+Sx55D9/6yfv4LjVe5gi+93OtXqAwy7f/8Dsq
f/G7vyAn/ELqGHwT3/+TD/CJzz7HyvYG8rUMsjw+DepxabJBfS4iweMRS8cQ
IweskkWGJmvITTSwdrCE2uwwVvYWUCAHFCbK2D6Z4nVLbvBTG6Wnj7VXrQ9I
fL4Wy9KFkfkhbJ5uYH5tAsPTFYyQBYanS9xvgduqeqw4lEJS4id4TRaqMfKy
Gw6PCf3WbtWTwEoO6Ld28frqpD9vRYzXfTFjR4JsGnB2IxUhA5MD5HpalThB
4YDwIFxmnaohYCUHdHW3o62LPj71vYV+fBs13ETGkF5Bfon907ehl893dLTg
LvW/pbMFTa0yN3AHBkMnvPZeVWcoyu9l7yMHqHjeDzlgHQe8RhUHqHjB2/mA
v82mfPC/+CVv/3Ol1afU6j/71iJtAf/pByv4R18bx5P/6X9QrLB/E2/wrzKZ
55c8Ptmv5uv/Utlv+rfe2v93exUOEH+9QstLf9SUFyWp2zeTwORsinqfwPB4
DEMTSY6DefpGJT5X5DiWw/BYAuPjYUxNRzFNHpiYTqA8zHE5Q42O2ZCIWVES
/z85qKyWEr9S8y1l3qHCzytT/3P0PcUyCScCISvcISeC+SjSoyVUZ4YwsjRK
G6ONY1Ji2W56vvk5fg5Kf3VquGi/1BcIkjWCYQus9m6E/RaVY+gPWmBx9cJE
6za20se6SxZoVTGJBksbLJZWZCP9ZAAyRVHiBqXGsIO3nXw/fTmpqTBaxOGD
Qzx6W+ICHqk5/+eqVuAjvPz4fVw8PcfZsyucP7/GzqMrMsBjPJFew7Rnihse
q3kD1XeA73+hYgseqJwCqUl4+fQKiyuzSFHzA+kwfKkQArQQx27FAGSDYCYK
PznAl4ryGMzjxRc/ha/9+Bv4xu9TX3/6LeVvf/Cz76hezcIGX//xt2jv4yu/
9zUs7a+TAXjMgl64g07FAa6AXcXgOb12mk3VY8im3ShR8yspJ6pqTUC22n1h
qgqPcTnrVfWgVtaHsXc8g73DEezvj2HvYBK7RzPYP5rG7uEUGWEcw0MZzK7N
4uPf/F186nuSo/h1fP4HX8CXfvQFvP8HX8G3/+hreO8P3sfnf/9dfPK7n8X9
LzzFk889xNtfegNPP3uNo6slrO0t83xnUBynP05drs0MY2SmgnQhikQxrerp
SU/A0ZkGStPSB2ARtflRrO4votgokQMq2L2UPr6bWNgdQ34oCjcZ0ka/2U3N
dFBbZd1rk/sQhhglv4xKX5+1UcxsjGN6sYHx2TrG5mvkmjSS+TDi+SBy1Sjy
RZ4rv13NYdnJATIfMGDrho5+ucthQYQ8XBAOCGgckI7YyAGD/K8UNQ6YLyNB
9nKZu1WPIZkPEH1vbud1qtehpasdrbxv6G1X8TYBfk7/zTx/R3sz7ra0aLEB
ZIDXm+/ASN33DvaofIEwWcDG+0bhALJDLB/jcVpTHHAoHHCxexsn+JExrTah
rM3v3mj5hybPf7he/6om9Xx+87/p1v512atwQC1lIwvY1PpAOjaASiOMkck4
RsYjmJqJYWmzhqWjeSyeLGP2aAFzkku1P4WVwxksbo+oOYGxKfrqZIfaaJQa
Y4GROmx399Dv71c6UpU+b9T/RtaOetahxkKZhyjL/DNZoECTXHV/xAlfIoB4
NYPCVB2NBer/8jhGV6n/azMYW5/B5Oa0mqeVnHITffw++mJmlwGD9O2dbsON
P9YCD+8XMtyf34jeAY6v5g50GoQDmqAjD3T3tqCLW/tgF8r87apWUMmFSdpE
iT4xv6c7aMWA2w5fLYWty60bPdc4QGIDn35SagY/xunTC5w+v4+z5w+x//AK
j6jtjyWnUK0B3MwdiH3spt/QJ7ifdx6oWkSPyAkP3nxEPd1Glb87TL0P0teV
2Hf/DQ/ImoAwQSAVgScWQnZsFAdvPMJXfvQlrS7zj7+q/G2pxfiNn3xTxee9
+3vfICe8h6MHG0hVcjy2PpWL75T5/4AYOcCrmdNrVbWZilmeD7JbIXkzH0Ar
kxGrwnJyzjJeZDI++vp5HFDrD6j7h0dT9Mcnscnt4cks9mkHJ3PYuzeD1e1R
VCtRXh8NjC0uYmppilwwikVeU+cP5/Ho5T63W9g4nEB9KY8U/f5yJYBqLYdC
KYpq2YvFjUmUGxmUJmqYmKtwP+OYWGjQH08hV8kiO5TDKvVtlHxQnx+nli9i
eHkCW0crqI9VyQYN7F5s4PjhEU5enOHwyRaG5hLwJG3IlYOql9D4ygR2ztZV
jahiNYF4KYD8eApzO9OYX58g//JanCygLOsS5RgShTCyqr5VGC7pc0imkBhB
4YB+Swe66cP7vBILa0aR7BuX+QBHNzLRGw6YKZEDJjFL3ojzGnNZuuGT+IC+
DnR0tqJV10VW1dPXb0NnVysGrb2IcH8Bew8G9O0wdvNx4YDmJtxp1uYCXmvR
OMBDVvA6++AaNMAo6wu6Nui6WhDl9SMccHi2jcNzjQEk/+GWAz5a9n/VdFmv
v53D/7fdXoUD6jLnq9bIbUiFTXDTx05Ql2fmstjmWL99PofybArevBfegg/h
ahiDmUGEqflz9yawfzqHxeUiyjUf+p096KLOdnX8O6q2UJq+eUXt24E6t40s
je+V2LN8WOIS7GoNX/L9pCZQLOmmz+tHrBRHbrSAyoywwDCGl0Y5to9jbG0K
Iytjqk+sh2OsrPl3m9rQY2rn9zYj4DfBRL3XGduhG6CP5TOqnAMTfbSOnla0
65rUuoDRSLM0weXUo0AGGqLPNpZ3Ybzg4taNes7FcZdMMdADi92CMerEo7fO
bmIDHql5fskNeCp1gT72AOfPz3H1xiUunt3Hwf0LPHr7sYoffP6JR2oN4MUn
7mvxgooNHiqWkPWFx9zfg7ce4v6bD3H28Jjc1VD95kLZMEKZsNL9QCJIC5AF
Qqo+nsT5J0oZTBxv4Pozz7H3zjEuP3eFz/7gy/jy738F7/74G/jKj9/F137y
WTz/3CkqE3EEqT2eyOCv5gFcfptmPt4mAwT5eImsViYTlpISyzao6uCX4nyc
HFAWDsj5kCMH1Hnsdw5mcXRvHvdOFrC/N4uy1BVoRLHAa2ZhNoOZ6RSmxmOY
HA2jXvUgz+NbyWhzCdV8APV8CPVSBEPVOIapw0OVsOLAXGwQ2RCvi7hs7cin
vNThMVSHM2jMjWFmZRwza7OYWR6mr59Fpl5Q18nG6QYm58cwujyJvdMVTG+S
Qy53ML9KZuT7Vg+XcPDgGIdPr3Dy5iWOnx5i9WQJk0tVjNI3X9iexfrRMqYW
h5HKhGCjL++K8FrgtTZLNhid4zU4WUFlNI9cLYlUIYhMid85F+Q1NgAnNVc4
QK0L8Prr5rWWLMaQ5vcv83qXdYGgU0cOsCsOmJotY1XiBGeLiAWEA+jHS/0t
Qzva6f+39+rJq91obtNyADzcf9TXD5+tB/307Y3U9s7OFpUreIevaZJcws5m
6Hu60E8WsBh1sJrIyGQGPTlC36lxwNrRKo/PFjlg74YDbucDbu3WPur2KhxQ
SVg5NvUjG7VQ+4xqvTSVcGNptYSj+zsce0f4uja00wcZkFzCqANtvV34rZ4O
xIoenFyvY3VrBJVqEF30ZTo6pAdbC8dFPf0hC/drpdaKllhVvGBdrQ0MIi8M
wMclL104QOYE4ty31WXCoMcEn8QPUruCUclZoC4nfYhKz5aaH8VKCL6ACd30
n7o4hhqt3fx9Bnio+7ZBPTWejxuaYSAf9A10wUBr0zehjRzQy8ccDj3iYSMq
6QEM52wYkdpCN1anTxyM2eBwmTFgNSFLX/Tes1OtjjD9fM2/Fw7Q+gUIF1zz
+cuXZ7j36BI7V+f095/g+TuP8YLveU69fyHvIxe8/PhjZZIr8ISPqfmAN+/j
9MUVzuirrlOPCqUY8tSZIrVSrEytqRVCSoelnmK9KLV8IhihNg7NDKE4U0V8
sYBN7vdT3/kCPvOt38Vvf/A53Pv8fZQ2g/R7vfBHPCofwBWwwUndcvuoPaJf
PD+ugAXJhIO6L3GiVsWDEjdZlrUBiQ/MCAPw/GQDKJfD/I5jOCQDHN5bwMHh
HIarMWRC9HNlDkF4QWILMhLH6ab2e6j7XlSKPv4GrQ/UUMmnckBF+xulIOr8
bfm4DbGgWfXSk9q5STJiiuc/Qy5c3uNnTBTIf1NkgCnMbi9hdnWcbFBAqVFC
caKMrYstzCxNYWpzXtXiXdhb4jm7xuYhff/5Ceo8HycHHJPTTl+S1968xunD
fQzPVVEbzWBuY0r1IJJ5h0DIqfJYbe5BBGoZjK2OYYJ8MDbfQG2siGI9hTS/
c7YcQirrRyTqIk8aYDW2qjqCFkunqueTKCWQIfNUeE0lAka1LpAVDkg5MDVP
DtidwvRMAVGJj7V0Kw6w8npua29BBzmgTdepdF5Pn97L/13UZ1EcIPEBfbSu
7hY0d0otIeGBu3i99S4Zgkys43+vXw/fYC8GeiVGsE1ZoiDrAqvYl7mAK63n
8G3f4Vu7tY++vRIHcNwuJQfou/cj7LGovmd5+m2LK7ImvoOxxQnoDQZ0Ut/7
7fRbQiboOL683tYNXyyMU3LA2uYwao0QeqVmCcecQWqze7CHY9yA4gCJExCN
kDmBITJAgyxQT3P8od5WeL/I2xnpmx6x0Y/pREd7E/2dZrRLrnRXC32iNloH
ffoWuINGFEshuDxG3m9DRx/9I+p8D8dfmf8323SwcKvrbUZH9x2l/e29LWgz
iJ/Vytd0o8/aRdbohT9kRDRqQj4teRJW+qQ2xGnukAXOoBWxXBib51u4/tgV
Ht7ECErPwMcfv1br+48/fl/F+l09OcYO/dDNw2UcPTyhv/8Ez96m7r9znyzw
AM/IBM/4fmGAFx97pPIOH/P5h28+wDlfP7Uxg2n6hrOjMVWfR3ogSI1E1e+Y
rDVT9mNWaiZVvarW0UhO6iQmMTJeQpx85Ke+5Mfpi1Mj1zcmsLI2ifREAw7q
qDvkhlOtAVD3vQOqD96g2wyHp1/Vb0yptRnx/W30/R08H3Z1TVSTLpoDNZkn
yHiRzfpUvvvhvRnsH0ocwBTGRqKIB+jHx0X3nShJHia1X1nah4qwA7WynJVa
BLS0F6Wsh8dbYlEcyNJfTpAFg26pX2FQtW9ywX7kQv3I83os8DVrB/MYm65g
Yn0O0/TvZ3ZWMLM6ifpIEbV6AdXpOrYvdjG1vYjFk00c8VwcPzlUvv/m/hZG
FiaxcrzB83KM8xfXOH95hYuX98lsx9g8mMPQOBmDGl+dLCGa9MPlHoB1oBf9
NhNc1Pghctb0yhiGJV9gntwwVkCmGCELBJHldRjnb3DY6af3aRwgcSfdvW1I
VeLICL9lB5HwGxQHZMi1qbAV4zzXK3vklukCgjwPUjfAJrmy1PcWan+bvkvF
Btzl/6CXHCBxDCGeN/eATtUckvX+Dv4/mlubcae5ScUGvN5yR73WYmqF06rn
5/XCauiAkf9JA9lAOGDj3hoOzra0vMFryRvcueWAW7u1j7i9Ur5AzIq8xNoF
DByPpQ+6gRzgw/JqGUcP9jC+tgR7JAiXvwde+s+hsgeOQA/6nFYk6hWcXAkH
DCkOMHI8M5MRHP0dcNm7OcYZ1dpALmpGMWZBWeIFklZUU2SDhE3VKEhyvM9S
C8RXypIL/E4jujtb0Ubfpq2rXVlHdzu69J1o7+Z+/Ry3KjFY7Tr6TU3okni/
/i7ojPSRzO3QmTrQZ+5Ar4H3e8gC1P9mfTOauprRqm/l8xynDVKLvQOdJnIL
GULyslzkgkHqkJm+3aDXjBQ1eGVnCidPT/FIegh/TNYArtXtx6quMHWcGv/o
Ha12wNXLc/r2Z3zdJZ689RBPqfHP3romD1zj6dt8/Vuyva/VH+BjD+iXnjw6
xPTaMErU9Ybio0GM5rWchemyCzMlqWnsxmzJizlV38ij6h+PD0v+RBwJ6nw6
QY6iBmdzLrXWXR+KoFIJIkUdTlDDo9T5KPVU1npi1PYIj3FYeIdclhYGUJrt
VHkBdVm3yQ+iluP9rNRecCgfPp+n7z5exPbBFPbvzeLg3hx92jRSiS4kwlqu
aTEpuk2WSPN78PtUJc9AakBJf6qsmFfxgIox4PcK8bz7yYlhH31dHvuEz6hq
TeSlvgSvmQJ5U9hi83iJulnGzNY8Zsg3s7srPGbTaFC3x6arGCcTHDw8wOGT
ezh6doKjp+eqXuPpGzIfsI0Rcuw+n7t84xLXb1ypuYCLFw/IAte44vEfnagg
W00jXYogEHaqOH+rlf69rQ8R8s3wdE3VFZRchfHFGjkgj3Q5yvfEUKzFkCLr
OMm8Jl5r/eY2mEySk9JOVpC6jG4eCzviPo0DpE6Xj6+dmCthZXdCxVlI/V+p
u21Q9X+b0NpO/tXJtd6OVqkvSM2Xnh+S79jPa7aXr5W8wbZ2rX5gU2sTXhMO
aL2LgYEeMgD/p4P8PH6OzAcY1fxBK+KFKDZO1rFPrpWagvtXOzi4uuWAW7u1
j7q9EgdQEyRnMBkwqnUBv6MPxbzEg1dwdL2H0aUFOKW2jdRILzgRroR43wp7
2EUftI57l+tY3RxGpR6iL6JTcwEe+uQ+qR3oMyFD/ycv8Yc39QMkHkFMdCcr
68Fhm9KhouhSTPqkWVSPo06Og530izp7bqy3Cx36DgSTQZXP5ZA+tPS/ukxt
0FP/hQW6OQZ30C8T7ddz29XXhk6Ooe16ya+6S24QNmhBe1cTdBIvwG0XecFi
1cHC79vD8VPPfZjsJjXffPLkgPp+X/UIfPRx6RlEo5Y/ekeLDZAcgMeKBR6o
tf7H1HthgCdkgEcvadw+pu5LDcLH5ICH1CHR/8vn1Cr6p0vLw6jlrRjm8Zjg
MRjLOjFVpP4XJW+R94uDGCtJ/qJH1TQYp43WYxgayaJATS9Iz5q0W60ZZKmz
cT6Wlbp/ZIl41IlcyoNygb6+5D5wnxWxAi3v4ONOZSW+tpwXH91G/htQj8nz
Fb6vShaRuL18OYapqQIWF7P8ztRf6liyFEAiM4gktT4l/X5ybmQL/OwSP7Pi
RaXqpwXUelG5GkK5FkKJt0t8XZosEid/RDIu7sOHNPkgTT5Iq/14kaPJGkij
4sPS1iTG6YvPUPunF8cwsz6L8fVp1OnDT6wMY3Z7Fltn29i9PMDuxQF2Lvax
zdtHj0+wsr1Mf34YO1e7OHl8jONHZIXHZ5o9OsG98x3yTVXlZ6bLYYTJRR6/
aKEZ/ZYetRYl62KTCxU06LuPzlZQHUmreobFRgqFqlZXWOoIGMkBJl5vZqn1
w/+BL+RCMGRBkews8wF+Rxei3h5y0wBmlmpY2xknB+QQcJlVfOAg+dTU24pO
XZvqF9DSpdUG6qGP7+T/yUNdt5l1ihdUD0HpLaBr1eYEpKaQcEC/Hm5br/oP
++16xQEmiSfQtyBRimGNHLB3saMY4JYDbu3W/u2wV+GAYnwAWWp8ihwQo28W
chlRLgexslbB4fUBhmcmYR600Mfuhos+m4+6red4pDP2IF1J4/hyDasbDY71
QVjNenht+psaxXr6eAakgkbkJH8qakEl3o8aP68msQKpAZWjIHkDNclVIxdk
4uQRcoOL41gPdb+rR/x8vfosvamXvnwPYrkIxjgee+kzmunH68kC4td30V/q
6msnC/C2oRVtXa9T95uVzrdR79t1zWQJjp+6O2jrvktfi9uu19BJZugjQxj6
6YPJ+zkm22N2jG1N4T799qsXtJcyn3yB42cyt3xGO6eu7Cs7fXmK67cuqP3X
ytd/Qk54onSfW77/4VtXePiS9kL0/wyXjw9x+mAPy9SySibMY8Exl799jH7z
WEHrf6iZT/U9GKWu1nISR+HASDmEoaE0MknqdsyJRlb6LXqRinnhcPcjHHVT
ZxzIK7/ciWzSjRzZIJciH0geALW+nHGoeX+Vs6Fi8+jPR0SrzAhLXweyWI6P
5+mz51QNfhem5wrY3q5je6eO2ZUyAkE7okGeqyh93eggElEHv4NT9eiVz8pT
66U/gdQiyFPvc9T3HH37jMTo83OTwX5EAwOqvl5K5sqjNrWvFL9LRj6b31lM
cjak59/4bA2jcyMYW5nCxNoM5naXMLO7jLm9ZSzsr2BxfxVLB2tY2l/D7N4q
Fnl7+WCV3DCJylQD87sLWDtYxjofW1W2grXDVaxvzCFXK8FTTKA6nUVtKIFQ
1KtqKkmP4+G5GhbJIVOLZYwvlDE2U1Exi5LHmK/EkS2GEUvwPyW1qXitGWWN
ysTrlteuw+2Fz2/jMSDbUv+ljlAuLrGPDswtV8kBY5iczKq1OJe5S835W6R/
UPtdVROguaMJTW1Nql+g9AH1OQx8TS8s0oeguw0dv+IALWdAYgSs1h4VU/gv
c0AruS2G9bMNstI29i93tHWB23yBW7u1j7y92nzAoNKBJH2XqNeo8o4r9PmX
1mo4eHCI2vQYzHYLeqnDDq+VHGCnr61Ht4G+TTmLo6sNrAgH0HdzcpySXihh
Vx+i7l6yhQkZ7jev6gfZVPy51CqQWgK11KDKJczTN8zLc2o+gLoSsSPkNWOA
3KHvo85T+3stBvQOkA0sfYhloxihfzjoNUDX14zu3iY06+6iiTovfn+3kWOk
oVnNAygO4Njc1i3zAWSBnjYVL9Dc/hraOl7TmKFfYg35WmMrOvrok3ktGNke
wsnLPTx4+xLX9N9POWau7k6jOF/F6PoodWUKQwsFxBsJRMpJpOeHsHG+pfrR
HfO1x9c7OJIedQ/2ce96n48faDXdr6Xn+wYWNkdRkVo0ca+aN6/Rt25UY6hJ
39xaHA3ud5h+fyUfVGsnMT+PZbAPmYhV+ZPxQB/SUgM6YuExG8SAewAt5IAk
91nPu1Sso8zrZ3m8Y3y/6l1P7a3y8aGCR9VjbHBbpz7L6ypkhIzMCVHPCwkt
v0Pm8DMpD4ZGUtjaHcP+wQS2t0ZU7L/ErGX5XaRWlKwryTp+UeIDyQyltAdF
+vbSn6ik6hG41VqBmLwmn5S4uX7EPH1I+sifPhPNgIS3F0lef2m/RcUGSD6J
5C1sHi1iQfrwnq6rdf/TJ8e4fHIPZ09PcfLsHKfPL8ho5LQXV7zNc/XiAhfk
tIs3rqj7GxjemOfjJ+Q5PkaWu3h2RjvlfXLdvR1kKzlUlyewf38Hy2sTyOVj
Kq4yNZTF3M4UZjZGVR3B6dVxzK2OkAOyqo5AtpxAKhdEmNer9No29jTBzGvO
ILGrvI6ikusZcZG9NA4IunQaX/EYzK9UsbJNDpjIIuTWOMAzoCcHdKCVet7Z
06nWw6Q2gE7Xhv6+Fmp7L5wWvYoTlD6fMh/QSQ6429qM1xUH3IHV1gsPGcAn
LGD/9bqAWJLcsnZvFbvn22oe4OByW9UWvuWAW7u1j7a9WnyATcXuS/xSXI3P
JlTLQXJAFQcPD1XdngD9S2eoH760F0H6qVaO30aPDdnRqsYB6+SAkhdem/Qp
6kPEw3Hd16fmGGTNNyd1Bfk5kidYUbWFB1UseoX6kVZrEtKPwKp0S/rdyvdw
D/bBYNJR1/XU/15yAFmgvw8JjtOj5AArP6dNJ/lSr+NO++u42yExgS1oJRO0
Su6ipRPd5nYVG9jaJb4V/Sw97/fQh2ojB3TdQWdfK9qEF8xkBzJBp1kHV8yF
8mwaW5crOHxCf5/as304x3HUD1MyQN2PoziWRqIShZe+44DTBl8qiN2zNRxS
8/fuH2L3+gC79LWOaMcXW9g92cTq3iLm18cxPl9HgTov9eiq1JPqaA718RJq
YyVUxgqojKRRIQMUijH4AoPwegbUPHqWx1DWb/Kq5hPPmaoBzeNFf7yXvOTK
RjCz0sBYI6RqMI+WAyr/UeL4kyE79+FAveDHUNGrGKCREw5wo5ZxqbqOpYxw
g+QN2NVcgsw5SC1HWfPZPZzEzu6EWn+Ie82KR4TZ5PX5pMwdDGpzDWq+QcsD
LWc/NKfKHShK3ADvy++Q6yJ909Mi7Tci5ed5JdukpEcFr7NC5IYFyBBb95ax
//gQh89OcP7GhdJyydM8IwOcPL3Q6je9ca3W+094++KN+yoe8PTlY6zsbWJi
bxUXb13h8g153X31/CVfe6lyBk6wdLimakDef/s+jqmLjUYekSh/ZzmF4cUh
DC2XMb42xPO3gIWNScUB1dE88rUEkuSdCI/DoE0HU2+z6j0sfTH0ZNjaWA6p
jJ/HROOAgEvP4/VrDljeGsP4eAZBp1nlC0ivIwt1W3oIdvTqeM12qHqBUiPQ
xf1LLy+H1NqWeoLdWt/hDuGAtia83noHTe13VX8OJ/Vf+gwN8rbof49OyyFI
lm/iBGVdQNUW3lW5A7cccGu39tG2V+IAakqOPl06ZEUqJL6mBbVKmL5RBYf3
9zG2NI4Ax29X0olAwYdA2Y8B6pEpzDF+uo6jizWsrNVRLnqUHxLxGOkvGpHg
mC59BSUfXPRLaghKvfpywqH8TdEa0Z9y3Kp6HZX5fJ0aItqWpM4E3CZY6CdJ
TF9Hb7fGA2YD0vTDxsgBZnsvffxm+kN3cJcc0NR5R8UCNnXeVUzQIvMDkjMg
awGi/R1NaOnm2NnTrLig9aaegLCE3tJF00HHbe+gHl5+h6FJjvWzRYzQF0zX
k7Dxdxkd9LHoC9s4pvsSIdW7V3zDxmQWx4+3qUVnuPeUfv99+loPDlQOwdrB
HP3/CaX/dWpDvpxEtpBEiVpSnSiQAfJojJMFJrid0dafkzzWsaif52wAgcAA
MhI/ofTVqdVbUL41x2/6815PP4w8TpNbU9g7X8cU9zPO8zdWCmBE9P5G96X/
rcTtqRjAglv1wavlZF3BqXoIFai5Mm9dlrwB+vLpjA/T8yXs7I+RA6YxRDaR
eH7J6ZB4Tsn1zydcqh9RMeVWHCGaXxb2yN7ovqxBSB4Bv2dZehMlbZruyxyA
X1uLintlXqBPu154HeRlTT1sRo78mE57sHm6jkPq9cnT8xu9v1LxfpfPr3H+
jPact19q2n7y7FLTeen18OYTLG5vYWp/DedvSV7mJc6eX6tcAc3IAi+111+8
+UC9/4pssbgyzs8NIRynhpPLprek/sA8NqW+wNIQKsMZnqsiyiMpZMha8ZRH
5QtYJF+gvxN9xg7o+/WojWZVjkU5a1dxkEF3j1qjyfM4LazWyAHjGBtNI+A0
qvrGnv4ulQvQ2tHKa1SnagiJxkvvILfdQF4wwsnzbNYJB5BfO3n96rU4gruS
O8Br28jPHjB1qd4cZmM3evg6HV8nfZAkPmCdHLB3tk0O0HoN7p/fxgfc2q19
1O2V8gYlbzw2oOYEtHlnOxq1GNbWqypOsDragHHARN+6B4PUQDfH7/Ze8av1
yNWpfxcrWOG4Vi55VL/ieMCMqN+s+fiS/xUZQElyB2/y0oQBtDq1Woz6UGZQ
PSfzBXI/LX2OojY1jy1xAr2mbnQZJB6hV8UIZOiPSz22Afo87Tqpwdqk5kTv
tr9GnW9Ccyd9/+67anunlX4/H5MaQi3UfuEGWTto15ML1P3X0MrXtstcrtQe
MrSg09CMHlsHPDwWjvgA/Ck7td+MftW32AS9x45QIYjZlRrG56qYo49fGC1g
ZHkY+1cbGOJxk9o9w5Np1achUQggV4tTN5L0IYNI834yG0YqF8MwNXtqZRjz
W5P0N6exfjyn6jr7fDb4vQPwuPoRDlrhJwsEgwMI83iGQ3LbRj7oh0963vZ2
wk/fff/+Fg4fHWBlYxzj1SjGVa9m6cnkxXDBiyHJ38+7FQdUsxLLP4hqznHT
O9CDrMQY0l8tpX3IUttG6Kuubw1h+2ACo7wt9ezSIbuK7RRWU7WGqP/FlEfL
OUi5VMxiOedFiSaMouoT8pzm017VVyodMirNF/8/KWsBtDh9ZbmdJgdIT0qx
XLgfGV5DsZgTa9Suo0dnuHgqdZoulf5f0K5fPuRtavgL0fZHOOZrTiUGg5p+
RW2/fvspVvZ2MHmwgbO3rjUOeHGl5gou33ig3icccPlS5gq0fELhgK29eVQb
/L0x/qbxMn3oZWzSlnfnMEGWG5kuY3S2qtamqtTxTD4Ir9TwNbfDNtCFPlMn
OUBHvsshmwvweAyqNbIPOUCOy8JaA0vkgBGyhN9hVHWEZD5AfH3pHdim61a1
hYUDTFIr2K7F7TiMnWSFVhhoHV28hqnxd/n611vuqhxDM5+XvFuHVQ+XtUf1
GJI1hF5dK5KVFDlgg6y4pThg73xXxQzecsCt3dpH214pTjBmIQNYkIv0qznZ
JHVHccBGFYf39+jvNmAwm9DV14t+lx1Oak+n6Gi3DulqASeXK1heraBSciPk
MSHuIwvQ50sGOaZHtDUBtY6sOOCmNp3UrJc6hmmt3rD4oFK/IENTMWdxiR2z
qrzDfmuvik3oMUt8gAEp+jUT9NMdLgP0va1q3f9O2+v09++gVS91AuhTyVoA
9V5YoE3VW5Fx8o6aW+jlGN1B3W+SeIGb+YA2vWbtal2hVcUN+JN2xHkcbNRd
Cz8rTM0cWyiiMpXF3P4ELl8cY2Z1FDPU8VQ1hVQ9jvp8DtXJFDU0pWrFSK+a
XCWp9KQ6U0VsNI7CZA75agKFoQJZYhKJSgzRXFDVpMkVHPCHe2Cj/tuklqys
1cQcGJQ48V5+d/LXh1upL9PdK3GUXZhYHcO9p/v0h+9h93wN4/RFR9XagB8j
wgB5skDRh0bBq1neo83FpDV/XXz3nKwPSZ+HpMT6R7C8Vlc9AoaWyvDzXMaD
sjbB18WlH8Sg6gEpczpanUCPmqOoZLxq7SBPlsvwvMu5LsuaA/3iVMBKf99M
k3UAbS1A5gJiXm2b8Jq0x2UtKWRGxM3nYi5q1wpOnpzjkr7/yeNznJMFrl4+
UHMAkv8nun/O7TFfc/HmJc6FA94kB7zzFMs725g6WMfJGxI7cI6TFxd8LXmA
r5X6Afd4vM5eaGsM549OcXi2g+X1STJcGclMEMXxGjmAnLs3i+nVCUwujvAa
GMLY4pA69yPTJRTLEQT9Fjj6qb82HYySxzrQgzLZL5V087fbEfHoEXTpeVyo
uTw+C2tDGFkZQqoYUXm64udLv0GJ52uW+gHdneSAFpUTaOL59Q32qd5BgzIf
wNeIrku/QRUb0KLVFZaYQhOvDQuftw/oVb8hFVOoa4Ohpw3pWppMdcMBwgDn
O+SA23WBW7u1j7q9Up+htFY7Vvzxoqz5hm0YuuGAowe7GJqswxVxw+IjA6TD
8OZjsHj6YaDeN+bzuHdBDlijzpEDomQEiTfMhC2qJkGRHFCMSGyA1CzUGKCa
0nrYiv5LrKDkEFaoPynyh8QIyPeQegIpvkf2Jb5Wn7kHeskZsPQpDhifLsDl
pm9OXW+RugBdd5WON3Gr5gQkH4BbmQOQNQBtbuB16marVmO4t03VEpCt1CaS
OMLWLm0NocPYBluELDKcVLEQvQ49+p1mlDj+7z3ZpWZs0zbpfx5RGyYxNF1R
/n6qEeFYG1Q1Bzb3p7CwMYKZhRpKtRwmlmdQridgGTSr2r65Wgrl6SFML0/D
7nHCSM23eKm1ZLFUXOr8OskBfXxvWNW7C7jNMEttBlWfoU3llxkN7fQJ2+FO
eLB7vU49O8H581OcPj7A3MoEhqoxjKi1AT+GCz6MFD3kATeGbrhA+gbK2oDU
DZLYPYnXlDmBXN6H2YUSGWAMC+SaaMiEBM9niudRYvtz5LSc5JombGpNqZC8
mRugCR8Ewia4PD1Ikxdk3aGadqv1IVn7T/pkPsCk4gETwgASR+LpU+sEwggp
Pi+ckOV5DzjIB2SSrfMNnL68IOdcqny/Q2r22Uvx+ckAar3/oZrnP6G+n4vf
/8a1YgRhg8WtNcztLCv9P3t2wn3cU/p/ynN38vQExxI3+NYV7r/9AGfXR1jd
mqNGjylfv1SNojJWxNLOLGbXhfdGMUvtn1wexuhcA3Nr42o+qFiJIkQOcFqp
5bxWLP3dvE57EIv6EItI/0ab4oCQ4gA5vn4srQ+jMpSAx2/D4EAvHOYOuPg+
qQ8ktYQlNqBJ+g11NqNX8lesOgyKf2/oRA8ZoEv6EUqvwXYtV0DiBIVrZX3C
bupScwEeyYXt0WoQ95EHsuQA6ae4f5MvIDECu2fbtxxwa7f2EbdXWhdI2VBO
9KteOyUVi0YOGI5jdbOO/atNrJ+uYelwGQsHq1jkdnFvSbODeWxfLNO3IAes
V1Apu1W9gJTEfoUMyIWNigUkX7AoPYe5/3JiQNUuVLGCSRtN8getan6gEOWY
Sa2RnjZS615q00gemYyxVnsfNV9bG0iXk5iaKyNCrTb0SW2AJtU/SPT+bqvM
C3BM7HgNTe2vq3mA1s4mtZU1gtb219Br6dTiBcgMUl+opUfqDbSj09iBLqk/
ZKM/Tr0Ll4Mw2+jbmZp5nLoQygexdLKoxalRc/fu76A2WUGinkOIvny4EMKw
9K7lcVnbncXy9rjKeauOFDGzRg6oJWC1Wejvu1GfrGKYbDC7OoNAxAtfnNpa
8qmeS/VGDLV6CsGAHTPL1J71CaTpR0ptGPdgLzx2HVyDOpjNOuipEWPLQ/w+
R9S5MxU/d/H4ENv31jE6VsBQmd+p6EdDcvGp+2L1vDYf0FDxAR4VJ1ikVmfj
LjX30BiKqdjApcUysjHqdqBf9aKUGBLR/izPS06ZXcUIFlRdQPq8ZAULtVAv
vR7T5Lq0CxmyXpJ8EfOb1RxRXGoG+QxKEwPOHoRdBlU/SLRf4gbEJHYwEzAp
HziWDvIa28KZ1AV6eYXjp2c4oJ3JvD5Z4PjZJTWeGv78Svn093h/nzq/dX2M
vatTzK8vYHJ7UdUSFjtT547az9efP7tQ3HD9sQc4fbJPfpvA9NIQGgtFLUdA
1fqZxNrhPLezWJVzujWF+Y0JTC2PqPmAibkaKvUkWWmA/nc3vNLX0tzN64i/
MRJARPIvslZE3DqEPLx2Yy4VT7C40cD4aBoum0nN+1uEPanfPfp2bV2gi5za
pa39S68Ck8z3G7vVPH8PH5M1f2GA5va7Wq9B2l1yrIPsJDkFHlsvvFa96k1o
JDcYFQeksH0mdYS2VX+hA8UCtxxwa7f2UbdX4wCn0t6a6j/sVPF81UoQIxMZ
jNLXHZquoTHF7VRZ68s+XcYIb4/O1DBG3ZtarGNiJo8SdUX8PskPLEjfdeqG
xP5Jz+HqTd/huuQL0v+sZZwqJrCRdaocN21LXymixROWU4NKY6RWXoJsEPAY
Ob7qoevTI1NJYmaxonrkup196KF2txva1bz/nZbXaK+jiTzQQg5opz/V0qHN
9zfx+bttr6O7r03ldTWRF+50kBW6m9DTT8bguNkmeVs9zei2dKHfyzGafrqP
Y3y66MT0Ygk7p5PYulrB/sN1FFfLsETdqq5ir9MCLzV8cn0Mq3uzWNqQHLMG
NYO+5WwNi5szKFEvPH4yDr//1OIYJjcW6VPOqrnhQiWk5ddlvDy2JYyOF6nJ
bixtTWNhc5ra61R5GBJ/4XP0Kr9P19MBd9yNnctVnD6/R23T8uHOHh/j7OE+
FlZGUCK7lCWPP+tFLuNDPiP1/MgbWZ+KBSxmPSqWP5f2IEEWKVYjqlbA9Jys
bfuQFP8/qfWDLKa03pDFtGaFjEut+UfCA6oeY7ehTc3PBLNhVOerKAz5VZ8n
v8ui1rbDboOqUxWU3+E2KpP8UhUjqGIGJEaAW8lflToV5J5UIYq96z2cSD6g
6PzTU1UfSNb5Dx5dYOe++Pjnqt/j8aNz3j/FIZ8/fHyKew8vMLkyiwZZ4PD5
Be6pGhAfmnCDcME1ti7XkBiJIFoLkAHKmN8bx9LeHKZ53Pcvt7B7ualiBDcO
lrG6M6PmASTvY3plWHFAYzSrWMdv74Kfv9Fo6obeyu+ejyPG8yN5gxHhHjd9
dKcB/pANC+t1zMxXFAf0dFGnTXrYrEb0kQVaOtrJqy0qV0DiA6Sutpm8K9pu
Fxa4iROUdQFhAa3n8OvkgBb+p/u0uQCyrHCAmg+QvEHhgLo2H7BztqN6D++f
buLgdj7g1m7tI2+v1Hc4rfWXrSaEBRwoSRyY1BRIOm/quUgtGvdNTRqPdjvB
xxPUl7QXeWqDvDYVknn9AVU7sCyWsGp+f0LrZ1hV+j9I/dd6DjYyDq2WLm8P
ZR2qH3EmLj0P+1XPmwLfk6NJ/ZsYWUD6xPcIBxSjmJotkgO8iPgH0G/To4+a
Ifp+t/W3cKftNeUnybp/K7W+i2OgYUCv5lglvtpEzeoZkJpBrSqOQC/zsfT3
jRzDpVdBr7EVfQMd9N2N6CV7WD0GJIt2lKZLKI2mEK9QHxte2BN9fA8ZoN/M
cd+IAfF5h6IYWZL5/iFMLhaoQxW1nrywMYU6/b9sJoCRWhyL5AU1p7Ixg0ot
gTx1uCTxAfkQapNVjE2UkYh5qDsyrzCrfPCwm/pJHZF+smb6nD2mDoxQ689e
HOHyxSmupZ7RG6e4en6Ci6eH2D1dRLmagNPnVL2FbHYdtYa/R/rc02Se2cZj
56Q2h6IupMggw+NpDI8mUC641LHPJHlOeP7k8/M3DKDqE/F6CYX6VW1nvbED
bfpOtJh7Eebvy9XD8OfcGFookQViZAEz/WQLeaAPQY/GAEF+nxCvl/DN+oCs
F0hcQCpgRsLfjxD1TPoN5CoxlXdx7/EZjh/ew8mTEzXvIX0dT2WdQOYGnmt1
A86lTjP5YP/JGQ753OrOJvL1IipL0zgiB5y9vM9jdV9p/4WsHby4puYvUv9d
sIZdKu9yelP6Jy9hemkEI4uj2D3bxNa9VWwckwF4voTLFjcmMEsWkPmAydkq
hsZy5FWbqhcYEA4wdpEN+zAylkYy5eUxs/L36OFzdiPG35dM+3g9DGF+uYGA
z6ri+PrNPXDajSr2Q+ppt3e2q/WBu20t6Oxqh4l85bUZFAdIToHMCUjeYAtN
1gRea7qDJrKBU3IPpK4wOcBh7oJJ36r1GVIckMHGySb2VJ7ANvYlb+B065YD
bu3WPuL2SvEB9NGVTiutlrV6h6pXW+QYVqHfWM1p/WIquSBvB3lbzI9aTiyg
budTHpV3KHH/0r9Q1QeQnjPkgxJNYsmrNJmDVvnqac3/V/fTksPuVjVtZN6g
IPFl9DPrUpNOYs25r3R8gBoic6g6+lN2FEpBpFJuVfPA5eyFgf57l6FFqxEo
a/6GdrRJXiDHvx6L1B+QfoOttBYYB3tUbmAHWUB6FUqegNQSdtHnNkfM3NoR
yDnhD1phtvZiMGqDK2RCmH5uvBiHI+hQcwcG6nG/c4AcYIR+oA99dgOs9Gel
7nKdzFAYiSEhNYCpJwvb09TXLIr8DJmrX92bwdrhAhYW6+q4VgpBFMoReAM2
FEdLGJ+o0j/3YIN+6cr2DHXXjaDbBLfLRO01kVWoK2Sy3bMl+scHOHwktQpW
6estYftsBpP3ZrB+vYG5lTGe937YyDoDktdGn93Grc3Qqs0Z8/g4HSYkyHWl
QkDVGM6Jr59235hLaX4ybkc87uLrnAiT9WwSo9nXge5e8ojkc5p0CCT9SFL3
XUkznGRJX96PxnwZpXqC58hC37dP9ctx0XxuC8KRQfjJCDG/ScsfFN7yatuw
gxxA7svXUzh5dkr9P8UZTbRf5Qc8v08dv8L58zM1N3DvyTm2rvZw79kVVvY3
sHFxhPm1JSQLKdRWpnAicQA3dQVUzuCb91XugeRoxGpBOMJepEbKWD8SNuO5
Gi9jcmkCW0frWNtb5rlawdL2nOIAWReYWRtTcz1TC3U0RjNaTIdTpzhA6gcY
qMcjo0nVd7iY4XMO6bVhUPMpOZ7ruY1hzK801DqMkdpvo2ar+ABdKzq6O8iu
nb+aE+jt6YCD3Bbg9Wbv03ILe4UD5PmbGkKyLiAc4CJr+aSWkLXnptdgi+ot
IHEHaj7gZEPVDlImcwLnt/MBt3ZrH3V7pfkAanGDOtzgdkh6zci8L8fxYlKr
W1+XHjj5IOpi1H7NpIc8jXxQpclr5T01akZD5vzTWixgVfWudSutbygGcKsc
9iG+Zlhq28magPp8Gh8fVvedqv98VV6blzmHQdWfTnLWXfSJHNSUCHUrnbqZ
lw4MwGgQH+p1FSegs3TSqO391Cmj9BXSagm18zmpFaQfoPb3afkEkv8oeYOS
r20OeWDPuRAsB6gNUTio/90WHbo9wgZWRFI2xPmbB6nVHX3d6LSQP+wW6C3k
gH65rYc9YkOyHkeqFoM9OABryIncSB7DU3nqgU8do3ophBHeH5tIkgn8ZIAw
8uUg3Py8AXsfKhNljN2sC2wczKt8tWTcoeoEOPwO8ocZfYMWVGaHscXnh2eq
GJktozaTQZ3sMTyd4Oe7sUAfdmVnDuHgoPKtg4O9iDh6ECIDhRx6eAd0cFkN
cLv74fQYMegywk4/1sGtjVsruWaAfqWZGtRHlurlb9bRL+3u18No6+djBpht
Rph5jDz0a6Xefoq/J8rfl6F+ZxpJ5IaTKA+lEM34EUn7EVY9kJ3wenkOA/T7
PRIr2IuoR4+IW4+E14wIuS4kNfEcRhSHsziV+L4nMhdwT83lS91AiQ04e3SM
vest+vfn2Lm3i+rsmMoZWN5YxPrxJubXF8ltadRXpnGPvKDVHNRYQPEAb8vc
yfrZsqqLWZoa5rFewPjiiFr/Wtle4PFfxeYB90db2Z3H4uYkZtdGMb81odWE
4HGv8HcKB0gfoQ85oI+cMzKWQTYt1+8Awi4dIr4+VWshVwjxuw1jbrmGbMYL
M7XdrjhARw5oUz2GhANa2ptVfwGZI3DzPMg5lL6EJrKCzAc0t9zV+gzSpM+Q
rAt4PNIfhOeUnCpzAcIVYjKfUBrOYft0TcUESD3hfek5eLl3ywG3dmsfcXsV
DqinHEq/h7JuxQG1JFkg58X0cALz4xksTWaxSJsfSytbkC0fn+c4NzuS4uuo
Z/TPizGpEeTU9Ds7qPqslVUPW7vaf1XmBaj3FYlPI2tI3+HhrF1jD2EQvmco
Z1fxArmY5J3ZtBq5ea2nrdTRkfjrSID+acLNMVbq5zuQitrhpY+vU/GCbarH
sOQMdJAHjHZZA6B2mVvp97ehp79LcYDUEWztblHzBa26dtXDqNfVjx53H/S2
bpgdvWjj61s5RrdT9+xh6lPWgyD98gGO8T18rJNja88AGcBs5P1eWH0m2MIW
uKXuot+Ifu6nz8b30sf18bG0xD3wGFTzPpRpJTJOqRxSfXZcfK+TGi25gsUh
6nkjgSj1cmK5jtpUEb6wg/52EME8/e2oE2ZyUGNjFus7CyjU6POO5pEeLpAD
UiiMVJCrSG+5NazSh00kfar/c5Q+fFxqPLk0FpD+9OKby5qymRrU3tmqetk3
tzcrDZL159a2JtUHV6xV4tj5fK99AHYPecTSB4NZj34e51CQv62RU7WXhhfI
JfM1jMzRV56pIV2LI8RrIsHznsg5EE3YVFyH9N6T2sKJD+sJ0KJePm7vUTmD
sgZSJEOcPju66RFEe3qh+ggt7s9hcWcSo0tV7D7Yw9b+BopjFRw/PqE/v4yN
w3UskANSlSwaK1N83z2cSizhTf0g4YATmsQWSn3i6Y15zK7PYo16vyA+PzV+
dW+eHLCCxe0Z1WNgefv/ZO89lhxJmy2xNyBvd1WlTmittdZAAkgkEiK11jqz
snSWrtbdf///nTFySTMuZj0LvgmfgjSaDY27ITlcDOfwuAequi/nXpsebobW
NxduIREIRATiHPfP/TjXX8iYwDr5wCb2OV3ZmEeH11pyWLLx3/IDvHxGROO5
UpPcisAXHtDl89Mm79vhfZWeg3Nc9hLbg7SE3+ABJvIAs92MiZkpjE0LDzDr
eL+Y9PKUvD+b9CCS/kK8L+PCF3hfZsgdfEEnguQUHvJeG/8DVjPNNAk3uUSP
z8jjN5dGbwHlAU/w7O09D7i3e/uz2x/LD4jomL1Rx5fQmrKNYRkH2y0c7syr
He+0cLLb4rSNY/qyR9ttLnfUjvfmsbFU1h713WqSWJfifMrIJ2tIfoDkCkSw
UJXxgQi6rZF+gOYGSvwhrWMPw3Zc4w99qUFvZOn/E+crIe2JI7Vui+QD0ktP
9HEbxaDif7MW15hAtRBEMDALq0vqBccwJr1aXGbtP2gVzfeQhSa9Cow4gdQF
mNzEf+K8ze2Aw2shHzA0CM2uWa3Jn6X/O8t3ul9q9qS3oYw/ED+99FNtURcc
9JddIfIGnxiPoXniJgTIPdLEgwgx1uu3whPke5zY26oYPWak567Ujs2TC+Sr
YUSiVh2rj/F4ibhHc8wLpTCyuQiq/H2ZvA/esBvxYgrNfl195N5eH8dvLnB5
s4fByhyWNucxv7GAwXoDvY0+5ocV3Lw9xwW3V2tprecUDlAjJxFNG+l9m+Z3
pYi3dfIb0cZ1OHhNRH+OuCMadh7RpJM4AK+B1T5DrmSFjb81mEkgXsrC6Sf/
8VgRCjqQkLGFZhGbR+sY7A+wfLqGwfEGOrvLmF9t6ThBsuRFjFgf4fURDiJY
X017tY7ws8ZgLmZHludWTrg5pf+83tHezDd3V7gmJp+9eoatsyP05XfudDC/
0sBjyeMjD+hu9jSH4PjmFFcvr3ByfYq5PnnA+Y7mF4r//07HEoj9P7/R2oM7
7v/yw1OcvjjDzZsr3BInz273tUbjgL6/1AjsnQn2G7i/c7pKDF/VGsLNwyX0
pecTeVw5x3MXHpCw87rZ4Ak4UJT8B6kbbEi+A3kAf6PwgPmFEnbOhtjYX0CN
10VqAf3kAXE+K6ILIL21zTaz6ggJzjt5P9K8FlHeD+k16LZJv8Fp5WSTxHjh
bWrSo9hlQ8BrV91hOzmAmM08qX0IB5tdPhNXeC79haTPxdt7XeF7u7d/DvbH
xgViRq940YRpSL23xO9TGsvvcyoaMf1W0tCil5702psmiSXyhSGxTDBaxg4W
WmnVBpIxgaHoBTYkNyChY/7DesjQnZVedHMp1Z+X75HYwYC4P2intdZc8xD4
Xh20aMTKJrlDLW/0mxl2RKsurn3wRG+/TuxvSm/dupG3Vin5EeN72CYY7xGM
N2Na+reJJoBzSmMFmj9gG9e+xFIXYPOY4SWWz/L9OmWa0LoCt3caVR7PTby0
BCyqNazH887AIj0I3FOwiZ48+YEn4tXeR3afk/sR8+lXh+m3RYllUWJaMkF/
m1hXKYY1579RS6JM3lOsJ5Gi7xuN0BcM2jR3T7RfpI99IkZOQJxUC1thl+/2
2HVMoNHJo9mroN4pYO/JES4ekwcQZ4UHdLRHQQN98oDFlRpevD/D5eNdVKsp
8gA/fW8PKjyfYsymWrYJYkuZODTHeyz5gi7yHjd90ng2imDYg2jSi2jKh0DY
qbUa4aTRazpSziJZzcMXcPP87FrDkEsFMc/zOnl8gK2TbWw/Pscm8XjlfBdL
u/Oodsk1OnHkykHNmZdYQDnlIA9wopZxcupCJe2jz2vXfjol8gDR0Ovvr+D2
1SXW9jdxfnuIs+dX2DraRnuxhbnVHnlCA08/PsbFkwvygAFefPOSPOAYVy+u
cHx5gsZiEz2ez9PvXuOVjAf8+lF1g979+gbvpWek1Bp8f8dj3KqfLHUBkh8g
8YCNwyHWD/vE/RXFfqkTkFiALG8fr2DjYAndfhV13ssKeYD0ERIe4JL8gICT
XDWuvRjn637yACtKGfIAGT/rV3icAVZ3GloP6hPORS4gOC86wLPWWY0JTJun
tNbFTF6g2G4nzyWmW7neJDGA6QntMTg+6jc4QR4Qibl+0xG0TGkegYvPdDzm
xsrugDxAtANudTxA7cN9PODe7u3Pbn8oT1DH5yOq56O1A1LXXw3Rhw9jYWRd
0R6m/y0mdQBdsWpwpAkQ0v5BHc0DNHSBJL6g2sGqISzLYaOvUN3gFYvkEOL3
CwcYivZ9m1xj3sg9HHJeNO9WRPdG4gDiQ9fD+j4Vjdo+Pzsv/WpqUc0TbBLL
GuQCdX5fvhCAX+oB/HxnilaQbVJ1AqYsRp9h0RYSvSDRHlQ9Qb5/JU4gfYhn
uWyRPkM8x63jBQy3agjTf5bxhGmnwRtmHFOag+CiD+8llrqJl6JxaOM73Em/
3x+xajzAE7LDx30SeTdyvDYlvv/LjRQqjQxyhYj6/aIZH43Y1RIypis1geQM
GfrFCWKl9LE3Wx+Rm0iNAzGynEB5oYi5XhXZaga9/TWcE+el783SZgcLm4vk
AXMYbA04reHuwwmubnZQqaWJQT6U6X9LfkAp4UKK35eVXgHkbnFir2jRe4k1
oaQfpbk8OQw5FTlANO3XHnYB8gPpoZvMxxAppJEopriePnvSo/0PZdyh2SmS
Bxxi62IP208usfPkHBtXOxhukweQw+X5nEhcJBu1aw1hOSWawuQm5AJVya/k
saRHnoxfVLg9F3djcXeJ2HyGwe4qffMjnD05we7ROrpLHTTX+uQ+be2BcUrO
sbA1xHPygP2LfVy+vMLRxSFqkid4vodXo7qCd6I99DfRHnqrfaTfyNjAzx9x
/uxS8wGll5CMA2zQ7+/zem4er+GY1/iY605utnGo+QHrWg+yvj9Ap1tGez6H
St7/JU/Q6bTAmwlgZaVM3ic1Nz7yAIvyAMmjEZ3BvdMeVreaGg8I8Nq7HOSD
5KROu4wLiCbGLHnApPbGstrIL8kV7MR0u2VCpxaJBciYgI7jiAbhNGa4T4nH
k/EDj3XqCw8Qi8c85AFDXL+50p4C0lvg2funeH7PA+7t3v709kd4QLct+QBh
LLWMur7BnOj8h+iTc1l06LW3TVRjBhI7kFi+rB80w7p/XzCfJv1vNDdQ+ITs
q7GDqKFlP/qs5iS2E8a4v/S4aad1/N/QvReNu8wXDVzRxF/r0noZDMkJOvUg
sT+EnsQm+HmZb0h/wmpM866rfAeWpT8RfbNUyokIsdRkN/QFJ8TM41yexJSN
XIA2Qf/f6nVqn3nx76XewCH5WhXyk/0hulsL8BCLpuxT2rtAdIjGR/WI9jDf
9cRtGRew8RgWj011CaWWz8NjSZ2iV3Lu8kFESxGkeX6aH1eMkKsEkSbeS++E
JH3uTDqAHHEjRYumpB7AAYebeGAew4yM7fodiGRCSFeTiBeTSPA4sUIMi9uL
OL7ewuLqPIYb5AFbPSxtNMlfhhoXeP3hjDxgF5VKSnvcl+Iu1e3JpbyaT1Yn
B8ikRRffjEiQ2MHfkCqlUO/W+WwEkOB5RRI++AMOBCRPrcLvT0cRK2aRLGeQ
SQVQzonmo+TIOclxyJ9ON7B8tIXtpxfYvTrC+tEqBpstcosY0vT7MzE7MdGl
YwJiZdGh5rWoZbw6VpGPOZUDVCQ/gNjV31/VnP1lch7hGBdPjrFzsILFpQV0
Bh0dN3jxzXPF/N7OMl5+/wa75wd4+uEpzsgNhAesPz7C25/f4cMvUmNg9COS
nsRvRENAehX/9Im8bw9HV/uak7lNjF/e62r+pfSIvH51qrWEl08PtF5A8gS3
j5ewyu29pTnynwJKeR+vgcEDHOQBPj5Tq2sVrfPQcYGYhVzJTR6bRG9Qwfbh
gmpPS75LmNfXYTfBJ/kmNukfZNQDip8vJrzC5zTBLdhOk3EBiRtMaW6A6GIY
PTZmeP9K1TgSQds/5AGcl3Ebyde4fXeN5+8f4wV5wHOpH7zPE7y3e/vT2x/h
AWXx50pB1IihFekzVA6hyuWq9LkvhVEpyvqwrleTfXQ5qPvJdt2vJD1wI9qP
VjSBJXbflN5Fogkg/QO4ril9A2jNWgxz1ZHRr5+rc10joeP9om3brBqadaJ3
366LXl1C69mknr3A7yyk3QiGZxFPOrUXTZ3HrMv31oQPCBdwE1cd8NL/Nbml
H9uY9iISHmCWHkl8587yvRlI0lefyyFdy9LPpW+W8Crm5uayqi1s8lphpm9m
ssp7+SEeTRt8YNYxCWfIAWfQo1zC6ndproHoFDr8MtZAHy9o0T6G5oANftF3
Ieam6INHpW8ht3nJFSQX3yu68tzP7bPCxne+9JXX3vIS0+X3h4iHwWQAgVSY
xwnDHZJzFG3iMtYPhlhYXcBwnbio+N/G0taK9ix8+f4cZxe7KJel/5NPa/Gk
V5DoNIumXYH3NxqwIiN8RerMiEfVTgn1fgOxRBARYkcg7ILH56D/z/vCY+bL
CSSzRjwgX4igUgggz3uRIr4XRe9ho4XuzhK2b8+xd3mEjcMV9FbryGS9yCZs
5CFSF+Agzju0B18hyeWUW7WFkhEbshKvIJYW45If4EFvo4fz22OsHGzg6Hof
p0+PtVZvcamJ1vIiFnd6qimwf3aE3t4aXv3wWuMBLz89xwXPob7QwBp5gOgK
SE+CD3/7hE806T+gmsS/vNcehesHO1g/3lb94PWDRZ73MjaPV3D1UnINzpQL
XD8/Uh6wc8J99npY2xPe1UVrocz/EK9DUrSC3LDTt/fzWVpdr2l/pXny10LM
Sh7g1ee73srpd6xttVDm9QtIn2LpAcDnzCz5fuQBs5ZpTIh+AHmA22XV/EDl
AGrCA6ReQPpqTBv6w194QEL1AzzcR/D/Mw9Ixr38ziXcaJ7gjfYefv7u9p4H
3Nu9/TOwP8IDvCGX6uZ5+f6Qenk/fT810SMLu+GPuBCIGlO/9FelBbkcjMqy
E8GY1Jl5EJJaMzEuh4g5QVkntWh8x4f5bg8n6KPzPRlJGmPPkZQx/hxLismy
DxHiVJQWlvWZIGL0Y6WGLSxj1Wk/sdSvnw8So8Tv9oRsCBLjUlm+a+lrl8kF
asIFqvS78x5kcl4kiVMe96yhMWiZMPoQcNmbCiJbzaJMzK/w3Vydz6PQTCOY
DWgNoOgKSC9jo67AxHfuGI/xEJMzj/ienoRVdH0Dbth8Ls7bYfVYNMfQQl/e
5ZcxAmJ8hJyAfm6hlqLf3kRvvYVqt4RA2q/X100/3BWwk0/Y4KTfb3XbYCIm
SN2YaPOFpI88r0WI1zJC/zuQiMIV8mtegk/6OraTaK1L3+IaFnfbaO53Mdzr
Y2WvjZcfrnFytodiMYEsr3E5E0CW17xCrBCL8DszccFnXnu/HZGQG5X5EvKt
PM/bh0CQ90zqAoPE6GwUZXIyGUsoVPNI5OPaA6lAvpXJOpHKu8mlQsgvpNFY
mcMa+cfWzSFWzzbQXiwgo3qCHqM+IO2gubQ2IEcukCUvUj3cqJEbIBygJHqD
MRc5xDzxnMc5XNfcg7MXF/TFV8kD6Iev9LG4v6Rj/NtHR5zf0HqB/YsdvPr4
AldPzlHrCg84xId/+Q0+/k3GBL4lHyAnkL6E2nNY8gbfY3V7HfOrQ+ycruvY
/xoxU2IbwgOulQdc4OLJEQ4utrF7uoqtg6FqCYrepvSNEJ2rfMJKvuWEnb59
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
xgLI5iIIuC3kC9Ojel8jPyCT9mPndA2P31zhiWgJvX5s2Nt7HnBv9/antj/I
Awyf36ZcIBSxKiYbWG1gtF95gENxP8B1Yv7IyKcXixrbBe+VBwj2R0fjBCML
R0Y8IEK/UHLfZTr6jME7jHk5jtdr9GKPSL259PGlj20ingsHEM0i6csSo2+c
ykfQGdYx3GhhuN7CQGxtTvvbNdo51RTUWgGT6LB/TT7wd/Tnv4bE9CelfyD9
+q9HmP+AHODr8YfKBR5OGqYcQLBfaw3GNZYgNQdTxPVp0R6wmZUHWFxWTNvF
DyRfcU7B7DPDEbRo30E3TcYBRNMwHDd6KeVrMSwQI4dbVaycNLF+uYy96w3s
3WxiWbCBWOtPkAdUU+gO8pibS9CPDCKYCsBNHuAKerVPolPjAiEUGzniYRY3
b09wRKwq17Jo9pooNws4fnaEm/fX3HaJ65cX2Nrpo1CLIiG1fknek6wfWfrw
0icwSf8/UHBpzp4/7YQrZiFmSx+DJDzS37EaRbFXQ65VQjIf1bqI0lwUmRK5
QoHb+TlP1gknP+vNh+AthOBLuDXnL13juVZ8SDT8OiYgOYVRcqHe3iKtSauR
D1SxsFPFPK9Lj7zk4MkhfWfJZ2ji9uU+ffQOt/fp19/hzfcvsX2wgVytiO7R
NrF5Q+MBF3cnePLpGnffnNP3PcHSdh9bT47w7q9v8f4vwgM+4PUvH/DyuzfY
OVrD2vYA9UEdraU2OdgAixttDPc66PN6NPj7ussNDLZ72DnfwO71LnnAkfKA
o6ttLK21Ua1nVPsg4J1ByD8Lj9ZEmNBYXkBnxAMqOemdaEWL12+e1lmdJ2fb
wMZOV7WcIm6z1vyH+cxbtY5iRnNVpHfQBE3yYW2ilSkxMtOExvynZ4j9E+N8
pkXvckJzBMKlNJpzadUTdI3yBN0jHpDLBbFLLnN9d2FoCr65xTPRE3pzPy5w
b/f2p7Y/yAMU8zX2P8Jl9fMN3130Z9zENRd9FdGB8UjMW3rk+m30Ua1qPonD
i3580Ijt+0NcR/OGDC5hHPMzH3AaHCA64gMjThCOGFr1Mi95CHH6zKmQU2sF
wuQFoisoMQHJj5K4aDIdIv6E9T29sjWP5U3DljZoXBbtVqklmLIaOYGTFuED
DzFufqS1cTN2I1YvXOC/nvgaX0ksQHMDhA+QM0yRC5A7iJ6w5BCITdnIBfg5
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
dJl0DENwW/F70tAFlnjA2LTBZ2ZtD+GNTGpv3xm3HQ9nZGxjSvmDcBuNDWg+
4d+NeMRD/Z2SMyixb6/fQ//Nob6bxW2mz0y/jfxj2iQ9YsY1Z9Bkn+T6aa4X
vUFOvXa9Lr2Nlur+bp4tYeVyjXi1ic5yBcVaCoF4APX5PJbIAwYLKaz181gj
Fg1lHZdbUn9WieP45R59vAM8/7iPV99c4cXHSzz9cIKnH080b/DV97f0e5/h
1bd3tJe4fXONzf0e5parKHZFCyCKYJY8K0M/skiMKkpdgORsBDCXjiBCjPd5
LQho72er9p+Oh+1IENslHp6ISW8HE8JcnyQ/ySR5P3jvsryH2aQfOXLMXMqD
HO+l9KSSXlHNXBRLK03snZP/bHfR2yLOKg+ooL9bVT4wPOwQ5x/j5a/v8W7U
K1ji/28+PMH27hDLuwPcfHzCbe91/Ye/Sf6fEfuXsYJXtJObY7T6c9h5fIRX
P77C3Q+v8IYc4M1Pb2ivdT8ZKz+53cHqDvG/aWg3FmkSZ8k3MmgukUeQc2wc
9LGxN8Ayn63eWhNz8ylUpSZS+kuLTpSNz7tDdCNNsJHvpAppJFNuzM9FUEo5
VEeoXU+gVeIzXkwg3y6rTmKEnDHI51R6DQakNzR9fwevrSPs4f/NRh4wq/00
g7y+Yb9cf4v2L3JIL82ZSY27WDx2jTVVef71eorX3YMMeXQ67tN8GYlXVPis
HEm9wJvLUZ4guYDUDd7nB/wnTTD/1f8u18EwmX8HY9vn9f+lz/He7u2ftD/I
A0T/J0ifVTQDpF5ANPsFu6XG3cf3v9TtCw/wBx0I0r8LSo5zQsyHKP39ED8T
iBAv+P6SeLfDKTxgQvv+Sbw/XTRq/QuiQctpriTLER3fz0m+HK0wmubJC7J8
d0leQDnp5TvUp3pCPuKpcAEx5QHVDHKVBGJSW5AJYXV3ERV+PpMK8p1OH3NQ
VR4gWK8awWLKAwwfX0x6CoaiZqyedzA8GiBYyJDnmMkDZoj346rTJrxG8wRn
jN4DY9MPNE9ySrRdpS+c9BqScV2n+GQ0Yv4Mt03wmkm9ovQ5lvzJaelZKPkG
ElchbhSqMcyvNBRTOmt1tNcb6K430egXkasmlQfU5nNYXCIPWMljZRDDynoB
3W4BPXKBNnlVvhhXHnFwta59bC+ebdHPfYo33z9Rkxy4lzTFwG9pH1/i+vVj
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
z2vLrz737vYSTZjg7fbSu6z/Tuve34dvtZ/3TY7LZ1/4hDpOv/Eex1Lso1/+
G/z7L/0V/uVXnlVzEN/JeXwnu+/L3r9WZI7jQT539S2fe7vJ62ff4ntkP97t
82/9HtHfd/0e/sbZ17VeFHffZrdf0/4H6jeo63dfJ0t94k+x+As/j4kf/3FU
52fQ2N1CY2dTMzLB6E//dzh++bX3PMZX3rbfovE//dJX8Js8R7/Gc/XWcyfP
/2++Lu+r/X3564oDfuSvPob/93+I4Nd/rvGeHOB2SC9YapCdeuTWwx2xwh2T
nGoX/Ak3NY36abikYuik/o7kGBpMHar+XjQdgIu+m9SzM1Erewza3IDU5THR
DwpkXAjl3PRDrWQIg5pj11kukwN6eY+28TeppWQAg8yt9/Kzxm746WtGfWZV
N0BqCcb4OEw+CXMZof8UoU776etJj4Fcjpb2ICdx2LzHqnEE8ksyYodRze9f
Rie/v4vb1GXsVDzQZSKD0EeO0Td1cNuN9OstYtx/P7/DQ7/T4jRyW6nptk7q
fbeK39M7dSrPsEfy/aQ2gVWrEdhj0XIMesw9al5ATza4PxYgHKCzmFW+vjDD
RV0ntV7iMHkck0bY40bYYr00clXcQD4gP4Wp/zEjeYTng49jfWHURitwUS9d
1DWpMSS59noLOSAQQGNqAHObk6rf3fz6OObIAjPCAatjmFsbRaWeJd9xn9xO
5Jolan6/svH5QUzMD2CMWjYy23ijFp48Hlnm56lJm1c2VQ0+YQDp5aPVrDlS
NWql3s3BjU3sXadGXt3AluTTna6pz2xeWVf1d9aPVjG7OYv6cBWZahyRbIjX
DHUm6UMwTgZw28hekosShclmhs1jRzQXI0ea4Iz64PDwfbsZTqdFXVdG8tfD
ly7iA5c7lB8vvaE/+PDD6lzIPEoo4VK9okwS90FOkJhIyQmw8nhlS1HkaGWy
QCof5Xm38NowwUcOiNUyqI7VeBwnML8xTuOxoy1sTql4gG2JESQHbB8tqxhB
ZWScqdkm8klyTNCEWjPBz42qvsPS02FivIBSiuxFDlBxgsUQl+SAsvRFLiPJ
4+AmS3qdeoR4fSfJrlK3QHoAiG4rbb+1q2m26gukjQUctWsNnj5y0K4f1J7r
v7Wr5hMOlO635weua2MEEi8ocwNabuHeG9959B79BYLln4Cn8AJ6uv8avbqn
YDI9hdj4c4hPPYfE7PMIN5/B0sdewzHvefsv4w3/Xe5Vn3zhT/GXL/wX/MUL
f/xt2adprylf+D8+kH3j2d+lln7sPTX4m/T42Xe3v+367/aZ7xWT4/KqGod4
kGOpzUu8yuP5qW/z3L2TfeqFP8HfPP8JPP7yq9h6VdO4VS5/8cXn8NTzf4g/
5/vv9Dl5Xd7/uRdfUOsfvy2OUp6v8XXhm6ee/yP1O2+/jj7L6/CPvvBJdW2+
PQ7zvsn4x057DOSv3uG6/dRz/wVPvfRJfPQPfxPxg2NUb9xE+dp1lG/cQn5n
B7O/+f/hWGJBXyTD8v+w9sm/RGJyApWpcTRXF9FPBmhtb6B/RzPv6Dj+xS/9
ND734n/Fp57/b39P2+8/wr/+ytNqv4/aDLX/tdfxS2Q0PPMf2mNFb5671+Xc
8fVf+fLnuE+v4/YbHPBx/NY/S35LDnBIDRn68TpTp6pl46CfbgsID5hh91lV
rFVn70VqWhf1nfrk7NFy6kz06yXGjXreQ0bo6r6o5mMt5AqXzwSrGP0c6e+j
52es5AITOUNP/9rkNMBOP99Mze/VX4ZeT32kRjtdevpFVmSTTmR578zG7NR0
KyLiF0v/Y/rrEhvmCzgQT/iQTnpVv+FU3M3PkANCTkSo7VH6VsIB3SbZzi50
m7tVTH+noVuN+Ytmm+xGGCx6FTcuuQUSG2jh/tm5bVJzX+rr6azaWEC3+SIf
d6CX294tYwMSg2g1KL2XuMEesxb330ut0gkbGLqVSYxAt9mi6v90m4QDumCi
/2eNGmCJ0Li0JcxwpG1wZ21cGuHOkHlKdpqbuh1G/0QOtaGC8pedPjv6BjOo
DKRVX0Rf1IXBmUHq1xj910ks70xjWXzZLc2nnaeulfuiqs+B3e9RfXiHZ+oY
ou8/PNWn+jxIPWfpBSW9nyQ2oF/q4s63MLM1jXXq+eHdA1y5d4gr0rdX7N4x
Th47xenjZzjm8yNywT41aFfq11zdxs4VMsHZGjaOV1U83eTqJMoDJaSrCcSL
YSQKYcWPIanD6LLy+rCo+QqdUWo5mRFKR9Rc1CUZv+Hx6tB1qJ6KEuch9vCl
C/jApcvkAH7eoXGAxGkmcgHka2SNhB82p/R8dNMc0JukpoPEWYSQLQZRqETU
GJbeqOe1oFd1fRpDGQyOZFXtpoHRDPrnquSAUWwczmHreJEMsEAGWMDW4QI2
DhaxJvMF+3PUeu4Xr9Fo0IhKLYTxuQqmVvrJX8MYHc0jn+B7vO4zXNa57ymy
T7KUQF5qLCYDigM85E239M8iBywdLJADtLqAJ+1awRITIPmAaixf5QVI/oCM
C2j5gm/UBlTzAttazoDKLWjXI35jnkCrPSAscHhL62n8Xn2GbM4fg8n1HGzh
z0HnfhYPG55T8e8/cOEZfKjzGfyjf/QMHvm15/DLrz+Ln//ic/iFdnyb+JJf
e/b3qM2/o/T527UX32Gc/N3sxTcY4GN/j+zvkgV+/4GP5Vfa4xPfybl7uwlX
CGP8Kn3Wn+M18ksvPouf5fITX/gzFTfx6nt+7rfxB1/4c7W+fE6us/t2/3s+
Q+2+zy9v/fzXaaKX/397bx4mW1aVefsnf/UHQmHVvXXHnOc5IyNjypjnyHnO
O9al5kEKiiq0VfzUtm197HboRmwEBEXBoQX8lKGYQYoCq0BlKEQUsJu5CkpQ
QOj1rXftfTLz3srMm2PsExErn+f3xDydc/K871p77bWf/vpjcmz+wQ78HgPd
/b9bHLff/ypr7rceo3/6xFvpp3/5p+mXfuMX6Bd//efoP6OX2n9+Kb3iQ++k
N3yXj/9vfkUuf+czH6f/8us/T7k7b6fRlRUKrq7Q+OoqjS4vU/rKJfp/f/0X
6LNPvIvo6cf5vR/Z5nd/iJ546tP0O/y9/uRfvkK/8G/fo9vZD3z4m5+j7379
UfoW/6bN++ybfPuHvI1RXwrvcLUPGLuuD2jrPiNz34/xuRY61sb6gvkB0he3
2dRcHz99g2gqeu2gHx968p9uw7w7juF6TtPxk6YO7+SZ5/N59yZZi+80x8yd
Q21SC3+86Zj05DnL8fQZ/rw21vUOjvebu5BbMHUBrRxT9/ZwzD/YJr2EAhzX
jfRx/N/bRAOgp4WG4AN64QPaaDjQyzFUF42j19BIl8RT0P8+zIMcaaeBUQNi
RIw3t7Lv6B5qlvWHO3pNXqNd5iicYdjP8H3N7EPOtB2TdQnhWU5jbeH2E9JX
SPoEod8g33+mA77hlNQJSt8Au0aB9BZgbTrDr2tiP4FcA8ahz3S0SL++H+PY
9GxvM7WPsa/BugLJHhpET6VsgIK5gMytDOUHKVbC2gxY62mYQlnWzXg/tbE/
62NvNjkfo/kLRcqyXmUmg7Rwviz16edum6cLd67QReb8HSt0gT3BIse28aUk
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
jndz7It5bd3UMcY6xvf1B7rFh5xmvYgWUN+YoMpCijU9a/L0zMxKVvokL5zn
OP08eiVXZJx/Wer9KjLuv8Iajpzz6pUZhuN18QKs8xz3r9wyTWtXpvlyUp6/
fHmSqdDChQK/H7/vOb48l6O5FdZ69hKTHLPCW6Q5hk7kxynMuok4vY+/c3v/
Sdbim6U/Iuo+b2Yv+Nwbn0/P/tHn0X94znPoPzybec6zpS+S8Bx7iX6JrMvP
ueF59GwBsfvz6TnPv4Ge+2M30A38HjfcdAP96LEbpDYEaw3AL47Gh6i9r53a
h1mTw8OSB+ge7mMfwF5gsJv9Wi8fN638fdgH8Ps9n/1UT7CfzracpGc/7wY6
yV5iCD2Kwrx/2aOMhPtpfIK9FdY1xvzIySTlpgzSN2kyxcfZCI1EhynGn415
/xNjTTQRaqF4rJMmIh0UC/N94XaKYe4mH38TkU7pEzQR7aDERAfH/2fZA5yi
4Ch6WzWxjzhLI6z1afYeJfYRcX6vYdTIsCcOj3VQPjnEx/KgrNuIOsHhsX72
vWeoi31vN///jbNnveWFl+gerDHs9ROUXgJ3yrxAUyN496Y+g2ac38wrvEMw
dYK2LhDPtf2EjA+4y/YRMPML4QHu3WHe4Mt/7Wfoh0+jTu7DUiuHmrl/sbVw
Xl3cYY6N/9s3HqPvPvkxw1N/Q9/75t9ugm9/6+/osx/5VfrUB36OPv3BX9jE
z9NnHvkv9IE/mmd9jdM7X5dh0v7l9zL0jlfH6NG3XKHPfPiX5ft/8gM/S597
7DfE5/zbk49vbIfr8G/feNy5tivb8+2vou700avAfft5r825jZ2fZ+eafPWv
6IP/+hX6pc8/Ru995fXzASdO3cjaf1zqBG9u4pifz61n209LX6AzHZhjf5Pc
jx57NyOH33Zc5tz1ctzdxjpxjH3AKfQOEI9wXOa9oS4APXEGWE87MbcQWsq+
oH2A40s+V0azw1RcQDycpqklaCFfcmw8yfFWZSlB00spml1OsjYyS0l5rDwf
pcm5MF+foDK/dmoxQZO4PhejKY6ZJ3HfAl9fmKBpvn96IUoz8rwJE1PPcizN
sdz0Ykwex3Mr/NxJfp/pRXwGayNfVvi5hgSVWSfR/yY/l5DYHL3jCxwXBiJ9
HGeGaZJj5zK/rsLft8yvDU4MUIJ1Z2rV6HtlKUPF+RT7kmGZk4ffhnn+WKd+
HlqPPL30QKqwVlfMWgkMcvZL6JfMXmCOb6Omf+kCKPL9rOfgfJ4W1nI0j5z+
So5/Q1p6CJVmE5SfSkjsG8+HaRw99DJBycsHWOdH2KcMBzvZ93RQ70CL9HBE
D4P2vhYZR+9jzzISgY4OyGVvsJda+lrpWPNpeu7xYzL38Tm2R/Gzn/9c1vof
lf5I0H/k6OEJ/h8B1zfWWDJeAT6BH+PXnWg7I7rexPo+GB6QuRCYQzgcHqSW
jjNS+9/R3U5dg13UO4x5ns0yt+R5NzyHj0c+/sYGpefE8RM3UCt7y5HxPvaP
fRSMjbDGwxcOUTQfoXQlJXWKuek0pdkPCHwfeirmpyYomRpmH8B6z/4nFkRt
SguFAi00PtpEwWH0q2AGwSkBeYPRQfT/u4k6259HPd0/xtePUW/XcRrg+D+e
HKb4RLc8T8YDek9JvQvqBGMTyPkkaKKUZO85QP09rdTFfqiH/9/C8WF6wf3s
Ax4y/QA35gTw9Z+6y/YNNL2BjBe426w18JN3r/cWwGP3/8Rd0ncAPkDWGXzo
btNb8KV32bkEG+sV7eQD/vt//RnWmsdY/w8/Xy3xveTCPfh8+eUP0FNfeDt7
jL+iT7E2fuCPF+iRN11kzlsu0DteE6O3/s44ve1Voavh+975uhS96/dz9K7f
y/qed/9+XjyL+S1hvgzSO1+bpL/60xX60qf/kJ7+0vvoqS8+TN/853duy1P/
/DA9/X/euz7G4FrzFH/xbzguvvVJ+m+f/yi9Zxc+4Pknb6SbWPNPI/bDWrx8
3kLuHuv04v6TrO0tPZjXfoxubuW4v5XPu3wbfQM6MIbOrzvVfrOsmYdeg90c
+/SGeqSPUDDZR7HsCE1wDJwqhyk/GWE95HhpNkKVuYjo7fQCMNo9w9o/z/Hq
PPuC+dUMx7BG5xbWMrR0LktL57Mc0zIS40ITixvxLnq5MksXc6KVy4inBdbV
82YsHNeXL9g1CS6a1y9dLBnwOL/X6kVzidhZ3pOvz5/Ls3ZzLM33TfJ3HYv1
y1w+77Px2rm1rOQpstNJvr8oPX3xuhn+PancMGt0gmZXcV+O3zMnn7l8sWRe
zzqP77V8sSj5+TJ7jfwkx+qVGCWLUY5rQxTBeHdiSPQ5wPo8EuyiId7Ww2Os
6YF26h9ppQGOTcc4hh0OtNHASJupkwh00jDHxuMcj8K/jMcGKRQf4fcapWg6
SBOZcUqgt1Apyp8Xp8xknK/H2EOExEOgJxHWAxiMjDB8GR6l/tAg9Qb6qXuk
jzpZrwWO69t7WljPWdsGO6l3pIe1vJu6+XoXP9bd324uhztpgL/7IMfvzR0t
Mm8wEBmgLvYB3az5g5ir2n6W+jhe7hlqo74R/v6hPplf0tnfTG18fPby7+of
H2LfwI8Pc1we7qVohn9PFusLBUxvI6zXPJtk/4b6xwIfd+wFZtLs47LiCfKz
Gd4nKcrx6ybCXRy/t1Oc4370/klPtFMi1kbxSAslI62UDLdSItzCjzdTLNQk
tQTDfSepr/c4DfWdYL2/mfo6j9PIUBNNxPsohPGCgdP82CkaQh8h/n/IxoZk
Tgvmu8ZLCRoN9BgPwP67p+M0798A3Yo1ER+6XXL30isAOfyfuI19wJ0yNwA9
h5EruE/GDdADgPUdcwuRH/hJMw6AmgEz7/Cu9bkFpjbAjANI7QDyAw8wD+3g
A/7bz9D3nnqMdfmZGuPl6XdCnvuNa2rjvmHime8+9XGT1+f49/sc59P3/jf9
4+P/g/7yfwZEyx9+bYLewTr58DVAP9/9+sKWvOv3asMDbHiBnPnuv29/A99+
x2vi7AdS4ml2Aq+Hd/ibd75Eth3yJXLut9t3V/tDrn9EfUSd8l321197+jP0
q7v0ASfbTq+vt9vaw1o+wrEhn8+aeptlvYCOwWZTXzdyhvqDTTQaamYd6aRw
qo/1aZhiWG8tN0TJSpDPtVHR+QJTnEEcnuTYPsv6npE56nOrrO+s6aLlzAKw
Gm90lzWR9R0av3CuKLEx+gRibfcVjptXLk/bfPc0LV2alnnyALeRF1++ZUbG
wmUcHJd2Dj3y5CuXy+ILkG9fwPsjnj5vNB5eA+v4zvL3g37Df0xzrD+9nKC5
lSTNsT+ZQ95ggT3MTJASpVH2AWGaYg8zORej8kyMspUwRZP9rNsBmlnC6/i9
1vDeyPmn+D1wX4p/a45W2AcsnzdeA4/P8vaZXUqzP4pRkLdr1zBrKcfgHUKb
XHb1NVPvYAv1DaK/EMZVuijA+of8N2rfohzzI7+fm4xSdhKaHpWYN4OegZMJ
2z8ozvslxdeTtrcwx8rTKekpmJtKSU/BVDklY/upUlxyG4kiexH2BfAJ0oeQ
fUIa+QZ+XW4mI3oKZJ4BMylkaGrRXK/M82Nzhhxew68tcBweS41Re/dpWQMS
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
D/j/AdXS4KI=
    "], {{0, 512}, {514, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{514, 512},
  PlotRange->{{0, 514}, {0, 512}}]], "Output",
 CellChangeTimes->{
  3.7082558645401363`*^9, {3.708255905899762*^9, 3.7082559292822638`*^9}, {
   3.708256022157778*^9, 3.7082560386219807`*^9}, 
   3.708256106712717*^9},ExpressionUUID->"8c197113-f0b6-4322-ac80-\
6fda0ed652eb"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Measure test error", "Subsubsection",
 CellChangeTimes->{{3.708201113465393*^9, 
  3.708201116540051*^9}},ExpressionUUID->"18eeee47-2700-44e5-87b0-\
ff3cd9886233"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pair", "[", "i_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"testPics", "[", 
    RowBox[{"[", "i", "]"}], "]"}], " ", "\[Rule]", " ", 
   RowBox[{"testMasks", "[", 
    RowBox[{"[", "i", "]"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.708256713014351*^9, 3.708256725344352*^9}, {
  3.70825686678957*^9, 3.708256901907688*^9}, {3.708259132461512*^9, 
  3.708259134269668*^9}},ExpressionUUID->"9cf1e5aa-9d24-4353-ab23-\
fc633e2fcc8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"pair", "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "@", "testPics"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.708257069575327*^9, 3.708257095391913*^9}, {
  3.7082591392074623`*^9, 
  3.708259140091769*^9}},ExpressionUUID->"86c3e216-0200-4a5a-b017-\
badac4548522"],

Cell[BoxData[
 RowBox[{"1.", " ", "-", " ", 
  RowBox[{"Mean", " ", "@", " ", 
   RowBox[{"Flatten", "[", "\n", "\t", 
    RowBox[{"Unitize", "[", 
     RowBox[{
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"pixelPredict", "[", 
          RowBox[{"net", ",", " ", "#"}], "]"}], "&"}], ",", " ", 
        RowBox[{"Keys", "[", "testData", "]"}]}], "]"}], " ", "-", "\n", "\t", 
      RowBox[{"Values", "[", "testData", "]"}]}], "]"}], "\n", 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.708233216883917*^9, 3.708233244293861*^9}, {
  3.708257673965859*^9, 3.708257675984623*^9}, {3.708258773710952*^9, 
  3.708258775951778*^9}, {3.7082590723482656`*^9, 3.7082590731738234`*^9}, {
  3.708259145860407*^9, 
  3.7082591472377663`*^9}},ExpressionUUID->"c40c199d-44ef-4acc-8ddd-\
b02fe0ba37dd"]
}, Open  ]]
},
WindowSize->{808, 751},
WindowMargins->{{77, Automatic}, {Automatic, 8}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 215, 4, 44, "Subsubsection", "ExpressionUUID" -> \
"c79058f7-9e10-4bb7-9769-4334281e5c5c"],
Cell[CellGroupData[{
Cell[820, 30, 537, 11, 114, "Code", "ExpressionUUID" -> \
"f76d9ee6-b57a-4d61-b142-636ca54b4637"],
Cell[1360, 43, 442981, 8622, 130, "Output", "ExpressionUUID" -> \
"39a34bee-9e2d-492c-b337-d414c5c680ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[444378, 8670, 1178, 29, 258, "Code", "ExpressionUUID" -> \
"b18ec4fd-1fbf-4143-a624-0a4c3ad8687d"],
Cell[445559, 8701, 62007, 1595, 119, "Output", "ExpressionUUID" -> \
"6ade4e7d-9025-4322-9e8d-c6349f325aed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[507615, 10302, 222, 4, 44, "Subsubsection", "ExpressionUUID" -> \
"14a4f601-b505-4fb5-8c53-7c6a2f959093"],
Cell[507840, 10308, 604, 17, 210, "Code", "ExpressionUUID" -> \
"aaa07dfa-c9b9-4e31-ab1f-b737d4107482"],
Cell[508447, 10327, 1561, 33, 306, "Code", "ExpressionUUID" -> \
"4f0ba8e9-825b-4882-b2c1-bb29410bfd5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510045, 10365, 175, 3, 44, "Subsubsection", "ExpressionUUID" -> \
"b81b0bf6-4aa1-48a7-bd12-274ba75a03da"],
Cell[CellGroupData[{
Cell[510245, 10372, 1567, 41, 354, "Code", "ExpressionUUID" -> \
"0bb3716f-ac36-44dd-86dd-846e5e2d11b6"],
Cell[511815, 10415, 242206, 3976, 618, "Output", "ExpressionUUID" -> \
"8c197113-f0b6-4322-ac80-6fda0ed652eb"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[754070, 14397, 169, 3, 44, "Subsubsection", "ExpressionUUID" -> \
"18eeee47-2700-44e5-87b0-ff3cd9886233"],
Cell[754242, 14402, 473, 11, 65, "Code", "ExpressionUUID" -> \
"9cf1e5aa-9d24-4353-ab23-fc633e2fcc8c"],
Cell[754718, 14415, 351, 9, 40, "Input", "ExpressionUUID" -> \
"86c3e216-0200-4a5a-b017-badac4548522"],
Cell[755072, 14426, 828, 19, 138, "Code", "ExpressionUUID" -> \
"c40c199d-44ef-4acc-8ddd-b02fe0ba37dd"]
}, Open  ]]
}
]
*)

