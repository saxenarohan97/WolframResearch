(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    919218,      17192]
NotebookOptionsPosition[    916097,      17110]
NotebookOutlinePosition[    916482,      17127]
CellTagsIndexPosition[    916439,      17124]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["General Stuff", "Subsubsection",
 CellChangeTimes->{{3.7082010777381763`*^9, 3.708201081133312*^9}, {
  3.708201518721533*^9, 
  3.708201520785274*^9}},ExpressionUUID->"c79058f7-9e10-4bb7-9769-\
4334281e5c5c"],

Cell["Import network:", "Text",
 CellChangeTimes->{{3.7082713231870527`*^9, 
  3.708271325955922*^9}},ExpressionUUID->"373e1218-e0b1-4343-9497-\
0afe29ea6382"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", " ", "=", " ", 
  RowBox[{
  "Import", "[", "\n", "\t", 
   "\"\</Users/RohanSaxena/Desktop/Project/Final/data/trained_new.wlnet\>\"", 
   "\n", "]"}]}]], "Code",
 CellChangeTimes->{{3.708197342553925*^9, 3.708197372215971*^9}, {
   3.70819803679249*^9, 3.708198048707568*^9}, {3.7082226318104467`*^9, 
   3.708222632365828*^9}, {3.708223974258525*^9, 3.708223997594883*^9}, {
   3.70823206775933*^9, 3.7082320744811287`*^9}, 3.7082551337964497`*^9, {
   3.708259888661705*^9, 
   3.70825988922009*^9}},ExpressionUUID->"f76d9ee6-b57a-4d61-b142-\
636ca54b4637"],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`Private`NetChain`assoc3 = Association[
        "Type" -> "Chain", "Nodes" -> 
         Association[
          "1" -> Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv1" -> Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{64, 3, 7, 7}], 
                   "Biases" -> None], "Parameters" -> 
                 Association[
                  "OutputChannels" -> 64, "KernelSize" -> {7, 7}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {3, 3}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 3, "$GroupNumber" -> 1, 
                   "$InputSize" -> {256, 256}, "$OutputSize" -> {128, 128}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{3, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "bn_conv1" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "conv1_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {64, 128, 128}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]]], "pool1_pad" -> 
               Association[
                "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                   "Fixed", "Rank" -> 3, "$InputSize" -> {64, 128, 128}, 
                   "$OutputSize" -> {64, 129, 129}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]]], "pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Max, 
                   "Dimensionality" -> 2, "Channels" -> 64, 
                   "$InputSize" -> {129, 129}, "$OutputSize" -> {64, 64}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 129, 129}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "2a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2a_relu", "Outputs", "Output"]}], "2b" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2b_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2b_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2b_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2b_relu", "Outputs", "Output"]}], "2c" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res2c_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{64, 64, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{64}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 64, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 64, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 64, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {64, 64}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "bn2c_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]], "res2c_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 64, 64}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn2c_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res2c_relu", "Outputs", "Output"]}], "3a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {64, 64}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 64, 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3a_relu", "Outputs", "Output"]}], "3b1" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b1_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b1_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b1_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b1_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b1_relu", "Outputs", "Output"]}], "3b2" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b2_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b2_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b2_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b2_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b2_relu", "Outputs", "Output"]}], "3b3" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res3b3_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{128, 128, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{128}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 128,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 128, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 128, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "bn3b3_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 512,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "res3b3_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn3b3_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res3b3_relu", "Outputs", "Output"]}], "4a" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4a_branch1" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch1" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 512, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {2, 2}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 512, "$GroupNumber" -> 1, 
                    "$InputSize" -> {32, 32}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4a_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4a_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4a_relu", "Outputs", "Output"]}], "4b1" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b1_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b1_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b1_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b1_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b1_relu", "Outputs", "Output"]}], "4b2" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b2_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b2_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b2_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b2_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b2_relu", "Outputs", "Output"]}], "4b3" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b3_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b3_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b3_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b3_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b3_relu", "Outputs", "Output"]}], "4b4" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b4_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b4_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b4_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b4_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b4_relu", "Outputs", "Output"]}], "4b5" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b5_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b5_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b5_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b5_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b5_relu", "Outputs", "Output"]}], "4b6" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b6_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b6_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b6_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b6_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b6_relu", "Outputs", "Output"]}], "4b7" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b7_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b7_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b7_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b7_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b7_relu", "Outputs", "Output"]}], "4b8" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b8_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b8_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b8_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b8_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b8_relu", "Outputs", "Output"]}], "4b9" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b9_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b9_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b9_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b9_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b9_relu", "Outputs", "Output"]}], "4b10" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b10_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b10_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b10_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b10_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b10_relu", "Outputs", "Output"]}], "4b11" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b11_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b11_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b11_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b11_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b11_relu", "Outputs", "Output"]}], "4b12" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b12_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b12_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b12_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b12_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b12_relu", "Outputs", "Output"]}], "4b13" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b13_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b13_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b13_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b13_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b13_relu", "Outputs", "Output"]}], "4b14" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b14_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b14_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b14_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b14_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b14_relu", "Outputs", "Output"]}], "4b15" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b15_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b15_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b15_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b15_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b15_relu", "Outputs", "Output"]}], "4b16" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b16_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b16_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b16_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b16_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b16_relu", "Outputs", "Output"]}], "4b17" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b17_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b17_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b17_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b17_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b17_relu", "Outputs", "Output"]}], "4b18" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b18_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b18_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b18_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b18_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b18_relu", "Outputs", "Output"]}], "4b19" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b19_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b19_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b19_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b19_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b19_relu", "Outputs", "Output"]}], "4b20" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b20_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b20_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b20_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b20_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b20_relu", "Outputs", "Output"]}], "4b21" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b21_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b21_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b21_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b21_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b21_relu", "Outputs", "Output"]}], "4b22" -> 
               Association[
                "Type" -> "Graph", "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                 Association[
                  "res4b22_branch2a" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 1024, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2a" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2a_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{256, 256, 3, 3}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2b" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{256}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{256}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 256,
                     "$Shape" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2b_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_branch2c" -> 
                   Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024, 256, 1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1024, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 256, "$GroupNumber" -> 1, 
                    "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "bn4b22_branch2c" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}], 
                    "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{1024}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.0001, "Channels" -> 
                    1024, "$Shape" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22" -> 
                   Association[
                    "Type" -> "Total", "Arrays" -> Association[], 
                    "Parameters" -> Association["$InputCount" -> 2], "Inputs" -> 
                    Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]], "res4b22_relu" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {1024, 16, 16}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2a", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2b", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2b_relu", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2c", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Inputs", "Input"] -> {
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "bn4b22_branch2c", "Outputs", "Output"]}, 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22", "Outputs", "Output"], 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_branch2a", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath[
                    "Nodes", "res4b22_relu", "Outputs", "Output"]}]], "Edges" -> 
             {NeuralNetworks`NetPath["Nodes", "conv1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath["Nodes", "bn_conv1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "conv1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "bn_conv1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "pool1_pad", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv1_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "pool1_pad", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2b", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "2c", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2b", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "2c", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "3b3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4a", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "3b3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4a", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b1", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b2", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b3", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b5", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b4", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b5", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b7", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b6", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b8", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b7", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b9", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b8", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b10", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b9", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b11", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b10", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b12", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b11", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b13", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b12", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b14", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b13", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b15", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b14", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b16", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b15", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b17", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b16", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b18", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b17", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b19", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b18", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b20", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b19", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b21", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b20", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "4b22", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "4b21", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath["Nodes", "4b22", "Outputs", "Output"]}, 
             "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{1024, 16, 16}, NeuralNetworks`RealT]]],
            "2" -> Association[
            "Type" -> "Graph", "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{1024, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{2048, 16, 16}, NeuralNetworks`RealT]], 
             "Nodes" -> Association[
              "conv5_3_pool1" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {16, 16}, "Stride" -> {16, 16}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {1, 1}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool1_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {1, 1}, "$OutputSize" -> {1, 1}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 1, 1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 1, 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 1, 1}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool1_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {1, 1}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 1, 1}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {8, 8}, "Stride" -> {8, 8}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {2, 2}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {2, 2}, "$OutputSize" -> {2, 2}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 2, 2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 2, 2}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 2, 2}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool2_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {2, 2}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 2, 2}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {4, 4}, "Stride" -> {4, 4}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {4, 4}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {4, 4}, "$OutputSize" -> {4, 4}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 4, 4}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 4, 4}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 4, 4}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool3_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {4, 4}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 4, 4}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6" -> 
               Association[
                "Type" -> "Pooling", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                   "PaddingSize" -> {0, 0}, "Function" -> Mean, 
                   "Dimensionality" -> 2, "Channels" -> 1024, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {8, 8}, 
                   "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                   False], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6_block" -> 
               Association[
                "Type" -> "Chain", "Nodes" -> 
                 Association[
                  "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{512, 1024, 1, 1}], 
                    "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                    "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                    "InputChannels" -> 1024, "$GroupNumber" -> 1, 
                    "$InputSize" -> {8, 8}, "$OutputSize" -> {8, 8}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "2" -> 
                   Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyRawArray[{512}]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                    "$Shape" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "3" -> 
                   Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 8, 8}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]]], 
                 "Edges" -> {
                  NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Inputs", "Input"], 
                   NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                   NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
                   NeuralNetworks`NetPath["Outputs", "Output"] -> 
                   NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]},
                  "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{1024, 8, 8}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, 
                    NeuralNetworks`RealT]]], "conv5_3_pool6_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{16, 16}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {8, 8}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 8, 8}, NeuralNetworks`RealT]],
                  "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_3_concat" -> 
               Association[
                "Type" -> "Catenate", "Arrays" -> Association[], "Parameters" -> 
                 Association["Level" -> 1, "$InputShapes" -> {
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]}, "$InputCount" -> 4, 
                   "$OutputShape" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> Association["Input" -> {
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT], 
                    
                    NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]}], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool1_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_concat", "Inputs", "Input"] -> {
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool1_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool2_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool3_interp", "Outputs", "Output"], 
                 NeuralNetworks`NetPath[
                 "Nodes", "conv5_3_pool6_interp", "Outputs", "Output"]}, 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool2_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool3_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_block", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_pool6_block", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_3_concat", "Outputs", "Output"]}], "3" -> 
           Association[
            "Type" -> "Chain", "Nodes" -> 
             Association[
              "conv5_4" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 2048, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 2048, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {16, 16}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{2048, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_4_bn" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "conv5_4_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 16, 16}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]]], "deconv" -> 
               Association[
                "Type" -> "Deconvolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                   "Stride" -> {2, 2}, "PaddingSize" -> {1, 1}, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {16, 16}, "$OutputSize" -> {31, 31}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 16, 16}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 31, 31}, 
                    NeuralNetworks`RealT]]], "deconv_pad" -> 
               Association[
                "Type" -> "Padding", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> {{0, 0}, {0, 1}, {0, 1}}, "Padding" -> 
                   0., "Rank" -> 3, "$InputSize" -> {512, 31, 31}, 
                   "$OutputSize" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 31, 31}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "deconv_bn" -> 
               Association[
                "Type" -> "BatchNormalization", "Arrays" -> 
                 Association[
                  "Gamma" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "Beta" -> NeuralNetworks`Private`DummyRawArray[{512}], 
                   "MovingVariance" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}], "MovingMean" -> 
                   NeuralNetworks`Private`DummyRawArray[{512}]], "Parameters" -> 
                 Association[
                  "Momentum" -> 0.9, "Epsilon" -> 0.001, "Channels" -> 512, 
                   "$Shape" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "deconv_relu" -> 
               Association[
                "Type" -> "Elementwise", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                   "$Dimensions" -> {512, 32, 32}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv5_4_dropout" -> 
               Association[
                "Type" -> "Dropout", "Arrays" -> Association[], "Parameters" -> 
                 Association["DropoutProbability" -> 0.1], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv6" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{512, 512, 1, 1}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{512}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 512, "KernelSize" -> {1, 1}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {0, 0}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {32, 32}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]]], "conv6_interp" -> 
               Association[
                "Type" -> "Resize", "Arrays" -> Association[], "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{256, 256}], 
                   "Dimensionality" -> 2, "Channels" -> 512, 
                   "$InputSize" -> {32, 32}, "$OutputSize" -> {256, 256}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 32, 32}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{512, 256, 256}, 
                    NeuralNetworks`RealT]]], "last_conv" -> 
               Association[
                "Type" -> "Convolution", "Arrays" -> 
                 Association[
                  "Weights" -> 
                   NeuralNetworks`Private`DummyRawArray[{34, 512, 3, 3}], 
                   "Biases" -> NeuralNetworks`Private`DummyRawArray[{34}]], 
                 "Parameters" -> 
                 Association[
                  "OutputChannels" -> 34, "KernelSize" -> {3, 3}, 
                   "Stride" -> {1, 1}, "PaddingSize" -> {1, 1}, 
                   "Dilation" -> {1, 1}, "Dimensionality" -> 2, 
                   "InputChannels" -> 512, "$GroupNumber" -> 1, 
                   "$InputSize" -> {256, 256}, "$OutputSize" -> {256, 256}], 
                 "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{512, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{34, 256, 256}, 
                    NeuralNetworks`RealT]]], "transpose" -> 
               Association[
                "Type" -> "Transpose", "Arrays" -> Association[], 
                 "Parameters" -> 
                 Association[
                  "Specification" -> 
                   NeuralNetworks`ValidatedParameter[{1 -> 3, 1 -> 2}], 
                   "$InputDimensions" -> {34, 256, 256}, "$Type" -> 
                   NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                   "$OutputDimensions" -> {256, 256, 34}], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{34, 256, 256}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]]], "softmax" -> 
               Association[
                "Type" -> "Softmax", "Arrays" -> Association[], "Parameters" -> 
                 Association[], "Inputs" -> 
                 Association[
                  "Input" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                 Association[
                  "Output" -> 
                   NeuralNetworks`TensorT[{256, 256, 34}, 
                    NeuralNetworks`RealT]]]], 
             "Edges" -> {
              NeuralNetworks`NetPath["Nodes", "conv5_4", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Inputs", "Input"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_bn", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_bn", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "deconv", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_pad", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "deconv", "Outputs", "Output"],
                NeuralNetworks`NetPath[
                "Nodes", "deconv_bn", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_pad", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_relu", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_bn", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_dropout", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "deconv_relu", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "conv6", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv5_4_dropout", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "conv6_interp", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath["Nodes", "conv6", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "last_conv", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "conv6_interp", "Outputs", "Output"], 
               NeuralNetworks`NetPath[
                "Nodes", "transpose", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "last_conv", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Nodes", "softmax", "Inputs", "Input"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "transpose", "Outputs", "Output"], 
               NeuralNetworks`NetPath["Outputs", "Output"] -> 
               NeuralNetworks`NetPath[
                "Nodes", "softmax", "Outputs", "Output"]}, "Inputs" -> 
             Association[
              "Input" -> NeuralNetworks`TensorT[{2048, 16, 16}, 
                 NeuralNetworks`RealT]], "Outputs" -> 
             Association[
              "Output" -> 
               NeuralNetworks`TensorT[{256, 256, 34}, 
                 NeuralNetworks`RealT]]]], 
         "Edges" -> {
          NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Inputs", "Input"], 
           NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
           NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"], 
           NeuralNetworks`NetPath["Outputs", "Output"] -> 
           NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"]}, 
         "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{3, 256, 256}, 
             NeuralNetworks`RealT]], "Outputs" -> 
         Association[
          "Output" -> 
           NeuralNetworks`TensorT[{256, 256, 34}, NeuralNetworks`RealT]]], 
        NeuralNetworks`Private`NetChain`opart, 
        NeuralNetworks`Private`NetChain`part, 
        NeuralNetworks`Private`NetChain`selected = Null}, 
        DynamicBox[GridBox[{{
            NeuralNetworks`Private`NetChain`MouseClickBoxes[
             TagBox[
              GridBox[{{
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Input\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"3\"", "\"256\"", 
                    "\"256\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "35", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1024\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetGraph", "[", 
                    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"2048\"", "\"16\"", 
                    "\"16\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                   StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "13", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], 
                    GrayLevel[0], StripOnInput -> False], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}, {
                 TagBox[
                  TagBox[
                  "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                  "\"Output\"", 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]], 
                 TagBox[
                  TagBox[
                   TemplateBox[{"\"3-tensor\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"256\"", "\"256\"", 
                    "\"34\""}, "RowWithSeparators"], "\"\[VeryThinSpace]\"", 
                    "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
             If[
              ListQ[NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
               If[NeuralNetworks`Private`NetChain`opart === 
                NeuralNetworks`Private`NetChain`part, 
                NeuralNetworks`Private`NetChain`selected = Null; 
                NeuralNetworks`Private`NetChain`opart = Null, 
                NeuralNetworks`Private`NetChain`selected = 
                 Part[NeuralNetworks`Private`NetChain`assoc3, 
                   Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                NeuralNetworks`Private`NetChain`opart = 
                 NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
           NeuralNetworks`Private`NetChain`fmtSelected[
           NeuralNetworks`Private`NetChain`selected, 
            NeuralNetworks`Private`NetChain`part]}, 
          GridBoxSpacings -> {"Columns" -> {{1}}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}}],
         ImageSizeCache->{321., {39.771240234375, 46.228759765625}},
         TrackedSymbols:>{NeuralNetworks`Private`NetChain`selected}],
        Initialization:>{NetChain}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.708198050604279*^9, 3.708198172912963*^9, 3.7081999815236998`*^9, 
   3.7082008439718533`*^9, {3.708222635382292*^9, 3.708222714029297*^9}, 
   3.70822401747178*^9, 3.70822703445569*^9, {3.7082320684912863`*^9, 
   3.7082320765896873`*^9}, 3.708253226103217*^9, 3.708253768132263*^9, {
   3.70825512305851*^9, 3.708255135744054*^9}, 3.7082581402534857`*^9, 
   3.708259897779256*^9, 3.7082628978669767`*^9, 3.708268698298847*^9, 
   3.70827039951092*^9, 
   3.708270482992361*^9},ExpressionUUID->"bcf68ed0-a38f-442f-8fde-\
3bcf12188840"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"pixelPredict", "[", 
    RowBox[{"net_", ",", " ", "inputImageData_"}], "]"}], " ", ":=", " ", 
   RowBox[{"Map", "[", "\n", "\t", 
    RowBox[{
     RowBox[{
      RowBox[{"First", " ", "@", " ", 
       RowBox[{"Ordering", "[", 
        RowBox[{"#", ",", " ", 
         RowBox[{"-", "1"}]}], "]"}]}], " ", "&"}], ",", "\n", "\t", 
     RowBox[{"net", "[", "inputImageData", "]"}], ",", " ", 
     RowBox[{"{", "2", "}"}]}], "\n", "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"classNum", " ", "=", " ", "34"}], ";"}], "\n", 
 RowBox[{"colorRules", " ", "=", " ", 
  RowBox[{"Thread", "[", "\n", "\t", 
   RowBox[{
    RowBox[{"Range", "[", "classNum", "]"}], " ", "\[Rule]", " ", 
    RowBox[{"Prepend", "[", 
     RowBox[{
      RowBox[{"RandomColor", "[", 
       RowBox[{"classNum", " ", "-", " ", "1"}], "]"}], ",", " ", "White"}], 
     "]"}]}], "\n", "]"}]}]}], "Code",
 CellChangeTimes->{{3.708201529476665*^9, 3.7082015914387903`*^9}, {
   3.7082245526759987`*^9, 3.7082245619106903`*^9}, {3.708227611335618*^9, 
   3.708227615459549*^9}, 
   3.708228634302512*^9},ExpressionUUID->"b18ec4fd-1fbf-4143-a624-\
0a4c3ad8687d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"1", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {GrayLevel[1], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->GrayLevel[0.6666666666666666],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "GrayLevel[1]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[1]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["GrayLevelColorValueSelector"], {
            0, {Left, Bottom}}, {Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     GrayLevel[1],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"2", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.46665567998405333`, 0.8551367572466755, 0.8261390038164214], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.31110378665603555`, 0.5700911714977837, 0.5507593358776143],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.46665567998405333, 0.8551367572466755, \
0.8261390038164214]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.46665567998405333`, 0.8551367572466755, 0.8261390038164214]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.46665567998405333`, 0.8551367572466755, 0.8261390038164214],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"3", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.4294445114071641, 0.7599204308573064, 0.9951902640421793], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.2862963409381094, 0.5066136205715377, 0.6634601760281196],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.4294445114071641, 0.7599204308573064, 0.9951902640421793]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.4294445114071641, 0.7599204308573064, 0.9951902640421793]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.4294445114071641, 0.7599204308573064, 0.9951902640421793],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"4", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.767642225042994, 0.9703555205677106, 0.3951083162238129],
           RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.511761483361996, 0.6469036803784738, 0.26340554414920864`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.767642225042994, 0.9703555205677106, 0.3951083162238129]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.767642225042994, 0.9703555205677106, 0.3951083162238129]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.767642225042994, 0.9703555205677106, 0.3951083162238129],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"5", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.9096646037584886, 0.7016151949382856, 0.9621567473851922], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6064430691723257, 0.4677434632921904, 0.6414378315901281],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.9096646037584886, 0.7016151949382856, 0.9621567473851922]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.9096646037584886, 0.7016151949382856, 0.9621567473851922]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.9096646037584886, 0.7016151949382856, 0.9621567473851922],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"6", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.7248019064043534, 0.5210708062092111, 0.44782554078529846`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.4832012709362356, 0.3473805374728074, 0.29855036052353234`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.7248019064043534, 0.5210708062092111, \
0.44782554078529846]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.7248019064043534, 0.5210708062092111, 0.44782554078529846`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.7248019064043534, 0.5210708062092111, 0.44782554078529846`],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"7", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.04347079062335979, 0.3749065059768737, 0.3072444426865486], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.02898052708223986, 0.24993767065124914`, 0.2048296284576991],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.04347079062335979, 0.3749065059768737, \
0.3072444426865486]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.04347079062335979, 0.3749065059768737, 0.3072444426865486]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.04347079062335979, 0.3749065059768737, 0.3072444426865486],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"8", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.2707421677206583, 0.9046549236698957, 0.60606580755595], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.18049477848043888`, 0.6031032824465972, 0.40404387170396666`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.2707421677206583, 0.9046549236698957, 0.60606580755595]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.2707421677206583, 0.9046549236698957, 0.60606580755595]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.2707421677206583, 0.9046549236698957, 0.60606580755595],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"9", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.6530256397476877, 0.9359994997570191, 0.905128824511376],
           RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.43535042649845845`, 0.6239996665046794, 0.6034192163409173],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.6530256397476877, 0.9359994997570191, 0.905128824511376]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.6530256397476877, 0.9359994997570191, 0.905128824511376]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.6530256397476877, 0.9359994997570191, 0.905128824511376],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"10", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.7451864376677437, 0.28876905961079946`, 0.3208969727277693], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.4967909584451625, 0.19251270640719964`, 0.2139313151518462],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.7451864376677437, 0.28876905961079946, \
0.3208969727277693]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.7451864376677437, 0.28876905961079946`, 0.3208969727277693]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.7451864376677437, 0.28876905961079946`, 0.3208969727277693],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"11", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.792850285066979, 0.027522483263619835`, 0.8908571609718428], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5285668567113193, 0.018348322175746556`, 0.5939047739812285],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.792850285066979, 0.027522483263619835, \
0.8908571609718428]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.792850285066979, 0.027522483263619835`, 0.8908571609718428]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.792850285066979, 0.027522483263619835`, 0.8908571609718428],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"12", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.8506466611464678, 0.6600622558539506, 0.466513786527337],
           RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5670977740976453, 0.44004150390263375`, 0.31100919101822466`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.8506466611464678, 0.6600622558539506, 0.466513786527337]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.8506466611464678, 0.6600622558539506, 0.466513786527337]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.8506466611464678, 0.6600622558539506, 0.466513786527337],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"13", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.35060956013198696`, 0.5827057253380297, 0.12417295945611473`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.233739706754658, 0.38847048355868646`, 0.08278197297074316],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.35060956013198696, 0.5827057253380297, \
0.12417295945611473]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.35060956013198696`, 0.5827057253380297, 0.12417295945611473`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.35060956013198696`, 0.5827057253380297, 0.12417295945611473`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"14", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.23999839755698726`, 0.2659396032500376, 0.5383471905114581], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.15999893170465818`, 0.17729306883335844`, 0.35889812700763873`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.23999839755698726, 0.2659396032500376, \
0.5383471905114581]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.23999839755698726`, 0.2659396032500376, 0.5383471905114581]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.23999839755698726`, 0.2659396032500376, 0.5383471905114581],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"15", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.13424611545900778`, 0.2884640076832936, 0.29050757969467056`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.08949741030600519, 0.19230933845552908`, 0.19367171979644704`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.13424611545900778, 0.2884640076832936, \
0.29050757969467056]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.13424611545900778`, 0.2884640076832936, 0.29050757969467056`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.13424611545900778`, 0.2884640076832936, 0.29050757969467056`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"16", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.9088731224495554, 0.45799558364713544`, 0.15538107617021701`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6059154149663704, 0.3053303890980903, 0.10358738411347801`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.9088731224495554, 0.45799558364713544, \
0.15538107617021701]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.9088731224495554, 0.45799558364713544`, 0.15538107617021701`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.9088731224495554, 0.45799558364713544`, 0.15538107617021701`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"17", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.7500792167781165, 0.43594485599893296`, 0.15777131328939076`], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.500052811185411, 0.2906299039992887, 0.10518087552626051`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.7500792167781165, 0.43594485599893296, \
0.15777131328939076]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.7500792167781165, 0.43594485599893296`, 0.15777131328939076`]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.7500792167781165, 0.43594485599893296`, 0.15777131328939076`],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"18", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.5693573330809467, 0.810669784481348, 0.2598932975040684],
           RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.3795715553872978, 0.5404465229875653, 0.17326219833604561`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5693573330809467, 0.810669784481348, 0.2598932975040684]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.5693573330809467, 0.810669784481348, 0.2598932975040684]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5693573330809467, 0.810669784481348, 0.2598932975040684],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"19", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.5281623807926585, 0.1002431497995735, 0.7487982553262069], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.35210825386177236`, 0.066828766533049, 0.49919883688413796`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5281623807926585, 0.1002431497995735, 0.7487982553262069]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.5281623807926585, 0.1002431497995735, 0.7487982553262069]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5281623807926585, 0.1002431497995735, 0.7487982553262069],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"20", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.3369936043205033, 0.7503052388208851, 0.5060057792597445], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.22466240288033554`, 0.5002034925472567, 0.33733718617316305`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.3369936043205033, 0.7503052388208851, 0.5060057792597445]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.3369936043205033, 0.7503052388208851, 0.5060057792597445]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.3369936043205033, 0.7503052388208851, 0.5060057792597445],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"21", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.9703599560331966, 0.2644141573343275, 0.7368412512592952], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6469066373554644, 0.17627610488955167`, 0.49122750083953015`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.9703599560331966, 0.2644141573343275, 0.7368412512592952]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.9703599560331966, 0.2644141573343275, 0.7368412512592952]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.9703599560331966, 0.2644141573343275, 0.7368412512592952],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"22", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.7728123426309559, 0.3314326703721653, 0.8841978049084398], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.5152082284206373, 0.22095511358144354`, 0.5894652032722932],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.7728123426309559, 0.3314326703721653, 0.8841978049084398]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.7728123426309559, 0.3314326703721653, 0.8841978049084398]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.7728123426309559, 0.3314326703721653, 0.8841978049084398],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"23", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.6280288203474451, 0.31630203336312235`, 0.841362751274856], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.4186858802316301, 0.21086802224208157`, 0.5609085008499041],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.6280288203474451, 0.31630203336312235, 0.841362751274856]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.6280288203474451, 0.31630203336312235`, 0.841362751274856]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.6280288203474451, 0.31630203336312235`, 0.841362751274856],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"24", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.6558290076346602, 0.3253055511059626, 0.8870204977003597], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.43721933842310684`, 0.21687036740397508`, 0.5913469984669065],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.6558290076346602, 0.3253055511059626, 0.8870204977003597]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.6558290076346602, 0.3253055511059626, 0.8870204977003597]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.6558290076346602, 0.3253055511059626, 0.8870204977003597],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"25", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.97967362725247, 0.27718666805411085`, 0.9848140465272388], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.6531157515016467, 0.1847911120360739, 0.6565426976848259],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.97967362725247, 0.27718666805411085, 0.9848140465272388]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.97967362725247, 0.27718666805411085`, 0.9848140465272388]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.97967362725247, 0.27718666805411085`, 0.9848140465272388],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"26", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.022269922218904004`, 0.6217477160598948, 0.1419609498351042], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.01484661481260267, 0.4144984773732632, 0.09464063322340281],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.022269922218904004, 0.6217477160598948, \
0.1419609498351042]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.022269922218904004`, 0.6217477160598948, 0.1419609498351042]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.022269922218904004`, 0.6217477160598948, 0.1419609498351042],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"27", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.17197890621309253`, 0.41929690678596376`, 0.5950879695926596], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.11465260414206169`, 0.2795312711906425, 0.3967253130617731],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.17197890621309253, 0.41929690678596376, \
0.5950879695926596]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.17197890621309253`, 0.41929690678596376`, 0.5950879695926596]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.17197890621309253`, 0.41929690678596376`, 0.5950879695926596],
     
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"28", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.6471639580372568, 0.7508257366242481, 0.02303243697245927], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.43144263869150457`, 0.5005504910828321, 0.015354957981639513`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.6471639580372568, 0.7508257366242481, \
0.02303243697245927]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.6471639580372568, 0.7508257366242481, 0.02303243697245927]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.6471639580372568, 0.7508257366242481, 0.02303243697245927],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"29", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.39248970838291397`, 0.6805832265010394, 0.153888351945068], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.26165980558860935`, 0.45372215100069296`, 0.10259223463004534`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.39248970838291397, 0.6805832265010394, 0.153888351945068]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.39248970838291397`, 0.6805832265010394, 0.153888351945068]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.39248970838291397`, 0.6805832265010394, 0.153888351945068],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"30", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.6932782898864056, 0.8459433545526214, 0.7958756532573954], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.4621855265909371, 0.5639622363684142, 0.5305837688382636],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.6932782898864056, 0.8459433545526214, 0.7958756532573954]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.6932782898864056, 0.8459433545526214, 0.7958756532573954]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.6932782898864056, 0.8459433545526214, 0.7958756532573954],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"31", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.40031909137044575`, 0.3072394869325137, 0.8427217277642347], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.26687939424696383`, 0.2048263246216758, 0.5618144851761565],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.40031909137044575, 0.3072394869325137, \
0.8427217277642347]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.40031909137044575`, 0.3072394869325137, 0.8427217277642347]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.40031909137044575`, 0.3072394869325137, 0.8427217277642347],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"32", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.5713076495798015, 0.6549888273327267, 0.6735092725386664], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.38087176638653436`, 0.4366592182218178, 0.44900618169244433`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.5713076495798015, 0.6549888273327267, 0.6735092725386664]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.5713076495798015, 0.6549888273327267, 0.6735092725386664]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.5713076495798015, 0.6549888273327267, 0.6735092725386664],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"33", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[
          0.027660204522816256`, 0.7716785213785624, 0.3083763839948883], 
          RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.018440136348544172`, 0.5144523475857083, 0.20558425599659222`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.027660204522816256, 0.7716785213785624, \
0.3083763839948883]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[
           0.027660204522816256`, 0.7716785213785624, 0.3083763839948883]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.027660204522816256`, 0.7716785213785624, 0.3083763839948883],
     Editable->False,
     Selectable->False]}], ",", 
   RowBox[{"34", "\[Rule]", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[0.6402578161385135, 0.795875141817199, 0.3763770849892727],
           RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[
         0.42683854409234234`, 0.5305834278781327, 0.25091805665951517`],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 1.35 CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification]}],
        PlotRangePadding->None],
       "RGBColor[0.6402578161385135, 0.795875141817199, 0.3763770849892727]"],
      
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = 
          RGBColor[0.6402578161385135, 0.795875141817199, 0.3763770849892727]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[0.6402578161385135, 0.795875141817199, 0.3763770849892727],
     Editable->False,
     Selectable->False]}]}], "}"}]], "Output",
 CellChangeTimes->{{3.70822863522469*^9, 3.708228674916429*^9}, 
   3.7082320779540873`*^9, {3.7082321690013742`*^9, 3.708232186421513*^9}, 
   3.708254319445023*^9, 3.708255143478303*^9, 3.708258141907877*^9, 
   3.708260827465638*^9, 3.7082686989816732`*^9, 3.708270401336349*^9, 
   3.7082704848003893`*^9},ExpressionUUID->"caaf09e6-a6f3-4304-869e-\
861a4bd4c509"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"importer", " ", "=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ImageData", "[", "\n", "\t", 
       RowBox[{
        RowBox[{"First", " ", "@", " ", 
         RowBox[{"Image`ImportExportDump`ImageReadPNG", "[", "#", "]"}]}], 
        ",", " ", "\"\<Byte\>\""}], "\n", "]"}], " ", "+", " ", "1"}], " ", 
     "&"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"Get", "[", "\"\<MXNetLink`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"fip", " ", "=", " ", "MXNetLink`FastImageImport"}], ";"}]}], "Code",\

 CellChangeTimes->{{3.7082700851238737`*^9, 3.708270111014298*^9}, {
  3.7082703216507607`*^9, 
  3.708270338645348*^9}},ExpressionUUID->"decc7189-ac17-485f-9fac-\
4c447f4c26d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Import test images", "Subsubsection",
 CellChangeTimes->{{3.7082010854074717`*^9, 3.708201091673274*^9}, {
  3.7082561718485947`*^9, 
  3.708256172214273*^9}},ExpressionUUID->"14a4f601-b505-4fb5-8c53-\
7c6a2f959093"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"testPics", " ", "=", " ", 
    RowBox[{
    "Import", "[", "\n", "\t", 
     "\"\</Users/RohanSaxena/Desktop/Project/Final/use later/test/testPics.mx\
\>\"", "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"testMasks", " ", "=", " ", 
   RowBox[{
   "Import", "[", "\n", "\t", 
    "\"\</Users/RohanSaxena/Desktop/Project/Final/use later/test/testMasks.mx\
\>\"", "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{
  3.708255481023561*^9, {3.708256598941762*^9, 
   3.708256623202361*^9}},ExpressionUUID->"aaa07dfa-c9b9-4e31-ab1f-\
b737d4107482"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"trialFiles", " ", "=", " ", 
    RowBox[{"FileNames", "[", 
     RowBox[{
     "\"\</Users/RohanSaxena/Desktop/Project/Final/\>\"", " ", "<>", "\n", 
      "\t\t\t\t ", "\"\<use later/test/pics/*.png\>\""}], "\n", "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"maskFiles", " ", "=", " ", 
    RowBox[{
    "FileNames", "[", "\n", "\t", 
     "\"\</Users/RohanSaxena/Desktop/Project/Final/use \
later/test/labels/*.png\>\"", "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"coarseMaskFiles", " ", "=", " ", 
   RowBox[{
   "FileNames", "[", "\n", "\t", 
    "\"\</Users/RohanSaxena/Desktop/Project/Final/use later/cropped coarse \
labels/*.png\>\"", "\n", "]"}]}], ";"}]}], "Code",
 CellChangeTimes->{{3.708270037974642*^9, 3.708270062397545*^9}, {
  3.70827016843253*^9, 
  3.7082701737489767`*^9}},ExpressionUUID->"2f1dcaf7-1dda-4d87-a06a-\
9daba91a717c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualise random image", "Subsubsection",
 CellChangeTimes->{{3.708256175001212*^9, 
  3.7082561814441347`*^9}},ExpressionUUID->"b81b0bf6-4aa1-48a7-bd12-\
274ba75a03da"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"i", " ", "=", " ", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", " ", 
       RowBox[{"Length", " ", "@", " ", "testPics"}]}], "}"}], "]"}]}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{"input", " ", "=", " ", 
   RowBox[{"testPics", "[", 
    RowBox[{"[", "i", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pixelResult", " ", "=", " ", 
    RowBox[{"pixelPredict", "[", 
     RowBox[{"net", ",", " ", "input"}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{"ImageCollage", "[", "\n", "\t", 
  RowBox[{"{", "\n", "\t\t", 
   RowBox[{
    RowBox[{"ArrayPlot", "[", 
     RowBox[{"pixelResult", ",", " ", 
      RowBox[{"ColorRules", " ", "\[Rule]", " ", "colorRules"}]}], "]"}], ",",
     "\n", "\t\t", 
    RowBox[{"fip", " ", "@", " ", 
     RowBox[{"trialFiles", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], ",", "\n", "\t\t", 
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"importer", " ", "@", " ", 
       RowBox[{"coarseMaskFiles", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", " ", 
      RowBox[{"ColorRules", " ", "\[Rule]", " ", "colorRules"}]}], "]"}], ",",
     "\n", "\t\t", 
    RowBox[{"ArrayPlot", "[", 
     RowBox[{
      RowBox[{"importer", " ", "@", " ", 
       RowBox[{"maskFiles", "[", 
        RowBox[{"[", "i", "]"}], "]"}]}], ",", " ", 
      RowBox[{"ColorRules", " ", "\[Rule]", " ", "colorRules"}]}], "]"}]}], 
   "\n", "\t", "}"}], "\n", "]"}]}], "Code",
 CellChangeTimes->{
  3.7082558538527946`*^9, {3.7082558910231943`*^9, 3.70825591525506*^9}, {
   3.708256011057865*^9, 3.70825602844033*^9}, {3.708256060894616*^9, 
   3.708256091821187*^9}, {3.708269577309331*^9, 3.708269605557755*^9}, {
   3.7082702106922503`*^9, 3.708270234613555*^9}, {3.708270274815312*^9, 
   3.708270282613*^9}, {3.70827034521974*^9, 3.708270345392908*^9}, {
   3.70827038805964*^9, 
   3.708270394120996*^9}},ExpressionUUID->"0bb3716f-ac36-44dd-86dd-\
846e5e2d11b6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
tTUor69F7c7NaGptwsGTO7H9xD7UHzmK9Yeb0NbTitn5PkzPD6FnfBDNg2M4
OTqNPrqXTnefQOOeLcjdXI8NB+rQ1rkDrWd2o3ZLFXJK8pAsykdOUS4CSeL8
ZAQ1m9ajo38QP3vz9/jw0ee4S6x87xkz9Fe4y1N6zMzI/HxPM3NKwpvfKba8
y7zNjMos+8+p5WodM/BnvPy7R4pnmY+Fi3l7xa3CqMS/n/7lqXC04mzF6Z98
90i4mo8j3Pt8Fftqvv5Uc7cs4/PgbZ4/0Zz8SI6vnv+hOua3ivvV9PHK8fk8
niuG/iR1LOLt+6vE/6tfdIwlrbTSSiutFaX+L3Oc2UhMYqbvdrPdpOJlPGV+
sWbCRDwjPK3F80YW8TUry0yMbcpAFrM2aZ3RgLUcf2YZ1xHf0LEdxM8uO/GN
U5iZ488Ozc8sF8eiUwwd+Ft+dhNHuoIekZu5MrLCzhyX9UX9cPo9dM7E5f4A
Krc04NTgGQxdmiB2voCBy7MYvX4RYy9dwsDCGE6MNGNnXxOOTZxDP60fv7mI
EWbolxZoOoe+OeLe3qNoJobumZvCJDH05M0ljN24hMlbV4iR59A81ItdXR1o
nx7H+PVFTN1YwAQx9tTLVzGwNIuTg91oGzuPPuL40yOdqN5Yh1AsQnzsk7GA
n64pHHEiEXcjmUfcmxMQfnbT6+AJruLn1WMFYi1vzEOsTPuLiJ+jXuHnQDwA
f8BH4wh6PQoKse1UC84TM/O18Rhg+tYlDNJ4oX20H+fonIevXsT0K5cwRRqm
dYfHB1C4bwv8xTF4EiqO6QzT8Yj5bRFi0JI4va4V2LSnDpX1+fSeWYUx7X47
8TPxaMAuMVQr8zPHj3ncRPMWF8eiiSvtdH/Q/ZRhyxQWZcY22hWLGolFs4iB
WcynHIPO1HFoI3MnrTfYV/iZj2OgsZnBkin8nGUzKaal57EzH4eI5YMWmD30
PJ5MOMIWeLJdsIbsyOJ4MXM9nbOVZPbwPU/b0XmZOO6sOZnFjCzs7GRupnEj
PSfHn7OYg5mfhf2ZtY3C0Vn2FFtzzFl9hpid3Rxf9tjU8Xg/l0nFtmk538t+
5mR6v/m959fTLixNnxk6NxedIzNyiDg6lhtGdkECCVIkJ4pQnH/X8MjvOFYX
cTftFy2IIJ/GOMHSKNxJuieIXYO5IfmdIhD3IJhHz1fohTc/ilhBAapqq7Dt
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
i3jtg5v4xWdv4Zdf38Mbjz7B70lvPf4MHzz9Ez56/jluP/8TPn7+R3z89DN8
9OQP+PDZF8LRd599Tpz5B3z8mMXrabtnfyK+/hwfSTya/R8PRCrHUHGx8Khm
YGFpXdtDuFnz9v1lv3XKR/EId4iJ7zx9tMLPz1O1NRSb3xF+frTCz988WvZo
fErHk7gzM/1T4mdif2bo++xR4fN8rr3dz9mPovmZn+OZ8m1wHJr9K2l+Tiut
tNL6YSn1f9lozICDmMbL3kiSQ/OyXWLCNvmuV74Mp/CxQ8eZU/NO9iWHPMv+
ZH7soMcstU5t4/B7hJ894YDwc7IqT35jZi63uJi/bMvcrp7bsaLl/EIlVd9O
sbNLppqdZZ6eI6rqvLnZC8wMnczHxsP70cEMfWUK/ZemMXB5jhh6nnh4Hufn
xtB8vhVtQ8cwdKmH+JIZmtj3qoolj16dQ/tIJ21zDH2z5zB5Y0q80MO0L3si
2APRMTuJA90dOD5KDE37jBFDi5fjxpLUxhu4OI7B+UGMXBpBz3Q3dh7egOLy
BPLyshHPiYiH2+JxSLyff2N30Ovh8miG1r4W1zJDu1Q8Wseh2efC+WZ2vxmu
sE3qc4iXI+KDJ0AMlZPEVrr+7gvDdE5zxPwLmKIxwPjlCXRPthFDnyaGHlf8
/Opl4uw5nJ4ewK6TzWg+ewqtXa2o2duA7NpcxIqjiBeGEMn3IbskjGRZnFgu
AA+fn9cq58Xnxx4Og/ZsMKMarSrWnOJPzqHL0nmBynecITmD7MNYQ2M6zj1d
k5Uh4vovzLbsfciwGRQ/G9cgI4tE26VyDVO1MAwOOh77rbmmhng2zMs8b9Bx
bt5HcmKtKeY2KIZOnZMtJeOy11nqb8g2ytvN9fPYc83HE872WNTnhd4zC8fl
dY098Uk7suS9TeXPsldZ8gzcVvEhcZ2QQIL4lmSnMYktSlyd50Gygji6PAfx
Anrd81kRxEjBnCBcETdsxM1GGiNw/ZIsOh7nJPqJk/lYoYQb4Rwnggm6T2hc
5c31IVgYRLgoBBetM9Hn3eS1qrGAvFecW8l5vnaY6RxN9Bye2iRKDtZhz0Az
ui5NYeTVKzh/fQIHeo8gZ3MxLEUxBKuKUba5GtU76lCyvQHlWzaibtcW1O/Z
iJqdjWg4uhvtF7px+XcLWPztJSz+5jKW3rqB2bdewsV3buL6ez/Dzz5+Hb8k
pv7Nnz/Cm4/u4K2Ht/Hm1+/i919/gDcf3sc7j+7j3Uf3aPld/O7PH+NN4vi3
H9yT5W8Rf7/ziNibOJVzEu8+/0ok/o/nOs7LTPr8ofZIaK/zN7pu3vMHy/N3
n2t2/UbHsJ890v6LFb/yXfaSPNPHE15/KLqvGVs8GXxMYecVrWz7SOUaPlM1
+5RP+7E8353Hf5b8SHn+b//1+HPTyWpc+Wh3WmmllVZa/8ni/6//Nj+vI342
Kn72qxx+yfVjH4GOAzt0HDlVH0P4mdk06FV1MZifQ5qjmZ05p4nkCqvlTtom
xc/esIo/Z1fmye/MzM5Wp028IsyNiqG1t3qVryPFzg7/iqdD9Nf8rJepuhzE
j/Scdpcb0dx87DrehF72Il+bkpgwc/TItXni4Dl0zwygtfcg2gb30+MhTN5S
PmeO104TC48Td3eMnkFL9xF0TvYQb16U3LsR5tCbl4W3z02MYl9fD44Se47c
mqXl8xjimnbXFsVXPTA/gr75YQwsjaJj/BS2HNxAr0UeQsmwvK4mu8rPFM4i
uei1cHm1J5reC+HnQMrLovjZq/0cduIgqR3M7yP7o2MeBOOcp+mjfQPIKSrE
3tYDNGYYw9TLnCO5ROOAixhYGEbneBsx/TmMXeM8ySVcII4eY4aeGkb7QBfa
+9pwuOswtrc1YUvzDjTsqUROVQwh4v9ITQFiZdmS21Zcmo2yqhyEcwPEdQ5V
s82yjpQh/Cw87UzVtGBONWpGVR4KrvOcaSVmNqzFmsy1yrdhVvmCwsIu9lvz
fsqrwT7qVL1y8Xaw59mtuJz3W0Njw0y7qu3BfmaJeXOOotOk4t0WVf/OkKqH
p30b7PXItKk6z8q/bVS1QvSyTO0xydL7sh8lS+roGelzY5V7lu9hjq0bdS0/
jl+Lx8PrkPGkXWpmWKQ+B3tw5L2icY896JR8TJvPRO+jDaE8P2IFXCsjopQf
QjQviBCxsC/BfniH5CoarHxN7OtWPhKu2+GNcGzbDneM7p8Y3RM5xOj5Afjz
g8LoWXoMY5acBwuxPr1OdstyTqg55IAhZIOF+DtSlUDplmpU7WpE6fZqJOsL
4E7ycTyIFgVRXBNDYUM2khuKULazBg3767DhQBUa91Vh/cFG7G7fiWN9B3C4
7zCO9B3Bkf6jONh/GEdpzNo+coI+f+3ovTqAoV/S+O23v8Lkb36ByV+/hsk3
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
+q7kK36l/B/S00WLGfyxOs5dqf2hWJnrVt97rvj5Yz6+Xn5HM7LEl8Xn8ZCO
qfMFtT9EtuN8R/ZqMJs/TbHzVyr+/ITj0HR+NJ/m57TSSiut/3r9PfxsJQZx
E1P46HvWQ/ziDui8Pa43x1Opwcz8TN+T2p+h6set1JBb4WbvynzIp3ueKD+F
+KV9XGcugOyyPIk/m9w21evbyLE9s/IuSH1pVS/PzH5g0jI/exw6Fr3iLUnV
jE7FyN2r6lN4OQYdVHWSOU7G9T/sbh9yi0tw8NRxDFwcxejVGfQtTKFvcYbY
d15i0SdH+7D7ZCuaz3di4sY8Jl9eUvmAV1XdugHavpW+v4+cOSX5hxO8/oby
ekzduiz9VdqHO3Gi+xi6xruEU7lP+NANlXPYvzSDM5PD6FmcIA1iS/N2+LOD
0uPRQOMJm8Mq1yQ1RXTtZ1FY1a7zR9wiH7NzWMkVptcpYJUaD8yIzNLSF529
HAnaPuGj14Vj0THUb92C00PnafxA7E/nxecvDD07jrb+8+ieGMH0S4uYYY8H
TXmcsKPlMOJ1JXDkRuGMk8Ih4rsEsV0hYnmFKKd1G3eWoXZLEWLl2cTXPtjj
9F7kcD1it9SHMHssqh+Kzink+hg25jLOj5Q+ki7VF5zGUm72rUgMdyU+nEGM
ypwsNeasuu+3SdXhYImP2WFc7gmeqes4p+roMeMKS2sviFk8zKl+LKtkU16N
rFXxbakDouvopXq+iNfanqqllyVsv3wsrgNiM8nvKOLn0Pzs8qmxXyqvgPsg
uiPsUfZKDUMf8bSMY4Ncq9mqxkdxug8S9FmjqT/HKzHpALGrP+GkKS3L5hos
9NmNWOGL22m9W/zOTmJw7lHOeYzsX+HxB/vLmfu5Jp+FfSJ++twzE9Nz8liF
Y83MzfEi/p2Ixl15TtijdN5hu9Sk9oTs9LwuBHK4tjSdbzadQ8xG52VFpMSD
vIYYirbloWQ33RP7SoijK1Cxtwzlu0uJjytR21SNhkNVqCeuriZ+riZ+riN+
rjm4HmUHt6LheBP2tB5H04lm7COO3nn4AHYcOog9R4/gQMsRHDvbjBPnT6Pp
bAvx9WHsaTuKnWeOYT89PtHTg54LC7jx1m/xzp8/wQcPP8ftx5/j48d/Ilb9
o8o7fPInYl1VJ48lXC3TL2T+Y+Ztrqf3+Avce6zWyfxTNX/7ER2Pa3/IMWgf
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
9CltR/s9+JSY9g/Ewix1nI+efIIPn36C95/exwdPPyV+Jk6nfd4ntn6HGPhd
4vP3iIffefgnvP1QHetDeq7bjz9TTE+PP3pE86SP6bgf0X63H/9Rln/w9f1/
lZ97jm194dyXVpqf0/ph6++5/140u/4QtPr1+PfwM+cOBvl3YvpedIVdKh8w
kKpv4RJJrFlYWffN5tpouk6cT6Z+kYfz9ZitdQ6hPcR5ZF7lfw5wna4AEsTO
kVLiZ+LENZkZShlrReuIOzheZnYoHzT3ROT4ncppVPycyqdTHlJVG0SdZ6rH
t0dzs65nF/IKP3slBu0T9nf6fJLPWNRYiiMDJ4idR6XPd+/SJPovT2Hk5kX0
LE3jWG8nDp5uQQdx7sTLCxgmhub+I1K77toczl8YxeGuczjY0YWBixcw9dJl
4eeRa+yHXkD3hXGc6DqD5o42dE8Oi5ea92UfNHtCemfHsefEIcSJN01ul/Q8
t7sdwsr+qOrPzXFjEc+vVkRt4yW5OEYZUr/Xc/yZ/bBcz85BbOTkHiz0vvpj
ip+DUa4350OC3v9dxw6h78IYJjn/kXuTv7SE/sUZnBntxemhbgzR/BCNJ05M
tGHXmd3YdmAbDh08iK7+ToxeHsfYyzQOuDaKtsmzaDq9E00tW6Te3Y7mJkTK
sumalNeBvbZWn1ny/yQWrP3JwrtWxbtm3R+Qe4F7onb4427xPrAvWfwZFlXr
Yq3UtFOejbXEzGu1f0P6qUjf73XC6OKtsKuad2styqe81qz9ylKLzqDrZ2QK
e4u/2qrrQ4uvI0MvzxTvtpnGJVlOOndeblkn/cg5jq4YWvmKVU27DPFvGKzK
B2JyZIpPhWujuELsdVY1NbgHZ7wwikhuGD4aKzjls0ccK3KoPt76twWPfDbt
Up+QWdcV45p07M/hHEEz3HEbAsTS/hh7mTjmbSRu1zW2bapOtfKYKM8LXzPH
3x10v7D/2kPszFP2S9uJ091RC0L5LoSKA/Dl+eU5+V5ijxCPdTi2zb4TZvjs
ighyq7lXC9cG9yIUtcJHvO+jfYL0HoaSXkQLQzSmiqOwMoHCmhwU1BfQZ68Y
xeuLSHmo2lKCvUe202ekBxOv0WfoFzcx+tpV9Lw0gbYrQ+h7ZQnTv3gJE6/M
oHexE52znThAY7iCuhpEC+j/SX4usXwFdhFDDy9NSc+Xax/8Ejc/ZP0Ctz7+
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
03FKUFZTivJamie2Lq0ppHVFKKkrFJXWF6O0oUz2KaNjl9epbUtq6LlreH2J
HLtqfSVqN1WhbjOrWmlLLeq21qF+Wx0at9Vj/fZ6NG5vIDWKGrY10rpG6T/e
uF2t30jzm7avx5YdG7Fl5ybRth2bsHPXRtGOnRuwgx7v2LkZO/ZswY69W7Fj
92ZaR9q9Ddv3bsf2/TuxvWmHzO+g+R0H92LH4X3Yfmg/th0+IGOGHS3N2HHi
BE05P/Jkmp9/5HrRbJXWj1//0XvzRfPsfwd+5l7HXuLnOHFaUPoxf7+2BjO0
R7NzKt4sTCfcHCCWUPKyYgHt46B9xFOwmp9V/eeQ8HMSoZIc4ed1xDoZLN2L
mdk5M5P7LBvF98ys7FydIyixL5Xf6Aqu4mbdl2+ZnzVDp/zPnlV1LOSx9PkO
0L5eqdXLeYdlm6pxtL8dg5cmMH7lgjA019IYZ4aeG8Th7mZsPXMKJyfHMM5c
zDXprnCvwnmp83ZqdgD7e9rQ2ncOkxxzkrp1qg8L+6fPzA1g7/AZHBruQfeF
MVk2eGkaR8+fRKKqDBkON7GlW2qd8JhF1W7W/ExjE2ZoJZ8ew2hFvRKjXK6J
RjzE/meL1JgwqN7ZTqMwtYOWszcgoL0c3nAQbmLowupyHO06ReOHableiUVf
W0IPcf/ZoRb0z3Vi9MYM8fMl6R3TQ9zcPD6GlkmO2c9K/Y6xlxbROT2E9c17
ENhYBnNxHBZ6XaWvt67nZvNwvNQs58e10lR8d532X2SKv8BkN+teI6qeCHuY
pbYFe5GZn4mRf6L1U601mqOZqzk+Lfl74sfIkJg2szPHg7lOssWl6oBwnY0M
XcM51Tecz8cg3ox1y75otUznPHKf+yjdh3Fix4gNloBF4s9mh6q9rKTrROu6
dtI3xqHi0Banyps0u7nWnIqxs2eC+wg6pL4F9490Sc0/1UvSjgBxMOcEuoir
ue6yM2KX2LPwM52DnRjZ6rPKa+oMWWhfK7GzA6FcJ8JJ2jdqlz7i/Nqy55nr
Acr1p/q/8Pk6zYqTmZ1dFnkPuDa3UZ+7kccB3FvFweMfh/zm45aagzbJVeU+
LjlFxM/1hSjfWI7ijZUo3lCJkvUs4mKaL6XPF4s/Z5XEsVVbalC9tVZUs4VV
I6pNMS6pdnl5taiW5uu20brttcS31cS3VWjcwarG+h019Lga9VsriY9JW0ib
K1C/uQwNW8vRQI8bWbSuYZuaNupp/ZaKZdVtLifmLkO1qBw1G0tRu7FEVEP3
dQ0v0+Jt67eUy34NKW3V2lKFhs107E0Vch61NF+ziXh+YwUdpxLVG6tQRaok
VdDrU7GB5jfQa7OhBpXrSY21aX7+EetFc1Va/xj6z7pfXzTf/hD5eW34J8Re
ZiSI1cIJv8QyPVInTcU1OUeN/bXMzl7m5gQxdLZf/Jo+2p57cHPtNV+KnyUG
7dMeadWDMBV/5ph2OJv9G0kEi3NgdFol7pzBflYSz0vfDIOB+NlE/OxYruuc
kuQ1BlJ9BnW9uuWe1iv5gyzvan4OpzwcK3VD2MMt3gi6XjczdDhA3+2NaBvu
lLp2I5dnMcQ+javEk8TBZ4kNt/WexM6Bkzg9xzU1FqTH9+hl1e978MoCTo70
4VDHSZwc7Eb/whyx82Xa7iImiC25Vtzp6WEc6DmD40Pd6FuakT6IR3paEaso
xlqbExa3ep28EltWfm3Fyb6/5edo6r3xyHiFvbLusFPkInH/DI4vcvxX9dTg
utJWyU/jfEPOzwsmgvSY3q9QEMV1VWjuPSv9GDlmPvnSJYwsXUDXeA9OD55E
z2wfxoj5J7lnOTH22fkptIwPSj+YkWsXpI7H6ZHzKCZmyiBG/19eVSONcz25
p6KZuI1jlVwT2hW1CztKTWKrrp1hUn2wXcSTgWyf+IL5PeKaEcLDxM5rV/Nz
htJPtXjZ/1rH8+vEI71WPBnrpN5Gqg+3mXMZnZzHqD0k7Im2pNiZ+Z3uP8ta
ml8r8W5VczpT1XbW/Q/ZB20hbjT7VV8RsysVq1b9YCT/lRmU5jP1cTnmK/0h
+bcBj1niulyPxOKzKHYOqpp1riDxb4R7rHDep4XeY65JR/dmnMZGccXQXE/F
5uPX1kT7K7+4nT3JXpvE9jkObad9vQk7gtnch9AszK7q8ql+isv1/FLjBksq
7q9ZmaTqQWv/h/QsZ/+6lZ7XJn1o7D6b+Gv4twUes4WTfiTLE0hWJZFTSarI
RW5FHnIrc5WqaL4qH3lVBchnVRegsKYQRbUkntYVkHhajOL6UrofS0hF8rio
npeVoISWlzTQtLEEpY3FKG8sRFljAcrWF6FsAy1bzyqlx6Uop/my9bQNr6Nt
y2ifclpeQQxcQWxcQTzMqtxE29K+FRtKiV1pPc3z4zKZrqyTedq3jMYHPC0n
fi4jXi4j/q7YSiy8jUTTyq3EwNtofECML+J5XsfTrfy4lravIdWifJvWViVe
XrlFqWJzXZqff6R60UyV1j+O/jPv2xfNuD80fk7uTCBa6YafvqOZ17wR37LP
OeXX8OnYM8edA5qf/cQ3/py/4uf4Cj9LfuFyD29Vf4O5MJoMif/ZX5gDg4P5
mdk5U/Q9fraapV4dx7lEARWXdQVVz0Gpr/FXsed/Nz+HVI9vjqVzbQ67m3+X
jqBuxxacmTiPsZcuYOTKBQxcZD/HRfEtn54fwJ7hZuwbPoGu+SHiZmLNyxeJ
tRcwcf0yhog3W4Z7sKv7FFrHz2P40qzEcdnrzNw5fmkO7aP92NN7Bseme9Fz
ZQRH+1oQryzGTy12Yi+X6nUST3k1fMtxZn8qFr2Knz1RunaJV7rld35PVNdy
iLgk34xz9tTv9Gbp4+EO2KWGL8cL+RhBeu+C2SF4AtxjJoiqLY04OXSO+PgC
Mf9FTN5YwuDiNM4Md9GYoFPyJWduLWD25UWJQ3fOjePkaK/UIuE4/Lnxfmzc
twmx0gjsxMjM7pzjaSOx71lq1XFP6YRDarKx78DIfge7qt1ndWZJzDVSHEI2
8VcwJ0p8bZbc0lRs+aermZmn65SEp9ep5czPUjfDnKqdoXIJjdrLIUxuMiz3
XlmnOVI8HdZMtZ9phZ+lz7Uwr1FeT/ZkmD3cV8So/c9ZusZeFo1T2L+ueqfb
uO+iWdXqYG5n/zOL4+tWrnXtV+zMdVK4xoYjYKb73Ez3M/cqYXHtZfYhE6dy
/QupxcG1mtVvC+wH4bERsywfj89LMb5R9R8MMKuv9B3PtCjOT/VblDoiVlWv
j/sPCjMLJyvJOEB6QJrk/ePejVafqkXIMW3V89Iq7M5jNl+OF+GCIGJFYcSL
uGdilBTTiiJK0xXFaZs4EsU0LY6Rolq8LBuJkgQprsWPc2SaXZpAdlm2KIfn
abvUskRZkv6/5CKnXLF7XiXzex6SFUo5lfQ/jxg+l9g9t0Ypr5ZE03xi+AKt
fK3CWlYRCmqLRYV1Kyogns9rKEVeYxkKGstR2FCOIlIhzfPjovUVpEo9Ladx
ZTmxfaXE5os2VqBQplUo2kTLNlWRqlHCMXpaVrpRxerT/Pzj0otmqbT+8fRf
cV+/aPb9z2Zn1t/Dz62TrdjQXIdwtQ+uJNeu8kh+nU/X1VDzfvE7sx9XPLnE
ytzTLpATFPlzAsTUzNBBYWipwSE17VQ/Fa55J3WgA8zPYfE/+wqzkUn8vJZ7
LAs7Z+oYNPM0cYHNLPU2XJqfpRZI0L3seU71GXQv87JLy7NK369T7Qmv7kWy
kk8odTnYzx32E0OzrzOKDU270HlhAMPXZogfZ9E7PyW5fuzZOH2hD4dGjqNl
pJmWD2HsyoLStUXxD/dcmsGRiU4cHjqOc5Ndwte8TmotX1/A8OV5HB7pQdNo
O9outONgz2Hi5yL8xMw+Vafws7zOUe9yfmbKd/7X/meugcB9MtxS51nFnSXv
LGgnfrJJPqFR+zc4d49rCksPuZBdfO587AC9f/x83iDXVAmiZkc9jR/OYuTq
NCZuzdM1zaFvYQKHezvR1HsW5+YHMXR1EpM3aUxB44czk0M4PdpHbD2GgaUp
dE1342DHPpRsLpZ6wmYvcXzABZPbKmzGMVJHyCq/+1v9FlrPDK363zE/cxw2
kBdArDxJPBYh7jMt87LkDTIfZyjfvOJp7YfOWCccvYYec7xaWFH34+Z6eRlW
7Ye2GRUrm1bEDL2GOVo8wlnC2ylvdirfLpUHyDF9rg/H8V+uccJ1mc3EqlnE
1xk29prT2CQRQTQ3Lvdglu6pwnwq8W+XioEzf4rvgutlsKdFi4+ZEvM1x6ct
fvZXmMTHLvFrl/KMsFL9ujln1Cxea5OMW/g95+vl2nVrjaqO9XL9au6bLvFl
/qyxVK0O2dep+o6rOLmKRZuW+VnVRuTlZnke9q/YpL6KeKFD/NuBn/g3hpyy
BLFwgrhZqyiBSCErjmgRi5YVpxSn9VFRvCgmXB0vTomPk61FTP09EVvTcUS8
nTD2inJKc4iteT4pj+PE33Hmcl5Wlos4i9fxdmVask9SlEM8nkPrs0U5SBKn
J+kYOTSf/b3novXFSb08W/G/iJ5TlFg5d15fmq3OpVhPl5Uj+2QXq+Ok+fnH
pRfNUmn94+m/4r5+0fz7ovh5iPt8zHRjS/s2RDaEYc21whl1SZ8TrtUssVlR
QLhZJOwcQjCpJQwdVHHoeFDxc1TXg46oWLRTehF6iSnC8ruun/g5i/0bWTr+
bOC6uSkZYCZ+5nobbs3Nyx6O4PfrPSuWXok5u3SPRLeuv7ESa3avxJ9XxaQ9
uqayR+dEchzW5iSujMbReHA3Oi+NYvgGMTRx4cAS9/q+QBw9i+6Z82juP46j
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
pVlnc2YiYc8hy/+PhM26+Qd9x33fWHvKcln+h6RrbKbOWHoPuzL3LEsGTdtc
bfWfzfYMC2t/2e49KwOXaxl+5jaMNvuBn7P6/47cnLN61anCY0Y27G20Knwe
WaNZkUo+1q7kH+tZzDpAGd9aJ6Ssv3Obz/z816yn5qrn+veop/6cf8/1LfxM
b4m739/i1U9H2LhYxdrVNo4+XqpeYUvYr3tvEtmBPGL1wpOFlP7O5GrsY5em
Hvg58y/8bOd63/NzXe6Bn8MBZWan1/SdnXrepb/pX/OzzdDBe36+1z9rP/oR
Pycf6zoePDkees//ys/Rf+Fn49FBzzj69UWTUXj8Xvk9jWNhfxhXv7/Cm//8
iNf/+Ig7Yed3//PvuPvHr9h5f46515tY/3SI0y832Hp9jK6NGWTH25ERvkz3
1KNqohcjZxs4/NXkYl/9/g7zR/PINFQIA7qVn33Cz1ErP8XWb8T+N/zMnjN7
1XrK28lz5Mwa57v8wknUoqomOiY8F3RrMZfQFbCP1QsPqudxieVl5rDKaTTL
QTKg7E9NNQZWJzB2tITauSEke2oQyEfgTctt6KEh5WJWZHkWhfZW9A33oqW9
Tt9DNzMuYxFUVFTIa1iDRHMFKruSaBugR10SwXph7fo0wuXCz9QqCMtTq82c
PmZEUxfh4XUBk5Fd6qcu4UHz/KLMzA8yW8UpDMjHoyaoyPLr4GeL/O6PhIUH
fTpPVyYs7LR8KPh3na9jdo/H+B+TKbldah9KrAzvUvKzlROueghqhANWha0c
v5TxPvHT+yRqeFj125Ye2+ZnZpa473vQAZ3lZF+ZPf/SgNEcezXzxhwv8Fn8
rLr1iMlkp2ecnxoKenRYGni9D33y4n7VUoT0uyPsTD05sxNljeJnH1u+Y16f
R3UcZGXVe6huhZ8J9qCpkXZbmm3D/fTg8FnljVn+LdQ6CSMHc0n5DMTgjobl
b2GdQw3EjW9hgLMP2QRS8j8hJLfzp+NyXQwhVjom26FXjz1vbOYloveVVE+Y
mFScp+Xm2JbmNsn/F5PhZHN52vB4VcYquczrKq3Lwq/238iqNqcmq3Naqepy
uZwzf6s2rEyeThVy91qRTKFC/v+VK1uTp3ldkvcRFk7I7RJ583+QepGk3C5Z
YMl1BZulzbYSvJ/VI7f75ym75639acP8z/z8162nZqvn+uvXU3/Gv+f6Fn6+
+fWTMPRnYegfhaHPsH65i4XLHWHBU5z/doOjT6cYO5xC9XAN4k3ye1Nr9W3q
KqzZnHLt35jfBvObZPOz/rZVPPBzXH47q4UTC+3VSNRkhB8C+hvN48g8Vuzm
bzR7bz5ygM/i57DFyyGrHrj5IUslbOk37P60rfeI3Pepv9Y/W353PL3nZ6Pf
sHXQNlvHqZWQ3+qw8IA/Uopssw9zh8LQv11rTuHN3z/j5n/8Ijz9BW/++AXb
784we7uBlTc7mDndRO1YLzxVwog8ji2/y2F5/unhJnTLa7rzyyuc/nYr25tD
Sl7Hv7H/7BQ2CgWU9+OP2Fk9OLLG8/m+stF7njYaDrMG4HPnHFlQmDmSDOpz
4msTiPqFq72qDXBYXsB2bjX5sMzziJ/paaas7UaJrG9+kPcq2laH1EAbfA1V
cJQLi8Z5TJ8aC/aMPZoJWd/agNG5cSxuzWkOHPcpJExVma9EoaUR8bo6+DiP
WhtAbXsSFTURBDPChyxqIGIu9QihzzLn5kw+NPULllaBveig7LfPeGjYftA8
7/KVIiC3CVBvQM0Hve5KilHmdOiaJJSMC2eGdTaVjMl+L+cWqVcoEnam/12J
peFgT1qzwR/lsLB4vshpdB/05HB5pdivpy+erFcC/OwxT10+X/R1U3+3iMfy
zbNyVuinR08Q9YsjC/u1mJHtlNfSwXxEaqBDHqMvtvxVyM1kX9s7hccZAmRo
6296bCFI/XxQPx+JallzVXEdFkCqMoxkVUw9P6hvcel3zS3fP3uW0Kk9d+3Z
u+gR7dG1hi8s2+dcIDXPnCtlH5tZQ5ztjYes719cXtuE7IuweVi+J2H5rIVY
AXmd+bxkf+TzXyE8yJ60Jy7rLt5O1jP+aEQ+l7JfWtGvitsLxGLyPOMISoXi
MS2eDyZM8T3lYwcTUnIalsthPbUqJd/dlHA7K50SVjel5zOmIun0/fn767Jp
5fZoLo1ITr63cj5SntRecUVthcn2qWCvPSnF28j9ynkbMr6wfEVGeD5riucr
Utb/xJRejlTw/mnr+oTRrlRavF+Vuq9nfv7r1lOz1XP99eupP+Pfc30LP99+
+YTr3z/h9g/h6C8/av7F2vUhlq62sPfuABe/XOH40zmmXy6gfrIFqfYskvUZ
5Oo5j159z8+q37OOsVLH8eAH/eAJnZDzhaZK1JCfC2lhoYDmDHoDbmUanio/
+916vJm53TY/233okNV7vtc8J8OPKmRdH/7XsvTP4YxVj7XRGZOX/eATbbO0
lfNteTEHkj6UpDyINZZjbHMOl39/iztqOf7xCa//yayV32Qt8hGHb0/l9ZpD
/940Gqb7hBmr4JPfer/8LgeFxQPVwg2daTTvTGLl3SlmhJ/TdVn8XyX08mPf
+IGfDSeb/rLJtXnUd35UtoeI/VzClrYlmgrd34f9e/YzbVYqs2bySn1GY2DP
t5Xp3JztE2z0ukUBB17IfV9EAyiib0rYB7fwm0+277F0GkHhqcaeZoyuzmBw
dRTV3VUIZOivF0dVSxPapvpRP9yG6q48Cp3lyLdSR2r4LlYRQCjr1cyQqOUN
7YmbeTx/3K0Zf+RPZqCUBsrUy5l+4XauCp8HOTKa8sv7xtx3n3LhixLhXJdT
9i2sfuSaR8/jIrLW88t7T8031w/awyZvl1nZhU4rD7zM+Eyr34ftz+E0mo/S
RzOH+nqyHx2hF4c8lrx3/mRI/UxinPOsjBk/bp3ndKmvoNOazfOG2T8OynMW
lpQ1H+9HHwv2//l+sQevmewxr3I0tdIBzZcMmnyTgNE983tD7U8qK5wna5Rk
FZnZLxzmF96LKj/T38OhM5BOc9+gT48xuAJuZXwzn8n5QXrVBZDNp1Al3/dk
hXwG0zHkyuPI18RRKCRQkU/qsahq+XzXNOaRl/8H1XXVqKyVqqkWXq7Qv1Mj
UWgtoKm7XnNNUnJ9qqoc2Wrh0OpKZKqrtHJSerlK1piV8j+lStblUgk5n6xg
yX6UZ+TzntVKaGU0g575mbFMWs9H06yk5gFFhZ8jZOdkWj4TXAcn5FRY2zoN
s3heOD2oFb8vZfeonI8k5LWKymcxrP48eXpqyP84P+d0Q/IehLgesCsqFZP3
TW4fiWnpfcPhRyW3ifA4ACui13Ed4Zc1w33FTD3z81+3npqtnuuvX0/9Gf+e
65v4+fePuPli6u73n3D32084/XCLndcH6k3M+cLTz5c4/fkSK5cb6FjuQran
HPHGtHpHVQhHsxetWo4aS6NIfuYcYVX6gZ/LTY+l0Cz83PFnfuZMkzCElXn8
wM9W75n8nAiqFuHP/Mzj0+RsVjj5aM7Qni1M26eWT4fFzOE/zxZa7GxOmQEY
trIKTQ55wvLjcyfjKA6EkKytwcTRBs7/8R5v/p9fcfP3j8rR7/75K17/9iN2
bnYxejiNptlupBur4ZXfQk/UZMGQ8fyVQWQHm9C9NY2+lSEkazL4jzLqCoSB
hFtiGTMjqH3EbORP/Bz7iptj/wt+jnImMht56EvLdjjjxRk1p9V/NnN1TmXS
+3w6q4zPmpX37De+ZkUe6oyLlRWdQWF8eW8zDTlh0Zjpocp7Ri1rRVsNUs1Z
+HIeOMP0dhCmK+TRNt2DgY0hjG4No2emAxXNOeFK+k8L81b6NdM7Uh6Uz4u8
l7mgaojpy+ZPuNXnQvmO3hLsLVN3ohrmMtUt83rqGCLMkskGNKOPfdYXqmt2
CK/4lUOZbR6rEn6Wz6pPXg/OzL145B9d9JiVHaa/rV7TTnvWsMTM5lnzedw+
e9Sct6MmhpryQMKveepBy0+RWtuK1mp5DZKGg+nPzRnHgMvyhmMPOiD7F1LN
BbUf2iOmZxz5mb4zmZDqQoK8vzwPb8KUmTc0ntNl+r0JCOcarU8k5ZPHc8nr
4UUmH5U1bhwhWc+4I8avg17qQfmOeUL07HA/aN69Tt2nuDBzfXcdmoeaZL1T
0CyRho4adPTVor1PrmeG9nAnusbkfZ3oQ/9kH7rltGOs36petDGHeqwLXXJ9
z/Qg2sf79D7NA11oHexBy2CvbF9Opdql2obkslzXMtgpf29HC/P6+jpkXSan
Pa1o7G5FfWcb6jvaZF+kOlktaJRq6JBqb0F9e7NUI+pbG1HbzGpAjVRtUx1q
G+tQ01BrVQ1q62tQU1eQqkahXtYAUjVSBblcXVuFKqm8VGVe/tfJ/7j61kq0
9zaguauA8toE0rK2zsn3oKIyrafZyowWz9uVlfVaRv7/ZXKm0tSyZOJIpROm
MrLWYfF9k4rLdfEkPYASz/z8F66nZqvn+uvXU3/Gv+f6tv7zB6mPuBVuvvnl
R9x9eS/1E65+vsPRu31s3Kxg+24TZ59e4fLXW2wJT/ds9iI3WI5EU1IZOldv
vFSp69C59+q0cJTRcdj8TB879qPzj/k5RH72PPBzxKfeWm5yQNjwczhpslPC
9/xs+WxYPemv+fmBtzVrJW36zOH0A0tH73MLH1fkPqvwa36O3HtEm94lNRQJ
zfl2BmNINjZj9nhb2Pkd3v7nB9z8Qxj6D6OLvvh0jYmdWVR21yPMOSp5nFQu
JL+nYVRWxeV3uhyFLvm97iugor1a565KfcKbXpMboxmDFXHDwcw4uefn2Fd9
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
ymTdQZ6uKJSjo68Fha4GhCq5ruJxCPMcNLOavfOUV3NJmBfisbLHqYHQfjrn
CgMOLdVABJ06t8jz1DP/UFykHP2DZq0U33PyfWa3lQduvOrKjCe5x/gis79c
5DSeFGRKaiqoNaZXMl8DcjP7wQ5dS5SZfjS9S1TnIQwtp55Ame6n0ZMb3Uaq
kEJU3vtgNo6wfI6olfbE5L2JWiUs6yEzR5lLyN5/RF6roM4Iqk8zZybddh6L
0/L+MMcaVPcSNt4e6ksdMToOajgy8n1MV8TU88MRCsk6tlx1VeR6Hz2dK1Ky
TwmjJaJ3HXPcE/RrTiNUXilrvSoEy2uQbe5E4+gIhtansSjsvHq8iIn1GeXQ
rvlpdM5MIi/MG8w3wVtVi1hdHVJS0SphaNlGeUML2sbH0bM4J9sQZt1fxMbZ
Fmb2NtC3soghYeiRjUW5zSjSjS2Iyu3LO3t0m8l2+U7Vtcr1XcKt4xhcW8So
cPLY5jJWT/awJPw8sbmE0Y1ljO6uo2tuBhXC+8nKelnX18k2OlEvTF3VP4BE
UzsqO3vRtySPJ7cd3VuX+28I+65icV+2sb2C8f01jKzOoq6vS55PDaK19fL4
tfBVViEp+1YufF/d2ibriTEMbsh9hP1ndhaxdbaJleMNWQsIQ0uNbCygdXwQ
5S1NevuK5nZUtLeifWwALf29yLe2o7aXPe1pjMkaZGh59pmf/0L11Dz1XP9e
9dSf9++9voWfuw4H0L7fj9GzORwJH9/+8Q63vwtD//pGufnG0nXc/CbXf3mH
i49XOLzex8bpMraYV/jbtTL02s0O2hYHke6S38r6nPbWMoVyk/dVbfJ5mc1V
0yr83Fql2l5v2By791vaZ84PsujjEIjZWSlf5w+GbHa2GJlM8LgMX1u9afrf
WRW270MdcUo4gf1YPW9mFCNWn9vWe9jZ3+H77O+HTHDNYLF4Ol7OzIcYfAn6
RJQi31GBpeNVWVu8wcFPL9E21YNQVtYQyRjqGgryG1mLED1wY6bfRz6PZ4KI
UqMcZe/YcAz3U3k4Lc9RODEiDBlP87n5lIHpw13T04jKNvk9F34Op4Pav+U+
02fCeJ359DUzfnyWzlsZ2q95Gx5lT4dmp5T5SoQ7HSb7L2TlXSs/lho/O/W8
KDW6Bzd7ssVaRbZHMv3cqCHgsX/qMfzsMZPR6J2SRHlFBZo72zAtXNE8PwiH
rLF8wm6VjZXoG27GoFxXMdwHV0VOeZC9cGpLNMua7MfZwpRP+86aJ21lKLLH
6tSesuVpx6wTOV/GXMUA2bcIfyt+gR9Ki/ADPepKrZJ9/6HM5KuUOO1ZQcPQ
Drds1+vToo9bkV5for1m7g+ZtdhltlGi+g2XlbNoNByq47CyUjT7kLqcaFDf
W3ooJ+SzViHrzPKmSlljplQPxPfZnTD+z06yLTMUORNJ/2j5nPiEn8m0JcL1
7Idz3UKdslPWKFp+t6VnsfJVIh5Ln/OQY0hNtma/y1qPPX4HPVTo95aJaUYl
/erC5Unh5Lh+Pnk5EOPnKYZgJoNIPo9IVQGxqjqUt3ahcXgYg0vjwplzWD4W
ft2YQdfMKDqnR9AxPoRCdw8iNc3wV9UjUqhFUtgzUZmXKqCyqRnNQ/3CnKPC
22PCmDOyLt/E5M4aWmen0D49ho7JITQOdMtjNcv/lDqkW5pR3tYh7NqGQHUz
onXtqO4eEiadQtsk5xNnsPJyB4uHGxhYnEXb9DSaZmZQPzqGCtnfmOxHKt+M
irZeZLr6EW5sQ7CmFbmOATSN0StnDu1Li5gVjt48XsP89iK6F+fRvriIjplZ
+b4NIJxvRLiyFmF5HQLlBUSqG5GobpL1QLusJ8bRtrCITtkG+XfjdBsrR9uy
FljBwMoS+peX0CJrhkxzG2KFesQLDcgIv+d75Dm2tCFT3yqMTl3IvKwJljGw
uvTMz3+hemqeeq5/r3rqz/v3Xt/Cz5vv9jF4Monm3T6Mnc9i78MRbn6/w2th
aPLytbDz9c9vcSWl/hzC01efbnFwd4DVqw1s0t/u4zkuf36N7dtj9K6NI9tX
i0i9MHMhjYwwc4b5tVVpw89tBdN/Vn72W/zs/4qfqd2gl3D43vf5MT8H7nUb
D/xsazq+5ufHPep7fua2UnaFHvHzg2bazBraftGWtsPuUf+Jn6NZkxOYkOtD
YSe8KQcq+guYeLmKnfcnmDpaQONIC1q6GzC1OK7HuKu7G+GNBzRrMSTPM10e
RmVdSvWwPqsPyf2I50xeXEIqk08gU5PUPjPn0zgbySzjhPAXZ/xUByyMGcrS
ZyOox+PNcw0rm9nzk+r7Z53n8w3GfcpX3jBzSzza23Uw489neqlO9TIzPmtl
vI586mH/tghFrmKTAch+tJMM61Zthk9YMZlOaGZKRX1Bs8mbumuxvDWJ11/e
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
6sMgp8Znwszo8di/+lLL44eYlSIsbPLNQ+plEkgw28Ojc2mxDBk3YPgtbLZB
7Qift/qLqJakFJ6kA7GaOCq7qtA22YrR5VGMrwgH7U5hZKMDqdYUnMKgDo9X
/dx83GYupPOc3A59rNmDZr4KcxY9Fkcz59vME8rzJ/8KS4aZBU7/u7hbM1aY
Z0h/aIevTHUXpVbvWfvtDsvfjv1qevLJvrLPznUDn4fmeruN10iJpas2XiSm
X3+foULtBn34pKLCgPUDTWifomdyJzpm+9ApNbo+jIXDKYzLKbO9S7nusXrg
psq0v81+ujm+YNY27O3Th5t5OeWNSeQ7ypGuS8OfDupxiljOXmd4Ne+F65uA
PAd6t0Tl/UlWhZApRBEvD8tr4kOc+9eeR2dfLdo7q1BdSKA8n0JLbz0G5L0Z
ou5opAH5lqzOHzIHvry1EnXCxpUtwuy1YSRqk0gwV1Je73ilT9YDAcTysgau
iSLXIizdlJG/C2fLY5PJ6zurhflr0TBQh5ruPGray9HQWYGm7mp53Bo099Si
pjEr7BxDMptEob4afaNdwsyT2DpZwv6FsOXlutQm9i+3sH68IusveS3nxrEg
vLpzJn+/2JBax9bLJWFs5qFICavOrYxhZmkEkwvDmBQ+nlmbFG4Vzpa1zOBE
KwanezA6N4jZtXGs7s9i42gBy/K5nF0bxbQw7+zKFCZXmRUziu7ZfvTPD8jl
CSxuC8vvzsupPM4m8xgnMSXbYB98/WgJK7Ktedn/eTKysPTS5gQWNsYxvzEl
NS3Xy3U7fLwlbBzL7Q8Wnvn5O6unZqbnei67nvq78L3Xt/DzxafXwtDCv5/f
KUtf/fIjbr+8x5sv7/Dq8wXmb5bReTiAnqMRrN5tCSvf4PZ3ue2v74wmmj3p
39iDvhN+vsHZh2scvj3D+vUh1m9e4lAun//2GgfvtjG93YW+iXo0tVejoiqH
RDqBWDKCKFlUWDrMPjK1z3FL+2x5GusMn/Z3I8rQqnOOG3b2CxfbuRT+eED7
2AFLz0uODkSDqqfmZbs/HbB60oaTH/O21Zd+3NNOWDrpeFg5PWx54ZmZw8gj
rg7dZxva7By1znN2T/u6wj0eYSDO9hnfC4/2jEPCzFnhCvYE2Wcus/zOOK+V
KCezxMw+y75FhLvZk+fawa0ezWZmzqEec8ZnzmHztLCvWz3pTJYK/YLJzD8U
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
dSmzZqAGJGjy3oNcD6lW2KXPmfys3Og3fW+yO/1AyjxGE33vU+J3GJ9oi5/Z
ayfbm3VIsZXLaLhf5yCpbba0KJpJWGaYme9Tmcdh5RY6NQvIXq+lqhIor88K
C8ZMTiL70uox6FePZRf75mkPgrmgvvc2P5OdXcwFd5m1B3vgxg/bvMbk4FDS
Z/rMnKOMG10PMwapY2e5/M57LxJda5B75b0JaRYPtdB+PUZAnqXmJi7MGqtO
IUw/ceZZViZRaK9F90Qj2keq5XnE9fgO81z8ca/q3PX+Obm/vG88PkA9uj/J
80H9HGiOOn3FNVPcq3ONMdUp+ZGpiqC6MYtCa4VwchLxjDmekWAWvTx+qDwm
r1sKLT1NWN6aVZYkK7N3e0hmvdqR2hMe3dVeM/9+KPy5d7Gjvd5T4c8z4dDT
20Oc3hxpkadPyKTCu3vs8QrLHgnTHgpH78n22DfeP1/H/sWGakLI1WTel7cH
X9edKd6XbMzTE+Vew8bHcr9D4eb98y1h8i3Z1q6wt9z+et/a5p7h8VvD7ntk
d1kX7Mltj64PlPW5/0fyPJ75+fupp+al53qux/XU34fvvb6Fn+cuV3D40yvl
5Qvl4TeWR917XEnRo+5O8wdf4+inl5g4m0P7zjCGDhex+/pM/k7982th5ztc
fJD6yFNh8s+32ot++eEaq++OMHu3hdW3R3j1s1z/+RrzZwuoHatBtF5YuTIk
DB3XPGwzoxdSTo5oD1r4OWv1oNNhK/cj/Mi3LqB9SPYPTfnuizkU3ohha80F
176dx/R8H5VfT+3rbRb3qc7C7mXbfWvtXce+rqDFmsrdlo+yakPs+UNLhx2g
l2/IZGN7w8azz0fNgd9oCIzPMrO1TR60y/KHTgqH5ZsrUNtWhQqyRpZeFNSu
Gi9k9h7JT8qQPpN3ohncFr+Qr11h10OPlv52PqP3cFqeztR7lLlMv5WP77F6
u9rTZ1+eM5Xp8J/6z2EEhZ/pQ63cRI856r1lfzjfWOo1GYbFmo9dct+HtrW9
6o3nNfxcImuaEHW37eXINaT19Xd45TnJfgTLg8jIdcy8pk+xMxCQMjktJhfd
pz5uZarDMEx+72HnMRxaZukqynymN60+JgGj7zZZhh49ddnb8JeZPrbPZDCq
Nx29sGU/nX55fi4XvAGf+pCw36rvgdzep551Xu1Bcw2i+n3hSW7f5TfznFwr
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
X70+1T7zqzcncr1cfnss/HmES+HPy59OpF7i8r2cf/cSF8K25N1j1WHsKwNz
xpAcrBrnO6OdeMXtCHNfSl3J9q/uTrR/fXJLppXty+Of83ayvXOyOZn5zuzP
pbDv1Y/sHwvLq+Za2Pn1kd7uTP5OPlZNCDUf1+xbC6/L8zy+3FS25/MjP1/8
eCr7ffLMz/+N66n56Lme67+qp/5+fO/1Lfx8/sut8O86Bg8HMHw4jKXX2zj+
5VrY9g43X6iLfqP8fCs8ffvLG9z+/AY3nBf8+RYbb7YxdDKCHrnv9NUK9t6f
4fSnK2HnazkVlv5wi/OPd1qXcr9XP7/G1rtzzLzax7zU4ftL3f7ehwN07nYj
0h1ThvaRoRPG20KztqkbyFpaDrv/nLL6z7GgyTFkfppmDxt+LnY5LJ/jIpOX
YXkl2L4JzJ+j96+Ww/It0+us25WZ2/E6+gOrp5nT3M6+n97HUXJfzOS4L+sx
9HEc9mMYf2HOhZGNqZWNy/NIUOtZEbXmqGI6M+gNB40eVjjPI5waTgtflwc1
uztZk0Vdex0q68uVXUqdRntLFlbu8zu1j8neb4lqD4rVi7nUU/LQU7U83pz3
5VIPCqflL6yaaL/REuvtAm7trdt56tQMlHmLNTOlxMpaUR89K+fbzgK09cam
HNY6xmH5GZc95AV6HtY7ZGvmBhZ75bXylap2N1MdR76evtgxpPNBpAph4a64
rqvYi3b43MrQts6b+u4Xsk8vXKX3zGw8nh9pSDxGw+KwslfIrZoV4zH5K6wS
KxuF/nQv9LNSir8Vy3vqcspj04etHq19NWjpzqCtL4uadlnblEdRSn5mDzjq
vteFkGnpZeiOuHSN4bR6zqpBp/ZaZx6L9fVUzxKv8eHWPrTVJ6c+hhoM9STh
ti325vETMqs7YHrWfDzOO/rDLqs/7VJe90acqptmXzlRLp8lYWfOrSao36ii
9jisegxyLvvK1J9Qc69e0vo8XOrDSC72xkxGi1eZ2GfNj9Lvw6GPS78S9s7d
QasXbWk6NM9FmJq6Fq4FYlLRigjidSlklZ+bML01jUP6Z/z4EkfCpyfCv6fC
kyfvpIRhlU2Fc0+ENU+EnV+9FVb+8USZ+eLDqfzPEQb9KJc/kKMPcPH+UEoY
W7Z3LBx+TL0H5wst/45j1TQfav+Y/Hwu27yUupLz18rJwt705CSfyzYu3gtj
yz4pa1ul95H9uJJ9vGDfm38Xjj+XNcCFcv2xXn6lvWXTNz+XupD1wfnrPXkO
cvpOuNkuYehnfv7vW0/NR8/1XP9VPfX343uvb+Hnu9/f4/zXG2y83cHoyTh6
DoYweb6Ao48v8fqPO/n7a1zS81nY+YY+dx+lPr3F9c/vhIlvsfduD1Nnk8LQ
Qxg9m8MWfxc+Xspv17Xw87X2pM8/3io/c9bw/PNb7L65wMLZLubOtrD77hUu
fn+Ho88nGH45jMxgDN7yMp1Vohccj9EHmRfNY/UZ29PO8HNA+Nkf5/Fy8pzf
8vdyPfBzcYlUkeaEvCgxnm30TNAMvpIXeFFsVYl1G+EiLT1v/vZw/6JH1xdp
/aD1QutvVv3wqB6uk9sVCcPLPjiEv1xu4RmvB+FYABlhrWRlDLHKOMKZqHBK
SJjTa3qdbofVAy+zZtfcyompyrTmPHROdSLXnFMvY87/OSz2sz0cbN1BkcX2
JW7j16Z/85RaHh8ec4ydfV7yEefzgpYO2Fdm9YnL9DVlj9HOXqQO1qXahmL1
wCvTrEPHfR9e+9fkdV+Z9l91ns9n9Zv9Tut9KjMM7TEex2TVUqtfzKwQnT2L
Gs7K1iRQ3ZxWf7PKxhxiwtPeVABuZo77jFeF5pu4jUaDVeSW999RZLIB3aX3
a6BSS3v9wPi2B0npfa4gt2f68Q7tPXO9RH7+gf5//Aw5mKXNtZ7RGkUywoGy
/gnKPrFfX+I1GhDm52h/WbUytiaE84Bl2r/3hJhBbmbs2EMu8dhrkmIz98jX
1W2xNHXtEaN5DsXdytAeywvQGzb8TN0zM1Hov8Ecbg970boftn7EpX1renTT
/zlWEdbMQ2Z6018jRFbm7F/IeIzbPute7Tt7VEvtUR9Co9dxRrwmE1E9vj3y
XfVoLguz13lchWsf1UBbx17clpcijxfR3yaSiQu/J5AoJJBpqURNfzP65oYw
u7+A9YstqW2snu9g+2Yfu8K4O9f72KZumDqIm13s3O5hm/51Vu9YGfnDCY6F
l4/f7eJU/j+dvtvB8dttHP94gKN3Bzh4vYuD213hc/p47MnpHvbuZJu326pp
ppZa+Vx49kJuf/3ToTD4Ec7eHcq2DnD+Xnicl98LU78jk58oU5/f87LwtfDv
hbC0nn9/hCvZxpXc54o8z1lq4ftLZrt+uMDNxzMp+dtH0zO/+sn0nrnNZ37+
71lPzUbP9Vz/p3rq78j3Xt+UnyJMe/PbT8LIb7Dz9gATx7Po2xnF+MtZYeEd
XPxyhZsvVlYKvaI/Sn16o+dvhKFvOSP44yFmzubRszeOoaM5rF7Lb9b7S7nt
LS4+XAlPXxtvu8+vVSd9Jfc9fPsKC+dbmD5bxeYb+Z36coOzL6+EqYdQGBAm
Fob20GdAPZZNniCZOaz9sLDOz1G/wXxnn3qY+a3MN8PPzJ34oeT/Bz8XP+bn
F/9rfi7+dn7mNh5Y2my7tLQUXmHnUEDYOcqMtyjKq5PCzwnNiCGjuALyPITL
yD8uL/PsXKoVcPmEa4W5HU4HUvL8u0Yb0L/Si6aJRqTrovBTM+G2dL6aI10K
p8diarfRHOssnTWXRi5zMbtZZyu9hqGZ30f9sNUndnoetMNkbd5WvVGoU6aG
I2Jm4mwths4DWloW5Xmf7SXn+HpeMWjpXuiDwfwX8rN6czhVB1KsGdouWTv5
Ec+ZHHV6fASyAc2eoT7CFfOhSLZVYvWwlX8t9uZjuwNGY0Ne1uMBzodjCCUW
H+sp1wYBK3OFmg+r16x6Dbe5TtcgpcX3xyqKdE1Spgz9QxnzB/m4bmFmj2rH
+Xj374E1r0hfD3tNUWYdB2DWC/UcZGd6wrHIt/RNccptXHIft9yfGh2PpaP2
WrmIOkPIjBpmpKhuwmM075Y3tidouNnF9QsfK+S29BUe1TaTn6kFieRC6o3N
1zecDugsJLX69nEIauxZLnvmVX2+varloBeHI2AyfPTzIdum/7Ph8JAWt02/
Do/2oU2fWj0mo0HVKIWEn+mrUtdbQN//x957vSeWJVnfl+/X05Up4T0I5L33
XkICgbz33gs5rFz6zMrqmef9m9cbEXsfRFbPN5N10+qu1kU8IMzhgDC/HWfF
WvPjGFuaxBBn+y1EMbQYw/ACZ1xPYmxlGuOrnFkyQzWF2No04ut02foshncW
MXO6iZPUCTHnBU6IjZdOlhHfnsX07rzkhE/tzGKSzk/uLmCSs7q35ySve2Z3
iW6zgOjeHGaOV8Rz7op4/Jg4eu1qC0tnK1i7WMdaYhPLZxu03XWsnK1h9XyD
Tun6812sXOxiPbFNtYWNqx0c0Pcfa0lu7hPS595L7WEnuUPcvyvsv5s6wG72
FHu5CxzkEjjKnYt2bj+7T2uEQ7rshBif+P/u+JWf/8nqpZnotV7rZ+ulPyv/
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
DJ6J9BozfWp/Wfdh85mJBZU3tYnXSvy8eU5RvEZ4dpQeMxBAJb0/KnmGLaj7
xMY8YEEP2uBh5dX9FkVUxZqfhaH5vM2YG9QMbVXzh5LVqP2kxddaPLft8lqr
zEW6H/ttuNTspcy1Ev8WOZSWu9imvLnf6ip2qHVOPhtR87JN5/jIY7ht2v9P
+UkLO7OOhDXcvI7yG1mUz/xsE12F8hDk3jjnaarPCr0PeU7RbxdGFp8MnlUs
d8DHc5v0f/RU+ISDuYfNaza7R2WoSG4R65xLVH4na4HsPhfxdwWaBzvRPNKN
yq5mhJrrEGpoQKCykt6jZWgb6MLwbBRDxJK9k5MYJX7eOj9A8jGBxNMV4lur
ws/cN2Z+Di9OSR96bGFS/U0lveilSWJZ5tY5Ys44VvdWkKbvqPuvaezyHPMs
8XM0jpEF4mP27RDWnZX7ROR+s/L3BLM18fMosez85houM1d4+pbR/LyIzkgE
IzP8WDMYX2SGJ14mZp7QFaVtxFbmhKNH54nDlxaxQc8n+5nWwfQ5XjndQz/x
9yDVGPfNV2aEvyN0Ko9P25sgpuYSDqfLhqcjmN+aRyJ7+srP/yT10iz0Wq/1
s/XSn5U/S/0MPw9shzGfWMfJ443ScLxnLw3O4FZ6jAs6n3jKIMWajvdJ7GUO
EDudQ99ejJh4EXvZQ+LlG2Q+ZcSvjtmZdc7cj+bZRO4rJz+ncZDdxfRxHBP7
41i8WMbR/bnKVZGZxazoRdjPI/X1CZnf3uH66y220xuYO5vFyu0WEp9uiSVv
MH8zh6q5WjjaXfBWexAifmaWY95jT2L1W24XjanBz89MbHpm6AJ+Luwh/2/8
/NZsbMf0O34u/pGftUecTcoCm8MqOgcP5+hxce5guQ+V9RXoGu7H9O4yVm52
sZTYwkH6gF63W9z/1xOy//WA3H/lcPXxEosHi+gea0VlU4n4S3DmtqfEj/La
alTUVcMf9IlnnUWYTXnOWUUDrHTAkq2nGYo5rVjn6vFag/1K2DuOtQ+c4ecR
nwU/MTP7PTM7B0UjoTwbvJJhw9mQ7H3sotsa5aR1DGtIeHaQ9RusXZC8Q7di
yiIbveYWVZI/IxpoVW9tbyV3xBYKwOR1i5eFzO4xX1pVSbaIaCZMomku4vvR
dt/ybTnr2+WkbTvhDQTR19OIyHADWpoDwqPK20P15g0OZk/nfDaKZOUUK72z
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
/ByLIrq6gsMU8TO9ty/ou2FiYwGdYyMYmYoSV3K/WfedZ3kbxN6zEWJOYlGq
UWLe4Wli0Vn6rBxtIfPhltbpWWyd7Qp/d0cVPwv75jUgBVoQ5lni6DHmZ7r9
4vYGbp5SuP/1Ttb6sbU5dERiisGl121w85SqWc3PtB3uiQ9M0fVLq8TPZ8h+
TItGbf5wF70x4mdi4jCtA3g/WG/yXGqNENbrgVHi+0G6/fzWMi7vL175+YXr
pVnotV7rj9ZLf2b+LPVz/nVp7BMzT15Mo39/EMPH41i6XRcWZh8O7kcn3t1S
pTQTc7G2I4cEMfZGeo+4m77z9yOIny9gP3si84NJ+v24fc+Vkb70LfvV8Zzg
F/aru8Jacg1Dx2PoJ46eT27h4uMt0p/vkKFiDXRa5gkfkfvtA3LE0QnOWknu
YuF2Ezv3p0h8y2D33Qn6twZR0hOEpdIFR6lfMoG5n8Z+wgY/Sy/RrLzKftBh
WLQOw/xjv5l70c9/E+MUakAsiseFma2FZSJuNWuGtub52cF9OuIyr8cOP/GM
jzMmxMfAIcfOPUHlkeuudCLYHELzeB/GdmcxfbGE+dMFrFItnMxjlv5epue+
eLOO6csVjOzNoDHcC29liFiX+KY6iJK6Esns8/iVttXmsmm9r+JG0SVwv5lZ
Tveh7bpPKiW6DuInt+qlSr61ePo66TEM7QH7YdjFW5lZTvrYhjee9r6Q+UXJ
XlFaEp6PE02xkd1n1/oG3Qfmy1Sv19CTqOvFK85gOtFpK09l1glz/9PpUd5p
xT7ievb3c3IuTTXC02HsXm/ggNZ3c0cLaBxsk5k+fi9wzolZb0PyuPUsKfed
JZPQZlFaaNZtWJXGRPW9NdNa1PupyPKs3+A5QJP1rWhQROusZ/XY2078q40Z
RqfqK4sWxKiCeUb5X1n1+5PfZw6lqeZ1CnvZsb8Iv+Yug599P3ptKM855bGt
/Kf1MYZCHbfdJHoQ4/8uHnPs2/c7frZofmZPF+4vl9WVob6zHg3dTShvrUag
PiRZK2VVJSitCqG0ppTWbiH4S0tQUuZHVUsV2ka6iCnHpGc8QrzLNTxP5+cV
P/dORDCxtoKTXAKP/5XG1adLxHhmb3yYmDUiM3VDxM28jYGpUQxNDmIg1k9M
Tt9TM2HiZ2LqaWLQ2VlsnOzQd0cKGWLfTeLnIeFnZt9JPa/HWpG/5+cx7kMT
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
dIXbb9dYul5E9WQ9fqmx4v9YmU2UHpn1CIWcrHwzTKp+x8+Gh4ZZZtT+np/l
NnycnnOfxWNDe5g5lV8v+9N5OYOEmNlt8DP9zXnUgRIvSok9aupCqG4oE91o
KXF0iHjDX+oQ7wS33y3cG6ohdmiuRH17NWpbylBR6yX2scvxekOzLP500v+1
ikbBE3KLt5kt70HmlPw/7jcX6Z6pkTVtd1klW5l7ksx7ktfnUj5nhieEHP9n
Lbn2VzO0F+KJx3zlcWitrVXrLUzS1za7Lfk+tfJ7K9JedSadN2h67jXbtC9H
vh9rynvW8e3tOu/b7CxWvVaXyrnm/bD5vOge7cHs0SImr9YxeriEyqEuVHR1
YGprndZ0GawnNlDbVim6XubnYt3jfVvgpaL4+W2en98Y9d/wszCu1kFLj13P
Zhr9fcXLv+NnrUUxab9oyXnhOU/paRfpnB2dFW43dN+q9y4Z2nl+Vh7exdrX
RPGzRc+BFuhwXJb8rKh4cATsef0HZ28Hqvzin8jvH+P1Fx03leSs6/xtPhXv
EHpfBirVvCtnYJbXlWBsppe+JzaQ+HSA9Uv6rojR695UAy/ngpYT69LasIzW
idX02jePtKKb+Lp/dhSDs2GpnslhtI12ooE4uboxiKom7jHXoKqjBsGmMviq
PZKLWF7tQ0Udb8tHn5UQ3aYeXaNd6J8YRl9c8TP3n7P03ZP8lMLS/proQxQ/
K2YVVl2YzPd88x4a8zOan6PCz7ef6DuHvsdO0zuIrcSJfSe0fkP1n9lnLso+
dPOGD0dczo9o/UZsfRWHqXPcf7nF7Qda0+9uiAZE/J/nC/hZ67DH8354ah+H
6bGYn1eIn9Mfbl75+QXrpVnotV7rj9RLf17+bPUz/Hyau5I6u7sijqbz93Se
e9KPNzh5uMRqagsjx2Po2urD2NE0NpKHdPk1Eh9Soom+Yn5mlv6o6vYz+zZl
cPJ0Lh51PZsjGCYmXrndxRnx+fUH5Y8nGS2SdUgc/Skr/eXkpxy20vsYP4xg
bD+M9dQ2rqT3TPz8SRVrODLfHpClYq+7Q9rnucs1LF+tEJuf0fW3WMmso2a+
Eb/UFuMvjl+UNpkZ9/c9ZEP3bFH6DiMz0CJ6jIKyqZI8P805zM6sbWathkN7
fpn0MXLuOTM/s96ZdRvsWefxOTU/uxEiNq6sC6KivhTltWWoa6pCXXMVSqqD
4nFh87jhInbxh1yoby1Fd7iZWKEdbYO1xC8ercGw5bM0LJJ1ZxFfYVuAmEf8
6VSeM3sA87H+Yruh7zV8jk2yrnB5HOJ9xsxlymeDmJ49KHS+CHNkkdWkWdCi
PeOswoF5LbPmZ+E2t1XPtjnEc7qYddWSnfJckpNtK9CmF3jFSc/apjJo7Do3
8Xme0Cy5haKZcDkQrGOvtDZ0xXvRHOtDRU8LKlvr0TPeh42rHSweL6G+s4b2
xS36DZXBrr0ItQ/Lm4IcSn6uv+gyLhdNtGZn4WfxFjc02xblna19R9R6xpJn
ZbPWy8j+6zlBs/T6ncrzw6F6zPw8xa9Oeu0O8dSQbG6vykjhdZHdqzTl+V63
XeUWKn5+LuU9rTTqMl/IWeDay84VcsJf7af3kl/4WnkK6rUN59hwLqUcV7Br
/5BnTw+ee/WGPKigtd/Y/BC2b1exfjOP8Go3GlinT5f7K/i4isrWKeO1YW0A
wcYQKrvq0DrSgc6xLrQT/7aE+9A5MYKusR60dFXTZ6AUdS0VsmYsobWjt5zW
kWUuBMu9qKgOoKquVK6r62xE13g3euNDxLdhDM3PYu10B7fs//N4jYWdFfRE
w+iKjKN/kjXQ7OEcxdAse3/EpSc9XFDMqyPxCazubyDzKY2H7zmcZfcwQfzc
EY1ggK5n5mXdSVhnuMjffP8Z5Q8yNMOa7gnE1lZxkrnA4688P3iFmZ11dEZ5
BpJYnv1E+H6F/WddrAMfpRoifh6cntT8/KrfeKl6aRZ6rdf6o/XSn5k/W/0M
P59kz3GUpqLv/JMcVTYB5mnWdJw9Xot33C79lsRPpomFRzGwM4GVy01c0OW3
H3mu8FYyuRPsE/0+m/eiSxETXz4lsHG9hpHdKHq3I5g+XxOPafbluH5K6T60
zv0mFuYec5L9QO4PMZmYwsDRMKZuFnH+OSleHKL34JnCb8zQyuMu/fUOp083
WL/cxlpiDedPp7j9msLW3S7a1jtQ1GzC/3H9RY6b29h7wab6hvl8ba1xLuRn
oyxUNu5/cq9WPOl4NpDLDAeVi7MopL9MTMKZytzP5f4zMQn7bPj8xMzEzV72
2/Wr4sv8QZf4zAUqA5JBWFERIoauQ5CqiLNDiGkdxIsB4pzW7goMTrVjcLab
GLFJjrsrXYRV8rvt0iNUmmTREYgHszplzYZN6zbyc2o207PG1qJ0rioT2iI9
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
ZOk7KPspKQzNHtDM0JkPxNMfFBffESs/fM+KN7SqO2LnB6p7Yml6DGLwDLMz
MTPP/aWeiIHfJ6WHnH2v2DzL/W/md9qWFG3n7rd72vad7CPnHuaIozk/nH1A
Mq/9539ovTQbvdZr/U/10p+Pf7f6af1GqV/KW8oc7ZfZMp4ns5bR72lHCF2z
vZg5XcJ26gB7meO8Lvo4cyb8fJziukTijo9l3uAod4T48Sy61kcwsBvF/M22
zAjm+VkqjcS7lPjdJT8QJ3/K4uz+DFNns+jfG8XExRx2705wKVqPO83Zd7im
85ecV/j1Dlmq86dLzF2vYeJqAavE4Oe07eTnR+LrJ6SJnVOctfL9HXK/UX3O
4iB5jPnzDaym93H2gfb1/SlGT0bhHfLir6XEVey5xr7KTtW3zfOzXeXKWUW/
YZPZQ2Fo4WfiHZvSj7p5dpBZWRjaLRVghg6oKgm5UVrO/ht+hKq89Hqzt4GL
OM8jeSOcq9LSXYuhiR6EF0YR24xhcj2MoVinZIDUdtahZaAVjb0tCNVXwF9R
gtKaELFNKeraqlDbSrzdXou6/kaE2iphpceTmTXuSRIXs0b6LXsTs0aWWLmY
+PstcWYRc7bOW+EMcQ/tkzOg+qHFdqP/qfqnNvFGU8X8bNWaW/H2cCoPCYfO
2rC6lKZEMbT2jNZMKX1a4VitfRAPvGcfDOXjQaVzvY0yLhddhebRYu0NXewo
osc3KX068b/Da4KdNTqc/23kklu1Pttq8LvicvHRsD575Qkja45/Zurn3vQb
zfpvREddrOc3zTL7WGxVXC39boOftd91kfbvMGt+Vvtg5P+Z831nq3ig6FnK
H/i5kKPV7KZJ97GffUqM56HXL1ZDf25WueE654V9oFmTbXbrYxY+zoF3KM85
1v94WAdN79lGYudIL8YWxzAyMyKc2zby3/Az954Lqi/ai4mZAcwsDiMc70UT
cXNNfQht3Q0YnBzB0HQYPZEBdHL/Os/Pir3zLC3bpr/HezA024fZvRit3few
fbSKvr4W1DeUo6O7GjMrQ7SWP0aGe8HEwvx5zzIbM0PTWvqBmPnhP4l3//OB
ik6/E7uK1ot7yFnpS9/T7e+IXXOf6JTO82mO2Jjrnvj2kZn5O92f69dHPH2j
0y93cts08Xb6/Y1U5l1S8zP3o+k7iSpF2+V9yXHP+jsz/L3i5285uTzzRe1v
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
QdD4Z/jDZo6Mx/Xj6pHH05DJQCw0Gez0aGYPm7oNn50FU48768ts+qF5pk9r
2TnP+jyo53LYbThbGI5ecy+yDJ2n/2tWCNnbl6sMrDoSR7dtvfc81m+YeS70
jNBcO9nHci1Lat/Xbzwg2ON1Zv9ynOw9v3MfearhoJcFmZC6b5fcJtf2p7MZ
e36jA3HL/uzVfHXj56GeeXzsPlO6bvQajw8nly/HZqmwfnI5fnXGS5q6E0e3
wdu4vdZvz+lD+x95mFi9tuYFBk2fXz3nvFZzorOUufpYzWtp824iAfUzpNe3
177f1E749HMp713Yrx7Kqrdg/zlqTulJ55W1CXvEzAkMhIN2nsGv+md6UHIf
4f5Bb72QvAch2VY4RM9F2Sfl9jwvJp/dlHw2CwuTKErno7i8EBXauy1BWX0a
Ne0VaBtoQpdwbsdIF9qH29E22I7mfqOFLm+j13IZyhvSws1laOivQVVbBWJF
SXlsAcTzEzpj2JFpEX5uweR8H14uDmP67QiGXw2p97PhZ2HnHqN5ru9r0aru
bhR+LkconYBfvksCTg6qM5vBmeYCnif7fiEzPRPqFRQtSiBdXYoG2Sb9NwZm
x5RVycTKz2P01BjD5PI7HFwe4PbzEbbPNtH/cup7fp580D8rP0+Z4gwh9Red
Y+MYmpvDxuk23v9xK98NV7IueG34eZj8LPdHdp8YfsTPGcPPOlv4wM9v1pfk
e+sMX//t2X/jKeupWey5/rXqqffX5/p/Wz/Kz/Tv4iwV/bCoC+C8l4+/1VFT
1HKQobMVM8eJTQXN8VTHtyP+4H0XYW8saXxnlZ8LYsJ2MfXBSsjvWywVR7BI
fu/qkqgebcDE9gxWrza0F01v6G3OFF4bTfQu9RzsRd+fagb465NFYegRk4Vy
vqGZYaqDVm87YeKvl6qRPrceHVt3B8LE8+jdHsHMySvsfz5R32fVQn+7Eza+
0xzvq1/u1Dt67X4XIwdzGNiaxuLlCo6+nmhv2+g5mFlofDwufr3G5r08nosN
LN+uqz56/XoDmfUM6oYrUNFSoP63SfndD9l5wvxCk6sSltfPazXD5Ghf2Mx5
6UyY/u1TjbPX8UTWHmiu+jmQGeLyWuYXmyKnJ4SbqReJFfB4ftjkm0Q8pser
c4e8H5dqbznrx3K8JnLsGirPZtU5M29e61NHJjZsaHqn5M0XVg/h8jkzhq4s
R2q/1m7LZfUMZFYyMlnxZ+uPkWMzu7XXbDk4x+t61CN+4Hqd6Qvmqec01wSa
yWJzwqmZdjnaY943tRNej2bc5Prcj3QhpoyW29GdW86X6zkZ4I63nePP4eQM
Opna1LCo74Wuf0xeudFBP/LLDpl5T13zqI7aevm5zeue680xfnle89y96iMX
0P4qdcj63vNzGAnqfIJhZMPTun6yxzRUIy3XiwpjsyJy3Uica6ko8ksSKKos
QKnsgxV1UrWFKK8u0KqQqpLzqhuLUd9aitauSnT11aBnoA49Qw3oHWEOd7uw
X4cwXptwXxsGprswNNOrNTzTiZHZLgzP9ggntqOspQaJsgLZ16MorkmhsrUM
ZQ0liMpn3RcIIplKoq5T+HukA8OTHXj5ZhCzS0MYXxhA32QXGnqNllrzwXva
UM8Zwr427T9XdTUiVV0ijBzTihbnIyZF3/mY+tTLmly4OSrcnyxOyVpB/hZe
L64sRaNsr2dyGEPzE8LpkxicGxeGHjP6DTLr+Dherq7iRL5j7uVzvnuxLZwt
/Dwk/MxeNXvPU4afex/xM5m3X1icvhzsPw/Pz2Hz4gAf/u2jHv8iP3cID7dn
MugTDu+nBoS95knL0MrRZpaQHh/k556xISxuLOPq4xm+/duz//NT1lPz2HP9
a9RT76fP9Z9TP8bP9DIQhs6lz67VkFrPLOOrZmb0A5GAesCyTP/Z9KGdvx0P
vLD8HSFD85R9Z3rc5T9ooDXTULgvVhCX37i4/v7R0zhcEUPxQCX6Vofw9mIZ
O7f72Lnexxb1HJwplN+2vdszHNyfC0Pz9ADLl0vI7I2jZyOD6eMF7H4+wtkv
Nzrnp74cX0yWN7mY/s67n44we/EGA3ujGDucxtbHPc1KuSAzf73T+UP6eKg3
h2xj/X5PtjunGYezF69x8OVUe88Xcp1T2ebFr+/VJ5rX3f5wgHe3a1i9XsOu
3I5+d7MHk+iaa0FdVxVKqouRkt/3AnnuJeVJFAnzMo/QY2fKqENnfzGiaxCj
vSBLu23GnPHNyNNcO/aPqStPFCWQKmHFkZ+WdUmRvLZFUdXEau9ZM7of+sRO
tpzDbnqqvnU5DxrhbB6e0UFoXjj5Ur0kvFmNiUs1DkZTbLjXeCc7/WlnOy7L
3I5Ps87+kVFzTZ5Jrs0f0Z7sIwbXmUDr5czzvE6udcBl5x5dWXZWDzwn79r3
MKeX5yEPu3RdmONyPDuMT7TqVAIe1ZZoVkjAlZ0HdPyenRwVrjFzPQ/1WB/i
cfyyrY6Ez8Ft9Te6BuVnSPvDRreiOvOsf3Wuzmgals/TtU3A8WJRjbPc1s7u
BewsQkjWr2H5zHFtmiiM6vufrkiivDKFqsp81FQlUVtXgNqmNOrby9HSU4NO
YeEe+jGPtaCPvhic7RtjtQn7dZiabBcm7BSO6xTOM6e9k53oFHZuG2lDS6YV
LcMtaJNqZ2XahA1bhUPbhUd70CaXF9WUwh+PqqaLazjVIMs+ybkIfzAk+34K
zb1yP+N9GJ7qwdxSBgursp59O4yBqW7UdxsddV13i2o3TP+5XfXPVXJ+fnmh
6sP4nRGX9WhEPkshfR1iSBXH1b8uXkQP6GKU15Wp7rm+s1m4dBD9L8eVnTML
k8rRAy+ptzDM2j0xjtm1dZzK+vz9L2fKz9RvNCk/k3mpbTaedVnfDM4U8nzZ
Rrfy8ygyr+axJd9V7//9s2q9Xq6+QceI8PNIRjmcfh/qe8ciM08Myd9Dus3+
qXHVZvfK43m79Q5Xn8/x7d+f+fkp66m57Ln+Neqp99Pn+s+p/xt+Vh1HnulF
8zRHdbAe9UjwWX4OfsfPQcvPjt9V6IGfE04Z/42o9YaOpmLaJ9LTAtOHTgoD
xrWnFEaA2d9dabS/7sbc4WusX29p3srOjcn73rk5wf7dic4Unn46xfGnYyxf
r2BkZwx9GwM6+7f2fhcn3y6Vmc/Zi/5Ez2jTh6ZGY18YeP5iEcO7GUyezMj1
t3Dyy4V61l0qR99Yjr5Xrw5qMl6ezGNEWHheeH3r4zHO5fzL3+61Z30q3K15
K79eyXUPsCKPZ4UzkffyuD/uasZhx8seFDeVKz+XpJOoqi4Uhs43/Czcp71S
P4+jB1Tbkl8UU/5g754zgGQpf8ToLug7FskPam+R/BxPx5WbY+Rm4amgZoE7
uSzsPT/om1Wv4H/sueGyWd0u9a8zc4NOVnSe7Rm7VKvh0lk3r/CdT7WzLvW4
yzVzfr4H9nyhDG1v+2gG0On7mlk8613hysl6fKgnh9VUaA/aZ+YWHb8LciT3
Q/Ku5oBbvYnb8rPpWdsMbKuJ4f5rvOzc6ied6/PKtn1yO4/pa/tM9h511Lyv
n52MQutx53jWcV3JGcGH3BGPrnd0HcH70MfrshmJednetFtuQw0J891ZXofr
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
17MgrPnlCVlflwunl7ZWIlZeJN8rSRSVynsqa51qWXdXUDvTUIjWvlr1G2nt
b0RJbQkipUkka2Vt01aBRnm8vVPteHc4j5P3W1jefydcO46G/kH1aO4aG1If
DTKuzhsK83YJ/3YKE/eMZbSn3DqawfjiEg6vj/Dx3+9w/OUCo4vMH5TbTI2i
kxmFcrvuMWaCD6mWo3tStjVlssSpj6aX3qD8vbK/Jt8hF7j9/dl/46nrqVnt
uf756qn3yef6c+qH+s+PmFnZSSs3q+lg5rLmLqsm2mXnDfNUr0o+Yq+QPl0P
+YQPGo7HZXShMevB4TC0ySQkO8foJeHwsxQzxFTPUZyPfJ5HTQfzoBvzUTXR
jJGdl3h3s4nt2wPs3HC20HK0MPTRpzOcfL7AwYdTvDvfwNTeLMZ2xjF3/Arb
94fG7/mr9eb4cqV6jSvN/b5Sz7qZ03kM7E1i8ngBOx/ocSeM/fsdzoSP1ceD
Hne/UaNxguXLZUwezWDqfAFrn3ZxKlx+SS+8r7fqI83r8TbrF3uY3prH0PIw
Ol/2yO99LcJFKWHjsMnAtrkmXtvrJSfQB5gzgR6yc9j0ls3sn834pj937GFW
kKV97JjpZbucHDyf1UpQn0yNhMdk6bnUx4La45+19DKv8S90NM3OnKHJqjZZ
K4+98Nw2b8Vje+C8H+qYf5Z9xqkXHk92Xi8nj7pho0t2fJ7z3MZ3w22zrv1c
D/hzTUaJsl+eZuDREzHkrNOYjy48VUguLk+itDIprJREWWUC5dVJVNYWmF5w
E/vBRVpVwnNVLaWolqppLUFNSwkqm9gfNlxcIVVGbXpVAkUVwouVxhuuqJxa
dNkfi3lMQPbBIlZUj6EwB4h6B2Y7+uwxBGqvfZon6c76E36XTe4xnys9HuB+
8PpzMmW4ruHz1h4xveyY9R52fKTN3OJD9ot9b/3muJDpPzvbMlqcF1Z/ZTyp
PZab3VnNvPqq0Ocl7lNvbZPN4jfnxYy+PJSU17q6DJXt9VJ1sv9WqzdHWVO1
sHMVShrKhZ8rhYGr0dhZicaOSlmjpNVLxOuX2ycS8ro3Kj8PzWYwMjeM+ZUx
vNmk/nlIfaZrlZ8bTYaK5hu2Cju3S7Wq5prrSU84YDJO9XUPIF7gl/coLOsX
+e4oTsn+kK++1o3y3rYyw6Utjaom2Rda06jrKJV9oFTe27Q5xlWekjVPvtw+
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
YeH2KFaezGHlGfefFzB1awwdI52o9LajaaBT5gdbTf+5bbQPFeJn9gpnfQlr
0/l9sbiZtTuRBK+3IvJd4I/p9eF0EKnmFPJdRSQbkuIXzfOFfZPduPf6NrY+
rOHs9z2cftshTmZWJm7+olrmw0879F2wiyNi6+NfD3D6+5FokU+ojv9MrPvn
A+LbfWLhfZx/Iy7+xr3rQ9FQH39RFj5hTcfXfZx92RMvjQOeKaTbaQ/6TPrQ
0qtmf4+vO8bn41h60fx/p7/syXXX/Pzj1FVz23X9GHXV++F1/WPqu/jZ9iEw
/Cz9Qb/wDWsXeZ6NZ9X8rBkgfhFGZs0h87HcxicMrHNGPtPX0h4n6xHYvypi
clNYLys5HS7lMuGpgPrOBoWzA1Taj2ZdR8SU8nNUGVo4OqYajz/wc0zmDLUv
zVmFrIlO5pIyyxbIEgO0xdEy3465d7fw/OwNNj9uEz9r7ZzvSZ43zwDuE0u/
PV3Hnd17mFyfxczmTTw8e4Ut+i09/vN7HP7GHH0k3nWnv56LPvLtxVu6/V0s
7dzCg5OnWPvMx37pt5CuO6bf3+NfD7FPv83r55tY2XyCvsVR8S2Ip+L0+qLS
f+ceNPfgQ/QaQxnNiM4SGxdbuPeXR7GDZw/ZJ4x7z7RGKMZkfeBNqNaCvU48
QdUb15uZUM2MdtkaCmsu0S256wHpSbM2Q1nQYr+q59oN48X2s/Rtrdwc9QB3
Gn7VPrCVB+2W+TrNefEoZ3s0a8diadZF8xqNr6vOzfFjOBEgVis2cMZgM9Jt
JeS6G9A01IEMnffS/lPv0/73H/NhajNM6j2Omt6w5SVT9YhTHZFbNBqidZa5
Q59kpfNlLtEJu9XDLUv7YJ72wQLtg4UIAsRlbrmNW9cKphf/s8t4bTgsHUa9
zck3jMdGLTtrz/mGlLCzfdvL/Hyjvu5yP9pp5Ro6qr4qot1QP5Vgyk9875O+
uawbfNrj5/3B2ic0S0d1D1ZeoctcppoYj+jBeU5TdNZB2i+zGeHnBsPPWk2i
gS4Zfm7vb0LfaAtVk/BzN+vr+ytoasmiVIyjUsmgf6gFC7dGsPJ0Dvefz+Hu
swVM3h5H23CVn9lvo3W4hy5jfu5HY18HovmknQcjWfGml846Dtb5NzbRPkOV
KvL3g5++F0L0+U+I14ufPk/s28HfCa3E89O3h7G6s4qNDxvY+rhG6+i32L2g
z+vHA+x/2iO23sTWpy1sf9mV2v2F/SoPcPinExz8Tt8Bv3NPmviaLj/8QkX8
e/B5k743NnHAfWu6j2Pm5V9YI7Itt9nj8386wqe/vMenP59JfWQfDmbx33Zx
8Rt7T+/glB7v8APd90c9f83PP05dNbdd149VV70/Xtd/bX0XP4d8diawN/gH
fg7rfJYcE+WKaI4x90RZe2tdHjS8HEhyhWSmzK4Ee9Ix6yWJ9WL0u+zTHGjr
2L7HKdkUPp4Zi1zm5/Alfo7ZDK0ZhrWzhVoWP0uZGUPOXWE9RzITFy2DvxxG
bqwB48+nsXr4BGvv32GbmHbnnH4rL/ax8+GQOJp70SfY/riLR0ermHm3gOn1
JTw4fYb1r3ui3eDMwUMu9rL69p44mv08NnB/7z7mNpZx7/CRaKpZzyG96C90
v/z7/IW11tuYebKMxp5m+p2P02tUn4oYe8mxjrmSRr41J9kjDR1ZyQ4psh9Y
UxLxUlR76rSdffQecN/QGbBmQN22Ht3W47odf+Bn67Ye8Ydm7Tn3Gm+4jV+E
s5abL5dkD0qZOTbR4BqGszwebJ8Hj52RyP3oesOzzId1RtOhvF5nSjW/vB9k
6D0rVori4+FlTQKvf2gN5pO5Sp+8Xoevqieq5mfq/N7Prupc3k+WXsJR9WJm
nmb+5V4zZ6DzvKEnWs1Cl/lD8UD2I8w9/QJt83wEQfG2o9slaP2YpM9AMiAz
i8xx2qev0SmbucGfre3nvKzj+MnqK1u95xq2rtV23HD8DX42PuDiPRLXbG9/
hHnfQ2svZmhdE7j9VX2VHk+wjhdoT97O+/Zrho/lpc37A/Ozw69zDp5gkNYQ
WeHlRtbud9QwdEeT6KAbu4ifB4mfx5Sfe4mfu4if2/uIn1vzaGxIoaU5h/7B
FswzPz83/Px8HuO3xsVjo9LXLh527APNWSqc3838XO5pQ5A+J7Lu86svutsc
V+D3kfVOxQo9RlsBhZYEUpyjUoqhUErQd0dQjuN46buFvztypSTa+poxcnsW
s0/vYfH5Pdx/9wBrx+s4+nyMXWLX53svcG/tMe68W6XTVaysP8bD7Wd4svca
T3Zf4dnuSzzdfY7V7Sd4vLlK1z3G4/1neHf6BgcXmzimdfnuxTrenLzE66Pn
eH34Ei/o9B191+x82ML+xYbU7scN+o5hfn+DDc5DPXmOLbqPPVrPH1zsEotf
56f8SHXVvHZdP15d9T55Xf919V38bPqWXFavWfrNES3hYsPCPN+uFZZ+acj2
dDYevilTCc3tDsbpfDwqPeBsYwbxYlz4mRnAYeUXSu6KZkH7QkHRbkTpf2PM
k0ajYftwWH9bOui0qYxV6nGnXtFx05eOI8nZH6zpII5n/4hAIYhEbxo9d/tw
Z/MO3nBO7/kW/Y7tYut8Txh69+KIfkuPsEPM+/b4FW6/u4OJlwtY2ryH12dr
MnN4wB4e3K+m06Nv7Ft3rMx98AzzGzextH0Pz0/XsfP5VHPCiaEPvx5inX5f
F17eJU5oRzoXl9eQoG2T5Rw19sgw/snljhxdlhT/Ws5cC6d4nUJcFCG2CWkv
2eGt6bfWeHXXeg1bmgZbt2zWLt6gX7Y3v/fWLJyVMW15q+kMW00WiMnw1hzv
qlbCKuZpr9EGuIw3hMyyeZw2D2qPtc54S9QUPYbm7RlPCJ4RC2mflPW8LsN2
rNfgHjZnlTu9bnuOjtcPdhagrQkx+mHWRljP28zf1fvoPLM9ezezJx73M5mj
jX8d6xh8rBGmdU2Is7/TPD/oQzQfoH2Zc/BidF1QNB6ctaL96HrjV6OztJql
oq/3r/vPNQx9SdNRV/WFdlS1HcLWxOjcF+YZQdavx+g5RLJhYWd/1E2fTa8w
tOS/WFmDRvt8yefda+lbNHvHOoakGfI6ZyjrHy+fJ34u5FHsbEVjbxtKXS1m
jpDYubMiWuimngo6iZf7xlpND7oZPSPcf25CS0cRzS0ZtLcXMDDchrk7Y1h5
sSDzg7efzGJ0aQTNgx3Czy2D3H/uRsuw8bAb7ZF520Ayptn05r1WjjZe1/Q6
/fRdxBqmZDmKeDmCTGMcpQpnlYbEa4R1Hvy9kW4o0dq0HaWeHhT7B9AwMISx
xXm83VvHhz99wMGnPWL6O+iaGqPnMIyuiRF0jXONontyEr1TU+ibnqQaR+/0
KJ2OonWGzt+7iUdbr3D8eRfvvxL37r/AzKNlDN+cwdjtOQzfmsbYnTlM3VvC
7MoS5u4vY/bBMqYfLGHq/iIm6bLphzdx+80DYukNHND3ztbZNT//SHXVrHZd
P15d9T55Xf919V38zDl1YX9NVfk5YPFzIiTaC54j4gpRqWeGsrP6zsXsChme
ruXnXIX4uZSAM6D8rLl3xFwuzS50uuk3MBSSjF3Jgk5F/5qf/9BvrlbUniXU
itnsbFWK/TnySeFo1n4E6Xc11hZFZaoJU8/n8IIYefPDDjbfK0Nvn+9j5/wQ
ex+Ikz8c4N3hOjH0fUy8mMTUq2k83HsieSuH4rdxjN3Ph6KNPv52it1PB3h2
9JL4+S5mN+5i5eA1tj4fCWMffjvE2sctzL+4g1bi50IphXxjmlg5j8aeIpp6
i2jsLopWI11JIJILi+aT2YY5x+0z/Vyvzu7VmWzB6jyfahhqvYar/VnDwI56
8Ubh95jzbPjYww3p0dbZjHzDWZNJ7XQa3YblpVZveNkjzOkO8jF+9ZXj8hid
tctwWr3physvO+1ZO0vPoX5sDtUTMDNHNYvRYzwjhL+NT7P6SHjFH489/HzB
gMlw1B64+i+rz7PLZJlzb/0nuw/ssI9/VPNKHKL1dgUcmvMXM/xsMq/Ff0O8
N/y0zgkh1RihYj+/iPShfXGv8KpoV4yeRfnZbDO7j1zTS6439Tc10X/Qc9Ro
o/k9ZE7ndVQkFRBNdox12ckAfd7Yf0M99iSfMaQ5MuJVwesOk+8uunXLQ0c0
VKYHb2YmvRGdp2SWFj+UIH1WirRPdlX5mT3suPdc7GiUOcIqP7eYIn6m6hho
QmtnAa1tWXTRunBovBPzd8eVn18oP48wPw90yPxgi9V/Hu5G+wjVaDfKxM/+
REyeu860qme4ZG7K/uAUvUqQXnskE0CyIYpCWwqN7VnkiaHj9BnimdpiUxaN
HTz/2I1iexcyrV3ItvVicGaePt/b+PxvX2iNu487q8v0OvuQaulCuYs4m26f
b6Nq76XzfVKFjl4UOnuoepFs60LTyBgevnmJs688I3iIF9vP0TM5Qdf3odwz
hGLPgFTJqt4hqWIfVf8wit2DqNDp+O0lrHMvnO6Hv4eu+fnHqatmtev68euq
99Hr+r9X38PPkvMcDpoKXObnaJWfpeds+Jm5OSIZglHhL+Zna67vj/wc/Bv8
fOMP/MzlIn4OhkOiBY5ZXhsWM2f+mp9rdRpJuj6ZUV7+m/xs/O04b4U1kel8
WuYMw5kggqUQcoMNGHk8hQcHq3h7sSG5KuzNwb9fW+/p/MUhDj4eE1tv4v72
HYy+GMbwy3Hc2nuMdxfb2PtyLMU8LVnenL1C51+9f4vlXWLozVu4f/AM7z5s
Y59+W9993Mb88zvoGOlCpY2YuVu9aStdBdE3pysp4pU4QpmwHJ/3hNX7TbNu
XLZOQ7jUzOlVM2z0b2uera5Wx2x6yD/XM1syf7F3dpbe56Dkd7NnSr2t4XCY
3qnqntmz0M851wmP6ANCxClB4jc/MQv3XwNxN3Em6yG4b1ntcUrf2XoOoiep
agksrpdscs6HYc7j+a+Y+qfxa2b+FT230YmolzRzIPNTCOFIFAHOSOE8bZ9D
t5HJ+vGaPEdmbum9u6ozftJXt/Ut2nvmvEGf8ZX2ci9WPKXZE1p7u+GkV/K9
Uw20b5Vo7ZgOSL/aI//j1fxrzjtkjb/MyWo+ocNreT07voOfa3rUjmq/3mJp
Xr9wbjjrNUIxr/jQsZ9eUDKJAvT5CwpL+2I+kx1TnQfk7cA6nno5JuDRbHfL
v1pmC526DWKcReOR18+38YbDSJXLxJLMz602PxeInwt/i59Hm1UDzfw82ISm
thxa2vLoG2rF2Cz7102qfoP5+encJX5uZf+NQZ0hbDdV6mqmNUpEMoLUK9Er
M6gynyzFfim0/8V5zjOEQkuKPlMFNHP+ZUsWmQbO0iyhe6gD/eP99LwG0TU6
jLZhqqFRTN28hY2TPXwifj4gfr777CY97hAaegfRQbdrHR5E8+CQVMvAEJoG
hrWIdysDIygTR/fQ7Z+8foYz+tyz78azzWfoIqYutvfR66Lb9A0TRw/SWmCA
alB4udilp2Vi6ALdrqFzAOOLS/RcNiUvnPOervn5x6mrZrPr+ueqq95fr+v/
X30PPwdEpxH86zK65iDrNuKs1wjbPeeIPc9HvMyVjphi/+CY3aPm3nMwzhrk
FHKNGTnWzJ5sN5w1+YTsf+ZyweXhGcKQ3i9neWcitk4jbmYDhZ3TtT3nqPKz
qYTFzjmdH0zkqhng8VzCMLR6c3DuN3vd8f1y5kqkO4O2uz24uXOHGHqNGHoX
2x92pQ+9/V597g4/70vu7+Ojhxh9M46e5yNY3L6H18TcO1+PJMPbqgPiadZI
b3zawMrBXcy8m8fdnRVi6A28PN/E/Mu76J7qQ2tvBU29jSh3FJElbmadRijN
3BySmSfNitB8QmFH4ceqj5xVtfk2zESWrtjSMQuTCT87iduIk/wBJAs55For
SBXTiCdD4hHIPd9afq4zfm/cy40Sm2Wao8i0x5FuoW1apv0hG6Dn66P33Ss+
FZzZJ/zscwg3aqZ1Ta61q6ZPfkmj7dQMRs6QNl7T4lFndAbK3G6pOjf70bkl
FzoUpvVcVGcg+THFj9Hkili6BOmjsp+beU6WVkV8OPzKzZybonksZp7QFLOz
R7IMnfReuISZYznOygxKv9Mnudeq32CG4+fhCpjH8tUbTxK37aH31/50l/UZ
Vc861Z1Yeuobtg7khmTm+EMu+uy6ZZaO+93sWc36nliW53U128ZD62DW+Dh9
6sEhOhjzXGQ9xusTa7aTZ3o5J5zzV8I6B8oaDvH2iIaRqZTR0E383NNCHN1M
TNukZfFzN+udW4hPW4WdRQNNLN0x1IQirZ3LzTli605MLg1j6f4UVp4xPy/g
1hPm52HRbzQTP7cRP7cZ/XM7aziGusTjw0vP4Ybbbfz6vDLb7A/T2oFOo3H9
rojmo0g3xtHYkaPPVVm8P4o8u9haRCfd59j8OMZvzmB8eZpqhh53FsPz01hc
uYOt0118/Ncv2KO18+2nyxiYHkP/9JTcfmR5CkOLUxhenKbb03n6H6k5qoU5
9E2OYHx2DE/frOKE8wy/7mB1/TF6p8bROTKCkfkZDMxOoX9mAoNUwzN0H9OT
6J+coMegy2Yn0D0xjq7xKUzfu0fr9G2c/ukM21+u/et+pLpqHruuf8666v32
uv5z9b39Z+4/cvnl1K9F7ByKh2xmFn42+Sai1xB21rxAyWqWIn6W/nPU7j8H
iJ8TxKnZclr8W/n33PIgq7cyWoih3V7iZ3r8GP32x2vZWfg5eqnn/Ef9RiJ7
uZJG8ywZhVnVdaivXdKUetxZmo4YXR9gDWlLBKWZRky/nsOL09fY+shajl1s
ntHpe/aL3sM+/b7ufN7Fy9MXWFyfx9DzMUyvLePZ+7fqa/ftRGYF97kXzdks
v5xgkxj68e493H4zi7sbd3Bv9ymm6De6c7Ibla6y5Jiwl3OUni9nvXG/0JrF
U3+/gGiC+Ri8spmW+k847T6v1de1vCcszW1t/gbzc53DBX8whHQpLz5keWKj
YmMBlc6S+N+pV7LD6CDqTV4H8RrxYqJM/9cURbJC738+LPN0gbiT9hE3rau4
H6q9QPU+8xrfaCvD0qEcbZ23/nbV231Qi+0sbwnVbTskZ4W5uc5lslmcetyC
/e7iyZis5cTzj/3x6D58IeVm9ooR3YvfbbQmrC9Rrz3WEbuJQ73iXadaZ+k9
c885pH4ibnktPGfnFKYMxH20HQLS6/RG3cLebqMX5utF/xBW3YQn5NLrjI+c
NTNpzxLW15bVj/5DGT8U0Zwb/Qx7DXr8DskalDk69uKjx2MP53CG++I8h8Db
I6h9e3MswFnj52eVvjaX9P8tLU1VG62ePCHavtmmBpufG7qpiKEbbH5uIH6u
oGu4lfi5DX3jzeifoJpqRcdoi/R/OduoY6AF48TKyw9ncPcp+z/PYenRDDHo
sOqe+5mflaFbh1T73EJcnWsu0WsJ2f1nZnq38Sf3E0vn8sTLPfzcKqJ5KrWl
iJ/5uE4RZdaO9DdjaGYYk7dmMHl7jk7nMEU1cXseY8tz9HzuYutkGx/+5SN2
Pu7h5pObGJybxDCx8cy9RUzdncfEHfq/O/OYMv9v3cf03SWMEFtPEo8/W3uK
00+c472Nx2uP0D83Q8w8jdm7i/p4N2cxRTV9izNj+G9z2W3i+KUZDC4sYP7R
I/rO2ZGcls3P1/z8I9VVc9h1/XPWVe+31/Wfq+/tPwdqtM7MalaWh3hgJJWb
Q5LBERU+rmqdlZujhp0tfg7/gZ+5/5xtsPjZKxrYv8/PVlZKra9G9HLuYMbk
eVtVk0uYNPxsZ3zX8nNW+VlmCXPE2Hn1uEtx3grdTzBNXFQOIjtUwOCDMdzf
WcXa+Yb0oTff72CDvaIv9kxG9yHWiZnvbN7FOPH2zPoynhw+xe7nPRz+ciY9
6N2PhzJbePjtWPxmn2zdxeKzGYw+mET3Qj+aBpvk+HKyGJdtGKRtxu8BH5f2
BK1MOZ94nXAf2vKmc5iyvdtqtBw3PFZedJWffzb8rDOFzJ1uhCIRZJifW8uS
Jd7Y1oDO4WYkSwnhLcszwtJPi0aEmS3qov3AL33YUJq1Pezh7aD3ji5PsCbE
J/Na7GfNs6QeO9fEoVoG1lkws4W1T13vd6jWxOiSnXb+iUv875yml1vvsbTd
loeEx+SauxDhmdN0Ev5YWLOsiQX9Yc1A8bAu2mTOq+e4R7JoWJvA7KzPxWuX
9r/dJnPEpfN3NfzMOnTxvEgSnydUK8yc7Am5bf9k0YCEvTZXCz97rWxG1atb
3hzV3rP6jzAv//Q3+dlpz4HytnRxZnvQZdYpLsn44/xB9g/x8/5CnyVmTNGN
W9oXr/peq3bdZTQrlj7aLRr0etlP6mQNxtuLfaVj9LnJtTQSN7eJ/rmhh6qL
GLrT8HNnGc19jejm2cHJNnSPNtO+VEHHSAWVvgbECwnRe3EfeGhuAMurM7j/
ag4rr+axtDpFlw2p7wazM2s3/gY/e2ktwLodXlfK+jGo+hQ+btJG3Dx1awKj
i2PIt/FxnCQaO7Jo6KA1YXcZXaMdGJsfJVblvvOscCtz7PjyPLHvPBYf3iN+
3sSHv5zTZ30HS4+Zn6eEn6fvLgg3M2tP3l4g1qW/iX/5PiZvWvw8TZfP4+XW
S/GBlv7zxmMM0X0PzM0Sgy9jmv+fuZnr9rzej7mvKbr/EeL4oaUlLDx+TGv1
bZz8eoTND9f6jR+prprDruufv656H76u76/v4WdmVoufg7GQ9Jm1mJ2t7LqI
9LSEjQ03c05etQw/G/1G2OiigwnVb6QKafHfYH7mWSXJrPPUlOHnkPBztDoP
+O/xs6V1Foau9qGrWo4/ltWDTgg/p0wP2tJ1ZIihuRfN2hHJ/m5PoG2xGzfX
b+Hl2SusX2xIbuHOxT79vrFHx75oNHY/7uHx/lPMvF3AHNWj/WdY50xD1nGw
Z93nfWxTvfuwice7jzH9YBytI80o9pTotz6HdDkhuTCik0nothZPZuIW9eL1
Se4Me41Jvp/XsLPxcKs3eo1qnoajys+uOjvHQ1lY+dnBWvNoFOlCDvlKEYXm
ItoGmtE/3YViZ4mYyo8bdXW2ZpkZTj2O60TTy9wWjHrpuQbULy2m2Yg80xbk
XOhMQHQo0WJM1iSsD5bnTwzKPdtA0q/a6TjzqvpgWFpt1Q2bfJSgajmUTZX3
tIfMfs0h6QP7iNsDkqEXkeMnolMgDmSulsxxP79e89rdyo3Cw2G3mffTeTTp
eTPn+9W/2h1ULYb0klm/EXZJ8Vwev0bO52ANOK8fvBHlZ503NNkjIWV/l1WW
154p7qWyz97lzBTtTdfmDVocfcOpa03hXr9mjnP+nmpG9LGZo11mjtJp+tIO
k23jrLnMaXwHhe35/2S94JTtVu9Sfub3ga9jD78EfS4KbRVi53Y09rWjgRi6
TPxcNjnevM80dBXQRPt0U28JpXber9LINKYQL8XF15I9MSOZJHFyK4ZvDmJu
dRzLz2cw92gc/TOcMdgpGujWoS6ZH2QPjraRbvq7Q3zShZ+9OjvqDnCuegSJ
Uhqt/Q0YXurG7KNJjBNDc38815SlfTqDMj2Ppp4G9Ix0YmR6GKMLExhbnDXs
S+vYpTli5AXi5xVsHW/gw5/fY4u1VQ+XMThL/Dw/S4xLrHzLKubdBfr/eYzT
/3LvevLOIkYWpjBDt3uz+wbvf2PP9z082XyC4cUFDMzOYvrOkmHumqL7Gb+p
98VMPbI4h8FF5eft91s4+XZI/Hxwzc8/UF01e13Xf7+66n36uv5+fRc/i05D
i/mZtc5WcQ/ZYuGw0WronGBVXxE1fee/xc+hBFdM9LXZCvFzLiKcwrws3gg1
DM2aVc7zVn5WZo5lY/Y8YG1ud23eoFQmekkPnTDa51p+juesHnTc7lHbeg5L
E829aNZI52LqAVYOIjdextjzSawePMG7s3VsnG+LnoN9Otjbbu/zEXY/7ePl
6Vssb9/D5Ltl3N55KDrn3a97oqN+dbqGO9sPMfZkGu0zHSh1leQ3Pt2QRjzP
Whjd3gHe7smwzIKxntVlci1q+8w2Q0kmuuoirEzHWl+LS3nSVh/ZpfOBrCEO
RMNIFjLS26twbtxML0aWh9A23o4wbcef6tSj+GejNbDyPJhDue/LuZJB0TKo
30NQcuHUOyPK+eEl2ndyIelTi09yXHM9mJvDPHuYZv9k7q27RVfM/MYecnWS
g1hnfPGUcVlnHKI1jT/tV50F769ZzgKkbZVSzQhnV3OOt+btOaU/y9yquYTW
7GC90Vo7RL/BHG1pK6zMevGjYE+3UM0coWihdaaOfeL4dYfoNTFDB+U5MXNr
Vnb1cY3PHuuuAy6jBbf66MrPN4xO3fIA0TnL6prnsr+depdI3rjoU7jv75Hi
7e4O6vwf62FYx8xacFlrBNw1HO+yM1GEn83l2t+vEw8Sa7/h27D/O+uG+DMo
3s/97VrMz90tMtfHc4S5tjLixZTq9tmX3J6lVKaXrEbeb4P0vtNnMNGSR3mo
CV1zveid7UXHKLEz3S/nDDb1d0mGN/NzK/Ez95/zLUXhZ9a8e4mdI7R2StLj
NQ+0YPTmMMYfDKOfGLplpAWNXY1o7ChL77mhM4fWvkbh58GJfgzPjmPU8PPE
8gxx9yyGiJ+XHt7HxtEGzn8/xcbZBmbvLxI/TxJvz0qvmNnXqglLd0HszL1s
5uuR+UnM0HVviZ85e5v5eXV9le57nu5n1ug3LnO4MPhN1YHM3JmX5zVE/Lz8
9Cn2LnZx9tsRtj5d5w/+aHXVvHVd/73rqvfv66rW9/BzqCarRDydTQlDW351
NfysHBtBNFvbg47T33E5Ff+NlMXOys/JEveiMohklZ+dbrfoVC0vCadHNavh
WMD41cVEx1GdH4za/s6xTNXb2ebqbMywdtXHjhk4QX8nclE9bzE195vt81V+
ToieI2n0HPS36CmI+woBJHpT6Lzdi5vr9/Dm/Zr0odffb2s/+tMB9j8fE0sf
4tX7Tazs3sfS21ncWlvG08NneHH8WnzvBh+MojLdinxPERli5yQ9TpxZwuhK
+HWFk0H124h6TYafy2RFqG8XbzOXV4/DO43nRjUb28rfc9i521ZmibAz6zYc
OrfJmTiJfAwFeh7lzga0DLSiY7wL7WPE9j0lYtKQMNxP9fW2l7L2ovV+hctY
nxDRzJFgIiC9YO3TukVHzFl+7PkWSnF2XRDhLO1PmZCwczjjU37OMAcHJRs7
Sqe+JL3uiOoRHH71UmZvvDBxdrwURqQYlgwTvq9IXvmc8/bY85gzyyU7sCZb
RXWy2l/l/rforUWH4pJ8FNE586xc2CO9ViuHRvyFA+aykOo5JONbfDhYI6HF
XM+vw0fPzxVhD4t60Wpzr1d9L3yqXwl7hG2tHrtkqxBDS//ZzHX+bLavnQfO
fWja/v+L+ZmPBThYM+4WP2bRxdP25zWMrFmYn+1jFLzNHML0gYTqSKzMHNH+
WPOmXis30sw7+o3O3OiAnCajhVk9TJ9jzhkUdu5rQ2NPq2ihy50t4sWRa2ug
9zhBj+tDndddXSd4dGZS1wZ8rIQ1O7TGCQfgjgdoTRRGqilN99Mo2YOV/k6q
LskgbDYedszVueY8be+gPN9ghHO40yi1FoitK+if68LgfIdoRRqkD15G+2Ab
Oobb6PoGdI40Y2CiByMzw8S5Exhd4vnBOanhRe0/Lz96gM2TTWLfM6yfMj8v
GX6eEb3zhOkdT0rfelY0y8rRM3TdHEbmJjBLt3m39xYf/nyG0297ePzuEQYX
5kS/wfw8afWub3FejLIz18Qt1XIM02MNLS7i1vOnOPiwJ/y8+fGan3+0umq+
uq7/3nXV+/d1Ves/zM+XGDosegLRFKTDOh+YVl6OMTtnDTdbldXiPvTf5Wf2
dwh4NZPB7qsSr9DvrM/vQUT4OWx86iKmOKP7D/ycjusc4d/j54zlYRep4edY
DT8nLrG0xc9x0XPQ3wWji+bsb3rt3gyxSnMUjTPtmH9zU2YLNz7tiC6De0Sb
Hzjz9wC7n1Tn/HT3LhZfzmDh+SLmni1j+O4EmifbUOguiT6z3F5CY1sO5aYk
cqWEcDs/F37+zNBWP5G1raxr9ZlZQsmHDGp/1VGj22Afk2o2BnvN1dt8LR4n
nKFC/Ox2M3/4kW1IqTaUWKOhs4x8a4k4JodYMSHH2pkjbX1uLT/z43H/Mkjv
GzMpP0fiM8ndYL/kqM7MyVxe0CNMy/ki7GHNs4Yhye/z6cwhca+fPSzocs68
YD/lSIGuz/hF38G+yn7mYrot5zFH2ecjw0Xnc5yHZ+kn/MZnTn3kmHWZj+uM
1li0Dma2j7XOos1g5oxrdh/3z9mDz0c87Ap7qtmGxmO7zvCmy6f3o37Kxt8t
qp5pfloj+Oj1uGMe6TULgxtPZa/JM2RdyA3jDVhXm1PjMFk1zmp/3PK6u2H0
0aylUQ8U1i74RdMjzyOsOhHmfNb7uGU94KTn5KZt46N1CvtAe4w/i7K3ZjRW
vbdljRFQ3bdwtLc6b8i6Fyc9V/bR+Xf5ub0RiWIGgViI7sMnntHi4ef1SM9Y
XreLdVrqPcc6Zt6XeBvzdwvrM1hbzf1n6UFb/DzUjabeVmQqWVrDB0W3zrnc
xRbOd8/T46fouWTQ1pdH10AFHf0tdPsmtI90oHuyG13jbeif6sDo7CDGFycx
tjRF/Dwl3hu1/Hxr9QF2zraEn9+dXObnSZn7+xv8TPeh/DyPEbrt7J0F8Yj/
9JdzvP+2S/x8X/mZavbektE6a995YnlW2dkUXz5k8/MTHHzU/vPGh2t+/tHq
qvnquv7711Xv49el9b38bOk3QhZDW3ODKS1myGimmpEiPWdiZc7l5rJ6z9J/
5hnCVLSq+0jGkCoZ/bP4o/n0N9vmZ5f2n31e4ucg8XD4r/2frQwVw9CceR1P
X9ZHq0ba0n6YLG/uP2fN5dlajv7b3tCW1x3PFVpcnS5wjzoGXzoAbzGI/EgD
Jl/M4unZK7z7tEscvU+/c3vC0Nsfd7DzZQfrH9bxcGMF47fH0THVi+bRDjR0
EX900m88McHw3CBmbvZiZrEVfePEr+1pxIijE5wzTo+peg6e4QwgQuXnTHXW
u0Y0R4V1ry7Ls85tvACtuTrWJnDx8XJTLrmNSzLZk6WUMDP79RY7ysStOfhp
2zqIn5g5f7b8kS1+q82U5t6pV/u3qhE2fhZh7Tt7LI4VXa5HdcJZ2odyEek9
Mxczp8r8Hfer48SuKdZ7BBEvhBDJsq7DJz3peDkmHh9JzikphKXXy7N6woYp
r2pAUsqHnN3CegxmZ+3HEscGTaagXzOqvUHjjSEaE9qG8hx8hudVF+IkDq0X
r2mrF2sxra5PRPPgd2kvWvJFTF+aGDlEr5P7qXzsQN8Lt2RguyMmD5vvly6/
Yfqx9aa0F305b93KIrc9/hw3RJPM/MwZnZwZ6jbbXzTh/NoiugbwxdiH2y1e
gtx/5hlJK2/SWlPV1XiBW1nqbpO77jI9eJlzdKpHe4Q+w6WOZuVb4ucKzxB2
qw90QfQbjUg35uW7gBma9zPWlF/O8XEJSzt8XvGwdNNrCCXjSDcUREPNnh7M
5pWBdjQNEj+zfmO4hx6rhW6Tovefvp9ofZ3KR5FvSqPYmkShOULno7QeTUtW
eP94J9oGiKH7m9E22ILusXYMTndjZH4Yo4vMzVTCz9PiSze8OCMa5dtPH2Hv
fAsXfzrD2+MNTN9bxIDRb1haDVu3zP1rq1i/cXMBI3NTmL27jHcn2/j0Lxc4
/7aD1Xcrhp/niceXMUV8LfzN/yP/Vy3WdgzTYw0tKT/vf9zG6a+HWL+4zk/5
0eqq2eq6/ufVVe/z/1Pr+/i5msXN84IhU8LNPDdoqjozqJwc49zpPJdhaLnc
6KENZ1u66XQ5S/ycFY9onv1xeXWO3spqYy201+8VnzxlYebnsPHhMH3oS552
2pNmho5d0j/HLvGz3ZO2+DkbreqmxQtPNdEJ03eOG12HeHOIh3RM+tA8V8ha
C85x9ucDSPbl0P1gBHf2V/H2wxY2P+4SP29hi2cMP2zi1fFr3Hp5i36DB9Dc
3yL+XuVKEd0DvZi7v4SVtftY3byD1wf38OJwBWOPR5AdyiPSGCGG5ueQEk1H
Kse5iXF5H5ilWW/LbB1gna+ws0N9JSwfE4/TLuZnu4iRRF+ejEifOducEyaJ
0WMF6f1xEp/f8NQb3W3V++FGbVnZKy6H6R2qzsItuYNOye7j3nNA9Bx+zYJL
sXdDRDzVfPQ3syVru3mONEzbkj2XxTfZzB76TU4Je8RF8iFi5wjSTfQ+lWOi
A+H+ttfq/cZ98v/Mzh5+bONbHOS8bdO/9ia8VY1GSLMMhTuZo6Ne27eOi3Nf
OMf7Z5NHo/xqvPV4G5scctZSM0N7jKaD5xTdkh8dQCAVlH68+l2rv4zTmufz
mf4ve5t4lM8tTXSddSzBo7plydML6Fyj5J241UeQ8wPZV4N9wd2WB5/MBzo0
J9HkuEh+YMgpeg71Y9Ges6X3sbLS6ww/83OQfrPx5nBI1owWa62iqTjKHS3E
zzw72Gr3nznDO9/RKPrnNO3fiWJa5osDiYjoleX5e4zPu2RB+iQL3BdjHQ6/
r1nkWxuFwxt6WiS/W3vPzM9daB0hfu4jfi4nxYMmRGyeon0215ik7xP6XikF
kS4SQ1dSaOstoXeU81pondrB/ekcWvoq6BzrQt/MEPHpBHHwpNTkzSlM3poW
fh4hZr3zYhWHxKw8P/j6cEP8NgZmJjCywBoL7RczR3PPemxhChOL00b/zP3o
eYwSP8+t3MLa6S4+/dtHvP91F6tvV8QbmvvPMytLxrdjVuYWJww3Sx+bffDo
8YTll5Zwh/UbFzs4/rKP1ydb1/z8g9VVs9R1/c+rq97n/6fWf5SfI8LNVc8N
5WedCVSvOubShJbh53g+IWwZNRoKi59rfaDTDcTPlbzwM+s3qvxs8njZszfA
/Bwx7Bu9zM+ZSM356CV+jv5H+JnnC2v707X8bPWisxZDKz+LP0cuKZmFoueg
beLL0jbqSKH5Zhfm12/jxfu32Pi0hbWLNbw4eEbsfBtDy2PoHOpAU2cTGtoq
aO1uweDMMJZe3MWT/Rd4uPWEbvsSu9+28ebTayytzaNzoRXZzhQixASJfBS5
YgKFxgzxQhqZcoK2Iz3PfEzybaSnzDnafIzd0mlY/Gx60i6PKfY34RwM9iak
beBPBIWzJBM87BNesubYqr53Ny7zs6O+qjlgtmINDnu1xTV/0GfYl8+HjC8H
e9nFMkHJGgmkiWlTys5xyR8x/hnMtsy+QdPLDRltb1L1B5Gc6p05Y49ztK3+
MvsyS+9VfNyc4gcSYnaOGc013b/oReKaicJcy2wo2lzRKDtFz2F7zAXV16TO
q7Nu6qVt2NJXw89WTzto9bK17+7mec+QR7al5VmiueBmDtJv5ul4npFPw8Y/
z6fe2pqt6NAs9JBqRURL4lfmFj0yzwzSe2fN6Fl54TIP6VNPDvUM4VN9rj+7
qzmLtheh5UfiNH1wS89B/O4wvpI3HIaf6bMayyQ1e3BA+blM/FyW/nOz5A/m
2krKz6Usvb9JhJih6XuF+9D6OWfdM78HQfGzjKRpP+aZ4uaC6EKYn8s9bcrP
/R3iw8EM3cL83NtMnJwQrbd66TE380xymD6XQfpMhpGlv5s6sugeaiR+LqOl
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
If+Knz01WYY1/tJyO2e9nTXNf9s50oFqrh9rLpgTxZc4YDTNzMcBzuRQrTLn
2ln87DG6BY/0ln3i56yZKOyxzCytug2Lob3iOxeQLJag5LMQi8Y80ovmHMSQ
9K5dkjXukXlDH92fH2HWmrCnNz0/l3Br1fv4hsfkiDMze512/1fn+xwyByjH
TYSdmX1NtkpcfS64J84MbPWeVR9jeNgwvNvKM6HHdZjZQOZYyy/Oeelxa/iZ
tdgm+0byXXhbh1S7rX7VLtnWki1u8l5Elx31iC+09Jp9bpNNaPjZp/xsZVjK
e2602NIrJ36OFdivOyjcb2lZrCxD9udzSpn7kfM+kxlJa6dQQE55W7HeKMBz
yRnm75isN+MNSaSbs9K7zrYWpPK07iz1VNDQ24RybwXlngbkWnJIFFnvHEGu
MYwc8XKmGEKWGDpfiaPYEke5ndi5OSrX55sSyLck6XOYINZOo6k9j5beRnQM
taBrpBXdY53onexH//Qwce+wMOt9+i48/uUYF//7I/HzBkaIn3smR4mtJ9A3
S5w8q+w7MEeMSxzdP6OXMT930/muqQnMrdzE1vEaPv5+gJ2TF/LZ76P76KYa
pP/rN/fTxzVP5+en6f+n6W86nZ9F18Q4cfY8Hq29xHv67J983sLr3RfX/PyD
1VUz0HVd1/+tuurP0o9e38PPot2QMlpnkyUo/doaj7p4jUeFzAz+jRJ+Fg/o
eA0/R5Hh47WNefnbT/zsC/qIo/1SfJ4zxbgnzf4fPF+m2SzVrENbT2LuL5Ku
5XzlZ9VKX77e9r4zLG2tC2Lp2uxx/dvWWFt669p8FqNbiZltYuee5JLIEjuX
WkuodDZI7lmuqYBUKY/m7hbcfb6IjYs32PjAmYXb2DnfwTadf3n4WrTPD988
w+75NvY/H+CAGHrv0y4x82s8PXqO58evsf1lC0e/7mDz4yvcXl9C13IPMl0Z
4kDabsxMnKVBHKT87JRetNtb9fm1+PdGLT+76u3+MedA8pyc8LXlsWF0AsJU
7sslc3GuelvnwY/B/CleblwhLZl/Yx2v5JY4pSQHhpnSp14Z3FP2mX6pPcPH
vWXRevgQTvvtkozwhOqfpccq2gTNPpSZQu4nc/+Z+TvqUe5m/7akR3qozMys
t2a/O2FnzkUJVnUQkiviU40xl+SocE5mwPjZ+dVT2vKSZr2yK6Seyewfwv1n
ySIPuszsoPafbZ2F5fsR1Jm+euFj1TULQ/uqGZMWMwtH12azG99o1mjza5Zs
FPas9qsOw2P584U1j5B1JbyWcfiteUi3zdG2hsN48rlMZrnL2iasU4m4EeX8
yExI1g3M23yswuF1Gx2IdWyjOosouh9Xve29p8c56qRXLj4knEcf9ZvjB5yr
Q2vkvOZIBrJByXtPN2WQackiVUkh05xCupIkfqbPYz5Ea3T2rwsgXQwiUyKe
boij1BxHI/FzqYnW6YWgXJcrh1BsjNF1GfpMltA22ErM3IOBmV4MzQ1gZGGE
WHUUfdMjGF1awMO3r4mfT3Hxfz4JP48tzRPzTmHk5hyGlmcxyrN/9xYxvTKP
ydtzGFmaF13zyNIMBhZnhYOXHt7B9tkmzr5u4/XGCmaWRoi1RzC0MIXR5WnJ
bRmWjEH2qVPvPPZ8HhTf5zl6LpMYX17E6vpLnH7dwzHx85v9a37+0eqqmee6
rusfVVf9Wbvq+l5+thg6mtYZQamM6TnntZSRzcxggc6LBph+2/J6GqOKEltH
suaYbSouPM78mWnMCkPz4/gixM8h+v0kjg6xnzH3qILcjw6IbkSyBrMxk9di
cXJEetORZMT21FNtiP4dlV51WLJXlLNNrzpVW1E5vczTMVO1DB6p9qTt62PV
fnW2moHIOuhCc55+o4mdu8ootRWQachIFluilEbbdAeW1pfx6v0bbF5siVZj
7fQdnu2+wNKzh7hP/LxNXL33YR97Hw+Jo4mhPx9ijS57cfiGfstf4N3FK+x9
28Duty08OVzF4P1BxDpCuBH5f4hjbhBDEyv5vIadlaGZxZjRbrir3GzPtRn+
rXdqnl09632Fn01Gt/Gnq7M0t6bEE9rltDNAuP/MjMT9VK/JkFZdO/F0QLOs
Jbea+68B7ZmK75vl/cbsKV4R1QwQ1XB4RPvBPWXRgiSqXs0yb2c82jg3hS9j
lq03mR+egMv272DdgTfGOmDtafvj2i/m3m+9mbPTbGm38eIzLB1QjuTbCUMb
fq4zfVo7L92rPWbuv7PfHHvJSX627RfnNNkkpsfts7L/LP2Fq1qGn20/dNOL
lseyfaKVU5l1ucfM/WHhY5/JCgy6ZfbSKn/EePLRa/zZrTOfmg3oUs868YN2
6DYz21PmLTl7O+IWfTn7mDCjO40unPcXWXO56s28qvq/1Nv8bK3RrP2mji6/
IXp7Wx/i1+2sM5jqKygZ50GnvLes6wlmQ5K5Ey/S57EUE//vSCZI3wV+WrMG
kC1HxLeOZwiZo/OVqPSl08TgGeLsPF1WYH5uStFns4iW/ia0j3agc7wb3RO9
6JsapBpC10iXZKs8efMYJ1+O8eHfPuHV/jsMs15jZAi902Ponp1EHzHvyJ0F
TKwsYOz2PPrnZ4R32eNO+s8T41i8fwe7F3vYv9jA/cfzGBnvxcDEkGg0xCeP
9c30f0NU7LXBmg5ma9Zy8N89kxPE7Ut4tv6aGHwfRx+38Grnmp9/pLpqnrmu
67rKuurP3z+6vo+fo7ZXXUyY9d/h54IWZ08nLvFzSs5X+TkmuSmcu8B6iXRj
Rjw4gjY/B2x+DrIemi6r5ee4+HhETWZLLT+H1WMvGbL/DotmO6Rzj3w+ERYd
d9T4V9uMLfoUeo1JvT5mM3XUMHjE1ovUelhH/g4/s34jW06j3FYkdm5AmX6n
s5W0ZBfyfYWowvwbPt6IiefTeHL0FBsfNrD2fg2r288wv7qC+6+fYe9il9j5
ANuSX3iEg69nOPhygq0PuzJv+PrkGd6+f4nNz1vY+rqDZ6fPMf5sBJnhBG6k
fsZP3p/hJiZif2e30baKr7DXac+vVfnZYfJR6o0WwPgLm5wL7S9TERNJ1eR2
q7+d6WVb/Oxx2p7K4ucm/WfiuKDLZHCrLxszqHh9mFwVYTTbi87onw0/86kn
4jeeG17RIHjEq9ljNM46v8f8yD1Wp/RXmctUW+Hn5yG9WNWSuCOqY+D/FU4z
uYSsjRbm9Sv3Sj666YNr/9ml3GjlEHpcpi9fM1fIPh5S9VWPC+NbodkkLjtT
3faEtrTVnpqcP596ZzitXrTXad9nveuy/kZ6/ua5sv8eP3/uaWs2ovp5+IK6
ndkbxJ9WDxPJP3Q77R6x3De9Bp6b5G3JPf4Q9/1pzcIa9WhWjwEwP/P6p87K
6/GoLtxl+47X+N/9wdvDeow6o4GxdDGi3ffrcRLp+4s2RD34+HXx+xoy2e/i
7WIy2oNxD30+/aJ7ThTUxyVOlS5SFUJIEndnCzxjyHrorHjYVToL6OhvROdI
C5qHWtHU14zOoS4MTY9gfG4AN1fG8G5nFadfj3DxpwusHa5hcWWRrhvCKNXw
7IT0oocXJzF+k72jpzHBWSxzxLt83cy46DmWHz/A1tketo7eYYX4eWK2H6Mz
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
xEjE917ahn7alh7pQzs6PBTU469905O+7mzPFvbomTqTM6Kypp2WRsNj+aqp
c/Hcd+71GF83m8zfOY0fm/F782lNMGdS87mFiNLiuqU8wnHcT2Yf6CDntmT8
Kq87rvrU4pfB6yHibfFOo78dr/Swtfec9l2WvrhouN3CzuLHxtoNv6Odn93B
zzat/xWNjOjGHcSlOr+xp8fKnJEe7/8VP2tdhtlW6v1cci6E/SiihbDyjQvz
51KZ3qxJYW6VDHL9d2ontuZt59K6FuWPZ5frSkfjEsbu0bmSPaxh51x2+3Wl
gdbadLvW3vh4fi/slaybMK31YnnVz3fJXKhLrU+9bb22YmStO/G1GbqTn3vM
d3XonrRbz1667Fa+oinR0JgSHxDNz1rT7vQrbjfeLaIHCnHOO/0/4bz7/igq
o/1oTlXQohqbr2Nxs4WtoxaOz+eIlc/w8MMJ7jxbx9n5GnZOVnFy/xQvvhLX
/tNXfPkn7j0TO//1I94Twz6nffH86SnuPTnGw1f38PLTE2Lol8S5r/D+lzei
U/70G13Svvrj3z7j5//5mfj6AjfvrGH/cBlPXp8TJxMv/8aPe4+Pf2F+fkP8
/Jp4+o1w9adf39NzXuHtT+y58VLe98Nv7/CO1s9vaX/v8vP3U1fNKN3q1vda
V71v/mfUn+Hn5FASkX6VgcDzgvFsXHyNv+XneJ770XGrH80/xzVHx3JJqoRw
pPKvI07WOuo43ZYuZ5V+g5k6of3hkiqvxcz6sX+Gmh1UmYCdWSj8OpxTEkwq
7w3mZ8kGZv2G+Heo/jHrKsXnq1fnTRt+tqrXKjOb1aszjHs0X/SYPGN7Wy/M
r9lrI6ZzuhCM0nGa1gPFehF54tdEMSVzkU5i0F6Hvc2Ujk5uZ385D6KRCHK0
3ugvZTEyOY6juzfEE/rRpxc4fnEf64+PsfF0D8dvb+Di62M8//UlXtAx9cXX
F3L57JcXuP/lEeZvbCNaKeE6MS/3kb3BIPyxBLzRGDGGT27r6Vgv9Fh6AeVl
xjODPLPJaxnWnbOOhbdzusCZMFHp55ucwTZDm2zvHsVeTrulazDzaCY3hHnM
6DKcQVWsX2YGlrzukFP3TZVW2R2w6960U+cF9lozkMZPTnlj0HZk3XNYaywk
q9qp/O5SPmFnyT30G884zd5xv85r8Yo+w9JmeHXGifQ/lT6Bb7cYT3Ndr9Pk
YxvmUzrm61oXzr3cH3pVXuN1rbO4pnlZ9XxNlmNv+3bp4Zt1XK98Js5aZM18
OBuQXjrnw3AOCvsBik6Dvff8TotL+XfrcPdq3YzxtNA+3D6HzrVxWPoHl69z
veLUeTSq38687Qsp7w5e9/hTAcQK7BsXlDk+9szjbap8Dc08o/r7VhmIiqlN
3otN99bNXKVan9o65i9t7b60nrEUDYvk/3T+XrS3eEeprEo1LyosHfUIPxer
aeLnvOieS+MlNJYaWDmYxsn5Cm4/38Ct56s4uDuGtcNhun1OdM037h/j5ecX
+Ejc/OH399L7/fCXD+IH/fjtBW5fHOHe4xNcvLyNp8TTb78qdn5P7PyBuPnj
78y7xMfcX/7jPT3mLg7p/+428fP589v4QPss97L5cZ/++lbY+fNfX+PLX4mj
6fkfiJPf/fwab3UxN39k1v71Hb3P2y4/f0d11YzSrW59z3XV++d/dP0Zfh7f
mkJ1oYZMI4NIn+pFRzijmjgv1ZekSiDBVSBWZr4qJKVE22HYOZ9ClC6j9Dzj
AR1MKg1HIsd5BlmkiRklf4Q4LcZ9Zs5ISbR9NcQ7zvSejX4jaXrPpv+s5vt4
DtEfDQk/S5ZFQOWAO7QXW4+Nc4lV381i5r/LtZoxLXbuaT9Wc7PiZ7vwtMfr
Ec865uZCg7MdstJv589gd9rbXmP6uapvrS5dbi8S8SgK+TRK5SLGpqdxdO8G
nnMu4S/sv/ECDz4+wI3XR9h9tImtx1s4enuG86+P8PiX57j46SnufXmMIzqG
j51sI1YtwxcOSG6jP8xrkRRt0xyC8YTomQ3bKo2pS0p5PthkHi+aUdk4AdZ4
03bk33dfpYD8YE7mKc284aXslU5O1vpWxZE26cEKY1r9XIfWODhkRs8R0Bl5
2jOZi7UV4ukccIg+wehhRYNj+cTprGmP+uw86+fU2mWZl9P6WOXV4Rb9tEP7
aLjlPj2nGPFYmmyVX+KUmTiTFcNrC9GzCD/brZ56rzk/YfrEOv/ELn1pm/Ry
xZuEtwVxsMzIGd00zxf2Ku34ZX42+mPVD+a/O5mxlAxBnePI+ebE/Ny7b+fS
KK9syZO08m56xUfOac32qUwb1pgwL/s5ByVD+xr7VWT8dN1Pv/uAZF9znrjR
ZYiXYMBoM1yidYkQO8cLQdrHfeKdLbOVev5SzaSqPJ5e3Y/v1XOQNq3RNjOY
4vEnuhKlfTG6FeXl19ZK213GE08zudtuzRS6zexpQPu98LkSWvex5x7PEKb6
YrSmzaE6XkB1qozmchPLJ7M4fbCOM9qXdu4uY3mvhbmlIiYWyxjfnsbW7V08
fn0fH4lbPxCzviUu5hzCD3/l3u9zPHx9D7cfn+HixR08e38uumXVe34tGdvv
f6PL3xVDf/r9DV5/fY6bj46xfbqOw3t7ePjmPt78/JQe9wwf//KaGJvY+S+v
8IWvEz/zcz7Qa/FrvvmZ3vtX1nK8U/xM/M696C4/fz911XzSrW5973XV++h/
ZP0Zfl4+28TCyRLGtsdQmiohMZRBuMheGhHEiX1TBcXRyb4UcXQKcbrO3sbR
fFKYmfk5bvFzQjN0XHIIOTc7kecssCwyA1mVgc38rBla+Flm8gLKWy6p/Dr+
DT+LR4j2xoh/y886A7yTn+3/9/xsu8TPuv+svcikjyzP171nO+djOxEk1syW
0+gjds7VC+Ir4o8HxEuAX0M8cZ3tfnen7sPj9SJJvFroy2BgcABT8/M4Pr+B
J1+e4eXPL+n4yb2nV3jx4yPcfnWKbTrmbzzZwO7TA+w+2cfi3XWM7C+iuj6H
7EQL4b6seO8FYyH4YpyLTuuLaIx4KUzM4pH5wB6dk2E8w5h/eBYvQb/f7EBa
1j883+gOBej3Qfw82IcyfbdYLipsY7w6LH529rbzVBztPqLp0wvv+NvZKQ6/
8bCg+5idvHYrg095PSs9q+SKeLSWxq00EzZPm1+tOUWdS849VIf2nHP51Xl8
YVafnj8Mai9p7lNq3w/j5+HUPh8O7VPX6+nQZuiep/H+u+5qZy/aPW1+durc
baU3Ufplfk1mdC/7VnMmIvOmX+mJfuicIdSzmNekZ600H6w3Eh00fy8umZPz
qrxx7tcbfYZfrSG4d/2Dre0vKH7MZtt4tEabe9K0rQP0mVgTEhEf5bD4vsWy
AfHX4KxGl/bTcHfM6jGrsz6cmTlK7BzP+xDM+JQvik/5JFrzgrr3bDhZZg3c
am3jDJg8F5Vr42NPbr9eH7lt2uP6G352Kk9p5mil8e7gZ7/WcsiMIeeo+8Tv
plBKodIsYnC0H4MjBQzP1bF0tIzTx3s4f32IG0+2sLI/jdZEGQ1i7LG5BlZu
beLO27t48/UpPv2iesrc/33/K++Hz/GE7jt/foZHr+/KjCA/jvUV75idf3lJ
9YJ49wXe/vqSuPgNPv/+ihj7Afbo/+nq3jLt20d4+OEhXv38jJ6j+NliaGbn
P96pS3rvd1/1/s/97N+UfuN9l5+/q7pqLulWt/4r1VXvr/8R9ef6zzOYP1zC
6tk6Zg8WMbwxiuJkCclB4uK+OPEv95/5epou03SZQqzvW35W+o0I8XMkrfmZ
cwuJoZP0fMXPGaWrZk20zgYPG36OsAddUDIQO7O22/pn5dFssl64eIaQfTdU
DofiZ9YfW31Tu+0bfu691HO22dtlaTssfbT9UjEDe3weyUzJV3PCz9J7zkaF
o0QvbbdJD5rnu+zM54afua9JLOv1eUX73FdMY7BSxsziHM4uboh33fOfXuHp
F2bn1zI/yDz94PM59h7vYmxnBqXZCmKNFBzpMGy0rRwhHxz8nSUDz0M/e0W3
K31H7XHAc208t8jbhft23IfkHDf+/OXWAEqNElLlLHFRHF72SaHfXbFSRG18
kL5bCjbilGsO43WnZxI1PxsvD6MLMY9hLhLfjKBmWO2tZve0tQ92k2WtvZ6N
DkP1nLUe1qt1tm7z3opnbdqjwqln5ZRORPExX5dclECbnw3LSaZewG3NHbr0
Z1RedY52donR7Lr0usGpeqR23TdV3htOPbuo87vDyifPHyWWy9DfKW3jUC4A
f9oruhXeZm1+VvroH4iZmZ2Fn3tVD9fm1HOJXvUezIhencktWm3ue7tVJono
qHlNY/XObVZ/3GH6vT61fhBvDclqJKaPKm8S9oDzhR3ike30GX5Wj3WHFD9L
vzvKPhde2p+9oo8R3Yz45BmttcPSIMs6ltcsXlVuk4cYUn4dfn4t/hw8t6kz
xCVL3NJR61lKp2Zod6/eHvp9WI9C1730dx4I+2Xu2Et/+3zuqlwrYnJxGKPz
Q/R3nUdjsoblg2Xs3t/C0cUWdm+x9/IIhluDqNX6MbMyieNnp3j+8xNiYDUP
+O7nV6KjePcz7Y8fL3D70bHoNl59uqD7iZ2Jl1mz8Y6K+fndz8+Jt5+LzxzP
/L3/6RkePLuJnaNVLG/OYfeU+PzlfdFevWdG/v0t3v3lrfS2PxI7f/rH9zJH
+Ilf68cXeMP6519Z/8yXr0VH8q6r3/hu6qp5pFvd+q9UV72//kfUn+Hnofk6
RpZGMLM5g8XDFSyfrWHucA7N5RZKY/1IV4mXi3FEC0nh56RwtOpBGw1HNKdn
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
dVGEs8fTIWEp5jiLn/UslzCqniFk3hTfCZvOlRa9qpqfk/Pt2gdCvB58igt7
OzI2bHq20Wh2jRe3+KD5lDZZPMwu8bOeSfTq23TvmXNg1LykzcqDFl8Qk3ui
s/OsnI+OPid/bvbJ/qH3ui7tjaHPV9h0fp6ZbTS9VfZ8sWbu/ErXy94V7EvM
ftPsM81/j9c6NBvXei573Ak/93bws8fe/l4um97WSrtiF0/tdoa50b54JbeT
PWuC0itW+gvNz3rbS0ajz640zTGVy838y71j5mjWVbC/htJau5WuQmuPZQ4z
zPnefvrb8Em+ty/CvfYA7e8B0VLz7f64yg4XdvbwZdtf26510eJFp+cAmZ89
fnfbf1LyfxyWvzWfZ+H+tZeLHucP+elzsn47hVyd1nu1DAoDUQzUEmiO5jE6
0Y/WWAl1Wg8ODPejOFREebgs2d3DkyWMztewuD2BreNlrB0uYX57GttnS9i+
OYP1O+O49eYQjz7cxq1ne9i8x9qPTeyf74kG5PjRIe68PMPDd7fwhB7z8O0N
6/r914e4+XQTJw9WsX9rBUd39yRzcJv4eff2Du4Qgz//ekHr48d49dsLvPnj
NV7/5RVe/vKMuPsR7e8P8eTHp3j89Rmecy9bWPoFXv/KHpZdfv5e6qr5o1vd
+l+xrnq//vfqz/DzwfkJjh4dY+/BLpZP5jGxWkVjpojafBUjKxOY2V4kjl7G
wtESJrYnUZ2tIlPPItYfQzQfFT8K0T+LBpp973QOYUr5SacLSeRZ/1xKCz8z
O6fyVMRqCc5aiYcl009pN5SPXSSpe82anyOJtpddJKl0HJzvx/0+T0cPi5ms
x7CP47L3s+HiXodDyvJ9diqNMveuJW/F69KaYaU/5ffgDPFMfxKFak7NQdJ6
gXNghJ/5mM99Z2cnO18uN7NsKIAM8WyplEO1VsHM8gIdX/dx+GQf2+K3sYOb
r3mekPO8n+Hpj89x/OwM1cUmYuUUcW4Bfa0K0jzfyf2+sEd4sMfyYe69NOcn
DMYahqAXDs5TZN14in1R4vASh7jCATiCPnoMZzNzxoZmTqfxHOvRnsHGX8HW
8V42uU/4z674UrTXXpswtMlRkcwPPevHbNjj/sbfz2m3vJ6d2k/DoX2h5Xad
TWd5o3n1bKFbz8i51eweaxjUZ29ndVjfRXyaezUvq993m+E1pzrb2YDmc3XO
mppZSYfWX7u0NkLyXfxKN+wJaW8R1gJzNh/3n102zcjXiZmvW/ysdM/qNuF1
y9PE5BGqbS453y6dUeIxvm3KD9ARUJoUb9gnGqd4jvaTTEDlBoaVxwl7Rzt8
vYqfWY9B3Mu9cZ5t9MZU3zkgfWejeXYrLTO/tkfN8/HvxBsldk1H4E8HZD7S
wzqMGDF4ykf7O/t5KAZ3+506A5FY2fzu3CYfXc0zeoNqv5LeNGtTeN3k0TlH
WvvExZ7knKsUovcK83vFOTfUK7qtlOyLKVSHM5icHcTy5iiml1qotMp0O+eB
srfkIPrqFQyODFJVUGrVUB6tozLeRGVyFNWpFoanhzE8lsfkQgHHFxu48eQA
C7szqE7XUZtpobkwgeH5MfqfOI3pjTnMbM1jlmqaL3eJwWn9O7UxQfcPYXZ9
CEvbI9g8XsH6/jJml0cxvDSJ8b1VrNzaw8adA2zdP8bOBWcf3cT2xQ1s3j8h
Vj/G5vkZNh+d4eTlHTz9/ET01c++PsGdjw+6/Pyd1FVzRre69b9iXfV+/e/V
n+Hnfebnh6c4fnSKwwcH2L2zjpXjGUxsNlEnhq7P1zG6Mo7Z7TksHS5iYX8O
Y+vjGJgZQrqWRqyP5/qZmZPSh2bvaOZk8arLxJX+tpJBbiAtXhzMzemc4ucU
PY570Dw3qPKuVb5gKBHU/Walew4nw1YeS0R7SLPHGs9s8WwSH/M5G5BZttPj
Wc3w9bbL0jTbtYZD5z+4HdID8xBT+uP0+hmdpVigz9dH36FEawD6DvkKZw1m
EKHvGkhE4eNsbuZT1lK4VJaaUzIPVTEXcHmIBZif09kEivT8SrWM2ZU5nNIx
8/zDPZy9ovXL4y3sPtzE4bNj3P10H89+e4qLHx9g68kmRvdGUV9qojbXQP8o
94s5U9wtzPWDvSPHxGmyTOzap1dln4g+mT3OZKbMp3Ne1HOuOVTOB/eR/6GX
q8fiSJO9Yviup8OX5Lr1XKXdNfNkRoNts/hZzVTy8yVz0NGRW+g0+mQ9j+ZR
2g4rm07rGJSWwaGzop3tHBPdF1Y9eMXL/D3Va5jcE+2tprdHj/Fy1j1oy4PP
ylK0WR7HnfxsvLAtT2i3+gz8mdWsnFtlG4ZV9iFrTXrcOvPR9KA7ZgZNlor0
orWntplhtTl7dH6kzcq6Vl5uip8lszzGPGx8AF3wxT3ExZxz7qW/S7doM/hx
zpBNHsf+1wHibPZ1Zn5mz2RmYM7sFm9nzePiyR1UvWujs+H1gC/mp+cFJING
+Jmez73ocMIrOmhPUHvnubWPXgc/m3xFPh8hmeIht577dctjHdrzWc7ZONln
3ab2Gdq/o0nWaLBOJCg+dZxBmsizJ2ZSestLm5M4ub+HrbM1NKaHaH1bQHqg
H7mhCjLVARRqA8TSVSQH64gPDCExQNcrNVqH1pCl+/MDGTTH++j5S9i6uY4W
8XK6UqHHVpCr1VBsDKHUrKGvUUe2NkzVRKbeQrYxglyjhXyzjvLYAEZmB7C4
2iJ+XsXy7jIa48PI1YeQGh5BdnQKfWNTKE5MoTQ5jfLULMrTMyhNTaF/ki6n
F1CdmcbS/ioevjuXnJWH78+xfWuzy8/fSV01Z3SrW/8d6qr38/+n/Lx3foT9
+8fEzifE0Gc4eXyDePoIW7dWMbc3gZF14rbFOoZnqxhfbmF2Z1Zpo/cW0KLj
RWmihNRQFhHizHA2KvndnM8Xy6h870xR8TP7pSUtfo7RpSrO62Bv5wDnCnJO
XFzlczMjy9xgqoOfU8qbI6y9OPxRNUPoofqz/Gy3tBqKh1gv4OXZRfoc0UIa
8X5i5HIeqYE8kgNZpAaJ/StZ0T1n6VjLHn7MzxH26yskEaI1gD8RlEw7h+Y8
h/aL4/PYbs4q6eDnAj1/cDCPmZUpnD27iSe/vsDFT49x+/0tbD/aw+TpOqZv
rWD7yS6OXx5h/eEKmrtNFMaLSJaTkq3hi7tEAysMa29zrvCelVuu8mSEL3m7
aM0E98z5dpvxq9b+cPwcySnn7cj9aM25nRkyhp8VU7czwdWMoa3tp+BW7Mi5
03atQ7iUXW16ui7Fz71aW+zo4GeHnqFT832an10mv7rtMWzYss3GOtPPo3jb
ZmVxdGRHezq0Ls7LGR6mepxtbwuzdpDcc93Xvm50FW7tbcy6jhD3cr3Si3YF
HZLjIn1wW4/uNV//hp97Ve439/l1Hqbd6okbrje5jjozkl47mPLSWpXYMs0e
d+w5QmsjZumYmvdjdo5qXXKAHssVTPP1oGTMqPxrj9JkpAKSMcg8rZhaaTmY
0805BYdkHDL7qvwb/n48N8leHszC4sftMecdND9LfqBT/y6UJof9DN3ai048
pnnty150fqfu47uVPx091ke3RxLsSx6i/yMBqqDy3qNK8PmrUgLlZgHTKy0c
3N3B7q0NjC+20N+sEO8OoTLekH7zwChdtuj21ijdN0KXXC0UW8PI16syP1tp
FTG9Ooq5rRk0ZkaRo/+L2WoNpeE6BptVlBqD6CMGzw/ViambuoaJzYeFqyvj
dUwuNrG2NYk9+hyLxMGDI/T69DqZah2pKjF3pUGvSQxO7J6r1OX1c9Wa3Jaq
tui2GuZW5/H040N8/sePePD6Htbof2yXn7+Pumqu6Fa3/jvVVe/vf5af98+P
cfDgFIcXZzi4OCWePhGWPnp4jP0He1i7s4mp/Sk0FyoYmq2gvtDE2NoUsfUC
Fg5XMLU3jzodw/KjRcQGiO/6WAOtPDhixJnZ/rT0blm/wfOD3HNOE0dzpfKK
n5mPJVdQ2DkgvhaSSdjhvyEl2YQR9XjxgFYZ3qILJu5TTGh86S5nDtosXzqH
9D2ZcdmnwE/vGyvSZxssIF3pUzXYR/xcIF7NicdbbjAn2g3m53iBva5TiBcz
dF+OHptHopxBiL4P9+XEO8KjtAhuLzECsYPP50E4HFT8TMxdptcZmxvG+p1t
HL66jYMXt7D39BRLtzZRXhpFrJVHdqIf1aUGipP9CJYjsEVduOZS/eF/4J6m
0cbqvqlkawtrKb88F3Gyk95btMDs08HZgw7N1pyVSHx9XW8Pvp3ZOc46AFqf
eIJ+qx9r9aDthiE1MztMD5r7yr3t7BCtTb7OumJnj8qm0d5tkqvu6Mjdcyt2
7tXMfcnjzuSU6Lk/4We3XZdD1ko2i3vtl3ruys/NZvWuDWNb+YFGi21yuTVX
93Rys8vw9jc8rXXW1/XPNt07FW7U+dJeYUuV42djhnaqmUTJzrZpftbFntDy
N6u13JaXXoffCX8n6T2LF52b1no+JAohpKgizNBx4s2kW7iatchckbSf/k5D
kiEYyvpFn+yNOK0MdR99xpDwM88R8tyjj17XL1no3GMWfxKf4meLoTXnurQP
NverlbeKzfJztryfxU/Rpc8PKN2NaNq92pc7oHiZNRqcGS6+esz0zP/cK4/z
+iBIa+6w0lin/LIGCGV4hjBIDB1FZiBBnJolhh7G7Oo4WrPDxL/DaM23ME77
0djSGMaWpzG+MouJlRlM6uLro0uTqE3WUazl0FdNoT5extjiKIZnRzDQqqIx
2cAYvdbIVBWtSa4GWtMjaM6OYXhmhN5rBKOzo2hN0eNmW1jcmMAW/Z/cv7WK
hf1lVCdbGBobxvAkPWdqFE36ucU1NSKXwxP0XKrmRAvV8TEMjo5jZXcTL7++
wI///BkXb86xdbzW5efvpK6aJ7rVrf9uddX7/J/TPzM/nwhD8+W+XJ4KSx88
OMLeg0Ns3eMZwxVM782htTaG+uIw6sujGF2fxSwdKxaPVzG5M4fqQgO5kTxi
5SiCmTAdx7n/nKXjE7En83PW8DNVIYYMVTIbkRwV9tMQj1qeTYr45TbWQXOp
TBViZ/bsyChfPM5UMfzs0/zcq3uqbY8Ne1sDLef3mSPZt4I1mH7x2IsLO+eR
GiwSOxeFn5mlk8zPJeLnkuJnnh3kGchEIU2VpdvzwtmZahHZoaJ4AsSLSfiT
AeUfRozq9nrgpQr4vYhFQ8jS+qFAjyn0p9A/lMfA+AAGZ2oYnK6hPF5BsZlD
YiAAT5JYg7PmaJvYwj70+LQ+2WlvM6yjt52N6LRb+oZe3Vs2HMPc0uNWM3Wi
7WbviKBXPp9hb+5hewIeZPIRZOl3w5mE3Bfu0VpoYXOTZy6sTBwsemZ6DPMy
MZVN8kgcwlk2Dz3GrbMKTa6jU/Un21kqNu1X55S+qq2Doe3aA9lh/DiMr7Hx
vDN9aqOzuFRtzYrSPmtNi2bq3o6fO3XQve7Lr2E9z32ZtQ0/myxGowkyeXvG
H1pypTkvnM9L+FXmC2tblF+KPnegfaHb+X12ff6g7cPRq9mZ+9qslwiliJPT
HpndY4aO5mi9yfN7zMHE0iGuJD/WI75ynJ0SSAWEnd1Bu9ZFq36yeNbR7ZxH
ybroIGcSErdyDgyzOveLpThfPeiQnrpkuPDfhlvPZXZ4hVhrG7fW2TA/G72N
W/XPLV8Qn/LoYD208HPYI9oO5udwJkScHEI4S9+Pi3vnMa/0xdnDmrmf19Wx
XATpUhSl4Swxb5FYmv0Xaxij/0MjxNKtuRax8hRmNucxuzmL6Q3m5wmqKUyu
Tclj+4bSyJYTqNG+OE683ZwbQ3WiRs+vYWqxhsn5Ol22MMOzIKtTmFqZxAT9
75siXp9Zm1T3LY9jeWsSGztj2DycFa3b8Nw4fY5xefzU6iQ9l2saM/Q/c2Zt
DtOr9JnWqNbnMbm6SKw/j82TXcXP/+MLHr1/iK2zjS4/fyd11SzRrW79d6ur
3uf/HD8r/Yb0oS9OcHjBOuhT0UXv3T+S21njsXv/AFt3trF6toKZ/Rk0Nscw
sDCMIe718DFhbxkzB0sY355Adb6iZgyLCfF24Jm7TH+GWDmh+s59nGuo+TkX
EUYORPzCCFwB4eewZKyomUGl22B2jrFGJB2VTG/mZ+49+yLMz16lT+3wbjae
Gr16RrDXybnNHsnc45lH7h0z/2aGSkhXS8LQyYE+YedEOY9EP3NyRuYfc5JB
zvoNrhzS5QIy9PhMtZ/4uYQ8FftZxGmd4KfP7iaeF36mzxUM+RCLhUS3kinG
Zc0Qz4bl3Dn3/iKZIG2nOLKDtK4oMR8o72PpG2uNg1301G646DWZg6U3qfmZ
f/aEvHCznx7zCvGYg/jVLfNtLukFurRGl/XarHXhuTR5vrCiQx7DWXUhzsH2
cDbeNdUzdtisXnOP9p6TLDzO3wupTGzJzBY/ZeW3oLyJtaev9s4wmRvMks6A
4je3ZimHcL7D6j2LT53fpb3stK7DYxi6I49FM/5lrYPOd3Hq3ETTN3Z0aDGM
PsLMXDp7LY2zeb7F0i6TSehoe0Q7bZYPicXhLrvVk1U9aI94ynEPmjXF7Mvh
pr9tO/2eOO/GxfOfnE/Ifs5OU+rzK1239hzxqPw9zr9hJg4k6PeU4D5zQPrL
0WyQmNkvmmbRQMdUH5d74IEYrxHDxNUh0Wy4AiZXXc1s2n02us2ufJ9jbtFu
SNY5e9aJRtllZUk6dRYK+76I5saptr/d085cV5p1NYdrMiN7pY9uk21n9zp1
/o1T+xW6LM2QW/w41PcM0Ro0RPt5kPaRIO8jxPT+iGJsXl+zZjsYDwhDJ3iO
gvaddDkl+2m5USCOLqEyVsXwNPHzEjHrxhym1ifRJNatTlVQmxoiTqb/XcTM
+UqK9rsEKuP9aM0PozHVwMBIGdXxEjF0RXJZZtfGMbcxjbn1GcwyQy+NEBeP
YnZjgvi5ianlMSxsT2Ftjzh6ZwLjy5NoTNPl4gRx8himV0boeaPEz2PEz/Qa
G0uY31yh5yxjfmeFeHsN0+vL2L2xh1c/PcPXf/kRjz8+wubpepefu9zcrW79
t63vnZ/3iYuZoQ8vjqlOVD04Fl+OfbqdGXr77gF27u5h794uDs/3iaV3sXhz
Fa0tNUdYmq6jsUjHlO1ZLBwuYfZgASNrI6hMDaA4QoxZI67s5/xB9oNmdo5L
Ljj3oZO5qGgz/OylEWLtqF+8LYSfU2peUPFzVJ4f1xpr4ecY8TOxsy/KPV9v
24PO+Q1Ds6bBScdrF7FFOIRkMYNSs4yBsQpKdJwtjdfQ16oKR1v8XMoRP2eE
mS3fun7Fz9x7zhI7ZyvEzsTdVtX66TX6kSimZQaSfe98VCFifPaPZr13mtYO
sXRQfMOkRxlwibcAa0NKTfYNSMv5ataVir+vZg67p83P3DtmHjG8yOzL281D
nM48wv7E4qkgjOa2/EREox2g27zGc8MlOd98fl38ecNeYRfuRdqJl65LHrpD
zc65DAc7JQOD2dAXV7Nq7Kmm/NR0Hoacq3cp71+/yjMxfUfjXSzs7FPewGYm
T/rOXrvOUFHaAJWpqOc+Xe37bSYfxWgqnG2tg9Ey/xt+5r6x22bpNPj+a7rM
WkT6+9/0tM3nM/xscqu/1XsYj2aZwYt4RM/DvVzOIWFtEv+tOsP0O+KZvYRf
9Mb2APfiVd6eeG5ohu7V38P0bHk+z6vzTSSrhf5m2EMumPQTT9PfUkR5bkhO
it7WJhORzwV5ov521qPX8K5NvDk8nKESpufw2kn8nrUGhbMDgyrX2+S4GJ9m
m/ZrbPOzuW68ue3WGkW2j7utcZfijESvS+fmKN871j5LFk2E++xhWhdExE+b
+9P+EK+rvdKHZn7m/xfszZNiLRit09MlWn9SFWg/7Wv0ozzKXpyjmFiekZ4v
94yHiJ37W3mUWwVURkso1wsym1Ggfa6/lcPgaB/KwwUUhzijsx/NmRqxMfee
iYGXiYWJi2fpcmqhJX3naT4HRyw+MtskBp7Fxsk8lvfnMDI/Sfw+itY0vf/C
MCbmq5iYq2F8oYbJJWLotUXicWLnrSXMbC5jamOV+H4ZB7cP8f63V/jtX3/C
00/Ezyddfr7qump+6Fa3unU1HP1n+Hn99jZ2zw9wJMx8LMysSl3fOz8kXqa6
Rwx9Z09q7y4x9L19bN3ewuzhAoY3RjA0X0F9dgit5TFMbc1ifp9zWGbp+jSq
802kGwXECiEksmGkRMcRF+1zIheTXGx/JEDHf2ZA4reYmheMpsK6IvIY8Y9m
X4yMmiUUzTTPEDI/Bz3qPLHJSNH5JzbiZmZnh4v7WyF6zzQdIyt0jKNjH33W
ETo2tlbGMTTTQmF4UNiZ5weT/Vnh7Ew5K5nXWTouM09zJkmGGDsn/WZTZSlm
51yNe9F94rHFx3d/kBgmHEAsEUGGs8z7EtJzDyWDxDw+Yi3F//FcQjIAE6Wk
zHlJNp67g1PcDj0L2O7tdfpJ2JlF2EOEtmEwFpF8SBfxxw9+1mQrj12lV2W+
I36LhaTYf5e9DmKpGAb4/PcSccbSCJIjJThpm19nxrarzyBaX0/bs43P+6sc
O7fK7ND52JIl7tfZ3H6H0mqwT4XOYTb+DNJjdZrZRMW2VkaK0SxrnYbJhBRv
NO19zD1r41XX42pvC/O8TgZW/K+qx+iKrWzyy756RkNtONlm6RKMntqus1va
2g7pGWv9t+hYuGfLPnKan8VzgvmT1ims63Ywq0YUr7IuQrIWO+YGTbV7tqoP
bfyT3ZKd4pY1Eve13Sb3xNP2DuTfTyCl9czs66zXMuY7OD3KF5oZWuk01HkE
l84jlHVSUHllyPO8jraHt8N4hei/DZ2FaDGy1uhY2nGX0s84Pe0Sf0Kv9qbm
7xbS24pzD0WnEZQ+s8xkaj9JPkcSZB8+znCh/YvnK8rEu/3VBLFwHBX6G65N
D6M6NYyh6SbGmHs3pomfRzA8VUJ1PI+h8T5UiZUHhvMo1ajqXBn0DdH+ORin
18qhMTEkfeXZVfp/tjiC8bkmcTBrNYill/i2UYzPNtAY6ccwPXaW/udt3FzD
xtkmJlYW6H34/Vr0vAbG5qoYFV3JsGg5ZjcWMUvcPLe1TPy8oviZ6vDeKb78
9T3+9n/8iuefn2DztOu/cdV11dzQrW51S9X3yM81+r8/vs+53TvYu08cfXGE
Q9Y93+M6lNu4FD9T3WaPu0Mc0H0HdPvO/V2s3VojVp7C+EoDNTpW1OYGiUub
mN6ZxeLBIub35jG2xp6rxJd0nIvmubcUlCxBZug4cVogGrT4ORAPK71Gmiss
l9x7Fm+8HOccRiX/j3072A/WHwuIplf6Ykb/7FSzcXYnMYGT+7jcs4sjUyqi
PtHE3OYc5nfpOCa1gLGVCZRGqkiUWfecF05mfs4O5IiH88hWcsS2GeJq9oAu
CjczQ+dqxM61AV0lxc+1fnp8XjIaw/S9wvSdEsTP2QIdn6lSGZXLGMvH5Py0
X865e2WW0R8PElf5ZG6O9aUyZyf+IabPyn1nB65JOfGDzS6eDj121hF7iZPY
lySJTD97iKQRzCtvQNaTMId5gpzHzPrSuGi/80NK292aruPg7hbOXt7A2vkm
hlaGES1n0OPz4h9s7Wxz3q7Mv5wXIr3OoNIrqP6zzs326gwU8x1cytPY6ba3
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
+fmq66o5oVvd6ta/re+Fn3fPj7Bz/xg759oD+sGJaDE2bm9j7mQere0xVNdG
UF+dwiRrhk83sH5rG5vck75L/HtnX/QdzM/Si77H1xVfq58VR7P33cbZKhb3
5zG7O4fZw0Usn66JF97RowNs3tvE+P4kyrPsdxdHrC8hGo04ZxQSR6f6MnQM
zBM/FoShOUc7SvdzHiHPIbL3nemNGX52uNnzgLPLksLN6WpR8W+FGHp4EBn2
26iVkaj2IzaoPJ9N7zmeS9F7psS3rpOfM8LPhp1L3/Azc3NFV1mK/aXTrDkh
Xk6z/oQZOhlDP60BRmZqaNLxNFsv0fcIIprwybohko4h1p+iz6t8/zgf3KFn
//IDeYxv0O/iZAkDaw2kW7SeGKJtU03RuiCNZCkEX8IBT9yNRClOa42U+IFx
74615uw1zd5zkWyImKEPoxtNDK0Oo2+mgr6JAenZZfv4s/jhDfqI15z4wW40
GIptVQ/6m16xySFx6WwXM/vnbGcWGj68bu8oi597/31+1nNy4nkmOde9WnOh
82EsHYbhUZvOaOzgXO2jZrTM5rGXNMfaK1But5j5clm+0Y7L/CyzlaL7VV4k
nLUt84F6rrIz/8Vkddt1j1vlqdhE195rtOGWb3WHv0gnP3d4jdg7GdqrZ/g8
ioHt2lvbZmmnHVpPbHq7tku+cm6dDcgsK16BbvP71axsdOCm9BygKbU2MOuD
jpxHj/KAlvMIHvU7c7jVTKhTfGG8yidEe32reVel72B/StZg5QczGGxlUW7l
MTjWLzOBLWJdngcsDCTQR8WzgOXhDIrEtrnBGHFzBDli5xxd5pmlB2JIl7ki
0puujObQ32T/jRQGaB+qE5Nzb7nBXh10HzN6Y7xA+2sZI3M1NKar9N4l9DV4
PZ/AcKsfW7tTOLy/hqX9BeLnJn3GCoYmBtGcrUuOyyj3nTlPZW0Gc9sLotuY
217G3O4KJoifRze5p7CP5z89xrs/PuDGs3uY2+jy8/dSV80L3epWty7Xd8HP
xM67xM27D6juHymvuvtKk7F7fw9rt9YxfTCL4fVR1Iija+tTGN9m9t3A9p0d
4udd7N1VnnZ73H8mlpbrxNHMzruaqaXu7wtzb9NzVs/WMU8MzRy9cmNT8lmO
Hu1j6/4Gppij6ViVHkogXoqKF1u6n3MMC3S86yeWzSPVzz3ohPKyE372ybyg
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
Q8jM5HsXz4UgVsDPXzEMCWTYZCkKEfKTxveT+sqRFPk465wYv8ly4QraHuHE
0NFkiItyu6k3Te99ohBj7XKVcgA7yLWkr2gkuLecQD6O5QKqZF8oY4X0H5ki
3q+IbI33z9doFrDAegzSZ5B2o9Mv8/Zyip/TJbx9OQm1bhGmqee82oLpuQY0
2yWYm2/B3skmnL27gPuvb/H/zA1s3x/D6gi5GP8fnl7twcHpLsxvzUN7tQH9
3Q6snyzD1sk8DK4X4e7dAF795hTefncJ//LTS/jjn3/Lveaf/vx7+NNff0B2
/gG+//Mf4Mc/T/h5ws+TmtSkfm19LH4+fUU525em/2yyUZ4jO+Pp8Ysz7isf
IT8fPSJDPwhLU64KeTkP75BLr7Zh53IdNk+pf7wEW2cbsHc7gEPyvHsp/hyn
JnPlSjTSr4mjRW998bl4P1+/f4ArZOKz1+fs17F3swXbuN2dszXYv96BI/ar
u0BOvoNbni28Nfx8zTqPR7j7+gU8Ij8/x3r49iXcfPsI52+vYYgMTnOG6+eH
0N9egcZCh2cAi7028zBlcdP8IOULEj+zfx3zcx5yDckcLCJjl5i5G5y9wh4e
M1LstdGnWcQysnMaEvi7ncDfe+LnLPNzCgrVDPJD1GiXqVfMucXEz4mo8HMy
greJsJ6D9L1u9mqWzA2TjeFzeujK5cLPckyf2Rzv70MW52xDzXM621nrYv1K
k6A40q31DKwjtrNR/vmDLGzNog69smI1F+cz+5W+wsd9Z+4vx8XXl/Oog5r/
hZ+JqTlTWuWa81xgUOU8h+X+FvJWICEaWc4bCelsGEvpsd2O/D+blW19xs/x
s8M7wuPo4+rZS6OR1nmFsr7QmTK8/w6djcfJupqlFdua98CyfSkM4z/x5nP2
mfW8nZ4ldansFeFn+z03xwhML95xPmDnqHB51bwfXRaUbELJ+vOJ54X2eVHa
izDxMbNvgLOzg0l6n/D6GPJzXPg5klbMitycQpbN1GP4nUEORRaNIFfbedyU
uaiOS0T1DIB8Vvza8zkqGSqhmDB0DPmbNNWk/wjFfcjp+L1Cvs2R7qIS5VNi
Z8oiZ5anvjXehy5L5KOQIuYux/G2CbxtEoqNnGR6zxdwHZ2DCrL09GIVOuT5
3Erhdx63h88lU0pAf7UDg1vKbtqD7eNZWN2qws7eDAyOV+HoegtuvxjB1ZtT
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
EIkgp+SQTQrC1Wq2To77iwbGHbTG9MSanzU7O7PCPdoLzi/9XicjGy2zw0fQ
pTKyRaMrM4Qevz1vx94fxLhel6MPO56b7vI97RHbj6+9ONw6G8fvYG6nl6Hp
Wz/x+jDHIrzKI09li+t+uX4dArqHrnyqx7TfNpN7HdvWfhc6o5HX4Uq37PQh
MdoVy6MyFrV2X9YQz3j/3Dbfq8e0dJljNqLd1jkrojkXT7toKsTHh8iHOV9L
MAvHiVML5M0ch1ovBfXZNH7vU1BA9s1UYsjXEdYCUV4hze6mS6RxTrIfdJn7
08jDNGtYFV1HphJhLXO9jdtC3s3VE5Ao0PEp/H+BHE45htkyZRfSfelYVZI9
8CpN8sDL4HbTrB3JUE+7EMK1ON4Wt1HrZaHVz0FjOoPs/P+zd179bSTJln+/
IxEoi4L3AAnQe5GiKBoZGtFbeXWr7czsfv+n2DwRkVkFdc9dzd3bq565eIgf
HQhbQP0z8sQ5DerMIMNw7L/xZ61vfW4f17jG9cfWV/WfXY6D9NiY7QqaWwBv
CPSk4Q9RE4bmPmyjxP1oq5OuWJ10s6oZ1GX2MuYcvX6VWtNNw5OTNLe7Qpsn
2/T87iW9endKpx/OmZVP31/SybtLzg84+XDB+ujzDxcpP3+6pZvPt3T9wy3P
EZ58uqaXyGS5eUm7hp/3zzfp+cVjenn3jI7fn3M+IfQbb359S/d/fcsZKxtH
2zRcXxQPDsfPkj0o/NylcrfB/cvEPN6KeYyNrrnv/QY1JlvUNHzdmZ1kzQZ8
7JBFOLk8q97S6o9n5xINP3cXJ3n2DZkUPOvl9v3Fm1l6a/BB8x07T6hGQ3p4
QerXEIvnA2uZPc2ps/5rtuccZHqaXtpz5lzsbO6gn+0tZzTNXsrOrhedm3CX
/YvrMduMlVGN88Oc5eeHv9FuZPvWv+Fnw4ONyToNH89Ta83wb6/AedgP8z4V
SsieWKTH0LBvzlNjts28ERQnlK2QlxcwF4KT8brBw9jxnmZy5HnGT3xIXMZh
hpetd7RjUc2YHu0vp752VgPNXKpZIXjN4mpkjp+Cec9EzJhp/uMXGTXZ/EA/
ZcZUx5DJIrc5hNafL5jQdVDWS0X3JNiPL/W7TuclJVucc9kzHnnCzKPeGTnl
duboTF/ZU288W1k9uG+1LljzJDIPy37l0W/Z2fp2T1hvD+s7rnzPPffYc3qN
wGWqpDOC4ObYrD0LlUj8qzWrEFkpdbxnWWMsWokKMgUN1+J70TlLP7k1VaGa
YdikbT7jkPVtXreS4WfMHELDwX1gU9BxwA+6MzQ8jBnEhSrPA07NwouuzF4Z
9Ul8ViTMxG3Wfoj+A/OFmAWEJwd8OpBViGLd9RDaaHN5zBman6fg1cFZiC3u
U4Ptod0e8/Ofs771uX1c4xrXH1tfxc92vzqTt8F5D7E9Lwac61soJ4ZPiswo
xVoyMmvIvemG5OeVm6mHB+fqcZae+R/0rAfm3LAKbceS4dkt2kEmC7zvbOb3
xwvOK8SMIbLALwxHX3y4Ym3HBXt13LDm+f6ne+41I/v75MMpHd7t0ovLx7R7
uU3bl89p7+6YjtT77vqXe7r6+Zae3x/R0s4j9ZzTLBXm5ynDz5NUn+oY3m1S
Yh6H5eeW4d/OVNOcE9vUme5Tf36o/nX4/7l0VlA1HNZ3o78ETUib5zKxF+0h
9yO7h5/VpWov8WEofsA2ZwK8JDknnuMj8cvQTOas/5yXcqnzn8vwc5ahxVd5
NOvk9/j54X/Czy7/zrPzcHk3z/jQk8v+R/535ggtP2d8O3L+Q+7XhpWEHhgO
+ktk/YqRG9eiR3vb/Bq++uGC9u5f0tqLdfM6FbXXGvHzxI8p/1D0Lokct+JD
l2arWP1zzk8Z2vZCH1gNjJ1x0/s48QU/I5vEaXZjZVpPfPfgl1ZumfdBp8Tr
znzwD/g5sK95yo7ZzG23H6R517/hZ188rR/42T621fTkM9rqvMswFC2PzpDa
LEAvnz4PzjtPeJd7zJHvPBEtP2fnKLPlR2kf2I+tT4zt9/9jfn5gZ1Hd8SvP
g3jV2TV8JD6PRdE3c7ZK0edcbvSMkY8Scc53wL58WN9XwMEtYWHkDJZbwtHQ
QbfMsYPZPmgnyoarCw3D4OqJnZjrKzbgeRcbDi8IR8+IDwfnqsxUzPu/RoNF
9KbLnDmIvEL2mhuIxnoSXhvma3e6xByM/wUvw1Ma/WT+3Tz8pSvcAwdfY04R
/XH2pJ5pmc+bBmck4j6O+fnPWd/63D6ucY3rj61/ip/t+TDI6CFVP8AMnYh3
FLQN0EcXrbajXnazhqii1UuDpdn3ruryqYvsf1fiXJYmvKQ3F2j9YIOeXe/T
0dtjzic8+3Cm+o4z9oo+f3/JOeDQQyOPEHX1GRx9wwwNrfPND/jbOR29O6ad
6xf0+OI5bV4e0PbNMR2+O6WrH8Qf7/GrpzSzsWTOgbPUR8G7bmHA2YKNQVey
Bxs18/iKVAU/9yw/m3PaTI8vi74z/n/Kej5jVnB1xs0OIhe8ZS6LxxrCEyAM
HD9PuJ5mfmRv37Gv25sX7wb2WlaGfqg9RNdjtjOAyqxZZmY9hfcw/X1+wt22
6ws7Zp7I6J9zv2XoLwq/t+yVV57Maw6IZfoHmf70X7zf8nnK7Tl3/8W3I8d6
aHgpBAX4a5RodnWFzs2a6fZ/39PL71/R7PN1is1azM6iOQ8+P+905cK2+dSn
JJOhl83kEx+RdE7yy+eBnzPVP1hNh5s5VK2D7UuD38oNs75sFlmTk8t6bGTr
iyzu7IxdOn8nPWLWCX/heTfh2+z1bFbkaP881VYLP6e8mnqwSP5J6glu/9/q
QHjPhH2mM5k9zrPaG/m96MUDXYdn9cy6VhjJT8+73rP1ErfPO/wLeZ0Si49z
VJL87aL29G2mivSeA7PODaUHDe0z+z0b/sXlTZXNmh0zv5W2FGb4kDvYniyz
Hx1mGXC9xZowONi5AI6uwfsuMp9bEfeVu3MNw7tN5mBw7uRChQZLou9oo0fc
F34G/0IzjWKfPMPPfeSwzNepO2tu1/wOWo8+es3g76WmYeoGddGjNv+LfET0
zFv4vBl2qDnZYL+PMT//Oetbn9vHNa5x/bH1Vfpnq4W0flJ2dl+ZwXIDsg44
MyzGbDw4WjTS8DuA51vRsEMJVVedx5deeOhP6xyiZetqr25Ys0mDtSla3F+j
J2c7dIA8FnjYGYY+eXehc4boTRuG5pI+9BX7QRuu+gEZ3+Z7+HaYr9B3vPqA
XuUZPb4+oe2LF/Tsao+eX+/R9ukuLWxv0OTyAvNzb3mGekvT1JkfUHO6R7V+
i3PuEvOYhJ+RddCkzkybuvM99qJjzYaW5KWkDN037NxZHFC51ySvGHNfEvyM
PW2fM4otN4zmerh8a+tn4Fu2mMhoM/LMfTYXxGVnu34pPDAeaD1Mc/iUU21v
dZRfJzI90lF2/JKfU9ZVva+f+j5gnWXvo/QXhdXzmk/CfO2nGSvZ60p12qKb
tt4Mcj2B4YpJ2jl5Sns3j2m4P6TQMMvDgu+u44HLFsyxXoDZTvf5xUsu9YBj
HvagQ37I3zOH4rYnJqSs58iEfOXnTfuzds8A2okH+pzZTEE7u8cZ3yXJvHH5
Jm5mMcPxgdU3Z5g8k5Ni805EU5XuU2T5OtWA6Doi4xtn12Mjawe8bnYvwsuN
vu5Zfz/f6sKz/nKp37PL8w581UhnetMuf92yuOX/zP4EXmPPfr5oDz6vv8+n
2hn2smNPQskZlxkAWcNDrxFpliX75ZjfJebzqFiVvO6CfmU+bsTmPR1TrYWZ
wiIzL+b8yi3sp0Xcs0bmZ8nwdAk6aLCzuXylFbN+uj/fMLzb4Kxv9KLBxgPD
ztP4WX3poHXuscajzH4enakiazi60DEbRm4OoBUpUR166Fm5vunVjrnOlnhF
m/vUmSzy7TWnoN3umOtrsy/0mJ//vPWtz+/jGte4/rj6Gn5mPYDd/7Xz+3qu
tPycd+d7zTFDFnDiSz5YqUCh4egI561aon3poswcgpXrqZc066Ht3CF008zY
5nLtCueL9FcGNP90kR4dbdCuYd6D18es5bj4eMmZhResh75Uhr5mL+gLFP7+
6ZrzVTjT+8fXdPH5jo4/3tALw9HPr1/Q/vk2bR5t0tyTJclNUe/m3/JzlX38
cN+a6D8jv3ymR92FKXPZGdFtLM9pDzrLz+DxITWmOxQ3SjyPCX815On5ugf+
UHuzln2kj5hXfn7o9rO5h6wZ2eKZa33mRvl5pP/IeouHrtLe8n/Oz2kec069
M9I+s5sjtP1Yz2ppPafVyN4f8A8eb1gIeH2VIOeuEnE/OJux8lB7wDmrx85m
QmtvUvq/nlmjoW/YNAxSorCep7+ED6Sn7eeclx60stjLh04o4HwN9Cpj9V9L
Z/4kR2+CZ/ncGib3f+Nn6eNajznnHeKN8rNoMybEN8WuG8L0/ZNmDGb4ObL5
gL/Dz9bzw806Kj87tla9Bt9e6qXh/D0y+hH3GmfY2epYfsvPVrci/fuRjJ4g
/WwQftb+s/Ub93+Hnx1zW17Pu70CX7Mf3RoFt5PROVlPaKtlt/wc2ExC8HUi
x1rRHGuWhwuVkL04EnPslWoxzxUiu7Ji+LjeK3LPGDN/yPmEXh3HDTw7Su7n
mBkal20jL3Cmyr1jeHDAr25yWvi5P13lWUFoqTGvCB869KLbqplumcs1kL9i
eL2uXnaNgeSDD8Hk0HQwP9epi9vB/wzwfZuGcz2aXeyP+flPXN/6/D6ucY3r
j6uv4menDfBSfy/tV1mtgTuvq/esZzPEYmEl5hToE0uRzBwim7qWqH9HWXzw
mlrWC898j6xw+HWU4SfdMn9rm7/1a9Sc79DM1iw9OnhEu5d7dPj6iDUdFx+R
/Q1Wlvxv+Nshf+XccvWnG9Z33BiOhg/H/c9v6eant9KTfntIOxfbtP5yiea3
pjlHsG94uLeY8nNV+RmzkmD8Zh+9IGQP9s1lhubys5I36GpW2XmOs8Bbc5OU
mMeAmUB5HjNZzIH0lH+Xnz3lZ2bojD/G73i+jfZuMzWijXhIX2qbbW/ygZfx
0lAvu7SHncnp9iw/21m/CbKZfdBq2/501rcD/Ix+e7EKLwLZI8e+u2g65Hpt
pjX2M0L19YXum5+TjIaC+QsMCS8/7lE+MNf/kPnKzZzp2iAshVQxz3vNvF7I
xyyatRnWcfAQ9qJRfk6zFjOsbNj54YTOQOZSjrb8nJ0xdFqRYLTEz041znp7
/D7J8nPG78Ox4RdaeLeGtb4YGV+V3IhuQuZKMWuZUw8McKXNsc4ydaovzqX5
gXq/fldj4mYatXyr1/mC7e18a9bDw+n1Rz9LnG4lM4dpsx1z4agHtMsst+t6
1YdglgCfNdmZQug5isrJ6DvDO8jqPBJzXAhXF1hDDV0HZgTLrQLPFEIbXUU2
N3zkWkXD2AWeAeU50FrEPepar0z1bkm01G3RTUMHAm0GNNHQSMOzA3mB0CzX
zffoN7cGhpvhywFPDnMbbc5dKfGMIf6nj/nEAXLEq9QdSJ4h+tttZBqaNftg
pk0zc2P/5z9zfevz+7jGNa4/rr7O/9lmAQcj/raONTJzVVaPmS3L0S4fWL07
0CdCTjP7wVWLmnNYcjwtOo6y9KThJ90WL2noJ0qs7TAcPdum/vqQFvdXaPvs
KR28PqTTD6fsVceFmcMPV6LveC996avvb1nXcf35jm6Q8Y1cQs5YuaOrH+Hv
8ZKenjyimY057ieDn7vg5+Hv8TMyetvmvNajnrlMH351yzM0hAfeypxmGs6z
/0bXXFdl0KGwUaB84mV6iTZXLZfuV/ujfsxOr+FZfrbzbKrlsN5zXtr/dFmC
+jvbJx7R8IKrLfN5KRdZfsT9Qz4LNMd82Zz+v/PxSG8TbMieF0XRxdr8Fdu/
tD1r+FTDL7tmeLZYLah2QzP/DDNH6puAXiE8ApNGQqFhG/iPwIPhgd5P60OM
vu8Dp3HJ9kpTrmO/jSSmsIYeX4Mag7bhnBpzVRBb1vOdF52bsZzI8DNnv9j+
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
r2jU4avCPWXr/4A+omGZoCyF/qL1141Up4E5MLAa+MnT/fiIZ92gKwDP5VVf
kPFBzngpT3zpnRyIFl+yZh5yn16yf9JskVygGojA06yW1MP6gc2R9sSrBMd6
gplX5AQVY9G8VEvsMY31GnwW66Z4NrJW4P4pe0Zkswe/mBvMZbUQI+ujVGds
vTCcFiJK93ms9gRaCazLoD0PyzYrJuPBDJ33iLeyri8y7+s0V17Z2uq11fdi
Ikh9s3mO1M0Hj+qmPX3NrfeOp71v7hfH1pdaXzN9DbCPFfIaCsdHwPzLmh4c
B4nuUeh8AM9k6h6F0zGrH0dUDHV2VY4rrN1YF12NJUOUNRFF7ufG3HPGfEPR
HLdl1lKgD1xuYy1bZM0+r9Fb4kUH7q605P0ambUhF6/9Ar6+clP610XHwNKH
BkdD+5Gw/r+gJR544HboS8DkYOki96cj7mvXWjJjXGmO+flfub71uX9c4xrX
/1t9DT/72uvy3V5/Jt8sy9CB/J65NxattPSjVduBWfaSaKdFf6k66cwsUpYF
xS/Xy/Cz5b3Uj9rTCixLY3+/FGsuS0n8O/hcJ/53NTtvaJgO2mnL2RV44A1a
1Jnv0/TGHC0/W6fts106eHdMJ9+f0f7NMxqa38P3jJkIeYidCrUNb/YMg08O
4Nvapf6c4efFGZpZXaRHu9u0f35AL29e0u7lM3py8Zz27g7p4P0pHX+8oNPP
l3T1653h6Fc093iBNZrsWZGkml/WY0IPYypnHt9Dxxa2X+q5vf0JP+2dindz
3u3hs29ZErj9ePAo+xXAt6DiU1j1uU8G361qT+Yvqx3pnSJTAqziWT9i3Da4
0xPdBnTYD9S74+FEjucG0cersF7DPE/m+a516+Y6a2YtoPwcWe9C8xiRvYwq
B46j5fuAPUi4z8n8rD1W3ZsXfYGyM7Njqoew/nEuty/Kf8Grqm/xHkiPPsg5
j0Wr/2C+gw+HmyPMub6z8LPHezN4jSL1jYnKyIMpMkvz3j+06x3MjVW5t8+e
ffAUMX9DP30iTPvOkk+oeg6X86m9X13ziH5bvAptBgu/nqqxsJ7fD9RnBa89
c1oj0X619V62713fvX+zveORvrjz1pZ9DLsGE973Uj2Wn/qLeDo3aT1TuBes
mi68V6OCfJ/uXwVOH+3HNqNQ+BlryIJ6asS6Fse6KnL8rLoN1bNYfmaWLgRu
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
lm5/uKObn1/TK3O5tZdPqD8/Q4try3R4YRj8zTEdvDmkV+9PDGvf0P3Pt+x/
d/Lpgo7en9LB62PDzYd0/PaATj+e0Pl3F3T64RW9vNuhR8erNDBs2FnrUnvJ
sOxsgbm6u9SjuUcDGq60qTZdo9Cco8MW8jegA5DMNnAHewIXfPW/8JjTpLeq
/rfw1uggw7jOOcaNbk01zmXRLdSkD826X9ZyVqjWq7KXNXtY8zHh8cxbWJL5
Ny+2OX2p/7BofTT7OZOFl9d+OfNXlM685TJ53amXsOd85nBM5tjzJaaWeS3B
z7vPl2l+bZa9CXNm/caZKJFhOXMcgCdxHVnt80P1ORbtghzfYUX36cviWwZt
CHOPvnfCss7PFdSzOqNnYr/uL3LV2aPbZr2Yy4KXap0S59lVm+LJAEZnb7+i
p3NzkrfnJ0G6Fhnh57wrl39S8J0HdI49Muz+ku962KkW2c5wepzzHSaq7YiE
V3kNoTpkL7J6D0+9ANWjORH2ZEYGq0MjlFgtl3B1zDmY0rt2XvO652Qz2L1M
Dz2vvjCjGeJ+qiuJfecZHnO2ky/zh6oX41zDmmiJi9rTZ6/usrye7EVXTfv9
rDXXvBPJwtSsTJ3JLamvXFl9NpB3UufMk6L40pnXETne+BuzuHqDgKGRiwIP
nDp74JT4frFeWv08QqvrVv30eH7w36u+NQ+Ma1zj+vr6Kn6uJcrQBWbLuJzw
zBVnq2HPEwxdtP3pMJ3lsfycBKl3h/rf2dk/6ccF6Qyiy1PI5Ki4c2so++TO
0zWd9/FjmeVPtR1pHob8zmYmeunetO1LW46OLQek3tXs31EvcV8aM4WOn5en
afnxEq3vbdDK/mOaXp+n1oxh0kGd2nMdGm7M0PLzVXpyvmM494DOPp7R1XdX
rIG+YT30jdR3pn68o+MP57T64glNLszS8qMVOrk9pLsfkLlyT3c/39Nrw9hv
TL3++S29/vU9vf7rB9aCnH9Cn9uws+HnC8Pgl98ZTv98ReffX9Gh4e7dK8PS
hws0vd2m+pJh3YU29Zf71F/qUnOuTdVhg6qT5nH1kNUSSz8zTnu88KRgdkZu
WlvygqvdCvecm8zOys/wOO7UWFste9KGNeBf25E5KLBzrV9j/wn8LVT2CzXz
IyikPdNUf6u92kzmpc2py6k/BryfxYfC9qKz2mjPZcYww6mnIq7vYeCzT2DD
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
WezibyJ8mwuttsNz+eviKaEeGyXJOYduOFfwXR/Z8XOsz5/28llfbv3/bM+5
kMmXifzM9166jsnqIjL53uz5XQo1pzrk15P9nuHLZqpQkVx4PPfMtpH05Xm2
oCjzb6Fmmth+LfdUy+JXifv+MEjXUrkw7Y3n1MNbdCm6ZrD8DPaFVth8DiEP
qQw/RTCzZpwkPPNn/eEiZlXsjyCHROY30Aco6t6aZHPX4INhjnv01nnPpQ+/
mTI1DTs3pir8XoBvhtW3i9Y6ZK7lfgI+E+vl3/Az6z5q4gfN+zRt4edyA8wt
Xi7cfyjHqi8psIcmPl95/sPcVsHcDvJdxvz8P6u+NTOMa1zjkvqq/G7u62Dm
S3R9kTJyovNCwtJFPm/Zws/Sj47V/zbWPebf4+fUAyPl58D5wP4eP9v/8bQn
bXUhzEihzVNJe9wyK2R1JbH6zaa6kFyU5Wcp6UGLhgTZMUm5yB5nPcPP06vz
hjcf0eOXT2nn1S7tn+4Yfn5CT14s0vJGmxZWmjS/0qbJ+bphzrJ4AEKzqOdp
fiyqBa31atSb7VJvOEn92Tla23lCxzcH9PLqGT0+3aaNU3O9Fzv0nHUfJ3T1
+ZpnCu9/eWP4+S29NTz9zvD0O8PQb1G/fmCmfg22Npd5+7e3dP+3N/Tq0xWt
vNii3tKA/ZmhZ04MH6CH1putU3u6wrrMuKp+wuDbBBnQec67C+vI+o6oZNYG
+J+64YlqVzzqquYxIKMb/Fw3X+sdzRqsSY4hvLcKDdV0lnTOTWfdLDNmWc3t
2Ycpi2Z5Kpdl6Gz2iJbok32n+XXaWPCX9YfWjBXR1sq+hPPCc551mlud7XX7
eedbFzh+1ixqm6We8dJjdnb8nBvhZ+idpS9rtcYpX1tdCn4fK5dxj1b9UZhz
Q+uJoVrxWPrKlsEtP/uOn9O8QC/zf+I7mclbia0/SF7nAPOZdUfgdMuiIfbZ
QyUq+8ySzJttZFaH4kedyP3mfQz1SeaZy4yui+cKS5Lp53M2eU7XTvlRfnY9
6Oz+leSxWJ9wvF9j9Gj5cwN6Do974pJPErHuotKKzDFa5IKnM89RqH8lPGIw
B8t6Cuj32+KZUWuXDDdXqDOsUmsS/jPQY4Qu31G85UWTAn6GHyZmj5NaiT8r
E51FRO8Z+gzbB0ePu6K3g+/xd/bGUy0c658bRWp2K1zwkbbrAmg6xvw8rjFX
j2tc///ra/hZcrd1P5j3kiXbJNSsgrhqfc2KrAfgqkmvJMnkSbAnVFFmmpiJ
40zP2WbFaQ+Zz0VJ6PjVMrTl7VDPuWl/OtCcFlNBIP3oULOBrS+e60krQ5es
f0ckftB2nzkSTYdlNVxPXMDMUNmcv5rUnZmk4eoCLT/doM0XO7R9tGsYetsw
9BN6cb5FB+cbdHj+iA4vH9GTo2Vqz/f4+fLYlxiMFrhCnzsxt48MxGa7Rf3h
DG3uPaWrDxd0/+M1XXx3RodvD2n3+hk9Pd+m3bMtena5Sy/ujujkwyV7d7z+
61vRbfz9o/Shwc+/vFeGfsuaj/tf39Dljze0frxNvdVZ6i9P0eTaFHWWelQd
1Ngng/3rqoaFKgH7Y8Sssy1Q0ZzbA3O+z4Ft4MuG832vxHOBkukAT13x5Gj0
m+z1jJ5aoPvyrPmBDxfyBUvijZb1FPbjtBfqOTb00mwRaDisR12Y4TplO9Yh
qHb2oc6X5VVjILN7qq9QnzTbp7Xzb+w7XIh4D8LmgKMeqG7DzgxOqK/cBDOv
x8cg9v15/8V8xdybF4zONfL98TJ+zi5vMC8eG4Fov60Hn9UWCUdrzp75m8wi
Cjs/DDK66YzOwmaVO51yNnMk1t62nQN0Pm+pp3P6PtJ1R5LOHMjcbug8AMHD
WBNDf826HHPcoJdaNoyJvmxrWKbGpOFBzoKHR0ikPiEx94LFW9xX/Y74GHJe
n9MshPzaZdcTluU91T2nuhIv1UKrHgt7VyE8KRPJ+kOPHNoSaI45389wc8Os
a1EV+GM0ItYZFTmnRLL/xD8j5r9XzOOCjwb8A5mfzWNErzhS30Bb7DWUiIaa
fZ11/yVWH3D4RGOmUNhZMySVpcucNyizoYk+T1inYB+vZC7XNbc5mDefP9N1
uc/VmLN0xvw8rjFDj2tc///ra/hZ5qvy7rzNeSWBzFt5caB5t7EwNM+OFYWf
UczUieg6OIclShlWe8E+Z7AEmmMmXBU47YTycyYvnNna8rPqPKzfAPen7Ryg
42frNx0wX3uR5rpoJlpoNSZF9QBTvaz1L4MGNYojztWGnrKD/vPKvPDz86eG
n3eEn8+e0sHVLp3c7dH56326ePeMnl8/oe7SlOivcxPaUwxEI+Kb2wpDKpUK
1GiUqdVu0ORwmjZ3d+jywzX3jl//fE93P8Iz+prO3p/Q8f0LOrx7Tvs3h7R/
e8T+z0dvj+kEOYfw5zD8/O5vn2Sm8G8f6PWvbyXr8Kd7uvh8RVtnezTcNPy8
0qXB5tCw9IBqgyZzDzKnQ+4NBuwjAC6uT8Kjo0uFXpU8rIXQl+vBj67IPgLY
l8asZLuPHL+mYaaWYegGcwaYBBwkGcaZGSvMtSUpxzptruoTHANmOdAxUyYH
3vajY82gS1KPYtbnomdbFq2DeMuFTmvhq88KPBgr6DlWinxsWX7O+Tmnf57I
59J5RdY/e+qT4XNeYX96irqTPSpVi+ydwb1f7Z/D48NqpnO+zUbM6VrAru1y
vAZwXiNhZoYv9DK8KL+fCFK2zo3olFMPEskxz7n/letO5yyh34DmAmsl6fem
vsoofn8VU103e0eWRHMRqG8z1kSlTpH92Lhviqw8MKf5Xa2PnD/xOa50xHOi
oNpolGPkRHyk5XcxH0+Y2Suy/0Qs65wg+xjS+UHbD/eyPu/OK0/uN/u8aVY7
br/IfnJF5mGs/9DzBUvz/WzbvOyEM9Irlm/BvA3J0UYfuj4JjwyZlWSvu1Lo
1uKB5pOLlkPzdBp2hjD1+bBVqMo8AM8INiR7CFyclJWfdQYb/Dw126CF9R4N
F8z7rKf98U5lzM/jGnP0uMb1Deqr+NnmOihHyPcT7OmFHqpog63Xks4Rcu+5
pN7J2pfmrC/JMsTXuKIe0poNHmq2r2/5Of5P+Fk9Npif44hnauDnO+rXYTWv
6Vwi96fDwPXUPe2npZ7PmqGCfiJ6xonwPWYgwc8N8PO08vM2+PmJ4eentPtq
h56d7dLB5S4dXe/Rq5t9On39nJ5dPaXJ9SGF5vzpcqlVJ4JZtagQU9Vcb7tT
o26nQVPKz2dvL+nmM/zt7un1T2/p7a/v6C16yfDjMDx99t01Hb07o4O7F/Ty
dt+w9AE9e31mOPqCfT1wGXhx3P36hnUe8MG7+O6S9q+e0+LuAvWWW9Seb1J9
2DKsU6f2EPqNJveRrWcfsoIbgzZNrczS5MqQJpcnaW5jlpaeLNCCYe/JJcPK
gzq1zGU6gw572FXNY2gP2zSYMzwNfUjFvq6e+qQIb3jqDWFzn63/RqotyHMx
Qytzevp352WnXsC5WNdCRZlL49k09f0Fl8lsl50ttXpo4Xr2GkT2eCXh4yOd
LVVPuXx63Kc9aE/yTUyVqlWanp+n+ZUlak91+LFl+dn20a3GxPZQZU5Vdfzq
OSe+5oHrz+czudi5EV5MM6xdf1n76dIfzzk/D/wv6zcSXZfo/0FzAUaFFgea
dC/BvKXoJXBsBvo+435qMUozPNS3Oa4lvJYqgUHB0IZJoXGPOIMvcpxaZh6N
WXcMTTQ0HpzRVxctA/tfYB6yIl7G3KvVwm162je3fjsuezyQ2VLmZn0+RW8V
OE0O1gM43phb7TwezzoK5+M+Qj8BDzk8BvC0vc+c/4e/wyewIozLj5k5usA6
JzA01pHYa+FegM1O1M+qSNmdvVI0e8VqngvVUPMK9blVfobmGr7S5Zp4TCf4
m7ke/K4/06SZlQ5NzVSp1Uuo1S+bz6LWmJ/HNebncY3rG9RX8XM2e83LZTLS
PM6ZSPUV0gO2nsyx7m1DD201HXavu5CZO8SMYUELLG01GWFidc+2rB90KL4a
Oo/ox5Gwc4afA6enDp2/h9VXj8wfqm7a6Ua0Ly6zO/BZEy8R6LnLzSr7tHWn
J2ka+o3tRzw/+PR4h/ZOd+n5+S4dXu7RsWHn49tndPLmheHbPVp6tsS5JfB/
g5cyeyVg/9+wfFI05+GG8HPHsOdgZpoeP9uh8/eXnE0If+i7z/Cwu2cf6HvO
T3knM4TwsjOcfPP5go4/nNHe/TE9u96nl9dPmauP3l/QxecbzWBBbvgFvbx7
Tusv1w0PD8xjqfCecX2qbhi5TzOG89uGp2NdP4Cfm8MmzW8s0JOjLXphrvv4
/iWdvntFr94c0u7FNi3tL9GU+b/OXJcaU02qmuenP9OlucUuNTtlPv+z9iDx
3F69n/g6b+ePzgFaT+cwLfFznjBfJ5ihLdfKjKD1dtM9BNXksh9a4jv9hsze
qXZHe4T2f+BXjceb50wVzQdR7c6X/JzD/fBQOfc37HFUm00aLM6xrgc6d9xv
yVjJekfknW7D9pYlu1DuD/cqsd9fFk+FIAmUHdPsPvHG811fOvXGS3XTNlec
y+aYKz9LLrd4yWGfpcg+EmVmR+iCg7LqjoM0szNgHUKc9k1rkqkIPS56scjT
sZoDcGShIp4TxQZm4RLOMpeZusDNHIJhre8GZ/uV03WDlPW2TPUdVm8z4fr2
WX9JP11X4zXG+zyUnCTmZ3P9CT+3cv/gLwPPPWZpzO+ZKtUjyTppakYgz/Ml
4mfNeT+xZORoLg6es9awZt4vNdaD8L4aevSc8RQ5hsZnoc1ekfyVUFne9sUj
lycDfkZfnDNUzGdFCzPIDWFpZE42+6K97gwMN/dL1Ddr3qnF3pifxzXm6HGN
6xvUP8vP6G9Zj4O877EWws7yuO/Vk1kYN2Yf1JjnCYWfwc6sjcbMIX5v/p5w
ifcdesnQdTC/Oi/n0OWA++42pP8sfBwJv8epvtr2oH09rzoP6kTnvrQnnZ09
5OuKhcv5/jOT4VxbMuc2+LW1qTc7YK+Mtd2NdH7wbJdeoPd8tcfs/Mpw6qnh
5+P7fXr86hHN787TcMNwpuHKkuFWPq8WVLvRqlC7W6eOYc/h3Axtvdyly0/S
Q75GVuFn4Wj0ou9+esO5KHe/qgc056m85V7z9U+GkT+d0/m7Azq4P6Sd61e0
f33AzHz05iXrqF++PjD35ykNkZcIPwHoOTkvcZYWny7T0HA1MstLlRLrmQfL
PVrbW6Wj+yP28bgyrH5hOPzs0wVnwRy9OaJn5jE/PtyguScL7I03tdSjmeU+
1foN9u6rt6qGCSqspeZ8w0IwkofxmxwRaI+RXWK9NZStJ0Z0sJ56qMgeQshz
qjqvWgo110T70UWZM4X3CmvdrY5fmcuyM3RKMkcoHnS8RnT6ZzvvN8HFvWDV
YOPYQrZ70TxWHKfyeHRWMMwpO+dVUyH9Ui+0M4ia0WN9hxPRJjEvj3Byys/Z
+UmXz+16slm9sOf8tMWrWt6fOdWEgEvBxPA3rsGHrZ2wt4ftl1vuxvsGrAmv
Yuh8SpxNrXoHZLdob7VUtxkkyscl37wWnmiEdW9JPOvUzxKvD3s/x/re9FjP
ERU97o/z/6NfXZJ1kMw2ytpLckizmuO058s+dLp/FWlOH7JPEptxAh0ROLoq
s7IFZDtWZL4QGmfpQRedLzOOW/gFcl8cLG4ea92wbGva1JR57toF7ieD/UPc
Jvt1hi4Tyq6PeI1UkXUS7lOkvtMFq9/g57TMr0cDHh/ImtS5wlYfPecKNczr
1J6q0qRh5+FCl6bXB2N+HtdX1bdmjXGN69+t/qv8LN60mbl/zf2SbEHf+To7
b2f1nWCPKO4DJcLUlp+Vp5mfufcrPV/WzpbUg87mqRSsR53v9nXz1vPuH/Kz
9bDT8xxnjJnvI9GfBKoTkV60zCF66u+B8zLuV6VVo+ZU1/DhNC1vr9DG88f0
+AD8vGP4eYe1G8c3hp/vDD+/Fn5+eb1Lq89WafB4jqa5Zqm70OMZJfBz0fJz
T/h5cnaa1ve26Oj1EZ1/d04X313T9Q/3dP8TtNBv2L/u7qd7w8qmkKuCnEHD
0fDdeI8ZQvSmf743nHtLrz5c0+HrY8PPe7R385QeX2zTo9MtWtxH1suQ+rNN
Gix0aObRLM0bdl59tk5zm3PUnGwa5q2Z+9Kj1Z0l2j17ynkvNz8hK9Ew9I/X
dPn5ytQlXX1vvoKl372iZzcv6PHJE9o82qQ185h769NUH7apO9OlgeHy7mKH
yoYLsHZwHm3BaE8ZJXN7E/SAfSu+5Gf1RVGvBZuHw569ZcmTiHUmVDSpsfJz
ml2Zs1kmIxxqM+4ys3+On/Oq2RDdc95ycKR+cdAvu+w7m5Eonnv/N35mLzbt
s7o5yshT32gvrcAb1YRY/5EwP6I5+V1+dl7n2lv3PbcWgJ4CfeSK4bJyt8Ra
DuihkXfo6ywA96GLkjFY6VSk79yWPi1nUzck74P1Ds2C9pfRtzZ8XvG53wp+
tvOfzj8y9nUdE+lMQsDae9Y3IN8Eni/VQLXLkfyupn7I7HEhfe2wmOq7ZHbB
5pMGqokJXT6gaPB1v6IqM61W58NrBOg6eF4jlpmOqswUop+Or2BfaKI5U2VQ
MjybUB1Zgm3RgmDtwLMdqlnC3geYmfvznB8oOnI+NsvKzpjJhc5DZ7DLzRJ/
PuD2sB7hPSLzvMN7Gs891r39QZ2mF3u0YD5Pxvw8rn+2vjV3jGtc/w71NfzM
81M2w1j9B1L9Zoaf1TvZ8nNO5/c8ndUKtEfMWudiqo2If8PPmn+remlb0FRk
NSKSp6Yes46fs3qSNBc8zHhQiwZXZw7BzpH4L+DnrObDczwdsE65UodvVYeG
ywNaebpEj54/oo2Xj2nraIv2TreZn1/d7tGru33Dz4ah3zynHcOr/dUZKvSb
VB40qD3XY56stapUMLeXmMdaV35utpvUGw5peWud9gyPv7x7QYdvjunsw7nh
VOgwbk3dGX7WAktzLiHqNfemkbPy+hd42b2nD39/b7j6jWHeKzp6f0RbVzu0
eGhY/smA+sttGix1aG5tmhafLNHK3iqtP18z3y/Q5PwUTc71afnxEu2d7LJW
4/zjGbPya3Ob8Mt7+1dkiRu2Nxx98cnUd1d0ZerSXOb8uws6fHtEj8+f0Ozu
Ag03Z2jWcDn8PqrmvA/9bD7yHFPm/NwoP6tfMjQb4r+R9ZHQfm3JZ81uTrWv
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
O057UFwF1o5YLwfcLusfDbcXW+Y8CC+3pQEtPVmkxwcbtG2YeQv6jRePae/V
EzpkfjbcfLdn+Pk5nb19TvsXm9Rd7Bl+K4hPSEH8ATCnj9wUy8+1uuHnco2G
hp/3j/e4lwuNxu0Ptzy3B++5w3en9OzuiJ7fPKeXN7vm6wvavz8zvz+ni0+X
dAmt9I+GYX9Rjw7lacvSV5/v6OzDpeHvI9o63qb5nSXqPxrQYHOaVvfXzGPa
pC2uLXp8uEXbJ0/o+fUeHb85Mtd9Sbc/3/GcIvMzNBy/pvVOf/fOcPRbXO6n
Gzo19+nwzSnrw+eWh+zB8hDHiOEbm0sBHma/Cu6Riv8za1JrsgcOForK6iGt
PTvxEivwZeKa+p5VdG5QMw25L43/r+l1VW2GhWTiMY9GaZ867/L4hKGt/tky
sGXXEX7W/G4v4+0i/CwalNQv+gsOD1WLrP1xfu8URbvg2ywOZSg7b+cVI6dd
dllAuAx7WIiWlvO8kUXuZ27P9qejvMsptAwtGYx5c9/z6lec0RNUIvbYgBbX
+iez71sj5nw8/ooedEV4D75zxXZZes9t66UMPQS8LWQ2r6I5e8VW7LyfWbcC
dtb1DHrGWBdJvkqa58IefJH46oXq8xext4on2SjVglbIPfSi5pTAK4P70gXJ
EMX7O64JH0uvN+L7XsJ971RZI2E9mS0/h+oVwrnk7DsXs5a5qLOF8LuuT1Wp
NV1lfq72hKmRI8Nzmc0C/7+fiO8mnuOiZkux1rss/C+e2KmHTKxeoCXl5ybP
FVaYn7vDCg3nmjS7OO4/j+uPqW/NJuMa15+9vo6f9Txs84Z9T/NIdN/aaiyV
C5gNApntwl78RJjm7jq9aEaXaeeg2K8VHqol8V6GlgKeHNyHBtfyXHtBZguZ
maUXHZfh41Ea8fcQvk60v2zOd3r5WPvLUSLZBOzzoXoO1mKrLiSpoF9Wpu5M
i2ZWJ2lhc4bWdpdo+3CDnl8+Nfy6zxrl7YMntHP4hJ6dPhXfZ3hv3O7TyT34
+Rntn29QZ6Fj2CZmLQizM+d4GwYxt10uw6OqQlXDz6VShaaGQ9o92qOzj9AS
39LV99A8v9Es7nfMwejtXn48oYO3r2j7+oR2Ll7Qi4tdzvt++eaMTr4Dc7+m
u5+FnWXm8DX7eJx/NPx8c8Rzj8v7yzS5NaTG+iRNPp6j1ecbtH/5jHUi0F7v
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
1GfD/Fil/+y5cxj9TGUD9VIOJGuB5pWwSMtJGV0NZOCu8fP6ENZ352HzcOz4
mfTPawfIz7vGz13WTudrBbx+AZq9muPn+VXRP4+xVrcGsHM0B7sXizBG9q4i
P9O+Lc+a8d4+cRhWgubiqHdIrxU9lxQkKF+c/Oqm69Cc7cBgdYQMPgcz+LMx
6HBPeO9mG5n6FC4+X8L152tk5Fvk2HvWSJCX8x3zM+k3pG5/fGBmvv9Z/KCf
yROa8lWQpW9+FI4+fz6Dw/sDWDndhMHaArRGXVxb0GzkNGyfLMPZ0wFcfrzg
+7vj+xJ/6fe/WN7hM/eiKVPwA2V1/4W8Np4524UyXq6+XLEmm/IYNw5XYHmH
XpslmN0ZQ28F1xijGuQ7JcjVxOs6j69vtiz6hQTv5wfMg8a4rrcazb72Qu0G
6zUiHnW/5uewX+l42o/kBjoPcu2LJkWfYR4dTv+cCPk5Zr7M5AVtXE36aGZn
8lD09TmYR/WUMHhk1jCGt5fA44S8v4mfKV+z1Mizj6/l1tFefqpIM3dx9j3+
llcTpjNWX7v/iZ+pD+/RZxaf3ztle5vZm1JtVVQTYhVLyGxvPKK7jun/X+Uj
vsp/FF9L67+Kl4fMMCQ12zvQXEPxGZGZQprJo70CnheNT+nrKs8tpo/1XUSv
E34fhV7yoi+RzEJi53KZPC497XEn+PhKqmcP5Z7Id1PCaTR882uO+GV7mTDj
JGDvu+BVnop5a3iagUI5hknONBRfTc5MIp/KvLyvzM9F6ZmLrkS1aDnJkfFZ
y6F9df7uU34ukZd9TnrPBfO+Vx8PvOyEnyf11vXWHDOpSb1FfR8/R/Zp9Rwp
/CyzTXzuSsY0Qy3MXI6/0nQkXMWDiMbRvKK150y9nBznAmQlR4D6MUWds9Hz
k69+tslMyM+SGyYaT5oTIn5uUnYK83NH+XkONpGZN1m/sYich/y8j/y8M8Mz
hDMrxM81yFWQZ4p5aHZl9lC0G6LfMH7ePZ6HvcsVWMTrV6Zr0kclfa3v8cwZ
zzolJBeG/hZQLypFc1kp8KhfXspCFhmy2CSvEOSolmimac6wj7y5sLsIq6cb
sHu9CyePx3D54YJn/25+lD40MeudFvWL7396lJ/I0vdfH+AW64Z+/iSaZtZ3
/HQLB0+nMLezivzcg95MDxbXhqxD2b1che2bfdi9P4ET0o+wtvmWtc3k//z4
+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
wxYsIJstbYq/3ZLW6u4M7JzMw/7VEizvz0JtuiY+xnROz/gu61hyhD1kZx/e
kWdJWrTP1JuX2bKE67uZjtRY2vjBsjN4/p88kpMyx8l9NrePS3lk5PeHLF3L
M6+VG+LtQPkcrOfG9QDpUkjzUe8WoY1rhf7KAOb3lmD9fAv2bol5T1mjccF9
adFO33655SwW8pGm/jP5TtP/yXOaWfine3gk/w9k4gtkbmLm48dDOHrch737
fdgnDw/KiMHbPsfbvaR5RtJYU1443jb//HovmS0/38Pdzzdw8eUcdh43YWZ3
GkrTRUjhc/MzaXx9RDdOa5A4vsfZVgFm1vE92VuG2kwfX98UvEN+DvCy1Ovt
Lo2gvzYL9ZkadOaq0Jyt43VKzD0Jzdp7p1oB4lHrHU+9mkUUf2dZMya5z+2n
AvYRZh8Ner2r8jPHvOZJ5qYv3h1pPKbL7QrUezVodKvQQX7uEj/jsUXehcLP
GbnvuMw1kocx97JTnuuL0+ePNPI0X8tZHOQJXM1yLp1n/JyIveJn8c+WnjNr
TVzOX8QT2/Hza88Lx7i6hgt1Bz7rFGzWMO57+lzj4FOudka0D1Smp6LvimQu
w6+dHN+a9x2IXstjr3jta5tGOKq59mMuvzHUhyScZsJ8QfxsXPk2yVlFxNA0
U+C/8raI8nOSs/+CXESPnJXvFfZrLol3JvWcPdOqaaYq33fSd2X+QuFzkDxG
N+PBpfysuS9x5WfWxOn1X+W3phNufyFQHTT1EUgDnaO8wqrUhJ8n9e9Wb81F
k5rU99R36Z+Vn83PmfcTc+JzarM9sVczRK89Yvl8R+dHOr9oWbZKXDWCU6x3
VP/TrGk9kpKHTdl9ecmr5bmfvGga2A+1oKydS2o/2mcfjwKyTLVB+o0qDObJ
g64PK9uz0n9m3fMsLO+MYGFziPw84GyUPl6OMgtzZcpPIe+7FsyOBzBeGcF4
FWt9BIsbI1jbmUN+HrN/3dL+PDRmWpCt0nwjzfTLzxRleCMz0F4y/TvNed5Z
7qWK7sV/3W9WBglfy6i/sPKz5SDr/0Mm8Pk2g5zqpvH+MkVkK5pLK+dlHpG8
psnPg6sgXM3a6SpU+03ozndgtIbPlXw5kKf3H4/ZI+/6yxVnE9JMIdcX6kff
MltzPiLz9Z3kizNj38AtMvLtp2vO9D55OoRDZOi9m131lya2PoKzlzO40r40
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
KHfpOZd4j8V0vKbb9y3zhPNOPNFy5JOSSZpUn7a8+OskOSfdl3WZ8jMdi6zx
clmKEY/0wB6nrMFt3c295pSvOdkJ1VklmEkdg9tsbTIR5gKmVBuVE+6NZnNL
VktSZmhL4s3N/hysH1N9Oq13XvGz7S/5bk9NfPECXZuFHtE2M+3nRPOSK4bz
HaTbKdRz+J2ShWItDaXaRL8xqUn9q9Zb89+k/vH8zLkpzM54fsuozi+fFn5O
hecv8Z2L6TkyEanQH8tpLVOSbfZqfjAVd+co82Fl7bNqCYVhQv9i83eT/4d6
Reqxct5eNcPzRnX2sOvwvODiVl97z6TdIO2z9J57c01oIsOR70a+muf8lE6/
DsPFaRitz0CfcjYWWtAYNpDzuuzDMd6Zwb8NoLPQgc5cA2+jAf1xE2ZWu7CM
fD3em0d+7iCLl9g3t1ArMUtTJmGBPOEoW5u8LbCoL80srX1p0UgjV1t2OfWQ
qbeu3ieszdCMiSCSu8K9UmUEz3wHgjD72zQY0XwVl2VsvrRZ87KVvlhMc1k8
y2ZJiaY20H6Y5KlLH910KTzPaF5equWN2/wiPx7xReD7pusVRc9ZbOTZF7lO
OdeLPZjdmoPloxVkRfKaPuJ87wtkXvL0uOW64cxDzkCkXvRXyRG/J5b+6REe
frnnIi0HaapP7844F5E00re/PGE9wM2PyOJfz+H4wyGsHK+yX0ZCe5KJlHiO
Sc9T/OuS6RSUK0WokddGs8prrYr5PlP+YKMk/WfmadJ0VDlbhTK8B7iOm8O1
GM2tzizR3OqQf5+mfZRAZhMD7e2T3wfNNJpXXqFRQWaqwvRoGo6ujuDiyyUs
no+hMl1k1uJMc+LnuPAz/aTXnFgtQzqPNq5RluZgsD6G+qjNmfPpovhHM0um
wjneRCQ3z/yiLUfUvNSIf0VLJd51NDdaIB0HPudctcRrLLqOrL1FGyGeeXSb
YY5gTDUUns79EWunVL8Us++IYIp74nQ8mpYpzL02j2fTmPjyGcmbP7TN1cp+
TaB+cH5a+rwx+/6hY909Hs1iSYvuQvTicclDIc+bjHigSN63cnPO9sqC8HOa
M78cn/Ue3J8u6F5QJJclmisunnc+rklwjYZrsEanCnXKMG0XcB2Wx5+Ua0k6
njR+j0z86yY1qX/Vemv+m9Q/iZ91FibFe5fCz+QnEbfs6WTCZTL8mp9fszP/
Hc9Br/k54fg5pvuuUX72/yY/p3mG0c7hQdZ3/Ex9GppjonwK8j/ozFEvmfwB
prnvPL+GbIacO1zqwPS4hX9vQh15uYjMQ5l85UYBml3K6GiwbqMx04LqNLJQ
WzMx8LLUw2vMtJH1GtAYVKX/PEK+4T7qNAyXp5G3m+xvVyRfiqbt65c4H7xQ
k6xC81emHnVa+TkT7U2TvwXppvPid51SNki5WcEkazuYaTOv94s9nWtk3ghC
r5R4YDqF0D9XXm9PddPqy5vRvQD1nfCcL7Cye079t1nrnNZeelgp7atblnNc
ffrC/XLzwDV+Es02XY+YrIw8Sq9ve4yv5+YCLB2twfblFhw9kDfeKfePr79K
fjj3n38Sbn786Qne//weXsiL40/kw/EEV8jeJ7fHzNjPf/4A77Ge/kzed0/w
4a942b8+wtmHY5hGxqUeMzE0/UxaPiQxXSrJnsrVOs0G1pBptf9Ms5It8dyo
2OygeXEgO5eNn8ddGK2NuGaWBqzDaA2ayMg0uxgwZyaVn5PKzzSrWCEtSKeB
99GEwUwfDi4P4fH393D26QBm1jrcS57yjZ9J/2z8LAw8RfpgvM1MDR9PrwUF
fFwpvI6vfm/JvO98jOV4iDutBukIyE9jirNNQs8I86WQubYUM3pAviA805jT
fQibVzSdD/W5Kb8kJTmA6oER+mD4TrtlWi75zqDZx5hqtuVYMb1DmFkSZm36
WdMohZ6Q5gPtq68Jrw+/nZ/UxyiZqgmdaRZNvLwmcc3qlv0wzvouJdnf2dg5
MO10zvTT8hnk2UPqJZfUt151KOFekvm/C1dTBlQd1zydHh7/vRo0usTPOai2
kJ9rws/FCT9PalL/8vXWHDipfyA/s28d9Z41y1b5mfe5U4EykfSZv+Xmv83P
elll53dePNw/dbcjvsbWe7YMFTnHiH6EZqaInxPah7V8BuI56j9T75m85arI
z41hHTm4Cb2FNvJRmxm3P9+A3nwLf9eENvHzoAHVXo1nCCvtAlQ7JWQevC55
jHXKnPHM2SLEtZTZR31GymrmHDnyYsghR+WRcYrs7UvXJ2Yu1EtcxM2c90z8
jFWgXjdydYHy/Sj3GxmauIP26Ykdad89y5WL6KbVY0R1HryWYX1HitczYd9L
ONo3z4FM4BgmOntofGKZ1aafNj8u8wELfQCC1+UybSjTIs0ZLGnNgsxwproU
eZIQX3MfnUr7i+a5ZxpU8+zyqD+ZVj07cTiuMbLIkFVk0On5Nq6DhrB8uAzb
Vztw+HDMGg/yl7778RYefrqDh5+RoX95hPd/eM9+du//gPz8fAZnd0f4+2f4
/N9f4Ot/f4bP//UZufkDvPznB3j+y3s4/3ACg8Ue9wyJn6kHnFJ/E3p9SYee
KxWQZ8iXpYtsX+f3ucxrIzwO6mXW3LP2uSHvdblZ5apTfgrlWa7PwHBtFmaW
R/g8ZqFNnsn4fhKrc885HUT4mbw+0lAlHu80odrGdeD8EA6viJ8f4BJ5n/xg
6BiZ8oMIP8eYn33kVPIWpKzvNM/eBaIdoplDZN5ETriZ+Dmp/nSse0hLn5V9
H0hfjbfh1wuQrub5OjHmSPUlJxbNyp5STPNS4qarT4YZhMLH1HNOMT/HU8bP
CbeGtjUV5yAG8Qg/295UmDfksg2VnxOasWm9ZecT9813j+X6RTPDTcdhvn1h
1lPopZlwOeNyf4H5YRA/F3yX+x1Eivk5q3mGWfWeU59NZm3jbefxIZ8pel2z
ZdLYF6CB3xMN/E6pNDJ4bIkHdpH0G8jPpepEvzGpSf271Fvz4KT+Efzs4Xnc
F+2GeqSZ9jieDrRn8zdyuqMMHYTnJutXs7ddguacpjRDOO76PTKbLjpA0wz6
mfAcI15waZ2nT7KWxPJ5LXuBzlHZKp5zmgWe0aohB9cHVWZkYdwCtIaUMdiE
5lD4meb9qtM1zoajvjHtyRND13qStVyokv9sln/S32vIczW8PDFwxvx4mRFT
mq9ss4ySQcKZ2MTLys9FZWnqYUo/usg6aeqB033w/dWkP01ziDnOM8lwjkla
e70pzjAP9RPi86F6aqehNj8P4VLi0yAd9vYTr/TS0Tkmy4Ywz1rNLEyHuhlf
+22iz1Ytelb8oaWfLgydNc13KcO/S+W1N816j5RqqCUzgjTW8SBgXW+MmSvg
y5CmhdiP8rZL3Ro05zrQXyEtzRg2Tjfh4G4fWfoUrr7ewP0vD8zPz398gqff
38PF0zGc3BwhW7+Hj//5Gb789RN8/s+v8PGvX+DTf+PP/+8zXHy5gsHSQPy4
A2F5l1fD/JyGQrkMo4UZ2Dhah7XjFZjdGHEGeH3QglK7zB4UOfLv0yx0Zusm
zRDiY10Y4OVnWVM/i+w8vz3PmejEz+SLRz3opHK0MLQPeXyd6i3ywGth4dph
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
fecxPz8yfo4JNys7uwyOMT/Dm8QXfs6An9ttevrisXhkvPkrNBNvRGf8AN3x
Lw909t0drRw9p1y7OcHPnvIzdC7Mh3lePy0sDSS/5Aqezm+OxTf6FdchdBvM
ydfM4/Csu5Z6zfcHVsccIXMy9B7MzKcfL5mtL6VfLXOH/H/4ObIQxbsDuYg/
vRbOR79ZmPov7+nDXz7Qx3/4SB//+0dmaObrv4Kz39Epc/vc7iqfC6Hyc0L1
Ecg5170DnWuVjCNkffD70hwws871qNiuiSa61OBjmteMyKPvLw+oszig7tIc
be7vSO7LYKnF739CWDhmvpW6NvMmys2NWiZ4KhbNDD9KjnMFnVe7ZJ3w+9Pc
2KDh7g7ff5PPi5ysuaGxivhZONZ8Lc3LcpKlEzIXGWieeFa9LPAZIronx7CR
Pious4ai2Td/jqgn7Y0127GJOcWIiYPxvpXmYk7MukbatfiYn91MQ1o12q4v
rvOAqn8OJJcwEHYW7XfeH7O16TZ+y8/Zoi8zhKgpP09rWn/O+tL8+Gevz9Jv
yN4merozsi+O6yT6pdAJ5MpcFVRacrFdL7og/eeJQr5HNTsul/dR0Z9jbqjQ
QD82x9dPsCVySpgzq7hdfOXrSln7Z+hfQ6dQqGfl5/BQTjFDqy4xppqPtOZ+
pXOaMRhweflAZ+cse0CyvaP8kaz0TkVbwYxUrCFvGfrnKlW7VclMyZQLordo
jqo0WG7TYK1P5UGDkvm0sm+oWorUJ5WS3pPqk4PIo7lQy1GpyfzcVn5O5UPt
iaeT5g87zkhPfsLQ5lsH/1jJWQhMO5HRnG/x81B+diyTCLWv67K8tUeu/Iz+
rPiB2Nwg9LK5ou0xZzVjRnXh49xtPLZklANp2gYu15sWDXWk8UAmYk68gWVe
spqXvru85uZTLZrcimUNoh8KP7pCKPeFniJ4K5oXlLJs6jj4mcs0G5MF7UaK
+S5g9s3klJ9b7Q7tMgteMd/e/fxGOPUejPqj9n1vfr6jrbN9KnSb0rud1D8L
PzNL5/IZmlvo0svTbTq6fUn7l8gSXKHNlyN6crpOR/eHdPkeTHwl/WfcF3zr
xn4c98zID3T74xvx3Xj46Z4e+P7vmZvB9fAGuf7mlv/uWnrT598yWyNnnH/v
Hn4dv7y1HvQ7es9c/f6vH+jDf/9Ad8z/m4c7svcg+o248vPXsp5wOvmEnDs+
HyuFZp1Gq8s0t7VKDWboQrPC7Fqn9nxTPGe6zM/1UZdqgw4N1xapt9ynPJ+f
4NQZ0d97sj4b952NnQNPddR+coKfnX/zZJ63Mine2xi/R9XlJWo/3qZctyXn
aSIdl/PG5aY8So69oB3HKufq/CHWr+IRl09HGiq3PyXn0UReJn7fE910MvKH
dj45ka7DaTEmtB3OBzppcwx6jo73mlwfPBY4nch4Ly1pa9GU6TkcP7tcb9Vt
+JKFivVkYOt8rCOdF7T8nlXWclOn/hvTmta0vjRH/lnrs/kZM4AJne0DS8DL
VDlQ+8voLaPXXGKmLTfQy8rJvBI4EXoO6UFP8HPefl961TX8LrNzk/+uVaAK
qp2ncjvL/+bba+X4/5irubL8N2E5LfyM/nauFkqGQ1iGbwBfDwt8nSn5wsuB
edRF+RqBzv0nAu0Boc+j/dZM5OWGfWzRONeKVO9D/1zj+y/z8yvy4y7x/zVp
cWtEW/vL9PhgnQYbIwqYDWOmkRC/uGgWT3vcMg9U8C2HWzmxUMsbPxf5OeWE
GbSfO85Q8G0Gcey/YXODvvPy0HWAzPSJnwe/1g3zw8sG5pusOZFOI+1Zr1j8
swP1cQbzipadbyOP/JWSZhKK74bMVuprKD7aWT9i+WRmPBMo/n3OW9tlPMLn
LhtK+dAIFDPmdxKah15OXgf4C8NTu1DH+iRvOYNZeUxgFNFAxzRP8FHE0Kbd
SNhxOcHQcoymdHYwCD3h52yhSI1ujzae7tLxG+ifVbd89xN6vXeiJ7795TVt
nTM/dxqiuQZ3ij8IXqfQF4/tQilPcysjen6+S8+u9pmZ9+jp6SZtH8wxR6/T
i5uXdPr6mM7hxfHmmM6gtf6IvvMtvWYOvheOhmfdG+1/Sz3Q25/V0+4BWmj+
HlyPbBdkGJ5Jr/qOefpOWPr1jzfM3LfC3A8/q97j9V/e0M7ZnjCu+kbqnK70
oJMJ8V0s8muNfZOS5AK1aWF7nZZ3N6m/PMtrwha15trUXWhTZ4EZeqFDhVZV
PLbB5Hi/MEsqemeX4x6kxt+jPGNpx9CB+S26Ob0ol0T7u84jDhXwuqTYaVG+
25a89bh57kiuZGLstSL58NZDTvhOs2yaZOyT4JjJeaL1ctpjmUVwuU42NxBm
1dfCeU4mf6O5cjmJkp3jfDQ952Ouemsvbf544eScQjLqQ8cjTYkWdCXaf05G
fWidv9U1vfSV8+pzhzUt+BrrWNVCa2WwT5dXlobOI/1fxH/j/937/z6pL/14
pjWtP2J9aZ78s9Vn8TOud0nzx0hofgl8KsCBRbByMyd6RRRYt9oG/2IGqCBs
lK8ZP7sShja9R9X6j+7/wN/M0VXmymoHOglm5w7/u1ukShczUAVmWf3dYgP3
mdH7bmSEpXONtHA2ZqXA9C6bRPpYMjM39uZAb0fnBTXDW65l2Ql+ZnaW+UHw
cxn8XKXuXI82n63Qs+PHtH/5hBb3linTKFsvLqnM6HwoTBucifyW1WMahT5s
EfzcKlLmn+Fn0TzKbFdigp+dJ50+ftElS389La8J2En4uWz8HKp+A5yTMK20
J31i42fRJfjymMHgmGfEHgAKWhDJVMFzgN9f3ouyxl0GjOxfp53OxI88psOC
emyDpXEfwlOh6iBSoW+aT816RH9adNvymuREvy396aoyNG4Pz1d7zrHxrOCk
5ln4WbMGUeJbB685fk8cP+fKFWoPR7T+fJf2b0/oFTP04cMZnbw9lzm/q4/I
176g1aNnlG03hDtdLrnjZ9ESlwo0WJylJ2f79Oz2kJ5fH9Dh6wM6uNvneiVz
iKcP6ml3+nAonnZHD6fM7JgnPKWrD2d08/GCbr+7ER8O8K8w9K/w3YAe44PM
Dzp9M3w3Xv+kPetr+H0gj4W5+u67C7rmx3wp+YY34l29dbwjOn2dFVWvm1hC
XxO83oUGryGGzMbDFnXmOszPK7S0u0aD1RHzcpvqI3g11qjSq1C+VSKfj6tE
5AGTsvnOsc4Zx7zqOJKW454SvbjrQzsvxZjx6GR+kvKzah1El5F8xEyLHJaC
eFFo5mhc/FS+Eo8e1e0IP9tcRORj5ztvG6cpVh5OpV1WaiLqJ8t5n3WeGC6b
JGmcrVor3Df64uqNOM401cfuMjXjpiOJRbONSfM+dx4dCZevGbrces0NdXko
4OP0hL+G8LJpo+WzKaN6afhwuF6z+uAp+7s+9N+bn3/Lwv/R+tLMMa1p/dHq
S3Pln6U+l59jE/yM6yN6iugflpoF4dsKfKfaxrrMvcK+/DP0F1UTnYkq6kHX
cqJ1dHoPFDgYt1VnXq4zL8tto8DPnaLwM/4W2g3tU2uB2cvyGPJUFu4uCEOD
n50PmmhkLQdtnD1i1ymUMR00ztA7g51lfrBVoWyJ+blSoc5sl9Z2F2n75QY9
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
N/w/y8+uJy0+HKEcn0nL9dZj1uZgzVsyaQyNY1s0GnHzEvctbzBMfDoXGCYi
/YnLT/nUu2N8zjp9dtL2bmR9Il6a5n9uvnTQcmB+MDRdNtha/IHweSIaadWH
iE+7FXQqfzR+njL0tKb1t60vzZp/tHKv6+fws+ydY/8VesC45gIjy09ygNvq
ISG955ayc4W5CLNIzaUWNRebVJ9rUJU5tDLXpHKvxnyal2u69LeKAZUqaWrU
s9Rhju53CzQ7LNHiUo0WVhrUWwAjlaXgJYe+Zd762fDkcPws84ZdVEG0ILWO
cjb4WXQb5g2sHg1x9SbzdL4sy9f8EjMf9NpF4+dKpyYzVu2FjjzmdDkvc4W5
Cp5fndm5S03+ealTlTmrlOQKBsKP8NNIV6DfVf8KaHrdvqv2jyxTBJ4f6NdK
nzoUhpbfzYc6T5jzzeNCtRNRbrDtQeNarNrqrLwmeO0LrbL0w5OT/ey08kLE
DNKL03+jf41ernj/9htU5zVDddBgfi4KP0sf0ebGPslHtMekHtG+ekBDu1pO
Rzk6eG5OswLtd7aWlZJ+cbQfUTDP6pysIzLiI5iVx4U1SbqgvWx4buu8JXrX
zN3M0LVBXfra7fkW9Za7NFgb0GiD2XlrgZZ2lmhpd4lWDzZp5/IZPX65TZtP
Vujp0bbokq8wc/cNc+33V3QlHnHXdPbtBa0dPaF8uy7+da7/HE9pP1EzeDK8
bmvS6t5jOrw9lnxuzA2+uD6g/etjennNHH3zgg6vn9Hxzb5kDsKH45zvEzx8
LT1oeGtwie5ZPe3Ej+Ont1o/v9NMQmQT/njHjI15wSvNCv/mis4/old+LT7S
6JtffX9DF/yzncNt8b5BLzeWShk/e7I+gq+JX8Iajd9H+MJhH8Gy7BPI0TN/
Cacf/iQ7PmMzcb7NCZp2w8tkJZ+w2m/ye5yXfBn1K+T3k6vG5+VopSV9bvgy
Q1MCxpacIZvt8+BJAcbn87TJ5+7S9pDW95eos9iSYx855P/tERg6JvwcN+8Z
yVQKZvg+lZ9dJa3w/8l0TPgZ+ibR4uc05ztwWnv4XmTGHjfOh0PyvRPm+4dz
KJ0c55z6mkeeMD8cPH4376d5MjrTmLD8I/m7ULNTRUsSmj7b5nldiZcOPEGy
yEIHI+ucY1DQbCL1bE+a9x3YeZxrOOXnaU1rWv9afWne/KOVe13/7fys7Blk
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
3seU5MNkqI4s9IUaNfgzBDlL5VqFGTfUdZ2PtWVaZ26z4/NFj4/xWg3HG7RI
0Gwgc9CTucOkrEVL9bLohEKZPbDcbqwJmLMHyJhaafPnUolZ+/f3f/7SzDzl
52lN68vUlJ//dvwM7Yb4P/N1EhzYmNXcit5Sh4u/Lneou4RiLljt8vWYb2dn
ifpbi9Rcm6Uas3ODebjFHA1mbTBLSDEjofodaCpqtDxbocVBieb7JeoPmIG7
JfWpa+ZF+1ysqv5Zvety5psH/zkr9KLx2JYGzAyztMhMsPZ4RNtP5un5yxU6
OF6n/YMlWmdu6DEf1633DIZG/nEB+YMtaDdazM9trhbfHni3TvU5zNjN8tpg
QeYjC+0qs2XIvPubbGzp//qiQZX9flzvmaWQVQI+hx8vfJZrzM/o1creb9qz
XAbVN89gljBI/qb/HNcMOMlT0d4YtBWZGjwLypRrFSXPJWFz/TIzaOwceT+b
PthxJZgW3rXgXNUqM8tjnxrPJ0h80hOPB8lo3ikeuF6b3r56aQTCQHp7YZQN
E/Wu87pH7fLX1NN6ordtM1pYf8C3uMjrKjCh+haYrlmYN2F9POP8T57TBD8H
n/Kz+CMYM7v+tHhs+Kpj+YSfk5P87DxMUqZrTX06CxaOb0Nu03P6c5vzND7X
3IyU+mqLlkf3/tGrrogHd0POoVlem80/XqDlvVXaePmYdk6e0FOZVXwlmurT
hyM6e3dqWYo3kv2yvL/O6xfHz+b9XMxRl4/h0XKPyr2yePNlq2XRGy8gn3Fz
KFklzcUBs+CQmnx8t3ltO+A1bG+uwz9foRc3R8ztV/Ty6gk1+1V+XgEfn9AK
FcTDBO9xHFprfC7wsbjI64EXVy/p2dkurT5dptntJV5vLskcQaYI341HzIzq
L60ZmXxMT2Rxq5ejL7f3CT/z64ljJm1eimDkQi2kwXKDHh9t0LPb57R7sk2j
1Z6s3wLbCwA7eznsfSQknzzIpYzZjdVtTwU/k1xw0fOk7HhO69qnCk/KjGST
Y5+lM4t5xxqN1to0WOxQuVoQX6JYAnOAWV43VuT1Ec8d25sQ3Qk0HZY/7uYF
fTu2oSPxMcsomu0yVRpVXmuXRBMls7iWq56vhFRpZqhQxdr5988f/NLMPGXo
aU3rj1//Ht79nNv599zW5/7d5+mfjZ/jmimRCnxhzO5Cj0YbQ6khfLE2BjRa
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
lJ55sElejfRa9XliPYHzWCrrfGM071F8Cvlvivy6zs42eE06T3MrI2oN6jKb
Bw8c5FYGxZwc7+i/lvn4w7mJHEw9xsDXfDsZfk9yWfl9Hz41adWreNCZhHxf
zNULq3N0zevbn/7Pj/TwI/PzizU+f/4ZfubCvgEen2bJh6b70b0GfZ9C9ciw
zM9AvDpStgeRMm212wtwM6X675jxM7g6Zvp1vAfiMVPSPSTxGbE8IzA71oUJ
sHQmpTMLzPghfz+3UKfD8006vd+n1d1lKvJro2tL9XaWnPFAfe68aJ5Wc8k9
yzaX3KKczg1Kpjf2XOBll08pQ+Nn+T+ffmPKz9Oa1rT+M9RnzQ+mkDnI7Jya
kWtOhq99nUFTtBoL232aW+/Q7FpPtBxzWyOaezyg2ccjmoUWcW1EFWZnXIsr
fP1pMVPC+7nbLUqh7zw3xwy9WOdrTo36s1Vqj+pU71dFT4ESj+leVfrX4NFK
i/mZ+W60OqAF9LaXBsyufG1vdmlj9zEd3h3T4QOz8/0p7d8d0trxNrW2+hR0
8hTHTHunSb3Hy/Tkap8uvrul9//jO/rhf/1C3/+vn+jtP36go2/PaeNkm/l2
lmqDNrNplbKVsmRQDBaYn5mb16FN2ZoXD7o0cyb6U9p3Bj8XhJ9zE/xcRu4K
+HnYoDY/9v7KQHQSHV53QL8JzSu4Q/g0NP86q3g0AzfmaZdPhtlB9OrgrQct
NfgZ84Of8rOv+8SZCd84aCSgMa5ilrFJ3YW+zFou7yzS0t4S1Rd7ws8J1z8N
nQYjNZHHkhSeBIt71g9DHw7ZK8iUEF8Dyz0ce4u4x6X71o6dExN9WtEC82Mr
8mODTgda95y9rtDWlJG3zQUfw0INVRCmzknvXwvfw+8C+ZPwlJN+dMHpawKZ
PUNlkGVj2eF4Dgnx2lZ+llxDW6uoftwxv3qPSCZMxMOJSHf9yWxhkDJt9dgn
xD1X9fJQfvZcfqLpK9BbRY55kNGc9VSa3+dCnmYXh7R/8YKOHo5pg9dw5XZF
WDTk4zNTqwh3J8x7Lz7B0cnAMbkytBT6/FxB2h/3553eIwyoxOdKn9e33bkW
H9854cqkaR6QaViolyUrJ40MeubjdLHITJeV3jX8aJLiH56WDBL4gGCtJ3nY
eG6ircf7An6ep6s3J/TD//hA9z9c0/rzVTmmv2Z+FnZOqnYD+wJ43LJGKmdF
F6/HRV7f/5ru+8gxUFbNSw7+3Pjdoua24/0PJYvejr/IY0a1NTPWf460SM5D
BRlCOfXIwQyv7k/YbID4Mvra/+afFfl43N5fpbvvT+j+x1N6yp8l9V5D+vvq
fZMw3VMi8uZI2lwp9EuSRVRSbbqsR0zbhNmBoBSKVzR61Oh7g7V/D37+0nw8
5ehpTWta/9nrc/gZfTI/mrkJKMfXyu4ss+rzNdp5tUqPXyzR1v4SPX61RtuH
G7R9tEGbB+s0uzNH1X5drlt5vgbV+ZrWb+Vo1CvQaFCiQa9MHcwPMkcPhmUa
iS80+LkqPWf0HSviP1WS/G7kpqDviBm/1rBJI2bzBWb0FrNeUOTfr7dpbXdD
8pQPmS+e3b6k5cMtqq71KcWsBZ/mYq9D80936MXrU7r96TW9/+/f0rf/8yf6
5v/6lb75v/9CH/+fv9D7//UjnXx3QwtPN6jcb8veeKaMx8GcOc/rhPVZWmLO
HMD/mZke2XzoA4V2fZbZKKmc8jRf1+ErLbmMs03qLHYltw4zT/D5q/JaIe00
0E5fbHODMX8yN9B8JEy7If1C5hLJG+/UqDKo8+Mpy+P5RL8h/Oyr91zE0egV
Yy6qRLW+eZWszdHy7hIt7y1TfWGSnz+dH4z0G6Ld0CxjyUHk637O/J+z/JyF
STNjD2rJZLQ+uG9ZhsqhnnqPpPVxie8B/1z5uSladPQ4ZU2CjEPxMHRrkxL/
rCReagX5d0G8fqETgpcKMt5lD1z61JmIscH5OC6lT11STQhmzeLWf478nwPz
8c2YTto8n6E/TVnPU/TRGd98iXXGEcyddJnp0n92ftWuh+0ZLyf+aRmjOm9p
T7xQ+PHmc5/w8/qzNfEn8bL8fBp1yrUaquM1BnTPQfxGgpTlyKciDbz6gvB9
BNqLRs8/AIvnNa+6wK9TF1lE/Pr7vE57lFS/cPiz5YpYx1bFGwKeFI9SKZn3
S6IXnkaGD7hP9duSPVLKiV5XMl3S+v6j/5wplmhlc5lu35/Tj//zI/PzFa09
XZLz5+vEeJYT88v4iuMIHO72e7IV7PWUxBOy1KlTsVOVWVocB04/lePfA0fL
PoXMLWblsXhZzerRmVdP5iJjpn9OhaoRmfQ8lzlEP2H5OmNfGplHwAyl7VlU
eJ385OwpvfnrHb39+YKene1QHT7x6L2LzjqlvWvLkxctELw4kKNSDCUrEZ4f
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
bFrnn0IJMHQuqZnM9J6jrpsza8qYPssPAXtNn6wUCyo30wPBFw6LP26yMuLM
n2MuOBg6UUuLH2sLd8Tk+6kHh/pwvMsree975nPZHGyrN2ZPtYDnVMlqFotm
ZOC8q351YUcn8X12zDvvv/nVWy+e53YsqRaltdqVwfYQ1ZNsuyA+MI9qm+cz
iJbrLT+b12w8bEOa3R1VHXYc+y6k/GweV3XdQaMl1R5zzOaq2FIvDc3ECNqe
mukppvIpKbXov20yoqkh0H43sy1C373rHF9m1R/YXqNh84DlasusMXMtQJ9r
MjTXczjF56X6DasVMPz83b+OfUwyVMxmYKoOJGFmFdkvjCSMTiGstyHrFxKy
vB3S/Oeg+lSY4uvW5xQxpQyuZbKitTgTqdyJ4xjruN6wI/uXB3LydCIjrHMS
5P5oFPuribVeS+/PrOeMDwhzPSp4r2b7bXFzPRQ0mXeq03bmP5WHzXWlJI7P
FPX6+L903lwLSui1BOPH7PKb9WCE+XiFjPKz2/5MrwOkosYT2pkTDHM9YbYL
M+x9Eee6DDM7qalJyGh9IC8/Xckv//NNzp4OJY/3OT0zOKts+s4mV51fc/8G
8DwD7DGnIpqxw94zWZ5rJF0nJYzeWrXOcTNX6lf9st3WUSdT3snT/O6P7vgJ
8nUarbhX9fFcU/B6CNdErvn6lhqOlXlGzzL7zzh2/PgdP+/K+Hwo4TMqgfcm
30vMWFqyMwPmMd1zfZPJCzf3yZ/Tz475iDG8l1NY3yWzYdV16BxhxI1jxGP8
7P6b8lP+aC5e8POiFrWof/T63fwcs9ly4OdEIi7tYVt2L8DLt7vg5i3Zu97G
13tycL8va2dr6rlB/W8A7BTF/8Vi1HAEJJs2Oo4y+9DliNSrMalWwMM4R0TY
c8H5KYnzYgGMWa3lpNbKS7WZk0I9rfkp5vo7zu+FtPZcw5mkeGPUYIZl2R/E
edYvH9w+nGvZi4xLtlqR7uZQJkfrMjvalo3jPTD0sezfkqEv5PDhHM/5XPbv
TmXn6kA2z/fx+0M5BEtvg5/rawOJ5MC44BfOTIXTcfVapn6EfnE8Nzu92Lkn
mMOp9jqz8fGlxiAuETBQAs87y1zwblEynYJEwLy+pN/M8FvdxYrj+RYw+kjj
neyws8dmMgRVJ0EeT1azkq6942fOHEWsTtf2GsnPHtt7JO9wTRDLpZSf69TC
rPVksDMCP/ctP4ctP1tODX3vJbucfBbOnjHHgrNa7F06/Ayu86tGwLI3nzd9
Bmzvmb1Iw88B7b1r6c/tNXkwF/W19Bgv4blwTo6aV+Yia5/Z0UbYPnTAspJm
+rE3TH1o0vQ753kxIevD+85zQ49pe2w7M2BLVnc718Fajazh54gef4ms0eOz
d62ZmLzWrrqRmNGN8OdgnjhuE1mTm6keIkmH1w2/U4dNrgxwxk6ZOajXeOgl
HGKRO+NkUrJtSvrDrvLz8eOJDDcNP/O4zHWaUhq2tPft8hn/NfaWM+DcwcZA
hgczyfWKenwkcLzwNVAHzF4u+/p+Pj4qgv3B92sc90OvHHIjrzuRtalBXnEv
6faIl3Cs1Uu6D13uZe3TOj1+fyysa1iP5WdHVxOy/Kz7l/syyLVISmY45h5+
upDXv17L7ulEMgW8l92cF7RZ7dYbg9cEuJbhzCv1/plqTufyqC1mpfGe5Ixu
GtyaQaXwfbJs5o6ZM87rIqqJp5Y+bfvhdr3lrPVc1otbcz3jRivN/ZXM8n+T
upZxzf0Xv/eNXe9mfOkLHo97pYjXkS/E9Lhcom6DjOy3zK7zoq6574pyu52x
dc9nTTz62RtNkN+pe2aPnRppL9ZqLB/Wbr5/Sn7+o8+bi1rUohb1u/UbMXt9
PQwmSCSkPWjL3uWunDwey9HjAXh0T/vP++Dp9fMNqa211fOY/BwGs0RQcdxP
GmyXp64ybxi6DnamFrpQBAemmEkQkTTOcXnwEnvQZZujUuBMYTWl192jmsuW
wvkkqb4Y/ngCvBiV5QBZFswX4DVt/E26IEU8/97GWIZ7azLa25TVg23ZPDuQ
3asTObg5k4O7M7Az6vZM9q6OZAv8vHm2L7vXx+DnY2lvjbTPxh6yPxLReaU4
zqOZKvvPOfXv0vn4oM1mtrNyjo+GzsyR8yIh7V/HMtRwGw1IoVcB05QlgdcY
yoSV7VxO9oi9luuUM6ev51X1twpoj40zddp/rmYsP9PLI6isajjR8rOj27D8
7LX8HAU/55Sf6aXSk6HDz82C9ntVAxJ0+Pm7LsV5nqoDIfNRm5L9zs/UhbOX
bLTXdvYubPy2/GBlP5iCPiGcjQomTI4cK5gI2tw38DPWGeVOWT2+UyXDz37b
ywzFIzqfpvzOXPR3/gvUiyYKUdWOkl0c/2rdjurZazLHqW91tBOqNfEbD2CH
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
LiX0NZKPlYMLMe1HMxeP15GVnZl1rn3oiPIz9RLUgbIHymzzLNYYyVLceKNl
otrPZU91zs9LS1qGn6mvTeh1eDKq4eeB4efNjnI/dRaaFxd83+vzKXMqR+O+
HS1wkrnr1LDjdXHWj7NZDj873hWa50KuVM2H8WumdoMaDvXa1XlCzg+Cn8HC
+WpOcxENP+ewPcKqu9a+LPvXUd/3DEb17oioTkC1sdRvgL8Dyai+BuqOM/g5
ZwrD7I3HQ8q6vEaivdBMSNcIDj8v29m17/wc0Dw9+uYlqd1oVtR7gmukSDqo
/XQ/Xwv1CamgamzUUyQVtpnmZq4xTT0/Kl+kLokFLsYtr7PkqfPnfZexzqpk
pYTtWK7hWKmbY6barui6dThrSX/awPdYu3G7474a3Zo0sB9TOayd6CcdDqr2
OJWKyXDUlsPLXTm+P5aTxzM5R10+n8mF9qGp4bjSHjSLPebz1zMZ7Rh+3jrY
1N8//fKoM4Y759tS72Of9JuyebyD+7mUj78+yNNPN7J5viPZZk28OK68yZj6
snuwvfypmPokKj9TR8F52kRA5+ACMS+2F9bR2SA+V6jjCSgXGj2EZ64Jd9s8
Tc0z5PFjc+i94e955NpvDppsIK/N/tQ+csis9ajLcFuvdl5XUX6OmKxEekyu
BCy3Kz9/z1RnriRnHznbGEoY/2Uz1+vVLBNf2PaIA+aahblmY/QX5G3mfnvt
rJ/PepZrRfy2n239dqzvM3UZLs0/8tq/9RrdhuPnEzS5mOpnE/3n8n/+o8+X
i1rUohbl1O/i57jRmGpGbgxMW8rKYLUtmycz2Thdk9nxqkwOwaFgr/paRzKt
ovpxcY7di/MQy8+eM84J7ElTw8FiTlcI54AYmCiF82YOHFLMMeM7LpVyXIrg
yBx7ramw9gs/4Nz0J7dXZwfd0Yx4EwVUTjyJpGo2loIR+eDl9WvOIIWVn/3h
BB4zLuF4GuxSllq3K8MNPG+c+7cvOC+4JWtnm9JeH4KfK5IpFaXSaspgfYrX
tysHD5dy8vFezsAQB3fbWCPMpLc9Ate1pDPrymR/ite/Lmuo1WNuC7L5VKb7
E9QYNZLJ3lCGuz0ZbLalvwY+n1SkPSpKY0h9L3W0Sc1VpEcwOZqzhqrZyBoO
Vk/hvOFnZWhydt5ojdnrzla/8zPvx/k/9nOpE/4TePAHy87Kz8uWn1Pg51pR
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
cqDpHaHsz/55gPmIAS1/OGg99sI6x0DdTTBh/KVjaWq2C9IZtGSyijVfC9u8
XZEm1lQ7N9Q5n8rJ44mMDjak1G1JE2y9fYqfg6lffr6XL//yLJ//+ihPP93J
3duV3L+ey9Pnc3n9diWvP6N+uZKXn3D707W8/XwrL18v8PtTef7pUr7i/779
7Ul+/j+e5e3PV7J5PFH+XPF91yLztTC/KZ5NaoYg+ZhZgyZzsKbMbDja8jNu
mTeYqWZU857HsZznOpMMzWOpkFJO5rptnrPJ7cW8F6wvsrWcmfvVvnZe52nj
2ZBq/6mJDlH7hPdpqcM80aQUqVtKh3X2kNcpBnhuu/tdGW8xV5y6LHpPgrOp
tSnauQUWc134nilG59dX2GvW3nPA0T7b3rP1vnM87JjN4vsny+/+o8+Xi1rU
ohbl1O/lZ/ZLNH8wFpVyrSzT3YmsX2xId2ekPdUaqjHtSHXclGyzpH03vc7M
GXR+5vupC6QvGPUDS8rR9EhVLw7/ytyTI6B5K16JRv1gaOaohCUPbsrlYzq3
71Z+9oMVfsvPS4GYLCs/J5WfXYG4enCQmz3gZxf42hemLjgtCXBCrlmX6tB4
adRGLfVzLpazUsf5tY9z85AzdeDk9qAh/fUhOGgiFbBFrlmUYqck9RG9n6nd
wLaaNaW3M5AuWKMJPm5uoNYtP+Pr9ha+Xm9LY7Utdfy+sTaQ1lpHWvi/8qAG
Bs6bzGmwLxk4BzbjDGGa/Fykx1zKzgmm1F+D/Jyi7wbO6VnLceUOcw3z+J49
xbjmRTATm9yo/EzfZy2j3+D1/3guiXN/SRoj8jP7zw4/t9QrhHOAys9gQ3oy
U/tLXqa3tJ98nI5on1v73XhMzuXR+yJBr2xwCTOx6bnh0t6ez/SsySy8Ds5c
amVvm3thGZpMTX6mfqPI2TnNYi7rdghGjWczr5Pz2HHNvb48qlslxzKzj/oW
ZjKqRiMRUn5mhjkzk8mi7O2yV0stNX3vojajcMm9bOYHwc+ao+Hl2s54p7nU
P42zYAls27Tx8qBGhPkmMZOJQs1GCnyXy2NNgvXZ+t6OnL08yO2nV3n4/FEe
vnySi7d7Wb3cw5pqKOVeXbXTPuuT4gpYjzW/7T/73HOOdvl5DSCkvWefZn4w
B4/8bGfhwjZXhjNsys9emwHox/Znvzo096lwh5l9HlJtg091CwH9Poj1ZaPd
lE28t/ujpiTBkNFWQarrLdk435Cdqz2sl1el1GtLa9TDumBHLp5ODT//q+Hn
55/u5eHjtTx+vJSXL5fy9tOtfPzlTj79GfXrnXz89V5vX8HSb6jP+PonsPdX
/P/P/+ebfP3bo+xfbmjvmHmA6vmsvol+iVLzDe4tgJ+5vqO3DT1uKh2n91xW
rY/meveZa1TBe6Og3i3FhintJfN6D3vT2YTyM48DL3vd9LvjNQaycT2vvu6l
dsHMGIDDOWPA9RnfC9R4lYdVfO7x8TLS7eelUIqqhplrqSF+t73PNXoe2yot
dXJ2jdeUkvr8O6stGeEzo491dX0I9u8WpYljnazO9xS1HF7rG+21Htdee81F
+dnqQQL/Df51rD+akxf8vKhFLeofvX4XPzM/IG74OUx+rpdldX8m2zfb0gdv
FcGamXYFtzUp9KqSrhf+P/mZfUOX9qHxPXjF7VkSH77nLKGWzhgyc4V6aOY/
BDVLJUoNYYjeUF7l5yVvUJZ8YVTElD+mvnauIP2h48rL/4GfI2C8fA7PryyZ
ZkUrzz4WGLbULEs2n5YyuKsDduzh5w3cVnH+bAzJym3Jt0qaE0idNH2gsyie
75gh2FoDU6z3wMddqa91pTbDmgLrCdVtgE0r47oUB9R8tFXPUZ+1VANArz/q
K3le1Yxv5n43M5o/o33nstF7FvQ8bnQeiYLxaCtQB9rMal54qc3sQ/BBM2U9
7N7xs8vh5+W5/pm9yP/Iz2PDz+Al+lSzJx4GD3otP8fSxmMjg+cRxzojgt8n
wfZZfM95vST4nlwfLzLfJqJ9au09W34Og5+pK42CXcLs/+ViEqEXciaumtOQ
1XXw8ehfRz0NWYg+y+w9e4NLqv8xzOyyugbjT01+Vi89+lvUM1KlXyA9ODIR
1TCvvONn8rB60VG7YWct+f+aBfien61/mnoPM1MDbBVMUlttdMP06ePjhdn3
JtvRRwPHUCZXBn+uytnNnTx8+yK3nz/JzdtHuf34SU4fb6W3O8P2y6smehl8
uxzg83N412hdjN+f8YowPmr++Ywb1z6cyeTfr/iNDxpnL51tzp+zj639af4+
yixqrK+wr6nVCHA2IR6xOpqozshxjeQJhrGGLMsG1lHjjb6+Rh+2Txj7lVql
Ln7eXAP3D9rSmQ5k+2Rbzh5P5OnnW+XnL//6BFa+l+cv1yj2mm/l7dcH8PKD
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
3X4z8xry2dvA99lXHpNcD2qOT0DnRjkTaPJW/KpnCWCdFKAXinpDB3Q7c95Q
9zX2P/cJrxdxNiFbCmObJaQ3LUq5nsBz5bWRoHSxXrn+gtf19RzrljUZreM9
0spov7zUKslseyDnD/vy8OVMrl8OZPdoKJ1xSfJVvD9yxp8xkAgYv46IzY+n
lj/std7Pbvv1gp8XtahFLeqPqP8qP9Nnq9ltyc7Jpuzf7cj4eCrFAXkUTFUv
mh50s6g9RuYZMBPA46X/xorxsnP4mTm77AWCm3WmkPzs9KE9K6pv5dxhMGK8
nnju47XoJa8PzMzyygf61rk98iO/Vz8O4wPN75fw+yWvKWo+ljWP2SMenBeZ
KRxOpSSdy6tH3erBBByAdUC9JLFkUhLZlGqSU/SDLqXVS8QfDykTkifi2gPk
9eCS9FdHsnO5J7v3RzI+25bm7lSaO2PpgKmph+7tTGV6vCm7d0dyymzkb7dy
9vVOTj5fy97LsYxOuP3KqnvgbFOpDVbu8Dat7JxvJPE1+9LUe1IzktLzdr6a
klo3L41BQWpg7trQcDT1HMxeoSdA1PLzD+/5eQXb3ONVjWYK/FxulaU5bksP
/Dyy/NxebWrPO0nPLmpg2SNOGu0FvQ9S1G/Uc6rTybeMB0KpX1F+JrMmlJ9D
xneZGgSd3zM9YnrUkVfJzVyT8DhJVEw/mgxNPzx/zPJz3fBzSfmZeSh4bbpf
Mpqt6A6taKZxIOZTfT772ORh+vnlm3n1CdYMc9U6uJW3DXN7VGdM71/2XCP5
hPLUB2yn3/Cz9rZ9yrbUHYextuKaqwqubE+76pldwtqRWgLqBlJ5VIban5Ec
XdyACb8qQ999QoGd7z9+kfvPuP32CcfMqXqR+8IRfS7Ut6jW2ePS7HDqXjRj
g/oCejRgHZMo4/6LOc0/jOIY5FrD8HNYQtmEZnz7Y+xLBw2Lg53dWFdm82VZ
39+Xi8+vcvIGhr65kD3Ww7WcPD/IzZc3ufn2KBunW9KbdGWCY3qysyaVfsus
F1MJ9R0J4X0RzPG4qGDt0JP+1kyGO6syAoeP6B99MJZNrAnPX6iJvpGPf36Q
T39+UnZm75n8zK/f/mzqs/L1I1j6TmcMH78cytFlT6qtqHoNUt9NdnZ7ja7C
zzmMVMh8rth8we/lrHOMbtj9vvxGg+MJmPvh+oLHJnUbRrth8zXpW8J8w4jJ
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
VZeUNt7m+CzQTM2QV7P+eMs1c7aS05lVaqa4VmUPmtoiap7DaXA51jq89qB6
77dDuXk9wtdH0p229ZqLOxyRJj5frr7cgKFv5emXE3wubOAzYSL9w4lsXq5h
3+yBva/k07/cgcPP5eB2TTpTs+bj8w7h8zNWjkihk8X7q4bjrIV1W1d2jkay
ezzBWmUgm8c92b/s/y/h5z+ajxf8vKhFLep/p/q9/ByMW29V8nM2K4NVy89f
b8HPtzhP3Mrp25nMzqdSmBYkWAWzJL3iD7l1ZlA9nzVn0KXfM2NQe9Bh04OO
4nwZi3oNQ7MfDaYOsX8J7mKvlH02+kclinHVrLKnyqxlajn+x/L32bjvtWIZ
2qUa6Q8+n7hjfkmALeujpgy3V2X9/ECGB5vgwAa4qAFu2JTj53PZezyWzs5Y
Z+PIDXo+tN5inM0PJ+gtS37OSB68NN2agYmoy7iV49crOX46le3bQ1k735WB
5ech+5Wne3Jwdy5Xn+/U60D5+ed7uQQ/T4/XwKImg6wFdm5Pq9KZgANnDWlN
wPrDCvjU5PBl647XXR6vpSoN/B39N8pdejGDr+vgk1JMdQHBZEAzaxz9hunb
r2gWdDjB6905vbZPfqb2e3K4Cn6e4j4bqr0mPzMXnPwcB+cWyynpDKmpKEiR
OW8j9nlrqDq4rg5+xvm/wZ6+yR70an/UZ/JHeH2ceoOY1ZUmLT8zn4N9Z/CR
Fn3Y4uA08FalXVb9M+fzCmCXaj0n3Qn232ZLOjPqOvKaFR6l7gM8FK/i9Yzb
sgr2WztdkzqeVzSfUC0r58mWcfz94FqSDygXPS7sNXtnvlA10pahVyxDa343
s6NjYBkcE90p+89TWT82/NxZ7eK4zOB+4hJP56Xd78t4a0NG4NDaZCCZTkty
qOZkhP/blu3jQ9k7O5X9CzDT1aUcXp3LPvh2//pMTu6u5ASsfXx7Jyf34GAw
9xV4++rt9f9l7z3WHNuOLM0XKJIRLqE1cKC11hpwwLXW4e4RceMKysrKyuz6
etrP0s/Q836XHva0Z9Zr2T7wiGCRmZdMVt7LTAzsA1wAOGIfnN9s215LDt/d
gb9mksZ4CCSNhwc17nawXeyHLjTrsjg/UW6//vSNXOPavf30Sa4+vAcbP8kx
uPzs6Z2cv3uWs0fw9bv3cg5mPtP4AKZ/kb2rC8PPw6bsH45kMGup7wj7htUb
HWPfj7FvpRIYH1npz7tgw3v5/r+D1d/tq88Q+623feDSMI47njvCiGAQ2xmQ
7WBIdhjIRagRso1r3xV1IYcNi4V8zQ923GZPjfbb7Lz64+xoX4VfNfq0hznk
Qi7r0vkg9sIHMI7Y5xBOBJXL2fOsPc78O3LgoDI7g9pwHGt+1Uqkno6ucX2d
n6AHj1t7pLVv2vKpDjXHJNc8UOPEEaRnITUSqcFSlQavHUQZ44416h31tHFJ
qFSQ7tlE9u+n0j9uSHFAne2cxHENZ7t5aS1aMj2bqnaP+a7oqo4NWZ09Tr64
SxL1sDTnJZme9LVXhDE/mWD8TGWBx+X5WA6vJ2t+Xsc61rGOf+f4i/hZ+zd8
hp+HXTm+PwMH3srVt4afrz5dgR8PpXPek8w4J6FCSHtUdX2gzc8mNrUmTQ0O
1pjZx8EeDr9vByy9Y/O0Q3x8rd/411H7gPfBAO+NYDMyNO+tqmu8DT5kbG3a
awTtAB+9oW6dC8yGez49XUrgQvUd38e96Gwh7eVAMlXc1/I56U1MH8YhWLgN
/qIOH9dlkZ93yc8u52vNkvpVgbjNz5M+OORMLj4ihwA/Hz+Ch5BbDHGPq03a
YLiqVEYNMPRQxqf7cvZy88rPt9Tj+HAmnYM+2DOv3sPk5vqA9fCSNEc1PJZx
n85LGUxNVo2Xkuq7xr6G5qQurXkDjxXtqyz2C5KsJ5AnBHX9lBOcsbH7Z/gZ
x4T6D7l66Qt+HmI7e9jmovZcs7c0Tc8WfJ4/7BcL3FYF3xfa2NZOGZ9XlWwr
p9rPWbBTkr2pBUt9URxgF9Z9yc/MgVjz1p5z1nypox0Lgm3p+R2RQCqq2mse
snQk8AU/Z7Wunammtd4Yo/YyGJbeKJVORnu+eTzixaTRfMZ2s49ojGM/OZ+p
d3oon1AGciJ/2nRvyy+23yLveqM98b/YMMfjjWqybL7Wn7/mZ6M/zH7xdDEl
zT7rz33Dz2DMcq+iXs70tnT5IxKyeH7SOGYp5dotH3tE3Kr/Fs8k8R44XuUi
9q2E3KAKHm/iPPekOR7iPI7wyBhLYzKV1nQu3b2l9Jb7Up+PJNOtSCBv/AOp
v+GOINeg32ElL7XpQKanR7J/g+vw4V7On8Hd79+Dn7lO8L0+Z+1Ze56f2P/8
rHEGnj7Bz6yJz8HPndnQ8PPxREa4VuLISZg7M3ekV4nOQVlRXV9b7ldk//FA
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
OL4M9j6TD7+5l8fvbnD+ZxLJr/jZaZibawlVQwffQSGOszi+e8JG245zTPT3
IfdiHO+fDNWXm5oyXNO5qesH+Xp8F3zBz1w3qDVwjBnys9keh26/hTym2q0i
N24YXTr21BQyEq8U8X2YEi/Ol/ZWU4vESe089m+Dn2NpfNcVZX66J88/3MrH
PzzK4d2h+is5Ql69pll/dlHfM2Rizc8//b10Hf9xY83P//TV/v3U5+PnEj+e
n1f6Fh4JgZ+rg6YMTifSPabfRgfc1lTf58n5Qvs3uJ6Qj8u7Bdi6I8l6Wjyc
N6fmFdePJaOqsxDKxo3+BYK9yvQ5sHCvrnYaMgGfLG/3ZUIdhf2+pBsF7REg
D1m5qPYo0GfPF/Pg3rejWr7/hay8sQrD0r/aoNbvG8PLb22O3FyF6Xk1vdlb
2tfp1N6GILYxpB4MugbJadb9U3+NaxqpK8C1WeliXkaLkVy/XICf75WT7xHk
aNabbz9dyzXXFL6/0Nr8/t2+6nB0D9rSmNDzOqv+YtEcfYbjys+9aVl6s4oM
9mrK0Hyk7xiZur9XBS8WJFfPqi50f9GS/hI8t+wiOtKe1aTYwv2X9WfL8PPb
r/j5rfY/k5+pRZda8fOkLe29vgxW/NytqkYc/Q21T4a95jgWDq7nAj/Tw28X
OYsn4tE+a3q0qV8y9egQeuzCXq3pb9ocSoYhq7Afx0E9CWq4hYPK0OyDJjtz
raL23ISC4GdLctWclFpFKYCj87Ws6j7TT0b1N6hLgtyqOapId8Zcoy3Dg64M
wdDD4yHyiZ7xewbf1zIBmZWCsqiGpFsA1yZdqk3OdWP0zNimPghyL3pdGt1n
Mz/ymZ/dYEbDz13w82A5wmfY9WewfRpMSUbOY+yWMZZzqZgUEPVKVpo8vs2i
1Kp5REHK5ZzkkStlsmFJx8nZrD27lL0tcKUJr/0zeJyMHDS15MQqcC4SAfKx
R1JhMnpA68lJcHuKgf9PBQ0/J8nNdqSxjRn8Px/5M9k7g9dmkL9mwLI1jOf9
w6mcXi2l3shLIhGVTD4NPjWaLzFce1Gc2zBysyg4uNgoYzwfIhc8l727E1nc
n8tS40IOHsHTjxcyv1jK6GikOovFVkavX+oTbrnc4ge/tkcduXl/Je/BvkfX
U8lWkqolx7qs6t94bf9Kp+mbNnNBTqPNwd+5fXhNVS7Az9/85k57HqgFEs4l
ZcfnVq089cF0m/WDO272D9OHJWr42W/6iVk3Zt7cwti6fToEjy8lR35m/dm1
6gPB+/m4ftDwM3uTyMybjl3Dz46VVohTe85zlZzkWiVJlDL4vkroIzWfLYyB
GK69WD6pvUS7XmplWxJIZsUZjuM6ysv8bE+evr+Upx8uZIbvjHg5/QU/OzXv
o7678z95/fmnvoeuYx3/UvzU18f6uvlfFz+Wn11cY0OvAc55R0Kqpcye3dZe
V3XPqsO6zqWz77E1J4sxwHPzplRGZUnUU6a2yL5j1uq4ri+fkFgR92UwUrZR
UM3hfLskZbxPd2+I+8cC/Hwos5ultMBE6XbZrFHKxMDPrItSN416qQG9v5q6
s/HFMN4Ybz8/1xq0qUsrU28aljTr6Ta1p4G92ZvgZxd7WMFD9Ayhf8oWPRAd
Zh6f92EX9evAJ0GucSvkwLgjuaB/Chjg9PlCjt+dIX84lvn1UsbnU9XF6IHt
2IdQHdDnOqNegZlyTFLFmMQLUf0s+lSUWnkwYVFaI/ohGr9eE/S8q4OryYwl
1RxuTUzvM/m5M29Ib9HUOnV9kFftZvaJc63fV/wMRmSPgsPDXuAouCgjpU7V
8POC/DzEeQU/43f0ckkWYshpAlqHZ+1Y58GRq2x7kWcEd5G7uCWY9ks4Ezbs
XIhrsP7s1p4as+5sS4+dy/hVBFiX9oGhfeoB4qP+cSoKdgir5gk1jV02P9M/
JVfLSQaPZDj1ZwRD1zp5aSLX6JCdp8wr2jIGL0/ZB46cbnY6lDGOO7Wj2W9N
LYwMmK8A1s/EwY0pL9jNq2vGVPeXuipcGwr22aV+L0P1HQw/M6eKsP7cLKtf
+/hwqvXn3v5I6v2K5AqWMnSlVpROvyV18H4JjNzsFGV+MJAFOHtvMUQMZL7o
yQTXyHCMbe/mpFoGZyW92D7wbQTsy7o1jl067JYsIh1yg4VdkiQva7iUi/k7
E/wf8DKY2gR+Dpjf873SZGME3zuDfc7hMR/1Sy7mQ3illPRLMRmUAth/MGjL
yfWhHF4updEtS4HzQPUy9ruIc5DSeYZIIqTaNyFwNzUfBwdz2bs9lr0bxPUp
xj21d07B0rgOwLSTs6UMDicyPR2r3mACx4XnnbXcAJi9Q35Wn2vw89UE10VC
8yz2WasuM/uyXKaXhn0U206jwcExRR1z8nOuVpfrpwv57vf3YM4b7eMJZZJa
f1b9eNWQd6t23Y6Hj1xbG9b1g66gT8fAFricOf0M18DLdxfqR56z689Gt8+h
te7P/OzV/o0Nx5e687uGn/le8ahq12UwfqmtQ1a2CinVkkmUqeOeBxNndR0n
dek8Vkr84OfdYFT9wafg5/Pnfdm/7Up1nEU+ENa10pwz8YbdGmRo919Rf/45
39fX9/t1/EeMn/r6WV9Hf/v4sfysPsz2vYc9wLzPsGacwPd/spIz9ZVCWucp
rSIjaYLaZDmuKYvg/hBU3zmuIeIcfyxvqRcG7y1p3GNKvYrUpx3pLIcyPJqq
P+D86kAmF3tSX3QlDibx0WciHlSmCyaMnzd1OVgDUlZ+a9eZlZvf6M+Gm/8c
P7Mea3qC39JXZHvL8HMK/JyNKj+r7pb6adg+wtQcs/k5VchKY9RWX93Z6QT3
bdYlR8qhbfBcedaQXA/s0UhLtkpmtmxfP3rrWZJHXpGt0xcE+UCGvJgGQ7PG
Cm7pGx/CJli6NS5Ke2Jqraw714fsiW5IF/lJB5/RGFelPTM9081RQd8/EPMr
f2j/xuYf8bP3Mz+XwcqNSUf5mT7i9XlX0siPUqUEtsmuPUd9mj9tq6ebU7U3
IumA9nbES1HtraGWc0x16CzTv4F7/Q5yDa45Y32OdcAdP9iFnjTq/+YR14qf
1ZstrP7dhp9DeP+4+qfkqlldW8n562I7B67LSavPPuSaDJctGe23ZbTsyATH
e3zQBdvi+XFHhgctydXT6o+xYXsfKkfpOlC36iG67HD7qS9n9DNcrHE6jN4K
tdG07wS/j8RjODfg5zk+53Bi8/NY85h6Jyflakpq7YryYJtjGdvaxbla7Pfk
8GgsR0cTfTw8Hso+8sEltnexaMl4XJJeJy0djIMWzn8LeUK7kpQuogOWbCC/
KiM/KWJMMkqIMnLIMli2nA5LGce6mo5IHddToxiXGnKeai6q/5fDNZeOBsHm
QbAyeBe5Zg7XTQEMXEyFpZKL4DMT0m1kpNspyeJwLAdX+8jLBlJpIZfFtV1v
VaTarUmhnpUE53zi5GdqW/slmYljvHVwrS7BzsgZr05kdnWKOAFTn8o+GHp4
spD+ge1TfTKVbJseKwFlWWrqdaZ9XWP7zX97kOObCXJSy+6ZcojTa/qd1cd7
97M3ktaeyc+7/LtPCo2GXL+/lu/+64O8++4K536CMZUwni8e9xf8bHvKe+jF
FNKeZPaNmTq3C9d8Qvn55uVQlucjHXNOeo3b/LzzBT9ve33K1ab+bG+by+jQ
cazzvakPma5m1COTvf7sg05Uivi5oPzM2oE/ERUX/VASGfHEU7g+Ihj7GVzP
Xeku61IY4HVF5HsJj8730AeIvoiesEt1cFx/Rf3553hv/6nvhetYx08Rf4vx
v762/v2D7Pxj+VlrL6t1OF6zVp1znVwLRt5heLnujhELqTezRz3fTLC/2RXx
gZcYfmXpEO7vsZyljB3P00ea6+Na0poPlEvGJ3syuziU0dlcqtO2xMDqHjCf
ByzHng0fHnWNnJ8eeztf8PPnWPVAv3L1ip83/nV+phabK+xVD+ENe10Z7+Ws
w1Jbj30syULe9LLsg9uO+uplQj05zrdOLsbSxO/p4UuPPq6LKqnvNF7TzYOB
i+Deimo6p8BJ7B9O4z5Lps43EpJv4nkjKcVmSsrtjFR6OfXbo190fVRVb5UW
g0w9Mn4i7Snr0/nP/Oz7gp/teOVn3LdTNj83xx3t3+iC62pz9tvkVbsumvRJ
wMK9OxbQfgz2OjB/oKdGGnyXAXulVQc6ruzMCOO4UWdZNYP9hp/Jr5vsYyW/
UH8L+QePreHnmPZvUGeO3oNejqVwGGMjhWNG7+6M8nO2WVAN7Bb2rz0Cc+6B
m3nM2bOxaCKQT8yqJvbq2h/D2j4ZjFoaZH/WGN9u78qbrR1lIvVVCXlUk9DP
nnA3uJpz/LZnt9FNo44a8oVEXMrk51kHnzmS0cmKn1vS7OeljHNVAq/T16aB
c9zFeR3gvIxGNRkNGzIeNWSK/51OWzKbtWU+b8sejvUeHud7LdmbNWWOvy3w
uI9YIhaTusyGZRnivA+6ZY0Rzv+4j/dk4PkI42uCv8/xOXvTpszGdZlgfHTA
uyWMKfaSlAtJadWy0sK2tcCv7TaOH95rOKxhW/DZy57Mwcx7OJ79eQNjL6de
iyWMjyrOAXu8yc9x5MFh5K9hnKMQ/dzB4hXkWqODGdj5WKZXh2DnY5ldHskc
PL28O5XB8QI5Mfj58lAW786khjzNh+ufWmyRDHKOYU/2r5dy/nSAfKipPSKc
5yE/c73g1muPhENjS7+LTD+y8rPHj2ukCX4Gg//+Qe6/OZf+YoQcLmG06sjP
btO/sQryLfsmDD/Tx8boukfSFvIynANcuz3kZLFiRvuNjN7eZ35m//OOz685
wLb2QJv1yrpt3HZ+R1BnMBvXvotYkXozyDELaYnXS2JVCpIEOydrOdVrdMcS
4OesuKNx5edwIqlrtHNNsjOukaQXf3Opnyh11Y3+hlOvb8aan9exjr/PWPPz
32f8Jfy8Wveua8tVu8yt2mVaA06GtW+Za8nY92p0MoLKXAEroCxFjQzq7NJ7
wx0Fi0VDqt3EPmjes2KZpKQLWSk0ylIBjzanfTDpRManC+kfT1WnOV7Jqj5D
SNcOck1bVBmc9z9qbLD/+bVnw+bl15ozfl7x8q9e+XnT9uPbVH0I7YNm/zNr
jemIRPMxw88Ow89bK372u1WzNUx/6TJ4am8kxw/Hck4PxpcL9Ue5/nQpV58u
wA/70trrgLGpsVwC39akN69r9Jf03u6A82qSrqa0JyWLx0IjrRobudrnyCMK
4O9CG0xEP5VBVevQTXoUjvA4YQ0ZMS5r3TpVNvp11MlgX8qv7Jr7m03To0Lt
iXASDFylxjRf1zbrB8HPdfBckn7Z9EJJBZAneDVPYT2ZfTysvccyMTBtUvtP
WJO0smY+gV4o4Qw52KvrTXVenPxMLRT2wLD2G/KbHMsyOVcgFZdILmm0cKk5
yJ5oagOCXfKtouYe1AIpNPOqgV1pJ6XWToGjK+DkjnQXbenieHbAzazVtydl
PK+rvzf7spUxvKbmzP5t1WVRjTqX+lBwn3bJyTvbWnd2qN6z6bc12sMO9Zlm
P0m1U5HBvCuTQ/LzVOdKKmBYzivEswEci4BkSlEpVhPSaGakjXPVwd8rNeQ/
OF5NMGy7UZIuGJb82sexH4CDB+Dr4bAp4zH4Fwy9h5hPGrKHWK5YGsy9P2/J
AWIf3L2P87W/6MnBoiuHOAaHi44cgoMP9/uyv0RO0S9LA+OpCQ6b4O8nlzM5
uzmQs7sTOX88kavHI7l+PJSL+0M5ujmUKfdnWJJCKSTxlE+16wrFtJRrCPA0
vX1iaeRUuM4j1JOm5jSuZ2pi95cTcPORTC/3ZXpxIJPzfX2+uD2SwclSmntz
GZ8dycm3DzICK1sYW/RZiaRw3ZdLkq3Y74/rmV4x1JhwBrzq8ccejC36Yrs9
2nO8jVyG/ovbHmp44NyBZ4vtlly93MiH3zzI7fszXJMDCaaT+r+79pwDPdjN
GkTWmp2qTcnvKA+Z1Me1g7u6JqCG8zE7m6mXfbRg+NnUmZ3as7Htp25G2HgA
+r36XluvOiG7OsY5v8IaQgh5JrXOubYjiogjJ0nUi1p3TlbTytbUhfZaKfAz
e61juo4wmkpJpVuU6hB5YyupvVHU3uB3r3Kz32FrP5v4t/Lzj70Pr3l5HetY
xzoMP//f/99H+fZ/n/yr/LzyxlbNArAzdZZj7NkFMyUKlq4tSoA3GbFsVOuT
MXzn8++WclXMeHokQ6plR35SHw0wHPk5Cn6mLxrX45XaVZ0TZg1peDxX/asq
uCJdZ59IElwV13ptqorXlBJ4r4Cy2df8/NbmZ7tvg70cm2+1f+FzfF4/aLSp
P/NzFPxMLz13xGfXn7eUn40GtEd8Nj/nqhUZH87l+uO16jlT7/nuuztdS3hL
beenU/XwZv8z1/oN99mn29GaKWunQ0QTTJ2x+TlTYR0+JdlaXPs9crUknif1
sdhMS6kLhhyW1bOaa+ga5Gf83NAaNHOPono/JMBw9DUhPzM/+OXmF/y8s6Ma
KBEc+0yVviw1sHdbOuCwwWFf6rOWpGq4v+OcxektGPNprd9Hb0fkE37sexSc
w/WOSZ77rNGvW/Ezcw+/8rPT6PjaGgVbtkagJxLQc++Lh9RfPUBftnxSe6DJ
HMrP4RDOcVbK2Ef6kbPWTV2GIo9HPiTliiU97POQdf/jvkyOTL8G684DHuOj
gWpHx6mDDT722d6VnPcny+t6Rpxn+typPqGtUf2G51k52njIGe1h1p8xJsA5
1S7XdYKfj4xWXmfRl2w9j7EQlkgiqJ/HnvEUzmUyGZF8LiX1WlFy+DmOYxKn
phxyhBTXbsapSxeVDHLILHKIPHKIQjGJ6y0uDexvr5GTHnKGPth12C7IuFOU
KevM/ZLMcVxYb16M67IEYx9MmrIP5l6CsZesac86Mh1XZYxcYu+kB14+lPtv
LuXx2xt5+u2TfPrHj/Lb//Fe/vA/3skP//ws9z88yOR0D9yfFSuC3Crokhi2
L4VtyhYxHsG2SfbzIH+Ncd0v67Z+r+rYZQpp6S3GWnueXCzBzkuw8lL5ee8G
/Hy6L7W9mXSOwO7fPcnh8xnyopyEEqu1xLjOQsYDkixI31HWoJmj8e86t6XB
5zEExwleE6aPdVC16Kr9rly/XMuHXz/IzQv5uS+hXFqc0TD+P6x+lvx/dzis
4YoEtS+e+b07gDzPbTQ1/eGAtEcNOUU+PL3Yk1iJmhfYNvqUg8W3wMzbwYjs
IHYDQe3lpwbdNv3J7TWNrEezf5ue56qBST0Zy+jNx7neo5JVbT2Od14HXuyP
L5FW7TpyOfWlE/genILhT58OsB0TMHQZx8j4/Bitvc/svOv5l/1T+P3O73nG
T33PWcc61rGOf0v8n//v//Mvxt/qff7U+65qzit2/rH8zHlunetG+MM+sBd7
+zh3n1auyVYSGpzPT+H+nyoldb1RtpoGo6W1vprE79lTHEiE1dMihHtjFOwU
o4czOCOG+12ikJV8owx+bht+PpqBn0fKz5kGfZzxXiXyJQI8mawndS6YTPTn
+fnNn+Fnmym/4Oct8DO9BePgnQS290/xs/tLfq5VwFJ7ys83393IpXp438g1
4hJBP/O9q6X2RY8O+upzQrZjsM9jdDz8mp95LLFvmarNz2DpDH6mllxBfb1L
UgM3agwr2s+g/dAD83O5X5BsI6l9yUG7/vxm54/5efcLfs4qP7embTBQz/Dz
BPxcAbOChRNpvE/M9D+Tn+n9SH8a1nWpgcIadSIfNXooBfaz05Pb8DPv89tf
1uZY/6P+HzWEwY0B8EMQeVYoZ/y76b3iJ1PTKweskwE/N8Z17VlJlZM4J5ak
cYxS8YCUsG29QV3XCy7OhrJ/PpTFxQgMiON6OtK1alzHmkWeZYFZwxy79BJ3
m/Ve6m1n6yfykazMvpY3tn/KtmOlAb2rz50el83PNRkseQ4nhp+51hI5CLUA
o0muBTU9/1x/6gvQKzAs+SzyH+SSZFInzoWDviDUwka4HA5xUy/R5RQfeN7P
HuyAQ3JJcFyFawvzkktZkgHnFRLY73RI+54ryFVqRUuaYNo2rolePQvGLsq4
j3yuV5Feix7cFZkhvzh7OpKbb67k+sMlHi/lAYz54R/ey/f/9F5+/c+P8vG/
P8r5p0vtf0/hOqQGO73FI/RYyTJHSqtOy+ochHHd+sCzXP/pAdNlShmdK5rf
nsj0+hAcTY0Z1p8PtSea/FyZTaQ8m8nRy62cf7hCvtbEd4Gl+XSY+VY8rGsj
WHf20kMJv8tgPKU0N0/ocWVvcgDH2BsDb1qW+JNx8aXoYZlG/tgDP1+Bn+/w
eIbz0pdwNiVe8Kkf582D//fGGXHwrAVWjWAM0t88qH0bOse0syUR/H4PudED
jtPyeiEWxqCL7M0AhzvB8LvhKPg5Ks5QBH8Dj1NDOgaWD9l+h/QpdXGOjtqc
9LHnGPNKIBrUNcJcF+LDNhkdmqD2bPhSWe19doTI5Rj7jaqcPF3Iyx/eycm7
I11X7Q77NR/lfAk9aMyabrfmHT+Wn7+Mv/T+8beKn/r+u451/BTxU11v/5nj
S95dxd/iPf5SfqbvFTUnGH7wD70yUtTgwr07V0urLoJy9GukVL8hXzfBdVys
IcYLce25ICcF44af4/kUuCujaxEZmVpRav2m9PfAl0dT6R4MpTys6xrDZDml
n6vvT36uJdU7+M3On+Lnz33Qpn/hy7rzxuvPq/4N6iJvgy1ZgyL7p/neK37m
fL/ja36OJCzJKz/P5QpMQL/Bq09gZ/VRwSN+PgezHN4dgedm2JcxmHmsbDcF
483PJmC9sTRndWVk1up5nPLNtNabtQ8az7n2MMVjCD6qsOY8oV5GVapg6Cq5
WQO/G+J3g5Lk8P9WLqx9y9q/8UX/s+nfMPwcTbFfZMXPHfBzH7lKX2pgmyS4
LZVPShIcE7LAz/RIDyN3inq1ZyeSDqovO72OrUJUIw6eS4CxVBMlZj5722P4
efMrfg6Cm2LqQRgFF9Ffnf2hkXzc1OTY2xMx/Nwa17B9Bc3VwvGYxBBJsEoG
x75cLcmAddaDjswPurKHXGRyyPWDPe1Hrw3L2IeoRLHdkSD9Pvw6d7Bl15Rd
3BayDfmJtWccGzIUdetW/imrYL9LDKxW69XBz9T2mOka1zb4udAqqNdPmLlA
JqpePxzf3hDygGBAYuDQHLiT/n/bO6ZPiLnapsa29tNozXsb42vbIX5wdLGQ
kf4A56LZkVgsDr7eBV/vgK/B2fT7plc49imC7Y9Tfw6fWc7HpIlrrIWxW8Sx
LVbKMtxfyNkzcrkPN3L67kzOqM/+7lxOwWanjxdycHssw/OZVPdakm5kJcZ9
4Plhb0WSOpFx9ahM2/onnHNi3wVzIM4h0aM7W8loHX58eaBhejjI0Hx+IP2T
hRSHA8k0uxjv+/jMI6kjPw7j2g/G+RmWroOIIlindfjBnSGuLwjo+Sti7Bdw
7cfB0fQO5ZyBG9waQF4SwXbFSjnwM+vP1JC+lcvnU+SkPXzPxHRtMbfVEQqJ
E7mMCTynhw/OC7/LnF6XXt/UWWGt/ez2UDXw5qdTsG4G3y8RXePH/iI/xp1T
+TmiHoZeK6Z8zr/TI5X9SurR4nJqDz/9DV04T+yTpp+q1u+xH6yp73h9yuDe
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
sinVbMqCnyvdmtEjBqe05j1lonwrj9dRbzihOrErfo7ko9onSXY28cbm57e2
b8pbw9WqU2fqzYxVP4eu5bJrz1u7TvUmL4CbuQ6P/OwMmf6Nr/nZq2sMo8gB
8vWCdOYdMPRIpmDX4SHrkiPVDOntD1SfoT1rSX0MnhiUpdQtIRfIS47eCO2c
pFsZMCfzB/BzISrZCrX5jKd3ogyOZi+MHsuc9m+Mj8bKywvwAPl5cWFYenm1
ABtRO2wmtWkd93bq+nnVa1tr77b+M/OHHYdD6+f0US7ZXN4G0/Rsfi4PqxJm
Hdiey6eOR4BeNWE3Hr3KzAEwm59snTD8HFcvSfBzOQ7OiYHFOM/vMv3PLpf6
X2y7jX4da5lcaxfFayLgbq4bNGsIUxLiGjKtPxttvSr4hP1A1BMMgdki9J5k
rTURwThI67HMsze8k5c6zll1WNPt53pMd8ij/Ex22QU/0zueayC3HEancGOb
2+SSXdafnWBd8PPOLnt4drTvg/P6rD2v+Jn9G6VWTcflUPU3xlIdt8BzlmoC
vtlY9TEzL9vQtYhkwY3tTXvMrbx67PWqdhjm/hxbdr6mY45+4uR/t1O1q9mj
6/JxDatTPOBNLxibmjjkQI7JEFkT1xIZi/X8TKMoReajvRrGXkWKbeSniGKb
czz0hI4rN7OfgL5G1C1e8TNzH/Xro5e2x60/c+wHmPcmjfY6OdrFeSQwX37Z
lNZVV3r3uA4epzJ9Wcr8w5HsfzyW4fVYsoOCJPGZC3D8x//to1yCDZv7TYnX
MWYKEV0HvIXPeMtedO6/E/uK4x6MkJ+zGC9po3OSiUmRHjKnIzm+X8j1hxN5
+O5K1w4ynsHQD9Rff38ql+Dqq6cjuX461sebp0O5fj5ELjGXcreozLxre4GH
YkHpjxty/+Fc3v/mVu6+OZKLp6kc347k5HYup/dLWeD6SlfLGKMpqfSbMj+f
YBuQy56PpIGxF7JC+n6sNdNn0Cpm1aeF+nyhpKXnhfVqem6yr9qHcR5KJXA+
KjJcdtVLc3jYUu6//XCq/SjP35zLCfazd9SR5qxmWH7WlA5yxzZyx86kvubn
daxjHev4mcXqe1k1k1iPIj+HfLpOn+t50l/yc9HwbZo6drqOkGv8vuBn1qDB
galqWiI59iCGXvk5kk5qD0e6AhZq00OvpTXR9l5P6uRnvD5pfwb5mWxObTf6
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
SERignTEnAkz5gxgwshfgAGMGDBmChN/ggghpKJWnd7u6uratdfLs57/8/K7
pEuyu89Ze+3az32f61Tvqlree7F8/+MPP3zN2sP3pLvv0j+39OvyHuT7X7d8
/eDS/svn6z993+3L558/snxe9RMffejc5X3PS4M+/IyMT37s4XPTy89c/9jy
ffHe7eflawmXzyku74V+/T1Zlvc/v36Oy/fF/sTyvudPLu8x+PBDz3/43S5f
+v6jDw398w+dsny/uy/8+pfuX8O/9vC51J9dvhfC8vg/9/p7LPzk8v2Sf+5n
H77m9M9++KcfuvNnHt6j8fpnAD783OVH/fzxdz+P/tGPL98v+3U//+pDP/+t
u1/7za8+fO50eZ/4w/c4+dCH3v073KWff/LH3/flJ35qeZ/FfcN/7P51+cwb
d59485fvfvELb9x94dc+d/f1v/vW3a9/4/7vL7/x+bs3vnw/B2/+wsN5/9LX
37z7G3/n83df+Ppfv/uV+958694v/M037v/u9MZ9t3/u/u8In3n4fnAf+unX
X6d4+T6Ly/l++JmGH363jX/szzw8559693tHL828/P3xQz/1rvfP/+HrHR++
J/Py6z/84+9//fA56ofPX3/k4b0eH/35j73+fjz3H8tfvH/Nlvfef+uP37nv
5G88fK/Gv/ed3777xnd/8+73fvD23Xf/5bfu3v7937p782u/fPeZL9435Vff
vPv8337r4b8VLH+3/Oz9DHzqc3/59c+c+dTH3/1ZKn/pfhe8eX8u7+fpm799
94X7fl7+vvzpN37p4b85fORjH3l4X85P/MWfvfszn/rzd7/0xV+4e/tbX394
z8Uf3Pfmdx73873f+f63ftyay/s7lg794n0//4X7fn44F8vnnz/3mdf9/IOl
n//RQ0cvrf1wjfve/sf/9Nt33/ruN3/cz199t5//yR9/6+6d+78fLF9b+Om/
+rqfP3F/ht+4/3vPr/zq8rOlXv981V9847MP31vjk+9+rexfefOzd2/92pfu
fuvbv3337fvr/u73lsb/5t0f/NH94//gd+/+8J+/7uelo793//+X+/m9798/
lz/8xsPn2Je/K/z+/T0tbZ3+75QkSZJkT/7O77x+DwdJsg2XvWw/k2R7Xvbz
8r/TDU+SfM/LXrafSbIt7WeSbFP7mSTb1H4myTa1n0myTe1nkmxT+5kk29R+
Jsk2tZ9Jsk3tZ5JsU/uZJNt0zX7+5ne/cvdv//PbJMnCLvvVfibJ9jy6n7//
r79291//z/dIkoVd9qv9TJLtaT+TZJvazyTZpvYzSbap/UySbXp0P7969eoO
aJH/9g/+1xBiXpb9emQ//4t3fuPuf/6nf8UOvDb/Ja9F7vU//v3/zSe+8+U/
0c8YkvS+KSXmRT/P47X5189swXSrtqh+xgikd0tKjI1+nsdbs66hmTTdqi2q
n9Ej6V3SuhgD/TyPa+ZaPzNlulVbVD+jB9K7YzTRB/p5LtfMroZmLWuc+XQD
62eMTnqPjCb6QD/PZemmSe8Z9m2NM59uYP2MEUnvjllFO+jnuTyradI7hf1Y
+8ynG1g/YwTSe4PviTbQz3N5Vuek9wn7suaZTzewfkaPpHcEb4ss+nkuz+yc
9C5hP9Y88+kG1s/okfSO4G2RRT/P5Zmdk94l7MeaZz7dwPoZvZDeC9wmsujn
uTyzddK7hP1Z48ynG1g/o1XS889jIot+nsuzWye9T9iX6Xlo3WW/6mecQXr2
eVxk0c9zeXRez74+5zI9D62rn3EW6dnncZFFP8/l0Xk9+/qcy/Q8tO7Rfraf
n3d20nPPciKHfp7LUjN79vU5h+l5aF39XN6ZSc87y4sc+nkuS87tWdfl+Kbn
oBf1c3lnJj33LC9y6Oe5LDm3Z12X45ueg17Uz+WdlfTM8xyRQz/PZXrWycX0
HPSifi7vjKTnnefZKjPMo36ey/Ssk4vpOehF/VzW2UjPOevYKul5P3t/6Oe5
TM85mZ6BntTPZZ2N9Kyzjq2Snvez94d+nsv0nJPpGehJ/VzWmUjPOevZMumZ
t5/ncc2s1HgM8izTM9aT9nNZZyE946xrD6Rn334e3y0zU/OxyBKm56s37ecy
zkJ6vpmxF9J7wH4e1z1zU/vxyD2mZ6tX7ecyzkJ6zpmxF9J7wH4e1z1zU/vx
yD2mZ6tX7ecyzkB6xpm3J9I7wX4ey70z89I1znpMcq3puepZ+7mMI5Oeb7Zj
b6T3gv08jjXmq/bjcW7TM9W79nMZRyU932zLHknvBvt5HNPzR5YwPUejaD+X
cVTSc8627JH0brCfxzE9f2QJ03M0ivbzcUclPeNsz55J7wn7uX/T80ceteZs
pOf1bO3n445Ger7Ztr2S3hP2c/+mZ4884tZzXXIm0rN7hvbzcUciPd9s355J
7wr7uW/Ts0cmPTIL6dk9Q/v5uCORnk+2b8+kd4X93Lfp2SOTHpmF9Oyeof18
zJFIzyb7sGfS+8J+7t/0/JE9mp7bM7SfjzkC6bliX/ZMel/Yz/2bnj+yR9Nz
e4b28zF7Jz1T7NOeSe8M+7lv07NH9mR6Xs/Ufj5m76Rni33aM+mdYT/3bXr2
yJ5Mz+uZ2s/7HIH0XLFfeya9O+znvk3PHtmT6Xk9U/t5nyOQniv26wikd4j9
3LfpGSRbNz2jZ2s/77Nn0jPF/h2B9A6xn/s2PYNky6bns4b28z57Jj1X7N8R
SO8Q+7lv0zNItmx6PmtoP2+3d9Jzxf4dhfQusZ/7NT2DZIum57Km9vN2eyc9
X+zfUUjvEvu5b9NzSLZmeiZraj9vt2fSs8UxHIn0PrGf+zU9h2RLpuextvbz
dnsmPV8cw5FI7xP7uV/Tc0i2ZHoea2s/b7N30vPFMRyJ9E6xn/s0PYNkS6bn
MaH9vM2eSc8Xx3FE0rvFfu7L9AySLZiew6T28zZ7Jj1nHMcRSe8W+7kv0zNI
pk3PYFr7eZs9k541juOIpHeL/dyX6Rkk06ZnMK39vM0eSc8Yx3NE0rvFfu7L
9AySCdNz15L28zp7Jj1vHM9RSe8Z+7kf0zNI1jY9c61pP6+zV9LzxvEcmfSe
sZ/bNz1/ZML03LWo/bzOXknPHMdzZNJ7xn5u3/T8kQnTc9ei9vM6eyU9cxzP
0UnvGvu5bdPzRybdOhfpeT1T+/m2vZKeM47p6KT3jf3ctun5I3s1PbultZ9v
2yvpWeGYzkJ679jPbZqeP7Jn0/NbUvv5tr2SnhOO6Syk94793Kbp+SN7Nj2/
JbWfb9sr6TnhmM5Ceu/Yz22anj9yBNNzXEL7+WV7Jj0fHNOZSO8f+7kt07NH
jmR6no9qP79sz6Rng2M6E+n9Yz+3ZXr2yNFMz/QR7eeX7Zn0XHBMZyK9f+zn
tkzPHjma6Zk+ov38sj2TnguO6Uyk94/93Jbp2SNHNT3b9nM5RyA9DxzTmUjv
Ifu5LdOzR271Rz/80yKefZ/p2bafyzkC6bnlmM5Eeg/Zz22Znj1yq6X6+ezu
Ts+2/VzOEUjPLcd0JtJ7yH5uy/TskVvVz/ZzbUcgPbcc05lI7yH7uT3T80du
sZd+XkzPtv183FFIzy3HdBbSe8h+btP0/JFb1M/2c01HIT23HNNZSO8h+7lN
0/NHblE/2881HYX03HJMZyG9h+zntk3PIblG/Ww/13QU0nPL8ZyJ9B6yn9s2
PYvkGnvq58X0XG/Rfv6go5CeW47nTKT3kP3cvul5JG+pn+3nmo5Cem45njOR
3kP2c/um55G8pX62n2s5GunZ5VjORHoX2c/tm55H8pb62X6u5WikZ5djORPp
XWQ/t296Hslb9tbPF9OzbT9vdzTSs8uxnIH0DrKf+zA9i+Qa9bP9XMvRSM8u
x3IG0jvIfu7D9CySa9TP9vPZjkp6djmWM5DeRfZzH6Znkbxlup318xz7eWTS
M8xxnIH0LrKf2zY9g+Ra0+2sn+fYzyOTnmGO4wykd5H93LbpGSTXmm5n/TzH
fh6Z9AxzHGcgvYvs57ZNzyC51nQ76+fx9/PopGeY4zgD6X1kP7dtegbJtfba
zhfTs24/33Z00jPM/p2J9D6yn9s2PYvkWvWz/Xy2s5CeZZa3xlmYifQusp/b
Nz3z5Fr1s/18trOQnmWWt8ZZmIn0LrKf2zc98+Ra9bP9fKYzkZ7lW4783Gp9
HHCM9D6yn9s3vR/Itepn+/lMZyI9y08FWiO9j+zn9k3vTY7vv/sfXy2ifraf
zxQALqT3kf3cvum2Yl+WauHZ+jk95/bzbQHgQnof2c/tm+4x9qV+3md6zu3n
6wLAU9J7yX5u33SPsb7JBtbP7TrrfgZGYetOxXXSe8l+bt90y3HOFp6tn58z
Pfv282uB1ii1M7GP9E6yn/sw3X+cr4OfuvZjNFo/Pza9B2bez0Br6Ocs6Z1k
P/dhuhv52nTD6mf9PON+Bs7kjH2J80nvJfu5L9P9OJrpJm25g7ea7uYa/byY
3gEz7mdgC2ftTrRFei/Zz32Z7s2WTXfpCA18xHQ36+dx9zOwoIvxmPResp/7
Mt1IOnjsBj5iupu9f2Pc/Qws6Gc8Jr2X7Oe+TDdSDdNdq5/3me5m/Tzufsa4
6GHsJb2X7Of+THeSLp6vjdeY7mb9POZ+Rl+ctVOB50jvp9n3c2+mO2nmPk5/
jFs23c1n9nN65mfez2gDHYxWSe+omfdzj2pjTdya6W4+o5/Tc24/6+dW0M9o
lfSOmnk/92jtNko3rn5u33Q36+cx9zPOQf9iFNI7aub93KP6WBe3Zrqb9fNY
+xn70MGYlfTOmmk/9+xMvZzuQq4z3c36eaz9jOtoY+B50ntrlv08gms7IN3A
enh8092sn8faz7iOfgaeJ723ZtnPI7i2A9LNrJ/HN93N+nms/Yx178UA8H7s
Z67x1p//Z7WvLuZT091csp/Tc/2SM+znmdi6gwGsw37mSz73Z3+Nzw3rZz41
3c0lP/ecnuuXnGE/j45WBupgP/MlH/+5X+u9FM9d64z/fs5+TLezfh5nP4+O
fgbqYD/zJR//ua+fmTLdzvp5nP08Kjq5DqkdiDaxn3nNGr381Jf6WUfPZ7qb
9fM4+3lk9PJ60jutFVEW+5m1e/mp+pmPTXezfh5nP2Mu0rurB3EO9vN8ppr5
sfqZj013s34eZz9jLtK7qwdxDvbzfOpntma6m/XzOPsZ85DeWz2Jc7Cf57GF
dl46RT/z6ZlowRLPJT3js+5nzEF6V/UuzsN+HtNb3Xz5dbVaaU0/a+h5THez
fu5/P2MO0ruqd3Ee9vOY6me2bLqb9XP/+xnjk95To4jzsJ/Hcm07X6zRSd6/
wefORdqjzyM96zPvZ4xNekeNJOpgP/ft1nZ+6ll99FI/p3cL65vuZp9/7n8/
Y0zSu2lUUQf7uT+PdvNTS/dR6msX2abpbi79d7f0/L/kqPsZY5LeTaOKOtjP
/amf2ZPpbtbPfe9njEd6J80i6jHrfu7J0u382FIzq5/52HQ3l+7ni6Vnu8Q1
R9zPGIf0LppR1GPG/dyLZ7bzxRLzqp/52HQ399TPR6894n7GGKT30MyiLjPt
59at0c0XS8yqfuYRe+nnxTPnbs91RtzPGIP0XplZ1GWm/dy6+pkzqZ/3X3u0
/YwxSO8Uvhb1mGE/92Ctdr54dEb1M5OO0s97rj/afka/pPcAnxf1GH0/t27t
dl48Op/6mbN4a36OztzW2R1tP6NP0nPJl0VdRt3PrXrrPRu99XONzwWStV0z
P0dmbevsjraf0SfpueTLoi6j7udW1c9k+66ZnyOztnV2R9nP6JP0PHKdqM9I
+7l1E928WGI29TNn8tb8HJm3rfM7yn5Gf6TnkNtFXV69ejXEfm7Z2p93LjmP
SxvrZ87krVk6MntbZ1k/I0F6Brlf1EM/n2+v7byonzmr1+bpyPxtnWf9jATp
2eN+UQ/9fL76mezPa/N0ZP62zrN+Ri3S88Zyog76+Vx7+1kpj720sX4m3/PI
/G2d6RH6Ge2TnimeI85FP59rT597XvMz3671s4bmbO6Zv60zrZ9xJukZ4vni
PPTzufbQzy3/PGWyVY/M3tqZ1s84k/QM8XxxHvr5XPUzOaZHZm/tTOtnnEl6
hlhHnIN+Pu5L73NouZufqp3J9R6ZPf2MFkjPEOuKsujncs28tp8vvybZyiRz
6mekSc8AM6Ic+rluO1/72ruXejo9byTLqp+RJj0DzIhy6Gf9TLKus/Qz2iU9
A8yIcujnMs289b0baxs6PWskz1E/I0n6/DMnyqCfy7bz0X5+2tDpOSN5nvoZ
SdLnn1lxDP2sn0lm1c9IkD73zIpj6Gf9TDKrfkaC9LlnXuxHP9dr57X9fDE9
VyTrqJ+RIH3u2YbYh36u089br6OhyXkcrZ/RB+lzz7bENvRzmW7WzyT3qp+R
IH3u2ZbYhn7WzySz6mckSJ97tifWo5/1M8msT/fP5Z/pZ9Qgff7ZlliHfi7T
zyW/blBDk9TPqEX6rLNNzzgjI6Gf9TPJNv2jL/9Jl/sZfZE+52zTM87ISOhn
/UyyTfUzapA+52SP6Ofz+/lIO+tncl577Gf0R/qck9dsGf2sn0m2qX5GDdLn
nNxjGv3cdj+nzyfJnPoZNUifc3KPafSzfibZpvoZNUifc7KUNdHP+plkey57
qMfvX4c+SZ938mxLo5/1M8n27LGf0S/p806m3It+1s8k21M/oybp806m3It+
1s8k21M/oybp80625Br0c5mOPqOfl8dPnyGS9b3sH/2MWqTPPNmSa9DPbffz
Y9PniWQd9TNqkz7zZEuuQT+XaeiS/bz2vtLni+Q56mfUJn3myZZcg37WzyTb
Uj+jNukzT7bkGvRzmYZO9LOOJsfy6Wz30s8Yg/T5J1txDfq5TEuX6ucj95U+
byTL2svPH8QYpM872Ypr0M/6mWSb6mfUJH3eyVZcg34u09BH+rnkfaXPHMly
6mfUJH3eyVZcw+z9vPd7y63t57M/56yhyXHVz6hJ+ryTLXmLWfu5VDeX6Oe9
6mdybPUzapI+72RL3kI/62eSbaqfUZP0eSdb8hb6WT+TbNMe+hnjkD7vZEve
YtZ+Lt3R+plkafUzEqTPPdmCt5i9n0s1dCv9nD5vJMupn5Egfe7JFryFftbP
JNtUPyNB+tyTLXgL/dxfP197HumzRrKs+hk1SZ93siVvoZ/LNHStftbN5Dzq
Z9QifdbJ1ryFfu6rnx+/ttqZHFv9jFqkzzrZmrfQz/qZZJu23M8Yh/Q5J1v0
Fvq5TEfX6Of0WSJZV/2MGqTPOdmit9DP+plkm+pnnEn6fJM9eA39XKahz+zn
9NkhmVE/40zS55vswWvoZ/1Msk31M84ifbbJXryGfm67n9PnhmTOVvsZ/ZM+
22QvXkM/l2lo/UyytPoZZ5A+12RPXkM/t9vP6TNDMqt+xhmkzzXZk9fQz/qZ
ZJvqZ5xB+lyTPXkN/Vymo0v2c/qskGxD/YySpM8z2aPX0M9lGlo/kyytfkZJ
0ueZ7NFr6Oe2+jl9Tki2o35GSdLnmezRa+hn/UyyTVvsZ/RL+jyTPXoN/Vym
oUv0c/qMkGxL/YySpM8z2aPX0M/H+/laO+tnkkfUzyhJ+jyTvfoc+vl4Rx/t
5/S5INmm+hklSZ9nslefQz/rZ5Jtqp9RkvR5Jnv1OfRztp/TZ4Jku+pnlCR9
nslefQ79fLyh9TPJM2ypn9E36bNM9uxz6OdcP1+ulz4XJNtUP6MU6bNM9uxz
6Gf9TLJN9TNKkT7LZM8+h34+3tBb+/naNdPng2Rb6meUJH2eyV59Dv2sn0m2
qX7GGaTPNdmbz6Gfj3f0ln6+db30GSHZjvoZZ5A+12RvPod+1s8k21Q/4wzS
55rszefQz8ct2c8amuTFVvp5FJadjNekzzbZk8+hn+v0857rps8Lyaz6uSz6
+T3SZ5vszafo5/P7udTjpM8Oybrq57Lo5/dIn22yN5+in/UzyTbVz2V4vJPx
HunzTfbkU/RzP/2sucm51M9l0M8vkz7nZA8+RT+f28/pe9PTZL+20M8joJ9f
Jn3OyR58in4u38//8L/8m6um71VDk/2on8ugn18mfc7JHnyKftbPJNtUP5dB
P98mfdbJ1n2Kfq7bzy30dPoMklynfi6Dfr5N+qyTrfsU/ayfSbapfi6Dfr5N
+qyTrfsU/ayfSbapfi6Dfl5H+ryTLfsU/ayfSbapfi6Dft5G+tyTLfoU/Zzt
50RLp88gyXUm+3kk9PM20ueebNkL+rmdfq7V0OmzR3Kd+rkM+nkb6XNPtuwF
/ayfSbapfi6Dft5O+uyTrXpBP+tnkm2qn8ugn7eTPvtkq17Qz/p5r9qcPFf9
XAb9vI/0+Sdb9IJ+3ueRRh6hn2s1Ojmz+rkM+nkf6fNPtugF/ayf96ifyfPV
z2XQz/tIn3+yRS/o5w/6ox/+6VV77OWSbZtodXJWU/08Gvr5GOk5ONsZniPL
eWHWfn6pkWv1c+q57z0zqWYnZ1U/l0E/Hyc9C2c5y/NkOS/M2M9721k/62ey
pvq5DPr5OOlZOMtZnifLeUE/6+e16meyrvq5DPr5OOlZKO1sz5flvDBbPx9p
51nf/6ybyYz6uQz6uQzpeSjhjM+ZZb2gn7P9nGjprWdFP5MZ9XMZWu7nnl6X
9DwccebnzvIuzNLPR7tZP+tnsrb6uQz6uQzpeTjizM+d5V3Qz/r5lvqZzJjo
5xEZpZ9beZ3Sc7HFmZ87z3NBP+vnl9TNZE79XIZW+7nEPk+Rno1bzv78ef75
0s/z9fOWxtXNZE79XIaR+zn12qVn4yVrk36+zJwx/ayfr3lWk5Ncp34ug34u
T3o2XrI26efLzBnTz/r5mvqZzKqfyzBLP9d+DdPz8dg06efP+udNP+vna555
bZK3rdnPI9NiP9fY8WeTno/HtkT6Y8E6500/6+eXrPEYJJ9XP5dh1n6u9fqm
52SxRdIfE5573vSzfn7J2o9H8j31cxn0s35OkP6Y8Nzzpp/180vqZzKnfi6D
fj7/tU7PSsukPzY857zpZ/38kunHJ2dWP5dBP5//eqdnpQfSHyOWPW/6WT8/
9uk/T97LaM70XFlG/VwG/VzntU/OSk+k9wrLmPj+SAn187pmffrvW7inEZzl
ebKs+rkM+rnOa5+clZ5I7xWWUT/r58c+/fct3NMIzvI8WdZa+3lkHrezfq5z
DhKz0iPp/cJj6ud5+7k107Ow1zX3PspzZV3183H08z5Lc/as9Ep6x3C/s/Tz
Rf3crmee8zOuv/Z51H6uHEf9fBz9fNwzKDknvZPeM2x7P7diy/08e0Ofcb7P
fOzWnivHUz8fRz8f9wxKzknvpPcM297Praif2/WM833mY7f2XDme+vk4rfVz
es/utQZ752QU0vuGbe7nVtTPbbv3HCfuIfE8OZf6+Tj6ubw1uTUj0N2j7+dW
1M+85drZqfEYnNsa+3l09PN5plhmAx8kva9mUz/rZ77ftbNT63E4r/r5OPr5
PFMss4EPkt5Xs6mf9TPf79rZqfU4nFf9fBz9XEe0Q3pvzaJ+bqef0x8bvnbt
7CQek3Opn4+jn+uJ9kjvsJHVz7l+Tn8s+LxrZ6eFe+DY6ufj6OeMaIf0HhtV
/Vy/n9MfA77s2tlp/f7Yv/r5OPo5I9ohvcdGVT/rZ77ftbPT+v2xf/XzcfRz
RrRJeqeNpH7e7uPrPd3N+rl/185OD/fIvj1zP8+Cfs6I9knvt97Vz/vbefHp
bn5q+vlyu2tnp4d7ZN/q5+Po5/qiT9L7rjdn6+fS6ufxXDs76fvccq/sU/18
HP1cX/RJet/1pn4+pn4ez7Wzk77PLffKPtXPx9HP9cUYpPdf6+rnY+rm8Vw7
O+n73HKv7FP9fBz9XF+MSXoftqZ+3qfPO4/r2tlJ3+eWe2Wf6ufj6Of6YkzS
+7A19fM+9fO4rp2d9H1uuVf26Vn7eSb0c32Bo6R37y0XXr16pZ93qJ/Hdc3s
pO9xy72yX/XzcfRzfYEENXfzgn7ep34e1zWzk77HLffKftXPx2mpnRfSO6OG
QEucsZsX9PM+9fO4rpmd9D1uuVf2q34+jn6uL9ASZ+zmBf28T/08rmtmJ32P
W+6V/aqfj6Of6wu0zpG9fEE/71M/j+ua+Unf45Z7Zb/q5+Po5/oCPXJrHz9F
P+9TP4/rmq5J3+OWe2W/ntHPs6Gf6wuMxLKLn0M/71M/j+uarknf45Z7Zb/q
5+Po5/oCI7Hs4ufQz/vUz+O6pmvS97jlXtmv+vk4+rm+wAzM2s//9+v/70Vv
/X79PK5ruiZ9j1vulf2qn+8e9vER9HM9gZnQz7d97vfr53Fd2zbp+9xyr+xT
/Xz37E7egn6uJzATrfbz0c8PH72+fp7XtW2Tvs8t98o+1c/6uSeBmdDP+pnv
d23bpO9zy72yT3vp571tu+W6ezu6pX5O74uzBWaixX4+2rYlr6+f53Nr4/R0
r0d9es7TfTm6Jfu5NEe79shjbEE/1xOYiZb6eWvX7m1o/cyX7KGbt95r6W7W
z3P389rdedb1t6Cf6wnMRCv9vLed9TNLq5/1cyvqZ/3ck8BM6Gf9zPern/Vz
K+pn/dyTwEzoZ/3M127pmvS97rln/dyf+vn4NfVzPYGZ0M/7rq2fx3PUfj7y
PK/1c7orZ1E/6+eeBGZixn7e8njXfr9+Hs8e+3nNfe/5/U9/zbXzne7L0dXP
+rkngZnQz/qZr9XP+rk1S/VzafTzPtK74myBWSj9+Y0j6memnbWf1/jS+U43
5sjq5+PX08/1BGZhxn4udW39PJ4j9vOPfvinH3DPY9w63+nOHNVe+/nM629F
P9cTmIHS+/moZ/dz6Wvr5/GcpZ9v+dxjrD3f6d4cTf2sn3sSmAH9rJ/5fvWz
fm5N/Xz8cfRzHYFZaKmfj7TzrX4+69r6eTz18/WGLnW+t/bj3vt/ybWPlW7n
Evt5+frw0pRs56P7+RZPz22a9K44U2B0zvr8xh6P7s6XGrfUta89hn4eT/18
fj9v/Zjr5zH7udRevoV+ricwOq30c0/t/NRb7ayf+1Q/j9/PWx4r3c76WT/3
JDA6+lk/83n1s37Wz9cp0bNrr6Of+xMYmTP2855+Lrk/z77+3oZO7zJuVz8/
389nnm/9rJ/18xgCI6Of9TOvq5/1s36+TommPWMXv4R+ricwKmft53Q/P23o
Gu2sn8dza9ek73ftvetn/VwK/Xyc9K44U2BU9LN+5nX1s37Wzy9zpG/P3MUv
oZ/rCYzK6P1cq5v185jq53n7eU9rz9bPtferfu5PYDTO3s8t9HNC/TyWRxqu
5Xt/7tfrZ/28lfS+1c/tC4yGfs50dHqXcZtHOq7le197jZfOr37Wz+k9q5/b
FxgN/ayfeVv9rJ/183XSe1Y/ty8wGi31c3rP6mdeUz+v7+dWPu76WT/31M/p
PXGmwIjoZ/3M2+rn8ft562Ok27mVfk7vWP3cvsCItNLP6R2rn/mSJfv5l/7Z
vz/FPfe+9vnrZ/18jfSO1c/tC4yIftbPvK1+1s/6+XnSO/ZIQ+vnOgIjk+zn
9G5NNHR6n3GbRzrurF6u2eH6WT9fI71f9XP79kzN3Yu+0c/6mR90pn5+Tv38
wV+3PFf93H4/v4R+rmOPpHeuzu6XGv2c3qv6mWvVz/r54uPnqp/1cynSO+5M
eyS9c/Vzv+hn/cz31M/6WT8/T3q/6uf27Y30vtXZY7DsV/2sn2f2aMOld+gZ
Pv746Oc5+zm9V/VzP/ZGer9q6DHQz+c0dHqfcb36+eWO1s/6uVVvoZ/r2Bvp
vaqhx0A/6+fZ1c8vO3I/P/fr9PNr0jtVP/djb6R3qn4eA/2sn2dXP+tn/fxB
0jtVP/djC6x9rdP7VEePg34u3876uS/189j9vPX6+vk16b2qn/uxBfSzhq6N
fi7fzvq5L/XztoZu6WOvn/XzS+jnOraAftbPtdHP+nl29bN+1s8fpETXprr5
gn4+15bQzxq6NvpZP4/sf/jv37lpiYZL78sR+/nM9z2X6uc1z6PXfr5wtG31
82vSu/AMW+LWa53eoTp6PM7s54vpxq3Zzfq5Ldf0862O1s/v7+iSr88o/Xzr
uczSzyWuoZ/7sSX0s4aujX7WzyOrn/XzkX6+db97npd+1s+j2BL6WT/XRj/r
55HVz/pZPx+jZNfq57FsCf2soWtTo58X071bs531c3vq53KWeD3WtGNP/fz0
9y3eeuwZ+3nr9fRz27aEftbRtanVz4vp7tXPc6uf22noNe1Y6nU/s5+v/b5L
P1+8/N6nv+bW8132a7qfF/TzcdL77wxbQj9r6NrU7OeL6f7Vz/O653tw6Of9
XnsdWunn5379Gf18aeite0I/6+eWbQn9vE6UQz/r55nUz3W99jro53n7ecv1
9HPbtsTa1zq9E1sQZUj082K6gfXznOrn+j73OszYz3v2xKj9vPW6+rlNW0I/
bxfH0M/6eSb1c8anr4N+vn3txRa+fnDhrH7ecm393J4toZ/3if2M1s9nXls/
92WJ712nn8t6eW1qdPOtx7r267c07uWfr/n6wZd2xLV71M/6uWVbQj/vE/vR
z/p5VPVze15eG/2sn7deWz+3Z0vo531iP6l+Xjyrn8+6tn7uy1r9nN5/PXl5
bUbp56Pv37j1Hhb93H8/p/fgmbaEft4n9qOf9fOo6uf2vLw2rfbz1vco7+3n
Wx8D/VzmMfTzebaGft4n9qOf9fOo6uc2XV6bWv289XFq9fOadtbP+rllW0M/
7xP70c/6eVT1c5sur41+1s9br62f27I19PM+sZ9kP1/UzzxL/dy2+lk/6+c+
bQ39vE/sZ8R+PrOd9XNf6ud+LfH6t9LPz123p35e6Kmfr+3lBOkdeIatseW1
Tu+1FsU+Runn0tfTz/3r/Rv9e/QMnN3Pt37vS9fTz+uvq5/bsjX08zGxD/2s
n0dVP/fv0TOgn18V+7NCP5cnvSO3eibLHt6Lfj4m9tFCPy+Wauej1yrRzvo5
75Z21s9te+QctNzPa1z2q34et5/PpPROPZvH+3gr+vmY2Id+1s8jubWb9XP7
HjkPqX5+7lr6ef919fP46Oec2Id+1s8jqZ/H88h50M+viv1ZoZ9xJvo5J/ah
n/XzSOrn8TxyHvTzq+J/ZuhnnIF+zol96Gf9PJL6eTyPnIeW+nnP/etn/TwD
T/fxVvTzMbEP/ayfR1I/j+ue87C2my+W6udSO2H0ft6zg9egn/tCP2fFPvTz
tsfQz22rn8d3y3nQz6+K/5mhn1Ea/ZwV+9DP+nkk9fP4bjkP+vlV8T8zavTz
S/9+Dfq5L2r280J6h7UqtqGf9fNI6ud5XHMeZu9nkmR97WeSbFP7mSTb1H4m
yTa1n0myTe1nkmxT+5kk29R+Jsk2tZ9Jsk3tZ5JsU/uZJNvUfibJNn28n99+
+22SZCO+88479jNJNuhlP7/11lt3X/va10iSjfiVr3zFfibJBr3s5/8PN+qD
GA==
    "], {{0, 720}, {720, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{720, 720},
  PlotRange->{{0, 720}, {0, 720}}]], "Output",
 CellChangeTimes->{
  3.708261273198435*^9, {3.708262369711166*^9, 3.7082624748666573`*^9}, 
   3.708262848942471*^9, 3.708262911328363*^9, {3.7082629548970957`*^9, 
   3.708262996897843*^9}, {3.708263090182699*^9, 3.708263120840878*^9}, 
   3.708269418493074*^9, 3.708269561858631*^9, 3.70826984073279*^9, 
   3.708269996064781*^9, 3.7082702451387978`*^9, 3.708270299351183*^9, {
   3.708270384383894*^9, 3.7082703916958847`*^9}, 3.708270438436016*^9, {
   3.708270525644014*^9, 3.708270552073804*^9}, 
   3.708271620366963*^9},ExpressionUUID->"27b3ecd8-970a-49f8-964c-\
f6f314332fc1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Measure pixels correctly classified", "Subsubsection",
 CellChangeTimes->{{3.708269488385026*^9, 
  3.7082695000862513`*^9}},ExpressionUUID->"f5713f7e-5395-4cf0-a440-\
3799375c3862"],

Cell["Pixels classified incorrectly shown in white:", "Text",
 CellChangeTimes->{{3.708271281478282*^9, 
  3.708271295248128*^9}},ExpressionUUID->"5278370e-7e6a-4e8a-8060-\
aabf75f3276e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wrongPixels", "=", 
  RowBox[{"Image", "@", 
   RowBox[{"Unitize", "[", 
    RowBox[{"pixelResult", " ", "-", " ", 
     RowBox[{"testMasks", "[", 
      RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.708271227626718*^9, 
  3.70827127730061*^9}},ExpressionUUID->"fdac4825-329b-419d-9df5-\
92eecd4652c6"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3FGOZDcVBuDAA2Ib7AHxithCWEGQ4AkJKTwgds0SIGpamapUdd17y/Z/
bH+fBEfR9Ez52sfnvz0zye/+8o/v//br77777p+//d//ff/Dv/70448//PvP
v/npH/76w9//8Pu//vSD3/3q//8DAAAAAAAW9Z8/3lYY4b7vntWzX//q1wGu
c+/m5Hyo5N089x4A47lvc3I+VHJ1fsh/yHH/5uQ8qOjqvDCHYLzW98rv+41h
X6joal+aCzDeqPsj/9uyL1SU/v4BOG70PZL/bdgXKmrVh+YD9Fft/rjfX7Mv
VNa6D+U/9DPrPaq+vtbMPWbQqw+9B0A77g/QWu/5If/hfe4P0Fq1v0cE/JL7
A7SW/vvEwGtyH2jNPIH65D/QmnkC9cl/oDXzBOqS+7COqv9enHkC9aTnAtBO
1f9OnnkC9ch9mN+7ud/r/psrUJf7CfNrnf/P5sG7X2fOQB3uI8yvV/63fl8A
ANqrkvtAXe4trEfuA8+k7695Av3IfeBe+u/tmDPQn9wHjhr994TNG+hP/gOv
pP++sHkD7bl/wCvpfDd/oD33Dnglne/mD7Tn/gGvpHPe/IF+3DvgmXTOmz/Q
j3sHPJPOe/MH+nHvgGfkPqzPvQPuyX9Yn3sH3JP7sC73D7gn92F97h9wT+7D
+txD4J7ch/W5j8AneQ/7cC+BT3If1ud+AvfkPqzPPQU+Vfnzfu8V0J97BHxK
/ft+fp8BxnNvgHRuew+A8dwX2Fc6p70HwHjuB+wrncveAyDHvYD9pHM4XQFg
R+n8rVIBYAfpvK1WAWBl6ZytWmFn7gGsL52z1SsArCSdq7NU2Jl7AOtI5+ls
FXbmHsD80jk6e4UduQcwr3RurlJhZ+4B1JfOyVUr7Mw9gHrSubhbBYCEdP7t
XgFghHTeqbcVdqLvYZx0vqlfV9iJvof+0rmmHquwE/0P7aVzTH2vwg70PbST
zi21TYUd6Ht4Xzqv1LYVdqDv4bp0Tql9KuxA38N56XxS+1bYgb6H49K5pPat
sBP9zw7SuaLOUWEn7gEVpXNAVR9VWIk+p4X0XFbVRIUV6Os9peenqq5QYWb6
eQ7pObd6fSa9LrV2hZnp6z7Sc2nVOlr6edWaFVaiv2+l58vqdRbpfVJrVljJ
6v2dnher1tWl91etVWFls/R7eg6sUjkmfU5qpsJOUv2fvuezVsZIn7OaqbCT
3v2fvs/pytzS/aOOrbCjd/s/fW/NAXpK96M6psKOzvZ/lfvpHpOUziu1TYWd
vboHVe+d+0wl6RxTr1Xgl6rfr/Tnw1fSuaYeq8B896j6+uBb6ZxTH1fY0ez3
ZdZ1w7fS+bd7hZ2scj9WeQ54JJ2Lu1TYwSr3wj1nJ+l8XLXCDla7H+495PNz
9goru3ofqt4T9x2eS+fpLBVW9u59qHZ/3Hd4LZ2rs1VYSav+r3aPqq0HKkrn
6awVZta632e5R1XWARWkc3T2mpL+fObUq79nuUfpz4dK0vk5e02psg7mUDX3
5T/ML53D6TpKlXUwl159PNs9cm9gPkfnxu75b57xrd79Mts9cl9gH1Xyf/S8
ZW+jcneV/HePYD1V8//sfDG3OGNUn8yS+5+qrgvoJ/Ue0Gq+mFscMbpPquf9
p1nWCfQj/1mZ3H9stvUC/Yx6D5D/jFD9+/6U1u/zwDpG/bnA1flibnHE6L6o
1o/pewrMr9p7gHnFEbvmf/p+AvvpPV/MLX5StQ+q9Z/cB9LenTPm195m+T5W
fwE8lvpzBPk/p1n6RF8BHDPLXGesdF+c7Rf9BHBN1bnOWOk+uNov+gjgPdXm
OmOlz1/+A2RVm+/0lT5vfQNQizm+h3Ru6xuAmszxNaXzWt8A1GaOrymd1/oH
YA7p+W2+t5XOafkPMBfzfQ3pc9QfAHNJz3dzvo30+ekLgLmk57s530b6/PQD
wJzM+7mlz08/AMzJvJ9b+vz0A8DczPk5pfNaXwDMzZyfUzqv9QXAGsz5OaVz
+90+0BcANcj9uaRzvFU/6BOALPk/p3Sev5v7+gcgS/7PLZ3vvfJfPwGM0WqO
k5XO+6N94D0AoIbe85yxquV96/UB0Favuc5j6e/TZ81/fQXQx7vz1Zz+Wjqv
V6kA1GJOfy2dm6tUAGoxp49J5+fsFYCazOlj0jk6WwWAFaTzdJYKACtK52vV
CgArS+dslXyX+wDsKJ3Hvq8HgPHSuSz/ASAnnc/eAwBgvHQuy38AyEnns/wH
gPHS+ew9AABy0vnsPQAActL5LP8BYLx0Pst/AMhJ57T3AAAYL53P8h8ActI5
Lf8BYLx0Tst/AMhJ57X3AAAYL5XH3gMAIC+Vv94DACBn9fz3HgAAz6Vy1nsA
AOSl8tV7AADkpPPUewAAjFc1P70HAEA/u+TmKs8BAC2snvsAwC/5fXQA2I8/
X/8w+/oB4Az5/2H15wOAb8n/D7s/PwB78e/df9j1uQHYk//+zoddnxuAPcn/
D/YBgJ3IvQ/p56++PwDMbXTey/8+6wVgT+kcXy3vqu7DrPsJwDnp3E7nXcos
+zD7PgNwK53b1XOvt1n2YdX9B9hNOq+9B3yo/tzV1gPAe9I57X3gQ/XnrLou
AM5J57H8v1X9OauvD4Bj0nks/29Ve77dzwNgVek8lv+PpZ/PeQCsLZ3H8v+x
9HM5F4C1pfNYzjxW5bmcC8Ca0nks/x+r+nzOB2AN6TyW/4/N8ny7nxPArNJ5
LP8fm/35djsvgNmk81j+P3b0OWZ5vl3ObTT7A1yVzmP5/9jZ51jt+VY7z9bs
B/CudB7L/70451tX1zv7cwN1pHNZLuwhff5V+uHquqo+DzCv9BzeZe7vrvq5
j+oXfQ1UkZ7L1XKAvmY5z16fp6+BKtJ5LP+Zyej+09dAL+k8lv/MpHr/6Xvg
qHQey31mMlsfVlkHUE86l+U8M1mlP6uvD+gvnddyn5ns1qezrht4LZXP8p8Z
7dqnqz0PkPu+fJe5yVrk/9cV4JVd5iZr2TX/P+32vEB75gczkv/vVWBf5gUz
2z3//H0d4Cpzgpntnnej/n4QsB7zgZntnnOt83+1/QGeMxeY2e751iv/V9sn
4JfMA2a2e671zv/V9gv4mTnAzHbPM/kPXGUOMLPd82xU/q+2bzCD3vfT/Wdm
u+fY6Pxfbf+gst731L1nZrvnWCr/V9k/+Fa1/pf/8Nzu+ZXO/9X2kz1V6/tR
9zH9nPCO3XMrnfdH93W1fWcNVftd/sNru+b+p3S+777/zKlXH7bqf/kPr+2e
P+n83n3/mVOV/H/2+fIfnpM7H9L57RyYUa/+S9+ns8/lvjIjufOh9fNXn1es
aXQfyP++vy70JG9u9X7+1u8Tz36cvax2/r1yXP7Dz+T/rarPf/TzVz8fHlvt
3HvPJfkP8v/e6N83fHddR7+etY0+796fU+X363utFyqolnNprX/fsff3K71+
HnNY9XxHzR/5z87k/61U/p/9fr71/vf69art46v1zWb0c4z+/YVRfd/rfq7S
Z6xJ/t+qmlupOX/1c6ru46v1zWL0vUz1XZXPHd2fMII+vlU1t2bb/2r7d3Z9
7xr93tKrL6rlcG/V+hR60se3quV/lf1P70uv/Rv1njb6OVqplr/pz5f/rEQf
35otv0ZJ78tu9VP6Xlbpt9HkPyvTx49VmftH1zNKel/Uc7WVdL+lzHI+cIU+
fqza3K6y/+l9Uc/VVla950dVPx+4Ql8/1uo55b+arK2scq+vqn4+cIW+fmzU
c8p/tWd912r3+qqq5wPv0NePzZL/o6XzTD1X35Xutyqqng+8Q18/Jv/PrUOt
Wa+q0m9pVc8HWhjd1+l5ePTeyf9z61Br1rPk1a1q5wMtpefT6vUV+a/2rGfJ
qw9VzwdaSs8n9XG9V2V+pPdFPVePkle3qp0P9JCeT+rjeq/K/Ejvi3quHiWn
blU7H2gpPZfUr+u9KvMjvS/quXqUnPpQ9XygpfRcUo/VT1XmR3o/1HP1KHn1
oer5QEvpuaS2qaOln1c9V4+q2m+jVT0faCk9l9Q2dbT086rn6lFV+220qucD
LaXnktqmjpZ+XvVcPapqv41W9XzgK+k5o2bqaOnnrV4/pddxtT+q9dto1c8H
HknPGTVTR0s/b/V6r9p6XqnWb6NVPx94JD1n1EwdLf28Vfb36nlUWf/Vda5u
lvOBR9LzUh1bR0k/Z7X9ffX16XW36o9034022/nAI+m5o46tvVVbz70q+f/u
57ReXyvp8+1t1XvL3tK5pNauR1Wfa63Wlcr/o+8BR/U6h1Vzq/r9gyvS+aLO
UV+pPtdWyf9W+ypfzql+nnBFOlfUueoz1efa6vl/dR1XVTnXe73WUe2+wRHp
vFDXrPeqz7NW63o3d4+u5+zPO/r5rZ57lnPu9evKf2aQzgl1zXqv+jyrkv+9
z6N1vsyWW73Xkb5ncEY6J9Q1673q86xXDl79vNbn0CtfZsut3utI3zM4I50T
6tr1U9V51jsH3/3cdO29/tFGfX76fOCM9JxR1YRW60rlZ+o8Zj/v1OfOfl9Y
U3rOqOq3dZRW60nl59F1tz6H2c85ZdZ7wprSc15Vv6q9tVpHq/w8+3Xv/jpX
n3uWc66Sm7PeD9aUnuuqeqb20urzW+Xn2a/rtV/vPnf18x31ObPeC9aUnuOq
eqX20urzz/68o1//7Md779fVX2eW873686pVOCPdr6p6pfbS6vPP/ryjX//s
x3vtV+t9r3q+Z9dXtcIZ6X5V1Su1l1aff/bnHf36s7n1rurn0Kpv0v1c/V6w
pnS/quo7tbVWn9fr+XrvY/o8U/2zyjrgjHTfq6qqqqqqqqpasf4X7oGjag==

    "], {{0, 256}, {256, 0}}, {0., 1.},
    ColorFunction->GrayLevel],
   BoxForm`ImageTag["Real", ColorSpace -> Automatic, Interleaving -> None],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{256, 256},
  PlotRange->{{0, 256}, {0, 256}}]], "Output",
 CellChangeTimes->{{3.7082712341001797`*^9, 3.708271257556221*^9}, 
   3.7082712970588427`*^9, 
   3.708271654775099*^9},ExpressionUUID->"cf4747f0-25f2-4004-b553-\
354b78f30976"]
}, Open  ]],

Cell["Measure percentage of correctly classified pixels:", "Text",
 CellChangeTimes->{{3.708271302583104*^9, 
  3.708271318604261*^9}},ExpressionUUID->"202454a1-f267-44f2-838a-\
ca302f4209f6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"1.", " ", "-", " ", 
    RowBox[{"Mean", " ", "@", " ", 
     RowBox[{"Flatten", "[", "\n", "\t", 
      RowBox[{"Unitize", "[", 
       RowBox[{"pixelResult", " ", "-", " ", 
        RowBox[{"testMasks", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "\n", "]"}]}]}], ")"}], " ",
   "*", " ", "100"}]], "Code",
 CellChangeTimes->{{3.708269508971057*^9, 3.708269543116002*^9}, {
  3.708269856144739*^9, 3.70826988224934*^9}, {3.708270598662765*^9, 
  3.708270615708105*^9}},ExpressionUUID->"89ddb1ff-4ccc-47e5-b2c8-\
864002d628ca"],

Cell[BoxData["79.6722412109375`"], "Output",
 CellChangeTimes->{{3.7082695456942596`*^9, 3.708269562239718*^9}, {
   3.708269883820158*^9, 3.708269889034528*^9}, 3.708269996163126*^9, 
   3.708270257788988*^9, 3.708270314526908*^9, {3.70827053342717*^9, 
   3.708270556404405*^9}, {3.7082706010057917`*^9, 3.7082706172054653`*^9}, 
   3.7082712988965607`*^9, 
   3.708271661344783*^9},ExpressionUUID->"64c4a86f-14da-49e2-adf4-\
ee7e1d309943"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Measure test error", "Subsubsection",
 CellChangeTimes->{{3.708201113465393*^9, 
  3.708201116540051*^9}},ExpressionUUID->"18eeee47-2700-44e5-87b0-\
ff3cd9886233"],

Cell[BoxData[
 RowBox[{
  RowBox[{"pair", "[", "i_", "]"}], " ", ":=", " ", 
  RowBox[{
   RowBox[{"testPics", "[", 
    RowBox[{"[", "i", "]"}], "]"}], " ", "\[Rule]", " ", 
   RowBox[{"testMasks", "[", 
    RowBox[{"[", "i", "]"}], "]"}]}]}]], "Code",
 CellChangeTimes->{{3.708256713014351*^9, 3.708256725344352*^9}, {
  3.70825686678957*^9, 3.708256901907688*^9}, {3.708259132461512*^9, 
  3.708259134269668*^9}},ExpressionUUID->"9cf1e5aa-9d24-4353-ab23-\
fc633e2fcc8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testData", "=", 
   RowBox[{"pair", "/@", 
    RowBox[{"Range", "[", 
     RowBox[{"Length", "@", "testPics"}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.708257069575327*^9, 3.708257095391913*^9}, {
  3.7082591392074623`*^9, 
  3.708259140091769*^9}},ExpressionUUID->"86c3e216-0200-4a5a-b017-\
badac4548522"],

Cell[BoxData[
 RowBox[{"1.", " ", "-", " ", 
  RowBox[{"Mean", " ", "@", " ", 
   RowBox[{"Flatten", "[", "\n", "\t", 
    RowBox[{"Unitize", "[", 
     RowBox[{
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"pixelPredict", "[", 
          RowBox[{"net", ",", " ", "#"}], "]"}], "&"}], ",", " ", 
        RowBox[{"Keys", "[", "testData", "]"}]}], "]"}], " ", "-", "\n", "\t", 
      RowBox[{"Values", "[", "testData", "]"}]}], "]"}], "\n", 
    "]"}]}]}]], "Code",
 CellChangeTimes->{{3.708233216883917*^9, 3.708233244293861*^9}, {
  3.708257673965859*^9, 3.708257675984623*^9}, {3.708258773710952*^9, 
  3.708258775951778*^9}, {3.7082590723482656`*^9, 3.7082590731738234`*^9}, {
  3.708259145860407*^9, 3.7082591472377663`*^9}, {3.708268737993245*^9, 
  3.708268740007655*^9}, {3.708268782410265*^9, 3.7082687857817993`*^9}, {
  3.7082688479618807`*^9, 3.708268851150708*^9}, {3.708270577701475*^9, 
  3.708270578168396*^9}},ExpressionUUID->"c40c199d-44ef-4acc-8ddd-\
b02fe0ba37dd"]
}, Open  ]]
},
WindowSize->{808, 751},
WindowMargins->{{77, Automatic}, {Automatic, 8}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (April 27, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 215, 4, 44, "Subsubsection", "ExpressionUUID" -> \
"c79058f7-9e10-4bb7-9769-4334281e5c5c"],
Cell[798, 28, 159, 3, 38, "Text", "ExpressionUUID" -> \
"373e1218-e0b1-4343-9497-0afe29ea6382"],
Cell[CellGroupData[{
Cell[982, 35, 590, 12, 114, "Code", "ExpressionUUID" -> \
"f76d9ee6-b57a-4d61-b142-636ca54b4637"],
Cell[1575, 49, 443100, 8624, 130, "Output", "ExpressionUUID" -> \
"bcf68ed0-a38f-442f-8fde-3bcf12188840"]
}, Open  ]],
Cell[CellGroupData[{
Cell[444712, 8678, 1178, 29, 258, "Code", "ExpressionUUID" -> \
"b18ec4fd-1fbf-4143-a624-0a4c3ad8687d"],
Cell[445893, 8709, 61881, 1581, 119, "Output", "ExpressionUUID" -> \
"caaf09e6-a6f3-4304-869e-861a4bd4c509"]
}, Open  ]],
Cell[507789, 10293, 738, 20, 186, "Code", "ExpressionUUID" -> \
"decc7189-ac17-485f-9fac-4c447f4c26d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[508564, 10318, 222, 4, 44, "Subsubsection", "ExpressionUUID" -> \
"14a4f601-b505-4fb5-8c53-7c6a2f959093"],
Cell[508789, 10324, 604, 17, 210, "Code", "ExpressionUUID" -> \
"aaa07dfa-c9b9-4e31-ab1f-b737d4107482"],
Cell[509396, 10343, 934, 25, 306, "Code", "ExpressionUUID" -> \
"2f1dcaf7-1dda-4d87-a06a-9daba91a717c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[510367, 10373, 175, 3, 44, "Subsubsection", "ExpressionUUID" -> \
"b81b0bf6-4aa1-48a7-bd12-274ba75a03da"],
Cell[CellGroupData[{
Cell[510567, 10380, 1993, 50, 354, "Code", "ExpressionUUID" -> \
"0bb3716f-ac36-44dd-86dd-846e5e2d11b6"],
Cell[512563, 10432, 393957, 6463, 620, "Output", "ExpressionUUID" -> \
"27b3ecd8-970a-49f8-964c-f6f314332fc1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[906569, 16901, 188, 3, 44, "Subsubsection", "ExpressionUUID" -> \
"f5713f7e-5395-4cf0-a440-3799375c3862"],
Cell[906760, 16906, 187, 3, 38, "Text", "ExpressionUUID" -> \
"5278370e-7e6a-4e8a-8060-aabf75f3276e"],
Cell[CellGroupData[{
Cell[906972, 16913, 357, 9, 40, "Input", "ExpressionUUID" -> \
"fdac4825-329b-419d-9df5-92eecd4652c6"],
Cell[907332, 16924, 5407, 94, 339, "Output", "ExpressionUUID" -> \
"cf4747f0-25f2-4004-b553-354b78f30976"]
}, Open  ]],
Cell[912754, 17021, 192, 3, 38, "Text", "ExpressionUUID" -> \
"202454a1-f267-44f2-838a-ca302f4209f6"],
Cell[CellGroupData[{
Cell[912971, 17028, 592, 14, 114, "Code", "ExpressionUUID" -> \
"89ddb1ff-4ccc-47e5-b2c8-864002d628ca"],
Cell[913566, 17044, 442, 7, 40, "Output", "ExpressionUUID" -> \
"64c4a86f-14da-49e2-adf4-ee7e1d309943"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[914057, 17057, 169, 3, 44, "Subsubsection", "ExpressionUUID" -> \
"18eeee47-2700-44e5-87b0-ff3cd9886233"],
Cell[914229, 17062, 473, 11, 65, "Code", "ExpressionUUID" -> \
"9cf1e5aa-9d24-4353-ab23-fc633e2fcc8c"],
Cell[914705, 17075, 351, 9, 40, "Input", "ExpressionUUID" -> \
"86c3e216-0200-4a5a-b017-badac4548522"],
Cell[915059, 17086, 1022, 21, 138, "Code", "ExpressionUUID" -> \
"c40c199d-44ef-4acc-8ddd-b02fe0ba37dd"]
}, Open  ]]
}
]
*)

